/*******************************************************************************
*                                                                              *
*                Autor: SherKan                                                *
*                Gamemode inceput din Octombrie 2015                           *
*                Tip: Roleplay Game                                            *
*                                                                              *
*******************************************************************************/
//------------------------------------------------------------------------------
#define SCRIPT_VERSION 				"RL-RPG v1.8.3"
//------------------------------------------------------------------------------
#include <a_samp>
#include <fixes>
#include <a_mysql>
#include <foreach>
#include <sscanf2>
#include <streamer>
#include <progress2>
#include <mSelection>
#include <pcmd>
#include <AFK>
#include <fly>
#include <utils>
//#include <yt>
// #include <timestamptodate>
// #include <crashdetect>
//------------------------------------------------------------------------------
#define SPD							ShowPlayerDialog
#define SCM 						SendClientMessage
#define SCMAll						SendClientMessageToAll
#define NEAUTORIZAT					"You are not authorized to use this command!"
#define PLAYER_COP                  "You're not part of a police department!"
//------------------------------------------------------------------------------
#define function%0(%1) 				forward%0(%1); public%0(%1)
#define KickEx(%0) 					SetTimerEx_("KickPlayer",500,500,1,"i",%0)
#define if(NOON(%0))               	if(!IsPlayerConnected(%0)) return SCM(playerid,COLOR_YELLOW2,"This player is not connected!")
#define SpeedCheck(%0,%1,%2,%3,%4)	floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1))*%3*1.80)
#define StrmidEx(%0,%1)         	strmid(%0,%1,0,strlen(%1))
//------------------------------------------------------------------------------
//#define SQL_HOST 			"localhost"
//#define SQL_USER 			"root"
//#define SQL_DB 			"redline"
//#define SQL_PASS			""
//------------------------------------------------------------------------------
#define MAX_QUEST			14
#define MAX_TIMERS			17
#define MAX_HOUSES 			71
#define MAX_BUSINESS    	66
#define MAX_TURFS 			83
#define MAX_JOBS 			10
#define MAX_FACTIONS    	15
#define MAX_CLANS 			51
#define MAX_ATMS        	20
#define MAX_STOCK_CARS		105
#define MAX_PERSONAL_CARS   2000
//------------------------------------------------------------------------------
new MySQL:SQL;
//------------------------------------------------------------------------------
AntiDeAMX() {
	new a[][] = {
	    "Unarmed (Fist)",
	    "Brass K"
	};
	#pragma unused a
}
//------------------------------------------------------------------------------
#define DIALOG_NULL                 0
#define DIALOG_REGISTER             1
#define DIALOG_LOGIN	            2
#define DIALOG_LOGIN2               3
#define DIALOG_LOGIN3	            4
#define DIALOG_RENTV	            5
#define DIALOG_FINDH                6
#define DIALOG_SKILL	            7
#define DIALOG_GPS3					8
#define DIALOG_SELL_VEH             9
#define DIALOG_SKILLS               10
#define DIALOG_MAIL                 11
#define DIALOG_TRUCKER1             12
#define DIALOG_TRUCKER2             13
#define DIALOG_TRUCKER3             14
#define DIALOG_TRUCKER4  			15
#define DIALOG_GOTO_JOB				16
#define DIALOG_TRUCKSELECT          17
#define DIALOG_TRUCKSELECTX         18
#define DIALOG_TRUCKSELECT2         19
#define DIALOG_TRUCKSELECT3         20
#define DIALOG_TRUCKSELECT4         21
#define DIALOG_SELL_FISH 			22
#define DIALOG_CARBUY 				23
#define DIALOG_CARBUY2 				24
#define DIALOG_CARBUY3 				25
#define DIALOG_CARBUY4 				26
#define DIALOG_CARBUY5				27
#define DIALOG_CARBUY6 				28
#define DIALOG_UPGRADE_VEH			29
#define DIALOG_BANK                 30
#define DIALOG_CARDAMAGE 			31
#define DIALOG_PLATE 				32
#define DIALOG_FACTIUNI 			33
#define DIALOG_BID					34
#define DIALOG_GARAGE               35
#define DIALOG_GARAGE1              36
#define DIALOG_CHANGE_PASS 			37
#define DIALOG_CHANGE_PASS1         38
#define DIALOG_BANK3              	39
#define DIALOG_CHANGE_NAME          40
#define DIALOG_JOBS 				41
#define DIALOG_RADIO 				42
#define DIALOG_RADIO1 				43
#define DIALOG_RADIO2 				44
#define DIALOG_BAR					45
#define DIALOG_FACTION_VEHICLE		46
#define DIALOG_FIGHT 				47
#define DIALOG_TOG 					48
#define DIALOG_PAINTBALL 			49
#define DIALOG_SELL_BIZZ 			50
#define DIALOG_WANTED 				51
#define DIALOG_VOTE					52
#define DIALOG_TUTORIAL 			53
#define DIALOG_TUTORIAL1 			54
#define DIALOG_TUTORIAL2			55
#define DIALOG_TUTORIAL3 			56
#define DIALOG_TUTORIAL4			57
#define DIALOG_TUTORIAL5 			58
#define DIALOG_PROPOSE				59
#define DIALOG_SPAWN     			60
#define DIALOG_CLAN                 61
#define DIALOG_CLAN_TAG             62
#define DIALOG_CLAN_MEMBERS         63
#define DIALOG_SELL_HOUSE 			64
#define DIALOG_HOUSE1 				65
#define DIALOG_FREE                 66
#define DIALOG_HELP 				67
#define DIALOG_SHOP              	68
#define DIALOG_BUYGUN 				69

#define DIALOG_BUYLICENTE 			72
#define DIALOG_BUY                  73
#define DIALOG_STAFF                74
#define DIALOG_PCOLOR    			75
#define DIALOG_FINDB                76
#define DIALOG_FINDB1               77
#define DIALOG_QUITGROUP1           78
#define DIALOG_QUITGROUP2           79
#define DIALOG_RADIO5				80
#define DIALOG_RADIO6				81
#define DIALOG_ATM                  82
#define DIALOG_ATM1                 83
#define DIALOG_ATM2                 84
#define DIALOG_BANK4             	85
#define DIALOG_FACTIUNI1			86
#define DIALOG_MUSIC                87
#define DIALOG_GPS1 				88
#define DIALOG_GPS2 				89
#define DIALOG_BUGS					90
#define DIALOG_GPS 					91
#define DIALOG_BANK1                92
#define DIALOG_BANK2                93
#define DIALOG_BANK5                94
#define DIALOG_FINDH1               95
#define DIALOG_SEIF                 96
#define DIALOG_SEIF1                97
#define DIALOG_SEIF2                98
#define DIALOG_SEIF3                99
#define DIALOG_SEIF4                100
#define DIALOG_SEIF5                101
#define DIALOG_SEIF6                102
#define DIALOG_SEIF7                103
#define DIALOG_SEIF8                104
#define DIALOG_SEIF9                105
#define DIALOG_SELL_MATS            106
#define DIALOG_GMX					107
#define DIALOG_CLAN_COLOR			108
#define DIALOG_CLAN_TAG1			109
#define DIALOG_MEMBERS				110
#define DIALOG_MEMBERS2				111
#define DIALOG_MEMBERS3 			112
#define DIALOG_MEMBERS4				113
#define DIALOG_CLAN_MEMBERS2		114
#define DIALOG_CLAN_RANK			115
#define DIALOG_BUY_LEVEL			116
#define DIALOG_CONT_PREMIUM			117
#define DIALOG_CONT_PREMIUM2		118
#define DIALOG_PAINTBALL_MAP        119
#define DIALOG_PAINTBALL_WEAPON     120
#define DIALOG_PROPUNERE			121
#define DIALOG_NEON					122
#define DIALOG_CLAN_OPTIONS			123
#define DIALOG_CLAN_MOTD			124
#define DIALOG_CLAN_NAME			125
#define DIALOG_TICKET				126
//------------------------------------------------------------------------------
#define pCashx				1
#define pRPx 				2
#define pBankx  			3
#define pContractsx			4
#define pPunishx           	5
#define pConnectTimex       6
#define pSecondsx           7
#define pClanWarnx			8
#define pHouseKeyx      	9
#define pDrugsx             10
#define pJailTimex     		11
#define pWantedLevelx       12
#define pPhonex             13
#define pMatsx              14
#define pRobSkillx          15
#define pLevelx             16
#define pPremiumx    		17
#define pBizzKeyx           18
#define pFWarnsx            19
#define pRegx               20
#define pMatsSkillx         21
#define pCarsx           	22

#define pRentedx            26
#define pMatsTimesx         27
#define pMatsRemx           28
#define pEmailx             29
#define pWarnsx             30
#define pGpointx            31
#define pGoldx            	32
#define pWantedTimex       	33
#define pPizzaSkillx        34
#define pTruckSkillx        35
#define pFarmSkillx         36
#define pPizzaTimesx        37
#define pFarmTimesx         38
#define pTruckTimesx        39
#define pRobTimesx          40
#define pPizzaRemx          41
#define pTruckRemx          42
#define pFarmRemx           43
#define pRobRemx            44
#define pSkinx            	45
#define pMomealax           46
#define pQuestProgressx		47

#define pFuelx         		55
#define pPhoneBookx         56
#define pMutedx				57
#define pMuteTimex			58
#define pLeaderx            59
#define pMemberx            60
#define pFactionRankx       61
#define pJobx               62
#define pClanx              63
#define pClanRankx          64
#define pClanTagTypex       65
#define pFreePointx       	66
#define pJailedx            67
//------------------------------------------------------------------------------
#define cLocationxx 		1
#define cLocationyx 		2
#define cLocationzx 		3
#define cAnglex 			4
#define cModelx             5
#define cColorOnex          6
#define cColorTwox          7
#define cOwnerx             8
#define cValuex             9
#define cLicensex           10
#define cNamex       		11
#define cLockx              12
#define cInscarpricex       13
#define cInsurancecarx      14
#define cKMx                15
#define cOwnedx             16
#define cModsx              17
#define cPaintJx            18
#define cHealthx            19
#define cFuelx           	20
#define cNeonx				21
#define cDamagex			22
#define cDaysx				23
//------------------------------------------------------------------------------
#define NEON_RED			18647
#define NEON_BLUE			18648
#define NEON_GREEN			18649
#define NEON_YELLOW			18650
#define NEON_PINK			18651
#define NEON_WHITE			18652
//--------------------------------TextDraw--------------------------------------
new Text:Time,
	Text:PinTDs[14];
//-----------------------------PlayerTextDraw-----------------------------------
new PlayerText:NumePlayer,
	PlayerText:GreenButton,
	PlayerText:RedButton,
	PlayerText:CarSpeedoTD[4],
	PlayerText:PinNumber[10],
	PlayerText:PaintballTD[2],
	PlayerText:FarmBox,
	PlayerText:InfoTD,
	PlayerText:FindTD,
	PlayerText:HouseUpgradeTD,
	PlayerText:PinResult,
	PlayerText:TaxiTD,
	PlayerText:UndercoverText,
	PlayerText:DealerShipModel,
	PlayerText:SafeZone,
	PlayerText:PizzaText,
	PlayerText:HealthTD,
	PlayerText:FramesTD,
	PlayerText:WantedTime,
	PlayerText:JailTime,
	PlayerText:WarTime,
	PlayerText:PizzaSimbol,
	PlayerText:FuelText,
	PlayerText:FarmJob,
	PlayerText:FarmSpeed,
	PlayerText:FarmWanted,
	PlayerText:FarmTime,
	PlayerText:VehicleInfoTD[7];
//------------------------------3DTextLabel-------------------------------------
new Text3D:gifttext,
	Text3D:DeadScris[MAX_PLAYERS];
//------------------------------ProgressBar-------------------------------------
new PlayerBar:FindBar;
//------------------------------Iterators---------------------------------------
new Iterator:Helpers<MAX_PLAYERS>,
	Iterator:Admins<MAX_PLAYERS>,
	Iterator:Factions<MAX_PLAYERS>,
	Iterator:Leaders<MAX_PLAYERS>;
//------------------------------ListItem----------------------------------------
new skincivil = mS_INVALID_LISTID,
	glasseslist = mS_INVALID_LISTID,
	carlist = mS_INVALID_LISTID,
	hatlist = mS_INVALID_LISTID,
	skingrove = mS_INVALID_LISTID,
	skinrusian = mS_INVALID_LISTID,
	skinazt = mS_INVALID_LISTID,
	skinnews = mS_INVALID_LISTID,
	skinhit = mS_INVALID_LISTID,
	skinpd = mS_INVALID_LISTID,
	skinfbi = mS_INVALID_LISTID,
	skintaxi = mS_INVALID_LISTID,
	skinballas = mS_INVALID_LISTID,
	skinvagos = mS_INVALID_LISTID,
	skinmedic = mS_INVALID_LISTID;
//---------------------------------MAX_PLAYERS----------------------------------
//-----Float-----
new Float:LastPosX[MAX_PLAYERS],
	Float:LastPosY[MAX_PLAYERS],
	Float:LastPosZ[MAX_PLAYERS],
	Float:CPX[MAX_PLAYERS],
	Float:CPY[MAX_PLAYERS],
	Float:CPZ[MAX_PLAYERS],
	Float:Health[MAX_PLAYERS],
	Float:FuelBought[MAX_PLAYERS],
	Float:Armour[MAX_PLAYERS],
	Float:WTChannel[MAX_PLAYERS],
	Float:TeleportDest[MAX_PLAYERS][3],
	Float:FRX[MAX_PLAYERS],
	Float:FRY[MAX_PLAYERS],
	Float:FRZ[MAX_PLAYERS];
//-----Bool-----
new bool:WeaponData[MAX_PLAYERS][13],
	bool:Centura[MAX_PLAYERS],
	bool:gPlayerLogged[MAX_PLAYERS],
	bool:TogAdmin[MAX_PLAYERS],
	bool:TogHelper[MAX_PLAYERS],
	bool:TogClan[MAX_PLAYERS],
	bool:TogFaction[MAX_PLAYERS],
	bool:TogPremium[MAX_PLAYERS],
	bool:ShowHealth[MAX_PLAYERS],
	bool:TogFind[MAX_PLAYERS],
	bool:TogCheckpoint[MAX_PLAYERS],
	bool:TogBid[MAX_PLAYERS],
	bool:ShowFPS[MAX_PLAYERS],
	bool:gPlayerAccount[MAX_PLAYERS],
	bool:Used[MAX_PLAYERS];
//-----Normal-----
new EventTimer[MAX_PLAYERS],
	JobTimer[MAX_PLAYERS],
	pizzaprice[MAX_PLAYERS],
	RentTime[MAX_PLAYERS],
	JobWorking[MAX_PLAYERS],
	Pizza[MAX_PLAYERS],
	JobCar[MAX_PLAYERS][MAX_JOBS],
	BuyCar[MAX_PLAYERS],
	NearPNS[MAX_PLAYERS],
	LastBizz[MAX_PLAYERS],
	TotalMoney[MAX_PLAYERS],
	SilentAimCount[MAX_PLAYERS],
	ProAimCount[MAX_PLAYERS],
	AdvMSG[MAX_PLAYERS][MAX_STRING],
	AdvPlayer[MAX_PLAYERS],
	AdvTimer[MAX_PLAYERS],
	Select[MAX_PLAYERS][50],
	ExamCar[MAX_PLAYERS],
	FactionSpectate[MAX_PLAYERS],
	RImmunity[MAX_PLAYERS],
	VehHP[MAX_PLAYERS],
	invitatiebarbut[MAX_PLAYERS],
	sumabarbut[MAX_PLAYERS],
	PlayerEnterTime[MAX_PLAYERS],
	TowAcc[MAX_PLAYERS],
	Somatii[MAX_PLAYERS],
	NoReloading[MAX_PLAYERS],
	CurrentWeapon[MAX_PLAYERS],
	CurrentAmmo[MAX_PLAYERS],
	LastCheckpoint[MAX_PLAYERS],
	XCheckpoints[MAX_PLAYERS],
	zilegold[MAX_PLAYERS],
	goldcost[MAX_PLAYERS],
	Selected2[MAX_PLAYERS][64],
	Selected[MAX_PLAYERS][101],
	Megaphone[MAX_PLAYERS],
	LastText[MAX_PLAYERS][MAX_STRING],
	LastTextTime[MAX_PLAYERS],
	Glass[7][MAX_PLAYERS],
	Point[MAX_PLAYERS],
	TransferOffer[MAX_PLAYERS],
	TransferMoney[MAX_PLAYERS],
	Radaron[MAX_PLAYERS],
	Radarlimit[MAX_PLAYERS],
	Cautat[MAX_PLAYERS],
	Event[MAX_PLAYERS],
	Wartimeon[MAX_PLAYERS],
	dicetime[MAX_PLAYERS],
	KillP[MAX_PLAYERS],
	DeathP[MAX_PLAYERS],
	PaintBallVoted[MAX_PLAYERS],
	PaintBallVoted2[MAX_PLAYERS],
	PlayerPaintballing[MAX_PLAYERS],
	PlayerPaintballScore[MAX_PLAYERS],
	logintime[MAX_PLAYERS],
	RobTime[MAX_PLAYERS],
	RobTimer[MAX_PLAYERS],
	Spawner[MAX_PLAYERS],
	SellgunOffer[MAX_PLAYERS],
	SellgunPrice[MAX_PLAYERS],
	SellgunMats[MAX_PLAYERS],
	SellgunAmmo[MAX_PLAYERS],
	SellgunID[MAX_PLAYERS],
	pDrunkLevelLast[MAX_PLAYERS],
	FPS[MAX_PLAYERS],
	sVehicle[10][MAX_PLAYERS],
	OwnableCarOffer[MAX_PLAYERS],
	OwnableCarID[MAX_PLAYERS],
	OwnableCarPrice[MAX_PLAYERS],
	FlyMode[MAX_PLAYERS],
	JucatorCautat[MAX_PLAYERS],
	PlacedNews[MAX_PLAYERS],
	WantedName[MAX_PLAYERS][MAX_STRING],
	WantedReason[MAX_PLAYERS],
	WantedTimer[MAX_PLAYERS],
	gCarLock[MAX_PLAYERS],
	HireCar[MAX_PLAYERS],
	SwitchKey[MAX_PLAYERS],
	KeyCar[MAX_PLAYERS],
	ChooseInt[MAX_PLAYERS],
	VamaOn[MAX_PLAYERS],
	farmerc[MAX_PLAYERS],
	farmertime[MAX_PLAYERS],
	playerdeath[MAX_PLAYERS],
	reportaccepted[MAX_PLAYERS],
	reportsend[MAX_PLAYERS],
	adminacceptedreport[MAX_PLAYERS],
	playerhavereport[MAX_PLAYERS],
	helpmeaccepted[MAX_PLAYERS],
	helpmesend[MAX_PLAYERS],
	adminacceptedhelp[MAX_PLAYERS],
	playerhavehelp[MAX_PLAYERS],
	gPlayerUsingLoopingAnim[MAX_PLAYERS],
	MedicCall[MAX_PLAYERS],
	MechanicCall[MAX_PLAYERS],
	MedicCallTime[MAX_PLAYERS],
	MechanicCallTime[MAX_PLAYERS],
	TaxiCall[MAX_PLAYERS],
	TaxiCallTime[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS],
	BugRefill[MAX_PLAYERS],      
	BugRepair[MAX_PLAYERS],     
	BugTicket[MAX_PLAYERS],      
	TransportDuty[MAX_PLAYERS],
	TransportValue[MAX_PLAYERS],
	TransportMoney[MAX_PLAYERS],
	TransportTime[MAX_PLAYERS],
	TransportCost[MAX_PLAYERS],
	TransportDriver[MAX_PLAYERS],
	JobDuty[MAX_PLAYERS],
	TakingLesson[MAX_PLAYERS],
	TicketOffer[MAX_PLAYERS],
	TicketMoney[MAX_PLAYERS],
	Speedlimit[MAX_PLAYERS],
	TutTime[MAX_PLAYERS],
	PlayerDrunk[MAX_PLAYERS],
	PlayerTazeTime[MAX_PLAYERS],
	GotHit[MAX_PLAYERS],
	GoChase[MAX_PLAYERS],
	GetChased[MAX_PLAYERS],
	OrderReady[MAX_PLAYERS],
	PlayerCuffed[MAX_PLAYERS],
	PlayerCuffedTime[MAX_PLAYERS],
	LiveOffer[MAX_PLAYERS],
	TalkingLive[MAX_PLAYERS],
	CP[MAX_PLAYERS],
	ListenRadio[MAX_PLAYERS],
	MoneyMessage[MAX_PLAYERS],
	RepairOffer[MAX_PLAYERS],
	RepairPrice[MAX_PLAYERS],
	RefillOffer[MAX_PLAYERS],
	RefillPrice[MAX_PLAYERS],
	RepairCar[MAX_PLAYERS],
	DrugOffer[MAX_PLAYERS],
	DrugPrice[MAX_PLAYERS],
	DrugGram[MAX_PLAYERS],
	OnDuty[MAX_PLAYERS],
	gPlayerLogTries[MAX_PLAYERS],
	Spectate[MAX_PLAYERS],
	CellTime[MAX_PLAYERS],
	StartTime[MAX_PLAYERS],
	Specing[MAX_PLAYERS],
	PhoneOnline[MAX_PLAYERS],
	Mobile[MAX_PLAYERS],
	RingTone[MAX_PLAYERS],
	CallCost[MAX_PLAYERS],
	UsingDrugs[MAX_PLAYERS],
	viddd[MAX_PLAYERS],
	Trucker[MAX_PLAYERS],
	Trucker2[MAX_PLAYERS],
	Trucker3[MAX_PLAYERS],
	Trucker4[MAX_PLAYERS],
	TruckID[MAX_PLAYERS],
	PinStep[MAX_PLAYERS],
	InputtText[MAX_PLAYERS][10],
	Fishing[MAX_PLAYERS],
	FishTimer[MAX_PLAYERS],
	TipPeste[MAX_PLAYERS],
	TimeFish[MAX_PLAYERS],
	Undercover[MAX_PLAYERS],
	AreFaina[MAX_PLAYERS],
	FactionOffer[MAX_PLAYERS],
	firerockettime[MAX_PLAYERS],
	Firerocket[MAX_PLAYERS],
	explosionrocket[MAX_PLAYERS],
	rocketsmoke[MAX_PLAYERS],
	Light[100][MAX_PLAYERS],
	Sleeping[MAX_PLAYERS],
	rTime[MAX_PLAYERS],
	paytime[MAX_PLAYERS],
	Refueling[MAX_PLAYERS],
	decon[MAX_PLAYERS],
	mail[MAX_PLAYERS];
//---------------------------------MAX_VEHICLES---------------------------------
new Float:LastVPos[MAX_VEHICLES][4],
	Float:Gas[MAX_VEHICLES],
	Radio[MAX_VEHICLES][MAX_STRING],
	Vehicle[MAX_VEHICLES],
	EngineSTATE[MAX_VEHICLES],
	LightsSTATE[MAX_VEHICLES],
	bonnetSTATE[MAX_VEHICLES],
	bootSTATE[MAX_VEHICLES],
	gLastCar[MAX_VEHICLES],
	CarRented[MAX_VEHICLES],
	CarRadio[MAX_VEHICLES],
	SpawnCar[MAX_VEHICLES],
	CreateCar[MAX_VEHICLES];
//----------Bariere-------------------------------------------------------------
new barrierlv, barrierls,
	garagels, garagelv, garagelv1,
	barmata1, barmata2,
	vama1, vama2, vama3, vama4;
//-------------------------Variables--------------------------------------------
new Weather = 0,
	giftpickup,
	Votare = 0,
	IDLicitatie,
	LastPlayer,
	Licitatie = 0,
	TipLicitatie,
	TimpLicitatie,
	TotalBani = 0,
	racecar[8],
	Tax = 0,
	TaxValue = 0,
	Medics = 0,
	Mechanics = 0,
	TaxiDrivers = 0,
	ghour = 0,
	gminute = 0,
	gsecond = 0,
	realtime = 1,
	levelcost = 25000,
	callcost = 150,
	shifthour,
	ScriptTimer[MAX_TIMERS],
	helps,
	restartsv,
	paintp[5],
	paintm[5],
	paintg[3],
	paintt[5],
	paintrs[5],
	paintvoteg[3][3],
	paintvotem[5][5],
	mapvoted[5],
	gunvoted[3],
	preparepaint1,
	preparepaint2,
 	preparepaint3,
 	preparepaint4,
 	paintrun1,
 	paintrun2,
 	paintrun3,
 	paintrun4,
 	PaintballWinner[5] = 999,
 	PaintballWinnerScore[5],
	actor1, 
	actor2,
	Count, 
	iGMXTick,
	masini = 0;
//------------------------------------------------------------------------------
new exhaust[28] = {1018,1019,1020,1021,1022,1028,1029,1037,1043,1044,1045,1046,1059,1064,1065,1066,1089,1092,1104,1105,1113,1114,1126,1127,1129,1132,1135,1136},
	fbumper[23] = {1117,1152,1153,1155,1157,1160,1165,1167,1169,1170,1171,1172,1173,1174,1175,1179,1181,1182,1185,1188,1189,1192,1193},
	rbumper[22] = {1140,1141,1148,1149,1150,1151,1154,1156,1159,1161,1166,1168,1176,1177,1178,1180,1183,1184,1186,1187,1190,1191},
	lskirt[21] = {1007,1026,1031,1036,1039,1042,1047,1048,1056,1057,1069,1070,1090,1093,1106,1108,1118,1119,1133,1122,1134},
	rskirt[21] = {1017,1027,1030,1040,1041,1051,1052,1062,1063,1071,1072,1094,1095,1099,1101,1102,1107,1120,1121,1124,1137},
	spoiler[20] = {1000,1001,1002,1003,1014,1015,1016,1023,1058,1060,1049,1050,1138,1139,1146,1147,1158,1162,1163,1164},
	rscoop[17] = {1006,1032,1033,1035,1038,1053,1054,1055,1061,1067,1068,1088,1091,1103,1128,1130,1131},
	wheels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098},
	bscoop[4] = {1004,1005,1011,1012},
	rbbars[4] = {1109,1110,1123,1125},
	nitro[3] = {1008,1009,1010},
	bventr[2] = {1142,1144},
	bventl[2] = {1143,1145},
	fbbars[2] = {1115,1116},
	vlights[2] = {1013,1024};

//RC MAP PAINTBALL
new Float:gRandomSpawnRC[7][3] = {
	{-969.7932,1094.1221,1345.0070},
	{-976.3990,1022.5371,1345.0310},
	{-973.6447,1041.8181,1352.6875},
	{-1014.5994,1027.9786,1342.6187},
	{-1133.7423,1021.9453,1345.7335},
	{-1115.6410,1095.8212,1341.8438},
	{-1133.1267,1079.1073,1353.4480}
};

// TOW CAR CHECKPOINT
new Float:TowCarCk[14][3] = {
	{1209.6587,-1102.2660,25.1793},
	{1013.2002,-1022.8221,32.1016},
	{928.3862,-1081.9692,24.2891},
	{856.1053,-1364.4233,13.5469},
	{968.3508,-1710.0663,13.5546},
	{1017.6634,-917.3149,42.1797},
	{1268.3655,-1613.0262,13.5469},
	{1433.0844,-1843.8458,13.5469},
	{2051.3674,-2046.2601,13.5469},
	{2137.6187,-2173.9358,13.5544},
	{2215.5930,-2202.2126,13.5469},
	{2468.5393,-2078.4360,13.5469},
	{2699.9041,-1951.2253,13.5540},
	{2662.4050,-1593.9717,13.3006}
};

//TENNIS MAP PAINTBALLL
new Float:gRandomSpawnTennis[7][3] = {
	{-2754.8149,-245.1009,7.1875},
	{-2779.4072,-248.5145,7.1875},
	{-2779.9651,-265.2720,7.1875},
	{-2744.6108,-270.1563,7.1875},
	{-2718.3101,-252.3627,7.1875},
	{-2726.9282,-240.9186,7.1875},
	{-2716.3669,-269.9250,7.1875}
};

//FARM MAP PAINTBALL
new Float:gRandomSpawnFarm[7][3] = {
	{15.3401,2.1944,3.1172},
	{-59.7064,-32.2439,3.1172},
	{-102.5952,-29.0223,3.1172},
	{-111.9006,27.3635,3.1172},
	{-152.7778,49.3966,3.1172},
	{-205.3790,8.9561,3.1172},
	{-75.0158,9.1256,3.1172}
};

//LSPD MAP PAINTBALL
new Float:gRandomSpawnLSPD[7][3] = {
	{1499.7970,-1671.6659,14.0469},
	{1459.4235,-1699.1788,14.5469},
	{1491.1667,-1724.2849,13.5469},
	{1519.1375,-1741.3630,13.5469},
	{1501.7247,-1609.9181,14.0469},
	{1457.3564,-1623.7700,14.7891},
	{1501.6702,-1601.3480,13.2884}
};

//BEACH MAP PAINTBALL
new Float:gRandomSpawnBeach[6][3] = {
	{586.0002,-1813.6575,6.0625},
	{600.9373,-1876.1948,4.2792},
	{595.5770,-1815.2834,6.0625},
	{560.8715,-1877.9070,3.9158},
	{498.6968,-1855.5299,3.7908},
	{429.4129,-1844.7195,3.7809}
};

// TRUCKER JOB
new Float:CHKTruck[18][3] = {
	{-99.2558,-1168.3788,2.5964}, //GAS LS ---- CHECKS LS
	{1315.7880,-867.2107,39.5781}, //24/7 Store LS
	{2116.6514,-1771.4202,13.3937}, //Pizza Boy LS
	{2816.3660,-1698.8490,9.9504}, //8 Track LS
	{2651.2346,-2390.4055,13.6328}, //Chop Shop LS
	{2115.3047,-1723.7944,13.5502}, //Crack House LS
	{2165.3979,2746.7004,10.8203}, //GAS LV ---- CHECKS LV
	{2046.1804,2244.4304,10.8203}, //Clothing Soter LV
	{2447.6467,1999.7650,10.8203}, //Burger Shot LV
	{2503.0703,1531.9418,10.6749}, //Pool LV
	{2032.2845,1516.1019,10.8203}, //Pirate Ship LV
	{1483.8053,1046.6919,10.8203}, //Chuckup LV
	{-1728.6168,-119.5973,3.5547}, //Ship SF ---- CHECKS SF
	{-1694.2990,399.9545,7.1797}, //GAS SF
	{-1672.8090,1322.6425,7.1853}, //Pier 69 SF
	{-2110.9172,816.9711,69.5625}, //Supa Save SF
	{-2533.0513,1227.8401,37.4219}, //Restaurant SF
	{-2142.6599,-442.6247,35.3359} //Homies SF
};

// TRUCKER JOB2
new Float:CHKTruck2[18][3] = {
	{-119.2522,-1218.2719,2.9902}, //LANGA GAS LS ---- CHECKS LS
	{1361.1011,-906.6476,35.3157}, //LANGA 24/7 Store LS
	{2078.8257,-1706.9739,13.3906}, //LANGA Pizza Boy LS
	{2683.8926,-1683.9061,9.4250}, //LANGA 8 Track LS
	{2609.1416,-2393.7742,13.6271}, //LANGA Chop Shop LS
	{2158.9236,-1725.8071,13.5389}, //LANGA Crack House LS
	{2101.4238,2803.3069,10.8203}, //LANGA GAS LV ---- CHECKS LV
	{2116.0403,2189.2769,10.8203}, //LANGA Clothing Soter LV
	{2426.0283,2005.2286,10.8203}, //LANGA Burger Shot LV
	{2478.9539,1640.6306,10.8203}, //LANGA Pool LV
	{2029.4589,1418.5114,10.8203}, //LANGA Pirate Ship LV
	{1441.4424,1005.0969,10.8203}, //LANGA Chuckup LV
	{-1731.8619,-71.2586,3.5489}, //LANGA Ship SF ---- CHECKS SF
	{-1714.7142,352.0824,7.1875}, //LANGA GAS SF
	{-1647.4458,1291.6462,7.0391}, //LANGA Pier 69 SF
	{-2132.7087,769.0834,69.5625}, //LANGA Supa Save SF
	{-2468.7771,1231.8475,35.2001}, //LANGA Restaurant SF
	{-2184.9126,-409.3924,35.3359} //LANGA Homies SF
};

new Float:RandomSpawns[30][4] = {
	{1412.2595,6.1298,1000.9219,180.9003},
	{1408.0437,6.1806,1000.9251,177.1402},
	{1403.1508,6.1258,1000.9059,174.6335},
	{1398.0273,5.9584,1000.9063,185.9137},
	{1381.0830,5.6821,1000.9166,183.4070},
	{1373.4424,6.2396,1000.9163,175.8869},
	{1368.2979,6.1590,1000.9200,177.4536},
	{1360.3193,6.3505,1000.9219,179.6470},
	{1359.6257,-2.4310,1000.9219,275.8412},
	{1360.0743,-7.8997,1000.9219,268.9478},
	{1360.1553,-14.3356,1000.9219,264.5611},
	{1360.0851,-21.2351,1000.9219,260.1510},
	{1360.0441,-27.1327,1000.9219,264.5378},
	{1360.0824,-33.6543,1000.9219,278.3245},
	{1360.0995,-38.4936,1000.9219,275.1912},
	{1359.9139,-45.6904,1000.9254,272.9978},
	{1365.9270,-48.2096,1000.9162,0.1053},
	{1371.3363,-47.7785,1000.9165,356.9719},
	{1376.5577,-47.6267,1000.9184,356.0320},
	{1382.5784,-47.3322,1000.9216,3.8653},
	{1389.0518,-47.3623,1000.9244,356.6586},
	{1395.5378,-47.5278,1000.9251,3.2387},
	{1401.5302,-47.5923,1000.9088,354.4653},
	{1409.2939,-47.4446,1000.9229,7.6255},
	{1417.9374,-47.3752,1000.9294,2.6121},
	{1418.2668,-42.5882,1000.9227,88.7796},
	{1418.5240,-37.9459,1000.9272,83.7662},
	{1418.0388,-31.0613,1000.9270,93.7930},
	{1417.7113,-23.9086,1000.9269,87.8162},
	{1418.2236,-14.0434,1000.9271,90.0095}
};

new Float:CarSpawn[18][4] = {
    {870.1356,-1678.2471,13.1719,180.8351},
    {874.6788,-1678.3009,13.1718,180.1813},
    {879.1628,-1678.2605,13.1718,180.3025},
    {883.6641,-1678.2090,13.1719,180.3035},
    {888.1510,-1678.2588,13.1718,179.7945},
    {892.6682,-1678.2156,13.1718,179.9841},
	{892.5511,-1669.4839,13.2778,0.6754},
	{888.0269,-1669.5371,13.2778,0.6754},
	{883.6531,-1669.5884,13.2778,0.6754},
	{879.0850,-1669.6422,13.2778,0.6754},
	{874.5663,-1669.6954,13.2778,0.6754},
	{870.0541,-1669.7485,13.2778,0.6754},
	{870.1249,-1657.8358,13.2740,180.0420},
	{874.6415,-1657.8329,13.2740,180.0420},
	{879.1111,-1657.8296,13.2740,180.0420},
	{883.5107,-1657.8268,13.2740,180.0420},
	{888.1361,-1657.8240,13.2740,180.0420},
	{892.4846,-1657.8214,13.2740,180.0420}
};

new Float:Inchisoare[4][3] = {
    {227.3765,110.3928,999.0156},
    {223.0097,110.0189,999.0156},
    {219.2154,110.6932,999.0156},
    {215.1696,110.3829,999.0156}
};

new Float:gDealershipSpawn[10][4] = {
	{2161.7034,-1182.6155,23.5450,89.3962},
	{2161.7024,-1187.5385,23.5462,89.5017},
	{2147.6804,-1198.9862,23.6139,270.4538},
	{2161.7021,-1192.2928,23.5474,89.4368},
	{2148.4204,-1157.3890,23.5721,91.0718},
	{2148.2493,-1170.9753,23.5474,89.2400},
	{2161.9739,-1148.3212,24.0110,90.5187},
	{2161.1978,-1197.4248,23.4676,90.1916},
	{2148.0603,-1138.3286,25.0874,269.4724},
	{2148.0068,-1180.3817,23.5000,90.1299}
};

new Float:MatsCP[4][3] = {
    {1712.9625,913.9552,10.820},
    {1712.9625,913.9552,10.8203},
    {2153.4480,-2288.4285,13.0903},
    {1712.9625,913.9552,10.8203}
};

new Float:RobCP[10][3] = {
	{2872.5315,1007.7699,10.4121},
	{-2504.8506,-677.8770,139.0114},
	{1278.5818,1504.2931,10.5156},
	{-2025.6118,124.4743,28.8243},
	{-2695.7603,825.5767,49.6853},
	{2129.2939,-2276.3789,20.6643},
	{2178.9890,-2249.9414,20.6746},
	{2605.7170,-2122.5007,0.7171},
	{-2189.5056,-2416.6455,30.6250},
	{2843.7507, -2384.5403, 14.6081}
};

new Float:SkinCaps[300][6] = {
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
	{0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 0
	{0.136207, 0.006102, -0.013858, 0.612963, 0.000000, 0.000000}, //Skin - 1
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                 //Skin - 2
	{0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000}, //Skin - 3
	{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 4
	{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 5
	{0.155785, 0.005998, -0.014326, 0.000000, 0.000000, 347.188201},//Skin - 6
	{0.157787, 0.012994, -0.014590, 0.612963, 0.000000, 0.000000},  //Skin - 7
	{0.131067, -0.013737, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 8
	{0.118922, -0.015322, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 9
	{0.125779, -0.001459, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 10
	{0.129249, -0.014101, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 11
	{0.139572, -0.003642, -0.002145, 0.612963, 0.000000, 10.335063}, //Skin - 12
	{0.161076, -0.015624, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 13
	{0.112204, -0.023196, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 14
	{0.104552, -0.015122, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 15
	{0.150166, -0.008718, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 16
	{0.149627, 0.002943, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 17
	{0.105319, 0.003517, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 18
	{0.153609, -0.003207, -0.007717, 0.000000, 0.000000, 357.608825},//Skin - 19
	{0.143831, 0.001813, -0.010588, 0.000000, 0.000000, 357.608825}, //Skin - 20
	{0.154598, -0.003549, -0.013304, 0.000000, 0.000000, 0.000000},  //Skin - 21
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 22
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   //Skin - 23
	{0.127352, 0.009877, -0.006845, 0.726156, 359.666778, 348.825012},//Skin - 24
	{0.124666, -0.029373, -0.006845, 0.726156, 359.666778, 329.940704},//Skin - 25
	{0.152029, -0.018331, -0.003139, 0.000000, 358.344604, 348.467559}, //Skin - 26
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 27
	{0.128768, 0.041474, -0.007667, 0.726156, 359.666778, 355.429199}, //Skin - 28
	{0.166457, -0.006228, -0.012669, 0.726156, 359.666778, 354.612152},//Skin - 29
	{0.155160, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 30
	{0.096077, -0.023233, -0.009101, 0.726156, 359.666778, 343.094055},//Skin - 31
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 32
	{0.094003, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 33
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 34
	{0.155565, 0.014400, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 35
	{0.156485, 0.013641, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 36
	{0.144815, 0.013641, -0.009374, 0.726156, 359.666778, 350.562103}, //Skin - 37
	{0.113347, -0.006682, -0.009374, 0.726156, 359.666778, 350.562103},//Skin - 38
	{0.147231, -0.014448, -0.004786, 0.726156, 359.666778, 357.303253},//Skin - 39
	{0.133873, -0.019703, -0.000058, 0.000000, 358.344604, 348.467559},//Skin - 40
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 41
	{0.082446, 0.004202, -0.004786, 0.726156, 359.666778, 357.303253}, //Skin - 42
	{0.104901, 0.004013, -0.004786, 0.726156, 359.666778, 342.983184}, //Skin - 43
	{0.116172, -0.001954, -0.004786, 0.726156, 359.666778, 357.100677},//Skin - 44
	{0.153321, 0.025744, -0.008666, 0.726156, 359.666778, 10.704365},  //Skin - 45
	{0.160556, 0.007781, -0.010438, 0.726156, 359.666778, 0.991972},   //Skin - 46
	{0.179010, -0.035613, -0.010438, 0.726156, 359.666778, 347.956573},//Skin - 47
	{0.123363, 0.008694, -0.010438, 0.726156, 359.666778, 347.956573}, //Skin - 48
	{0.167061, -0.037899, -0.010438, 0.726156, 359.666778, 347.775817},//Skin - 49
	{0.164100, -0.040816, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 50
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 51
	{0.129040, 0.016069, -0.010438, 0.726156, 359.666778, 347.775817}, //Skin - 52
	{0.129040, 0.016069, -0.006084, 0.726156, 359.666778, 347.775817}, //Skin - 53
	{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 54
	{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 55
	{0.174539, -0.000662, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 56
	{0.109382, -0.002955, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 57
	{0.152276, -0.029331, -0.008357, 0.726156, 359.666778, 332.070648},//Skin - 58
	{0.129599, -0.019172, -0.012204, 0.726156, 359.666778, 332.070648},//Skin - 59
	{0.138485, -0.012405, -0.011567, 357.030151, 358.344604, 342.811187},//Skin - 60
	{0.130350, 0.000897, -0.000747, 0.726156, 359.666778, 332.070648}, //Skin - 61
	{0.150659, -0.035485, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 62
	{0.119340, -0.006483, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 63
	{0.110634, 0.009623, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 64
	{0.133055, -0.000092, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 65
	{0.129061, -0.006499, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 66
	{0.127292, 0.010318, -0.006299, 0.726156, 359.666778, 341.617431}, //Skin - 67
	{0.138791, -0.025311, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 68
	{0.148132, 0.003970, -0.002304, 0.726156, 359.666778, 340.120025}, //Skin - 69
	{0.129753, 0.006469, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 70
	{0.125663, 0.015428, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 71
	{0.125663, 0.015428, -0.009030, 0.726156, 359.666778, 354.029815}, //Skin - 72
	{0.117674, 0.014567, -0.011567, 357.030151, 358.344604, 342.811187}, //Skin - 73
	{0.135729, -0.018656, -0.013554, 0.000000, 0.000000, 337.893737},  //Skin - 74
	{0.141888, -0.042810, -0.006206, 0.000000, 0.000000, 337.893737},  //Skin - 75
	{0.134968, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 76
	{0.124348, -0.017813, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 77
	{0.124348, 0.000583, -0.006206, 0.000000, 0.000000, 346.786865},   //Skin - 78
	{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 79
	{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 81
	{0.167928, 0.031601, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 82
	{0.159998, 0.023540, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 83
	{0.169630, 0.019315, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 84
	{0.163052, -0.039735, -0.006206, 0.000000, 0.000000, 341.169891},  //Skin - 85
	{0.122285, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 86
	{0.144811, -0.007521, -0.014207, 0.000000, 0.000000, 341.169891},  //Skin - 87
	{0.129932, -0.007521, -0.007289, 0.000000, 0.000000, 341.169891},  //Skin - 88
	{0.151147, -0.038608, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 89
	{0.147416, -0.031632, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 90
	{0.157728, -0.009677, -0.009597, 0.000000, 0.000000, 0.934848},    //Skin - 91
	{0.136577, -0.015592, -0.009597, 0.000000, 0.000000, 341.013824},  //Skin - 92
	{0.143821, 0.000631, -0.008385, 0.000000, 0.000000, 358.808868},   //Skin - 93
	{0.100521, 0.003151, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 94
	{0.122833, -0.006031, -0.007624, 0.000000, 0.000000, 358.808868},  //Skin - 95
	{0.145296, 0.003959, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 96
	{0.141658, 0.016474, -0.007624, 0.000000, 0.000000, 9.683902},     //Skin - 97
	{0.145276, -0.002846, -0.007624, 0.000000, 0.000000, 340.239593},  //Skin - 98
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 99
	{0.161745, -0.010244, -0.007624, 0.000000, 0.000000, 351.499267}, //Skin - 100
	{0.151006, -0.030994, -0.005366, 0.000000, 0.000000, 340.428894}, //Skin - 101
	{0.147111, 0.003794, -0.012433, 0.000000, 0.000000, 358.069244},  //Skin - 102
	{0.154213, -0.052348, -0.003511, 356.299316, 0.000000, 336.751647},//Skin - 103
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 104
	{0.153814, -0.039614, -0.006756, 356.299316, 0.000000, 336.930084},//Skin - 105
	{0.153638, -0.039614, -0.013630, 356.299316, 0.000000, 336.930084},//Skin - 106
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 107
	{0.140473, -0.026201, -0.000469, 0.390689, 355.405181, 335.554260},//Skin - 108
	{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 109
	{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 110
	{0.134860, 0.001485, -0.010145, 0.390689, 358.632415, 347.730010},//Skin - 111
	{0.124823, 0.001485, -0.009402, 0.390689, 358.632415, 347.730010},//Skin - 112
	{0.157999, -0.012039, -0.006082, 0.390689, 358.632415, 347.730010},//Skin - 113
	{0.144906, -0.005139, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 114
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 116
	{0.152829, -0.009735, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 117
	{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 118
	{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 119
	{0.144202, -0.021273, -0.005915, 357.030151, 358.344604, 342.811187},//Skin - 120
	{0.154275, -0.037484, -0.009654, 0.390689, 358.632415, 337.676666},//Skin - 121
	{0.155674, -0.015613, -0.004339, 0.390689, 358.632415, 350.571228},//Skin - 122
	{0.136433, -0.019181, -0.004339, 0.390689, 358.632415, 340.261840},//Skin - 123
	{0.163258, -0.032386, -0.013128, 0.390689, 358.632415, 340.261840},//Skin - 124
	{0.153242, -0.029651, -0.002434, 0.390689, 358.632415, 333.367614},//Skin - 125
	{0.127978, -0.001961, -0.008867, 0.390689, 358.632415, 347.279052},//Skin - 126
	{0.160856, -0.025356, -0.004428, 0.390689, 358.632415, 347.279052},//Skin - 127
	{0.150266, -0.009032, -0.006781, 0.390689, 358.632415, 347.223754},//Skin - 128
	{0.158060, 0.022907, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 129
	{0.111739, 0.012673, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 130
	{0.091638, -0.011600, -0.008686, 0.390689, 358.632415, 336.674468},//Skin - 131
	{0.125788, 0.000635, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 132
	{0.031324, -0.014154, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 133
	{0.142321, 0.015417, -0.005915, 0.243191, 358.632415, 350.329559},//Skin - 133
	{0.128780, -0.030750, 0.006687, 173.184967, 358.632415, 27.422966},//Skin - 134
	{0.115882, -0.004931, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 135
	{0.127531, -0.008916, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 136
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 137
	{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 138
	{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 139
	{0.147315, 0.001708, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 140
	{0.144315, -0.013571, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 141
	{0.144315, -0.002729, -0.010357, 358.837646, 358.632415, 354.390045},//Skin - 142
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 143
	{0.177516, -0.070868, -0.009114, 358.837646, 358.632415, 331.679321},//Skin - 144
	{0.139578, -0.008750, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 145
	{0.139578, -0.014406, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 146
	{0.115592, -0.010754, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 147
	{0.150735, -0.000459, -0.004405, 358.837646, 358.632415, 9.362450},//Skin - 148
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 149
	{0.149485, -0.008709, -0.006168, 358.837646, 358.632415, 2.276566},//Skin - 150
	{0.168162, -0.009708, -0.012160, 359.504821, 4.442328, 355.348114},//Skin - 151
	{0.156369, -0.024521, -0.012160, 359.504821, 0.415596, 355.348114},//Skin - 152
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 153
	{0.119297, -0.016080, -0.010776, 359.504821, 0.415596, 341.522827},//Skin - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 155
	{0.172295, -0.065549, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 156
	{0.126340, -0.030764, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 157
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 158
	{0.154280, 0.002166, -0.010436, 359.504821, 0.415596, 357.792144},//Skin - 159
	{0.121469, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 160
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 161
	{0.139495, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 162
	{0.113212, -0.005302, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 163
	{0.120208, 0.003533, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 164
	{0.135111, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 165
	{0.122118, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 166
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 167
	{0.125229, 0.005091, -0.013084, 359.504821, 0.415596, 352.954559},//Skin - 168
	{0.153451, -0.018119, -0.013276, 359.504821, 0.415596, 358.219451},//Skin - 169
	{0.141395, -0.009131, -0.013276, 359.504821, 0.415596, 347.866027},//Skin - 170
	{0.157631, -0.028753, -0.006450, 359.504821, 0.415596, 339.935516},//Skin - 171
	{0.152687, -0.027057, -0.007731, 359.504821, 0.415596, 344.054809},//Skin - 172
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 173
	{0.165146, 0.015393, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 174
	{0.162788, -0.019696, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 175
	{0.157728, -0.027188, -0.012891, 359.504821, 0.415596, 345.804748},//Skin - 176
	{0.187507, 0.010472, -0.012891, 359.504821, 0.415596, 12.315887},//Skin - 177
	{0.153901, -0.027720, -0.007884, 359.504821, 0.415596, 344.553527},//Skin - 178
	{0.137445, -0.009757, -0.012987, 359.504821, 0.415596, 344.553527},//Skin - 179
	{0.173041, -0.006323, -0.012987, 359.504821, 0.415596, 3.267552},//Skin - 180
	{0.143467, 0.016897, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 181
	{0.114480, 0.006202, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 182
	{0.114480, 0.008813, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 183
	{0.128122, -0.012152, -0.013144, 359.504821, 0.415596, 336.326538},//Skin - 184
	{0.156171, 0.007268, -0.013144, 359.504821, 0.415596, 10.805211},//Skin - 185
	{0.156409, -0.034861, -0.007927, 359.504821, 0.415596, 336.978668},//Skin - 186
	{0.118034, -0.024105, -0.002947, 359.504821, 0.415596, 336.978668},//Skin - 187
	{0.128686, -0.029632, -0.002947, 358.201873, 0.415596, 329.325042},//Skin - 188
	{0.172639, -0.026749, -0.012705, 358.201873, 0.415596, 349.092590},//Skin - 189
	{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 190
	{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 191
	{0.178725, -0.010278, -0.007224, 358.201873, 0.415596, 354.053405},//Skin - 192
	{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 193
	{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 194
	{0.176089, -0.032526, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 195
	{0.118042, 0.007002, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 196
	{0.143840, -0.042712, -0.007556, 358.201873, 0.415596, 341.814422},//Skin - 197
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 198
	{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 199
	{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 200
	{0.140799, 0.025145, -0.009754, 358.201873, 0.415596, 5.040688},//Skin - 201
	{0.140799, 0.015851, -0.009754, 358.201873, 0.415596, 349.796478},//Skin - 202
	{0.140799, -0.004372, -0.013685, 358.201873, 0.415596, 349.796478},//Skin - 203
	{0.154274, 0.006245, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 204
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 205
	{0.154274, 0.016669, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 206
	{0.106604, 0.004805, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 207
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 208
	{0.148378, -0.003807, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 209
	{0.113854, 0.001969, -0.011840, 358.201873, 0.415596, 343.826263},//Skin - 210
	{0.149539, -0.028623, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 211
	{0.104024, -0.014549, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 212
	{0.145820, -0.029160, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 213
	{0.148646, -0.008515, -0.009621, 358.201873, 0.415596, 1.360260},//Skin - 214
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 215
	{0.148646, -0.005935, -0.004058, 358.201873, 0.415596, 1.360260},//Skin - 216
	{0.148646, -0.015611, -0.004058, 358.201873, 0.415596, 340.374938},//Skin - 217
	{0.133952, -0.030138, -0.009880, 358.201873, 0.415596, 340.374938},//Skin - 218
	{0.140503, -0.033425, -0.005693, 358.201873, 0.415596, 340.374938},//Skin - 219
	{0.114608, 0.009020, -0.009135, 358.201873, 0.415596, 352.932006},//Skin - 220
	{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 221
	{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 222
	{0.179908, -0.010779, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 223
	{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 224
	{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 225
	{0.134990, -0.034685, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 226
	{0.151760, 0.002680, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 227
	{0.167410, -0.028664, -0.009135, 358.201873, 0.415596, 340.250427},//Skin - 228
	{0.127699, -0.015571, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 229
	{0.100555, -0.007753, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 230
	{0.126940, 0.016886, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 231
	{0.132949, -0.017515, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 232
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 233
	{0.125714, -0.021018, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 234
	{0.084982, -0.009809, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 235
	{0.114669, -0.005190, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 236
	{0.123264, -0.014946, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 237
	{0.146656, -0.023925, -0.006749, 358.201873, 0.415596, 334.356781},//Skin - 238
	{0.133769, -0.007373, -0.006749, 358.201873, 0.415596, 343.105895},//Skin - 239
	{0.165378, -0.020173, -0.005869, 358.201873, 0.415596, 348.352233},//Skin - 240
	{0.143331, -0.133577, -0.011472, 358.201873, 0.415596, 312.328857},//Skin - 241
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 242
	{0.098602, 0.002084, -0.011472, 358.201873, 0.415596, 348.195495},//Skin - 243
	{0.124240, -0.011682, -0.006423, 358.201873, 0.415596, 341.555999},//Skin - 244
	{0.158155, -0.044311, -0.005439, 358.201873, 0.415596, 336.024902},//Skin - 245
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 246
	{0.164307, -0.040974, -0.006797, 358.201873, 0.415596, 337.067047},//Skin - 247
	{0.191578, -0.040435, -0.010605, 358.201873, 0.415596, 340.908203},//Skin - 248
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 249
	{0.135208, -0.015243, -0.011916, 358.201873, 0.415596, 340.908203},//Skin - 250
	{0.134272, -0.027377, -0.006035, 358.201873, 0.415596, 333.416168},//Skin - 251
	{0.158813, -0.038977, -0.006035, 358.201873, 0.415596, 336.013519},//Skin - 252
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 253
	{0.165106, -0.048880, -0.009719, 358.201873, 0.415596, 331.050933},//Skin - 254
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 255
	{0.142586, 0.020829, -0.008549, 358.201873, 0.415596, 2.765411},//Skin - 256
	{0.134018, -0.024462, -0.008549, 358.201873, 0.415596, 339.642486},//Skin - 257
	{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 258
	{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 259
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 260
	{0.134710, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 261
	{0.111691, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 262
	{0.146077, -0.005195, -0.008114, 358.188964, 0.415596, 3.866970},//Skin - 263
	{0.135858, -0.157842, -0.008114, 358.188964, 0.415596, 314.852203},//Skin - 264
	{0.127964, 0.000132, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 265
	{0.127964, -0.002646, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 266
	{0.132329, -0.014261, -0.007384, 1.504234, 0.415596, 352.699432},//Skin - 267
	{0.145951, -0.043442, -0.010053, 1.504234, 0.415596, 320.469390},//Skin - 268
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 269
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 270
	{0.141851, -0.034538, -0.010580, 1.504234, 0.415596, 340.349456},//Skin - 271
	{0.136473, -0.057088, -0.008204, 1.504234, 0.415596, 318.134399},//Skin - 272
	{0.140332, -0.013011, -0.004432, 354.106964, 357.498840, 352.802062}, //Skin - 273
	{0.124270, 0.003252, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 274
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 275
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 276
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 277
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 278
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 279
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 280
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 281
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 282
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 283
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 284
	{0.189940, -0.004297, 0.001481, 354.106964, 357.498840, 352.802062},//Skin - 285
	{0.140515, 0.001933, -0.008204, 1.504234, 0.415596, 346.744995}, //Skin - 286
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 287
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 288
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 289
	{0.128789, -0.014062, -0.007850, 1.504234, 0.415596, 340.341094},//Skin - 290
	{0.158929, -0.027358, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 291
	{0.113309, -0.012434, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 292
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 293
	{0.158438, -0.023891, -0.007217, 1.504234, 0.415596, 337.298858},//Skin - 294
	{0.145000, -0.032054, -0.007217, 1.504234, 0.415596, 336.385589},//Skin - 295
	{0.139293, -0.069554, -0.010619, 1.504234, 0.415596, 320.746429},//Skin - 296
	{0.148252, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 297
	{0.126423, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 298
	{0.126948, -0.004690, -0.003599, 1.504233, 0.415596, 320.729705}//Skin - 299
};

new Float:SkinOffSet[300][7] = {
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 }  // - 299
};

enum SAZONE_MAIN
{
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {
	{"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

new RandomMSG[][] = {
    {"If you have a question, use (/helpme) or (/report)."},
	{"If you have a proposal for the server it uses (/propunere)."},
    {"If you do not know the city well, use (/gps)."},
    {"To listen to online music, press the Y key if you have an MP3."},
	{"To see what missions you can do, you can use (/missions)."},
	{"Stay on foot in the wilderness? You can call a taxi using the (/service taxi) command and a taxi driver will help you."},
	{"Do you want to be part of a faction? Use the (/factions) command to see free space factions."},
	{"Do you need a vehicle? Use the (/buyvehicle) command when you are at dealership."},
	{"Want to view your statistics? Use the (/stats) command."},
	{"Use the (/gps) command to see the important server locations."},
	{"Anyone upset you? Use the (/contract) command and a hitman will handle it."}
};

new RadioName[14][] = {
	{"Radio ZU"},
	{"Radio Bandit"},
	{"Radio Hit FM"},
	{"Radio Manele"},
	{"Radio Wish"},
	{"Radio Taraf FM"},
	{"Radio Pro FM"},
	{"Radio Dubstep"},
	{"Radio Digi FM"},
	{"Radio Pirate FM"},
	{"Radio Next Gen"},
	{"Radio Club Mix"},
	{"Radio Vocea Strazii"},
	{"YouTube URL"}
};

new RadioLink[13][] = {
	{"http://stream.radiozu.ro:8020"},
	{"http://live.radiobandit.ro:8000"},
	{"http://www.radio-hit.ro/asculta.m3u"},
	{"http://radioromanian.net/manele.pls"},
	{"http://www.radiowish.ro/live.m3u"},
	{"http://radiotaraf.com/live.m3u"},
	{"http://stream.profm.ro:8012/profm.mp3"},
	{"http://dubstep.fm/128.pls"},
	{"http://www.digi-fm.ro/listen.pls"},
	{"http://live.piratefm.ro:16000"},
	{"http://nextgen.go.ro:8012"},
	{"http://live.radioclubmix.ro:9999"},
	{"http://radio.voceastrazii.net:8012"}
};

new VehicleName[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
	"Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
 	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
 	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
 	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
 	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
 	"Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
 	"Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
 	"Tiller", "Utility Trailer"
};
//-------------------------------------ENUMS------------------------------------
// CHEAT
enum hack_type
{
	airbreak,
	vspawner,
	vhealth,
	vcreate,
	teleport
};
new WarningsCheat[MAX_PLAYERS][hack_type];

// VOTE
enum votInfo
{
	ProposePlayer[MAX_PLAYER_NAME],
	VotedPlayer,
	Votes
};
new VoteInfo[5][votInfo];

// DROP
enum dInfo 
{
	dID,
	dWeapon, 
	dAmmo
};
new DropInfo[MAX_PICKUPS][dInfo];

// GIFT
enum gInfo
{
	gOpen,
	Float:gLocationX,
	Float:gLocationY,
	Float:gLocationZ,
	Year,
	Days,
	Month
};
new GiftInfo[gInfo];

// STATIC VEH
enum svInfo 
{
	svID,
	svModel,
	Float:svLocationx,
	Float:svLocationy,
	Float:svLocationz,
	Float:svAngle,
	svColorOne,
	svColorTwo,
	svRespawnDelay,
	svFaction,
	svJob,
	svRank,
	svSirena,
	svLicense[32]
};
new StaticVeh[MAX_VEHICLES][svInfo];

// ATM
enum atmE
{
	rObjectId,
	Float:fATMPos[3],
	Float:fATMPosRot[3]
};
new AtmInfo[MAX_ATMS][atmE];

// STOCK
enum vInfo
{
	vID,
	vStock,
	vName[64],
	vPrice,
	vModel,
	vType
};
new Stock[MAX_STOCK_CARS][vInfo];

// DEALERSHIP
enum cInfo
{
	cID,
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[MAX_PLAYER_NAME],
	cName[64],
	cValue,
	cLicense[32],
	cOwned,
	cLock,
	cInscarprice,
	cInsurancecar,
	Float:cKM,
	cMods[17],
	cPaintJ,
	Float:cHealth,
	cSpawned,
	Float:cFuel,
	Float:cLastX,
	Float:cLastY,
	Float:cLastZ,
	Float:cLastA,
	cTime,
	cNeon,
	cDamage[4],
	cDays,
	cType
};
new CarInfo[MAX_PERSONAL_CARS][cInfo];

// EVENT INFO
enum eInfo
{
    EventType,
	EventMoney,
	EventPlayers,
	EventEnabled,
	Float:EventPosX,
	Float:EventPosY,
	Float:EventPosZ
};
new EventInfo[eInfo];

// HITMAN
enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128]
};
new News[hNews];

// CLAN
enum clanInfo
{
	ClanName[64],
	ClanOwner[MAX_PLAYER_NAME],
	ClanMOTD[MAX_STRING],
	ClanRankName1[32],
	ClanRankName2[32],
	ClanRankName3[32],
	ClanRankName4[32],
	ClanRankName5[32],
	ClanRankName6[32],
	ClanRankName7[32],
	ClanTag[10],
	ClanColor[16],
	ClanMembers
};
new ClanInfo[MAX_CLANS][clanInfo];

// FACTION
enum fInfo
{
	factionID,
	fName[64],
	fRankName1[32],
	fRankName2[32],
	fRankName3[32],
	fRankName4[32],
	fRankName5[32],
	fRankName6[32],
	Float:fHQExteriorPosX,
	Float:fHQExteriorPosY,
	Float:fHQExteriorPosZ,
	Float:fHQInteriorPosX,
	Float:fHQInteriorPosY,
	Float:fHQInteriorPosZ,
	fLeader[32],
	fMembers,
	fSafeMats,
	fSafeDrugs,
	fSafeMoney,
	fAplication,
	fSlots,
	fHQLockStatus,
	fHQInteriorID,
	fMOTD[MAX_STRING],
	Float:fSafePosX,
	Float:fSafePosY,
	Float:fSafePosZ,
	fType
};
new FactionInfo[MAX_FACTIONS][fInfo], FactionEntered[MAX_PLAYERS];

// JOBS
enum jInfo
{
    jID,
	jName[64],
	Float:JobX,
	Float:JobY,
	Float:JobZ,
	jType
};
new JobInfo[MAX_JOBS][jInfo];

// TURF
enum zInfo
{
    zID,
    zOwned,
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY
};
new TurfInfo[MAX_TURFS][zInfo], Turfs[MAX_TURFS];

// WAR
enum wInfo
{
    wFaction,
	wAttacker,
	wTime
};
new WarInfo[MAX_TURFS][wInfo], Float:WarScore[MAX_PLAYERS][MAX_TURFS], Float:WarDeaths[MAX_PLAYERS][MAX_TURFS], InWar[MAX_FACTIONS];

// PLAYER
enum pInfo
{
	pNamePlayer[MAX_PLAYER_NAME],
	pPassword[128],
	IP[32],
	pEmail[200],
	pLevel,
	pMoney,
	pAdmin,
	pHelper,
	pPremium,
	pGpoint,
	Float:pConnectTime,
	pReg,
	pSex,
	pRobSkill,
 	pRobTimes,
 	pRobRem,
	pRobPoint,
	pMuted,
	pMuteTime,
	pExp,
	pBank,
	pWantedLevel,
	pPhoneBook,
	pFishes,
	pFishPrice,
	pJob,
	pHeadValue,
	pJailed,
	pJailTime,
	pWantedTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pFactionRank,
	pSkin,
	pMatsSkill,
 	pMatsTimes,
 	pMatsRem,
	pPizzaSkill,
 	pPizzaTimes,
 	pPizzaRem,
	pFarmSkill,
 	pFarmTimes,
 	pFarmRem,
	pTruckSkill,
	pTruckTimes,
 	pTruckRem,
	pInt,
	pNumber,
	pHouseKey,
	pCarKey[10],
	pBizzKey,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pPassport,
	pCarTime,
	pTut,
	pWarns,
	pFwarn,
	pDrugPerk,
	pFuel,
	pPunish,
	pMP3,
	pGold,
	pCanistra,
	pGlasses,
	pHat,
	pFightStyle,
	pUndita,
	pMomeala,
	pFireworks,
	pBanned,
	pRented,
	pSQLID,
	pPhone,
	pClan,
	pClanRank,
	pClanWarn,
	pClanTagType,
	pFreePoint,
	pStatus,
	pColor,
	pColors[32],
	pPin[6],
	pPinLogged,
	pSeconds,
	pSpawn,
	pQuest[2],
	pQuestProgress[2],
	pNeedProgress[2],
	pHitT,
	pContracts,
	pLastDayLogs,
	pHidden,
	pVoted,
	pPropose
};
new PlayerInfo[MAX_PLAYERS][pInfo];

// HOUSE
enum hInfo
{
	houseID,
	Float:hEntranceX,
	Float:hEntranceY,
	Float:hEntranceZ,
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[64],
	hPrice,
	hHeall,
	hArmor,
	hInterior,
	hLock,
	hOwned,
	hRent,
	hRentabil,
	hLevel,
	hMoney,
	Text3D:hTextInfo,
	hPickup,
	hMapIcon,
	hRadioLink[MAX_STRING],
	hRadio,
	hRenters
};
new HouseInfo[MAX_HOUSES][hInfo], HouseEntered[MAX_PLAYERS];

// BIZZ
enum bInfo
{
    bizzID,
    bOwned,
	bOwner[64],
	bName[64],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevel,
	bPrice,
	bEntranceCost,
	bMoney,
	bLocked,
	bType,
	bInterior,
	Text3D:bTextInfo,
	bPickup,
	bMapIcon,
	bLocation
};
new BizzInfo[MAX_BUSINESS][bInfo], BizzEntered[MAX_PLAYERS];
//==============================================================================
main()
{
 	print(" ");
	print(" ******************************************* ");
	print(" *||--===----===-----=========----====---||* ");
	print(" *||   GameMode RO-RPG made by SherKan.  ||* ");
    print(" *||--===----===-----=========----====---||* ");
    print(" ******************************************* ");
    print(" ");
}
//==============================================================================
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new string[MAX_STRING], Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	if(IsABike(vehicleid)) EngineSTATE[vehicleid] = 1;
	if(StaticVeh[vehicleid][svFaction] != GetPlayerFaction(playerid) && StaticVeh[vehicleid][svFaction] > 0 && !ispassenger)
	{
		format(string,sizeof(string),"  You are not part of the %s faction.",NumeFactiune(StaticVeh[vehicleid][svFaction]));
		SCM(playerid,COLOR_GRAD2,string);
		SetPlayerPosEx(playerid,x,y,z);
	}
	else if(PlayerInfo[playerid][pFactionRank] < StaticVeh[vehicleid][svRank] && GetPlayerFaction(playerid) > 0 && !ispassenger)
	{
		format(string,sizeof(string),"	This vehicle can only be used by those with rank %d+.",StaticVeh[vehicleid][svRank]);
		SCM(playerid,COLOR_GRAD2,string);
		SetPlayerPosEx(playerid,x,y,z);
	}
	if(JobCar[playerid][PlayerInfo[playerid][pJob]] == vehicleid && StaticVeh[vehicleid][svJob] == PlayerInfo[playerid][pJob])
	{
		KillTimer_(JobTimer[playerid]);
		SCM(playerid, COLOR_JOB, "Welcome back to work!");
	}
	else if(JobCar[playerid][PlayerInfo[playerid][pJob]] != vehicleid && StaticVeh[vehicleid][svJob] != PlayerInfo[playerid][pJob] && StaticVeh[vehicleid][svJob] > 0 && !ispassenger)
	{
		format(string,sizeof(string),"	This is not your work vehicle.");
		SCM(playerid,COLOR_GRAD2,string);
		SetPlayerPosEx(playerid,x,y,z);
	}
	return 1;
}
//==============================================================================
public OnPlayerConnect(playerid)
{
	new string[256];
	CheckPlayerClanTag(playerid);
	if(fexist(UserPath(playerid))) INI_ParseFile(UserPath(playerid), "LoadUser_%s", .bExtra = true, .extra = playerid);
	//--------------------------------------------------------------
    if(FindIP(GetName(playerid)) || GasesteReclama(GetName(playerid)))
	{
		format(string, sizeof(string), "%s (%d) got kicked for using an inappropriate name.",GetName(playerid), playerid);
		SendAdminMessage(string, 1);
		Kick(playerid);
		return 0;
	}
	//--------------------------------------------------------------
	if(restartsv == 1)
	{
		SCM(playerid,COLOR_PURPLE,"* You can not connect while the server is restarted!");
		KickEx(playerid);
		return 0;
	}
	//--------------------------------------------------------------
	RemoveBuildingForPlayer(playerid, 1261, 1673.5781, -712.3750, 63.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 1715.7109, -780.3281, 68.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1715.7109, -780.3281, 68.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1673.5781, -712.3750, 63.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1268, 516.3516, -1728.4141, 25.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1268, 598.1797, -1742.0781, 27.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 598.1797, -1742.0781, 27.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 516.3516, -1728.4141, 25.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1581.1172, -887.1016, 58.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1581.1172, -887.1016, 58.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 878.0234, -1686.8125, 11.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 862.7734, -1686.7422, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1430.1719, -1719.4688, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.6250, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1467.9844, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1485.1719, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1702.3594, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1676.6875, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1656.2500, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1636.2344, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1619.0547, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1443.2031, -1592.9453, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 4206, 1479.5547, -1639.6094, 13.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1466.4844, -1598.0938, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.3359, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1471.3516, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1488.5313, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1498.0547, -1598.0938, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1504.8906, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1721.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1705.2734, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1688.0859, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1673.7109, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1668.0781, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1647.6406, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1621.9609, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1528.9531, -1605.8594, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 672, -35.7109, 18.1016, 3.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 672, -15.2109, 94.8438, 3.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 672, -149.3359, -160.5078, 3.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3326, 769.2031, -501.3984, 18.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 13484, 738.3984, -553.9844, 21.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 773.7969, -517.9688, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3407, 759.5391, -520.0703, 15.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3317, 769.2031, -501.3984, 18.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 774.0469, -486.0703, 14.6328, 0.25);
	//--------------------------------------------------------------
	format(string, sizeof(string), "Red~w~~h~Line %s", GetName(playerid));
    NumePlayer = CreatePlayerTextDraw(playerid, 600.0, 435.0, string);
    PlayerTextDrawAlignment(playerid, NumePlayer, 3);
    PlayerTextDrawBackgroundColor(playerid, NumePlayer, 255);
    PlayerTextDrawFont(playerid, NumePlayer, 1);
    PlayerTextDrawLetterSize(playerid, NumePlayer, 0.3, 1.1);
    PlayerTextDrawColor(playerid, NumePlayer, 0x0000ffff);
    PlayerTextDrawSetOutline(playerid, NumePlayer, 1);
	PlayerTextDrawSetProportional(playerid, NumePlayer, 1);
	//--------------------------------------------------------------
	InfoTD = CreatePlayerTextDraw(playerid, 20.0, 430.0, "~b~tick:%d ~p~anim:%d");
	PlayerTextDrawLetterSize(playerid, InfoTD, 0.30, 1.31);
	PlayerTextDrawAlignment(playerid, InfoTD, 1);
	PlayerTextDrawColor(playerid, InfoTD, -1);
	PlayerTextDrawSetShadow(playerid, InfoTD, 1);
	PlayerTextDrawSetOutline(playerid, InfoTD, 1);
	PlayerTextDrawBackgroundColor(playerid, InfoTD, 108);
	PlayerTextDrawFont(playerid, InfoTD, 3);
	PlayerTextDrawSetProportional(playerid, InfoTD, 1);
	//--------------------------------------------------------------
	FarmJob = CreatePlayerTextDraw(playerid, 6.399997, 183.679962, "Job info");
	PlayerTextDrawLetterSize(playerid, FarmJob, 0.50, 1.50);
	PlayerTextDrawAlignment(playerid, FarmJob, 1);
	PlayerTextDrawColor(playerid, FarmJob, -1);
	PlayerTextDrawSetShadow(playerid, FarmJob, 0);
	PlayerTextDrawSetOutline(playerid, FarmJob, 1);
	PlayerTextDrawBackgroundColor(playerid, FarmJob, 51);
	PlayerTextDrawFont(playerid, FarmJob, 0);
	PlayerTextDrawSetProportional(playerid, FarmJob, 1);
	//--------------------------------------------------------------
	FarmSpeed = CreatePlayerTextDraw(playerid, 3.199995, 219.519958, "~r~~h~(!) Trebuie sa mergi cu o viteza mai mare de 25 KM/H.");
	PlayerTextDrawLetterSize(playerid, FarmSpeed, 0.20, 1.55);
	PlayerTextDrawAlignment(playerid, FarmSpeed, 1);
	PlayerTextDrawColor(playerid, FarmSpeed, -1);
	PlayerTextDrawSetShadow(playerid, FarmSpeed, 0);
	PlayerTextDrawSetOutline(playerid, FarmSpeed, 1);
	PlayerTextDrawBackgroundColor(playerid, FarmSpeed, 255);
	PlayerTextDrawFont(playerid, FarmSpeed, 1);
	PlayerTextDrawSetProportional(playerid, FarmSpeed, 1);
	//--------------------------------------------------------------
	FarmTime = CreatePlayerTextDraw(playerid, 2.399992, 203.093383, " ");
	PlayerTextDrawLetterSize(playerid, FarmTime, 0.20, 1.60);
	PlayerTextDrawAlignment(playerid, FarmTime, 1);
	PlayerTextDrawColor(playerid, FarmTime, COLOR_WHITE);
	PlayerTextDrawSetShadow(playerid, FarmTime, 0);
	PlayerTextDrawSetOutline(playerid, FarmTime, 1);
	PlayerTextDrawBackgroundColor(playerid, FarmTime, 255);
	PlayerTextDrawFont(playerid, FarmTime, 1);
	PlayerTextDrawSetProportional(playerid, FarmTime, 1);
	//--------------------------------------------------------------
	FarmWanted = CreatePlayerTextDraw(playerid, 2.400026, 219.520034, "~r~~h~Intoarcete inapoi la ferma!");
	PlayerTextDrawLetterSize(playerid, FarmWanted, 0.25, 1.70);
	PlayerTextDrawAlignment(playerid, FarmWanted, 1);
	PlayerTextDrawColor(playerid, FarmWanted, -1);
	PlayerTextDrawSetShadow(playerid, FarmWanted, 0);
	PlayerTextDrawSetOutline(playerid, FarmWanted, 1);
	PlayerTextDrawBackgroundColor(playerid, FarmWanted, 255);
	PlayerTextDrawFont(playerid, FarmWanted, 1);
	PlayerTextDrawSetProportional(playerid, FarmWanted, 1);
	//--------------------------------------------------------------
	FuelText = CreatePlayerTextDraw(playerid, 40.0, 305.0, "~b~~h~Refueling...~n~~n~~w~Price: ~g~~h~0$ ~y~~h~(0.0L)");
	PlayerTextDrawBackgroundColor(playerid, FuelText, 255);
	PlayerTextDrawFont(playerid, FuelText, 1);
	PlayerTextDrawLetterSize(playerid, FuelText, 0.24, 1.10);
	PlayerTextDrawColor(playerid, FuelText, -1);
	PlayerTextDrawSetOutline(playerid, FuelText, 1);
	PlayerTextDrawSetProportional(playerid, FuelText, 1);
	PlayerTextDrawSetSelectable(playerid, FuelText, 0);
	//--------------------------------------------------------------
	TaxiTD = CreatePlayerTextDraw(playerid, 45.300, 320.200, " ");
	PlayerTextDrawLetterSize(playerid, TaxiTD, 0.244333, 1.716147);
	PlayerTextDrawAlignment(playerid, TaxiTD, 1);
	PlayerTextDrawColor(playerid, TaxiTD, -1);
	PlayerTextDrawSetShadow(playerid, TaxiTD, 0);
	PlayerTextDrawSetOutline(playerid, TaxiTD, 1);
	PlayerTextDrawBackgroundColor(playerid, TaxiTD, 255);
	PlayerTextDrawFont(playerid, TaxiTD, 3);
	PlayerTextDrawSetProportional(playerid, TaxiTD, 1);
	//--------------------------------------------------------------
	HouseUpgradeTD = CreatePlayerTextDraw(playerid, 265.000, 363.000, "House Upgrade~n~~n~~r~< ~w~Gold: ~g~3000 ~r~>");
	PlayerTextDrawBackgroundColor(playerid, HouseUpgradeTD, 255);
	PlayerTextDrawFont(playerid, HouseUpgradeTD, 2);
	PlayerTextDrawLetterSize(playerid, HouseUpgradeTD, 0.35, 1.2);
	PlayerTextDrawColor(playerid, HouseUpgradeTD, -1);
	PlayerTextDrawSetOutline(playerid, HouseUpgradeTD, 1);
	PlayerTextDrawSetProportional(playerid, HouseUpgradeTD, 1);
	//--------------------------------------------------------------
	FarmBox = CreatePlayerTextDraw(playerid, 199.599990, 185.926666, "usebox");
	PlayerTextDrawLetterSize(playerid, FarmBox, 0.00, 7.15);
	PlayerTextDrawTextSize(playerid, FarmBox, -3.60, 0.00);
	PlayerTextDrawAlignment(playerid, FarmBox, 1);
	PlayerTextDrawColor(playerid, FarmBox, 0);
	PlayerTextDrawUseBox(playerid, FarmBox, true);
	PlayerTextDrawBoxColor(playerid, FarmBox, 102);
	PlayerTextDrawSetShadow(playerid, FarmBox, 0);
	PlayerTextDrawSetOutline(playerid, FarmBox, 0);
	PlayerTextDrawFont(playerid, FarmBox, 0);
	//--------------------------------------------------------------
	PaintballTD[0] = CreatePlayerTextDraw(playerid, 220.0, 425.0, "You have 0 kills and 0 deaths");
	PlayerTextDrawLetterSize(playerid, PaintballTD[0], 0.30, 1.50);
	PlayerTextDrawAlignment(playerid, PaintballTD[0], 1);
	PlayerTextDrawColor(playerid, PaintballTD[0], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[0], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[0], 1);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[0], 255);
	PlayerTextDrawFont(playerid, PaintballTD[0], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[0], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[0], 0);
	//--------------------------------------------------------------
	PaintballTD[1] = CreatePlayerTextDraw(playerid, 230.0, 410.0, "Round started in 10");
	PlayerTextDrawLetterSize(playerid, PaintballTD[1], 0.30, 1.50);
	PlayerTextDrawAlignment(playerid, PaintballTD[1], 1);
	PlayerTextDrawColor(playerid, PaintballTD[1], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[1], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[1], 1);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[1], 255);
	PlayerTextDrawFont(playerid, PaintballTD[1], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[1], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[1], 0);
	//--------------------------------------------------------------
	CarSpeedoTD[0] = CreatePlayerTextDraw(playerid, 560.0, 144.0, "Combustibil: 100");
	PlayerTextDrawBackgroundColor(playerid, CarSpeedoTD[0], 255);
	PlayerTextDrawFont(playerid, CarSpeedoTD[0], 1);
	PlayerTextDrawLetterSize(playerid, CarSpeedoTD[0], 0.35, 1.0);
	PlayerTextDrawAlignment(playerid, CarSpeedoTD[0], 2);
	PlayerTextDrawColor(playerid, CarSpeedoTD[0], -1);
	PlayerTextDrawSetOutline(playerid, CarSpeedoTD[0], 1);
	PlayerTextDrawSetProportional(playerid, CarSpeedoTD[0], 1);
	PlayerTextDrawSetShadow(playerid, CarSpeedoTD[0], 1);
	//--------------------------------------------------------------
	CarSpeedoTD[1] = CreatePlayerTextDraw(playerid, 560.0, 155.0, "Viteza: 0 Km/h");
	PlayerTextDrawBackgroundColor(playerid, CarSpeedoTD[1], 255);
	PlayerTextDrawFont(playerid, CarSpeedoTD[1], 1);
	PlayerTextDrawLetterSize(playerid, CarSpeedoTD[1], 0.35, 1.0);
	PlayerTextDrawAlignment(playerid, CarSpeedoTD[1], 2);
	PlayerTextDrawColor(playerid, CarSpeedoTD[1], -1);
	PlayerTextDrawSetOutline(playerid, CarSpeedoTD[1], 1);
	PlayerTextDrawSetProportional(playerid, CarSpeedoTD[1], 1);
	PlayerTextDrawSetShadow(playerid, CarSpeedoTD[1], 1);
	//--------------------------------------------------------------
	CarSpeedoTD[2] = CreatePlayerTextDraw(playerid, 560.0, 166.0, "Status: Deschisa");
	PlayerTextDrawBackgroundColor(playerid, CarSpeedoTD[2], 255);
	PlayerTextDrawFont(playerid, CarSpeedoTD[2], 1);
	PlayerTextDrawLetterSize(playerid, CarSpeedoTD[2], 0.35, 1.0);
	PlayerTextDrawAlignment(playerid, CarSpeedoTD[2], 2);
	PlayerTextDrawColor(playerid, CarSpeedoTD[2], -1);
	PlayerTextDrawSetOutline(playerid, CarSpeedoTD[2], 1);
	PlayerTextDrawSetProportional(playerid, CarSpeedoTD[2], 1);
	PlayerTextDrawSetShadow(playerid, CarSpeedoTD[2], 1);
	//--------------------------------------------------------------
	CarSpeedoTD[3] = CreatePlayerTextDraw(playerid, 560.0, 177.0, "Kilometraj: 100.0 Km");
	PlayerTextDrawBackgroundColor(playerid, CarSpeedoTD[3], 255);
	PlayerTextDrawFont(playerid, CarSpeedoTD[3], 1);
	PlayerTextDrawLetterSize(playerid, CarSpeedoTD[3], 0.35, 1.0);
	PlayerTextDrawColor(playerid, CarSpeedoTD[3], -1);
	PlayerTextDrawAlignment(playerid, CarSpeedoTD[3], 2);
	PlayerTextDrawSetOutline(playerid, CarSpeedoTD[3], 1);
	PlayerTextDrawSetProportional(playerid, CarSpeedoTD[3], 1);
	PlayerTextDrawSetShadow(playerid, CarSpeedoTD[3], 1);
	//--------------------------------------------------------------
	WarTime = CreatePlayerTextDraw(playerid, 474.0, 300.0, "Turf time 20:00 min");
	PlayerTextDrawBackgroundColor(playerid, WarTime, 255);
	PlayerTextDrawLetterSize(playerid, WarTime, 0.38, 1.5);
	PlayerTextDrawColor(playerid, WarTime, 0xFFFFFFFF);
	PlayerTextDrawSetShadow(playerid, WarTime, 1);
	PlayerTextDrawSetOutline(playerid, WarTime, 1);
	PlayerTextDrawFont(playerid, WarTime, 2);
	//--------------------------------------------------------------
	FindTD = CreatePlayerTextDraw(playerid, 625.0, 410.0, "Distanta: 0 metri");
	PlayerTextDrawLetterSize(playerid, FindTD, 0.3, 1.05);
	PlayerTextDrawAlignment(playerid, FindTD, 3);
	PlayerTextDrawColor(playerid, FindTD, COLOR_LIGHT_RED);
	PlayerTextDrawSetShadow(playerid, FindTD, 1);
	PlayerTextDrawSetOutline(playerid, FindTD, 1);
	PlayerTextDrawBackgroundColor(playerid, FindTD, 255);
	PlayerTextDrawFont(playerid, FindTD, 1);
	PlayerTextDrawSetProportional(playerid, FindTD, 1);
	//--------------------------------------------------------------
	WantedTime = CreatePlayerTextDraw(playerid, 480.0, 122.0, "Wanted scade in ~h~~r~~h~~h~1000 secunde");
	PlayerTextDrawLetterSize(playerid, WantedTime, 0.3, 1.8);
	PlayerTextDrawAlignment(playerid, WantedTime, 1);
	PlayerTextDrawColor(playerid, WantedTime, COLOR_WHITE);
	PlayerTextDrawSetOutline(playerid, WantedTime, 1);
	PlayerTextDrawBackgroundColor(playerid, WantedTime, 255);
	PlayerTextDrawFont(playerid, WantedTime, 1);
	PlayerTextDrawSetProportional(playerid, WantedTime, 1);
	//--------------------------------------------------------------
	UndercoverText = CreatePlayerTextDraw(playerid, 250.0, 374.0, "~r~~h~undercover activat");
	PlayerTextDrawBackgroundColor(playerid, UndercoverText, 255);
	PlayerTextDrawFont(playerid, UndercoverText, 3);
	PlayerTextDrawLetterSize(playerid, UndercoverText, 0.55, 1.50);
	PlayerTextDrawColor(playerid, UndercoverText, -1);
	PlayerTextDrawSetOutline(playerid, UndercoverText, 0);
	PlayerTextDrawSetProportional(playerid, UndercoverText, 1);
	PlayerTextDrawSetShadow(playerid, UndercoverText, 1);
	//--------------------------------------------------------------
	JailTime = CreatePlayerTextDraw(playerid, 2.0, 434.0, "Timp ramas la inchisoare 1000 sec");
	PlayerTextDrawAlignment(playerid, JailTime, 0);
	PlayerTextDrawBackgroundColor(playerid, JailTime, COLOR_BLACK);
	PlayerTextDrawFont(playerid, JailTime, 1);
	PlayerTextDrawLetterSize(playerid, JailTime, 0.3, 1.2);
	PlayerTextDrawColor(playerid, JailTime, 0xFF9900FF);
	PlayerTextDrawSetOutline(playerid, JailTime, 1);
	PlayerTextDrawSetProportional(playerid, JailTime, 1);
	PlayerTextDrawSetShadow(playerid, JailTime, 1);
	//--------------------------------------------------------------
	SafeZone = CreatePlayerTextDraw(playerid, 4.40, 347.0, "S~n~a~n~f~n~e~n~Z~n~o~n~n~n~e");
	PlayerTextDrawLetterSize(playerid, SafeZone, 0.42, 1.36);
	PlayerTextDrawAlignment(playerid, SafeZone, 1);
	PlayerTextDrawAlignment(playerid, SafeZone, 1);
	PlayerTextDrawColor(playerid, SafeZone, 0x00CC33AA);
	PlayerTextDrawSetOutline(playerid, SafeZone, 1);
	PlayerTextDrawBackgroundColor(playerid, SafeZone, 255);
	PlayerTextDrawFont(playerid, SafeZone, 3);
	PlayerTextDrawSetProportional(playerid, SafeZone, 1);
	//--------------------------------------------------------------
	HealthTD = CreatePlayerTextDraw(playerid, 565.6250, 66.50, "69.0");
	PlayerTextDrawLetterSize(playerid, HealthTD, 0.296249, 0.876664);
	PlayerTextDrawAlignment(playerid, HealthTD, 1);
	PlayerTextDrawColor(playerid, HealthTD, 0xFFCC99FF);
	PlayerTextDrawSetShadow(playerid, HealthTD, 0);
	PlayerTextDrawSetOutline(playerid, HealthTD, 1);
	PlayerTextDrawBackgroundColor(playerid, HealthTD, 51);
	PlayerTextDrawFont(playerid, HealthTD, 3);
	PlayerTextDrawSetProportional(playerid, HealthTD, 1);
	//--------------------------------------------------------------
	FramesTD = CreatePlayerTextDraw(playerid, 618.0, 434.0, "100");
	PlayerTextDrawAlignment(playerid, FramesTD,0);
	PlayerTextDrawBackgroundColor(playerid, FramesTD, 255);
	PlayerTextDrawFont(playerid, FramesTD,1);
	PlayerTextDrawLetterSize(playerid, FramesTD,0.3,1.2);
	PlayerTextDrawColor(playerid, FramesTD,-65281);
	PlayerTextDrawSetOutline(playerid, FramesTD,1);
	PlayerTextDrawSetProportional(playerid, FramesTD,1);
	PlayerTextDrawSetShadow(playerid, FramesTD,1);
	//--------------------------------------------------------------
	PizzaSimbol = CreatePlayerTextDraw(playerid, 500.0, 200.0, "Pizzaboy");
  	PlayerTextDrawBackgroundColor(playerid, PizzaSimbol, 0);
  	PlayerTextDrawFont(playerid, PizzaSimbol, 5);
  	PlayerTextDrawLetterSize(playerid, PizzaSimbol, 0.50, 1.00);
  	PlayerTextDrawColor(playerid, PizzaSimbol, -1);
  	PlayerTextDrawSetOutline(playerid, PizzaSimbol, 0);
  	PlayerTextDrawSetProportional(playerid, PizzaSimbol, 1);
 	PlayerTextDrawSetShadow(playerid, PizzaSimbol, 1);
 	PlayerTextDrawUseBox(playerid, PizzaSimbol, 1);
  	PlayerTextDrawBoxColor(playerid, PizzaSimbol, 0);
  	PlayerTextDrawTextSize(playerid, PizzaSimbol, 30.00, 30.00);
  	PlayerTextDrawSetSelectable(playerid, PizzaSimbol, 0);
  	PlayerTextDrawSetPreviewModel(playerid, PizzaSimbol, 1582);
  	PlayerTextDrawSetPreviewRot(playerid, PizzaSimbol, 120.0, 0.0, 0.0, 1.0);
	//--------------------------------------------------------------
    PizzaText = CreatePlayerTextDraw(playerid, 530.0, 210.0, "Pizza: ~r~3~w~ /~g~ 5");
  	PlayerTextDrawBackgroundColor(playerid, PizzaText, 255);
  	PlayerTextDrawFont(playerid, PizzaText, 1);
  	PlayerTextDrawLetterSize(playerid, PizzaText, 0.30, 1.00);
  	PlayerTextDrawColor(playerid, PizzaText, -1);
  	PlayerTextDrawSetOutline(playerid, PizzaText, 1);
  	PlayerTextDrawSetProportional(playerid, PizzaText, 1);
	PlayerTextDrawAlignment(playerid, PizzaText, 1);
	PlayerTextDrawSetShadow(playerid, PizzaText, 1);
	//--------------------------------------------------------------
	DealerShipModel = CreatePlayerTextDraw(playerid, 450.0, 175.50, "_");
	PlayerTextDrawFont(playerid, DealerShipModel, TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawUseBox(playerid, DealerShipModel, 1);
	PlayerTextDrawBoxColor(playerid, DealerShipModel, 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipModel, 0);
	PlayerTextDrawTextSize(playerid, DealerShipModel, 100.0, 100.0);
	PlayerTextDrawSetPreviewModel(playerid, DealerShipModel, 411);
	PlayerTextDrawSetPreviewRot(playerid, DealerShipModel, -6.5, 0.0, -20.0, 0.75);
	PlayerTextDrawSetPreviewVehCol(playerid, DealerShipModel, 1, 1);
	//--------------------------------------------------------------
	RedButton = CreatePlayerTextDraw(playerid, 330.307556, 302.750061, " ");
	PlayerTextDrawLetterSize(playerid, RedButton, 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, RedButton, 350.922637, 23.916666);
	PlayerTextDrawAlignment(playerid, RedButton, 1);
	PlayerTextDrawColor(playerid, RedButton, -16776961);
	PlayerTextDrawSetShadow(playerid, RedButton, 0);
	PlayerTextDrawSetOutline(playerid, RedButton, 0);
	PlayerTextDrawBackgroundColor(playerid, RedButton, 51);
	PlayerTextDrawFont(playerid, RedButton, 1);
	PlayerTextDrawSetProportional(playerid, RedButton, 1);
	PlayerTextDrawSetSelectable(playerid, RedButton, true);
	//--------------------------------------------------------------
	VehicleInfoTD[0] = CreatePlayerTextDraw(playerid, 143.125, 193.50, "_");
	PlayerTextDrawLetterSize(playerid, VehicleInfoTD[0], 0.822500, 14.701669);
	PlayerTextDrawTextSize(playerid, VehicleInfoTD[0], 512.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, VehicleInfoTD[0], 1);
	PlayerTextDrawColor(playerid, VehicleInfoTD[0], -1);
	PlayerTextDrawUseBox(playerid, VehicleInfoTD[0], 1);
	PlayerTextDrawBoxColor(playerid, VehicleInfoTD[0], 255);
	PlayerTextDrawSetShadow(playerid, VehicleInfoTD[0], 0);
	PlayerTextDrawSetOutline(playerid, VehicleInfoTD[0], 138);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[0], 255);
	PlayerTextDrawFont(playerid, VehicleInfoTD[0], 1);
	PlayerTextDrawSetProportional(playerid, VehicleInfoTD[0], 0);
	//--------------------------------------------------------------
	VehicleInfoTD[1] = CreatePlayerTextDraw(playerid, 145.0, 264.666564, "Kilometraj: 0.11");
	PlayerTextDrawLetterSize(playerid, VehicleInfoTD[1], 0.31, 0.86);
	PlayerTextDrawAlignment(playerid, VehicleInfoTD[1], 1);
	PlayerTextDrawColor(playerid, VehicleInfoTD[1], -1);
	PlayerTextDrawSetShadow(playerid, VehicleInfoTD[1], 0);
	PlayerTextDrawSetOutline(playerid, VehicleInfoTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[1], 255);
	PlayerTextDrawFont(playerid, VehicleInfoTD[1], 1);
	PlayerTextDrawSetProportional(playerid, VehicleInfoTD[1], 1);
	//--------------------------------------------------------------
	VehicleInfoTD[2] = CreatePlayerTextDraw(playerid, 326.250, 264.666564, "Puncte de asigurare: 10");
	PlayerTextDrawLetterSize(playerid, VehicleInfoTD[2], 0.31, 0.86);
	PlayerTextDrawAlignment(playerid, VehicleInfoTD[2], 1);
	PlayerTextDrawColor(playerid, VehicleInfoTD[2], -1);
	PlayerTextDrawSetShadow(playerid, VehicleInfoTD[2], 0);
	PlayerTextDrawSetOutline(playerid, VehicleInfoTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[2], 255);
	PlayerTextDrawFont(playerid, VehicleInfoTD[2], 1);
	PlayerTextDrawSetProportional(playerid, VehicleInfoTD[2], 1);
	//--------------------------------------------------------------
	VehicleInfoTD[3] = CreatePlayerTextDraw(playerid, 145.00, 192.916656, "Vehicul: Infernus");
	PlayerTextDrawLetterSize(playerid, VehicleInfoTD[3], 0.40, 1.60);
	PlayerTextDrawAlignment(playerid, VehicleInfoTD[3], 1);
	PlayerTextDrawColor(playerid, VehicleInfoTD[3], -1);
	PlayerTextDrawSetShadow(playerid, VehicleInfoTD[3], 0);
	PlayerTextDrawSetOutline(playerid, VehicleInfoTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[3], 255);
	PlayerTextDrawFont(playerid, VehicleInfoTD[3], 1);
	PlayerTextDrawSetProportional(playerid, VehicleInfoTD[3], 1);
	//--------------------------------------------------------------
	VehicleInfoTD[4] = CreatePlayerTextDraw(playerid, 350.00, 175.500, "_");
	PlayerTextDrawFont(playerid, VehicleInfoTD[4], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawUseBox(playerid, VehicleInfoTD[4], 1);
	PlayerTextDrawBoxColor(playerid, VehicleInfoTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[4], 0);
	PlayerTextDrawTextSize(playerid, VehicleInfoTD[4], 100.0, 100.0);
	PlayerTextDrawSetPreviewModel(playerid, VehicleInfoTD[4], 411);
	PlayerTextDrawSetPreviewRot(playerid, VehicleInfoTD[4], -6.5, 0.0, -20.0, 0.75);
	PlayerTextDrawSetPreviewVehCol(playerid, VehicleInfoTD[4], 1, 1);
	//--------------------------------------------------------------
	VehicleInfoTD[5] = CreatePlayerTextDraw(playerid, 295.00, 310.166656, "Inchide");
	PlayerTextDrawLetterSize(playerid, VehicleInfoTD[5], 0.40, 1.60);
	PlayerTextDrawAlignment(playerid, VehicleInfoTD[5], 1);
	PlayerTextDrawColor(playerid, VehicleInfoTD[5], -1);
	PlayerTextDrawSetShadow(playerid, VehicleInfoTD[5], 0);
	PlayerTextDrawSetOutline(playerid, VehicleInfoTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[5], 255);
	PlayerTextDrawFont(playerid, VehicleInfoTD[5], 1);
	PlayerTextDrawSetProportional(playerid, VehicleInfoTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, VehicleInfoTD[5], true);
	//--------------------------------------------------------------
	VehicleInfoTD[6] = CreatePlayerTextDraw(playerid, 170.00, 221.50, "Disponibil");
	PlayerTextDrawLetterSize(playerid, VehicleInfoTD[6], 0.51, 2.12);
	PlayerTextDrawAlignment(playerid, VehicleInfoTD[6], 1);
	PlayerTextDrawColor(playerid, VehicleInfoTD[6], -1);
	PlayerTextDrawSetShadow(playerid, VehicleInfoTD[6], 0);
	PlayerTextDrawSetOutline(playerid, VehicleInfoTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, VehicleInfoTD[6], 255);
	PlayerTextDrawFont(playerid, VehicleInfoTD[6], 1);
	PlayerTextDrawSetProportional(playerid, VehicleInfoTD[6], 1);
	//--------------------------------------------------------------
	GreenButton = CreatePlayerTextDraw(playerid, 273.615997, 303.333343, " ");
	PlayerTextDrawLetterSize(playerid, GreenButton, 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, GreenButton, 291.420501, 23.916666);
	PlayerTextDrawAlignment(playerid, GreenButton, 1);
	PlayerTextDrawColor(playerid, GreenButton, 16711935);
	PlayerTextDrawSetShadow(playerid, GreenButton, 0);
	PlayerTextDrawSetOutline(playerid, GreenButton, 0);
	PlayerTextDrawBackgroundColor(playerid, GreenButton, 51);
	PlayerTextDrawFont(playerid, GreenButton, 1);
	PlayerTextDrawSetProportional(playerid, GreenButton, 1);
	PlayerTextDrawSetSelectable(playerid, GreenButton, true);
	//--------------------------------------------------------------
	PinNumber[0] = CreatePlayerTextDraw(playerid, 306.043579, 297.166656, "0");
	PlayerTextDrawTextSize(playerid, PinNumber[0], 317.188842, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[0], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[0], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[0], 1);
	PlayerTextDrawColor(playerid, PinNumber[0], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[0], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[0], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[0], 255);
	PlayerTextDrawFont(playerid, PinNumber[0], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[0], 1);
	//--------------------------------------------------------------
	PinNumber[1] = CreatePlayerTextDraw(playerid, 277.364654, 205.916732, "1");
	PlayerTextDrawTextSize(playerid, PinNumber[1], 289.077880, 24.500007);
	PlayerTextDrawSetSelectable(playerid, PinNumber[1], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[1], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[1], 1);
	PlayerTextDrawColor(playerid, PinNumber[1], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[1], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[1], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[1], 255);
	PlayerTextDrawFont(playerid, PinNumber[1], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[1], 1);
	//--------------------------------------------------------------
	PinNumber[2] = CreatePlayerTextDraw(playerid, 306.007659, 206.333404, "2");
	PlayerTextDrawTextSize(playerid, PinNumber[2], 317.188842, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[2], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[2], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[2], 1);
	PlayerTextDrawColor(playerid, PinNumber[2], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[2], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[2], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[2], 255);
	PlayerTextDrawFont(playerid, PinNumber[2], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[2], 1);
	//--------------------------------------------------------------
	PinNumber[3] = CreatePlayerTextDraw(playerid, 335.119171, 206.166748, "3");
	PlayerTextDrawTextSize(playerid, PinNumber[3], 346.705810, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[3], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[3], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[3], 1);
	PlayerTextDrawColor(playerid, PinNumber[3], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[3], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[3], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[3], 255);
	PlayerTextDrawFont(playerid, PinNumber[3], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[3], 1);
	//--------------------------------------------------------------
	PinNumber[4] = CreatePlayerTextDraw(playerid, 275.679809, 236.916748, "4");
	PlayerTextDrawTextSize(playerid, PinNumber[4], 289.077880, 24.500007);
	PlayerTextDrawSetSelectable(playerid, PinNumber[4], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[4], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[4], 1);
	PlayerTextDrawColor(playerid, PinNumber[4], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[4], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[4], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[4], 255);
	PlayerTextDrawFont(playerid, PinNumber[4], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[4], 1);
	//--------------------------------------------------------------
	PinNumber[5] = CreatePlayerTextDraw(playerid, 306.196807, 237.333404, "5");
	PlayerTextDrawTextSize(playerid, PinNumber[5], 317.188842, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[5], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[5], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[5], 1);
	PlayerTextDrawColor(playerid, PinNumber[5], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[5], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[5], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[5], 255);
	PlayerTextDrawFont(playerid, PinNumber[5], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[5], 1);
	//--------------------------------------------------------------
	PinNumber[6] = CreatePlayerTextDraw(playerid, 335.308410, 237.166763, "6");
	PlayerTextDrawTextSize(playerid, PinNumber[6], 346.705810, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[6], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[6], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[6], 1);
	PlayerTextDrawColor(playerid, PinNumber[6], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[6], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[6], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[6], 255);
	PlayerTextDrawFont(playerid, PinNumber[6], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[6], 1);
	//--------------------------------------------------------------
	PinNumber[7] = CreatePlayerTextDraw(playerid, 277.274658, 267.333404, "7");
	PlayerTextDrawTextSize(playerid, PinNumber[7], 289.077880, 24.500007);
	PlayerTextDrawSetSelectable(playerid, PinNumber[7], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[7], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[7], 1);
	PlayerTextDrawColor(playerid, PinNumber[7], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[7], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[7], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[7], 255);
	PlayerTextDrawFont(playerid, PinNumber[7], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[7], 1);
	//--------------------------------------------------------------
	PinNumber[8] = CreatePlayerTextDraw(playerid, 305.917602, 267.166748, "8");
	PlayerTextDrawTextSize(playerid, PinNumber[8], 317.188842, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[8], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[8], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[8], 1);
	PlayerTextDrawColor(playerid, PinNumber[8], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[8], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[8], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[8], 255);
	PlayerTextDrawFont(playerid, PinNumber[8], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[8], 1);
	//--------------------------------------------------------------
	PinNumber[9] = CreatePlayerTextDraw(playerid, 335.029083, 267.583404, "9");
	PlayerTextDrawTextSize(playerid, PinNumber[9], 346.705810, 23.916666);
	PlayerTextDrawSetSelectable(playerid, PinNumber[9], 1);
	PlayerTextDrawLetterSize(playerid, PinNumber[9], 0.599927, 2.790002);
	PlayerTextDrawAlignment(playerid, PinNumber[9], 1);
	PlayerTextDrawColor(playerid, PinNumber[9], -1);
	PlayerTextDrawSetShadow(playerid, PinNumber[9], 0);
	PlayerTextDrawSetOutline(playerid, PinNumber[9], 0);
	PlayerTextDrawBackgroundColor(playerid, PinNumber[9], 255);
	PlayerTextDrawFont(playerid, PinNumber[9], 3);
	PlayerTextDrawSetProportional(playerid, PinNumber[9], 1);
	//--------------------------------------------------------------
	PinResult = CreatePlayerTextDraw(playerid, 284.861328, 173.833236, "");
	PlayerTextDrawLetterSize(playerid, PinResult, 0.483262, 2.469165);
	PlayerTextDrawAlignment(playerid, PinResult, 2);
	PlayerTextDrawColor(playerid, PinResult, -5963521);
	PlayerTextDrawSetShadow(playerid, PinResult, 0);
	PlayerTextDrawSetOutline(playerid, PinResult, 0);
	PlayerTextDrawBackgroundColor(playerid, PinResult, 51);
	PlayerTextDrawFont(playerid, PinResult, 0);
	PlayerTextDrawSetProportional(playerid, PinResult, 1);
	//--------------------------------------------------------------
	FindBar = CreatePlayerProgressBar(playerid, 505.0, 120.0, 100.0, 2.0, 0x42d1f4ff);
	//--------------------------------------------------------------
	CheckVariables(playerid);
	//--------------------------------------------------------------
	SetPlayerColor(playerid, COLOR_GRAD2);
	//--------------------------------------------------------------
	TempBanCheck(playerid);
	return 1;
}
//==============================================================================
public OnPlayerDisconnect(playerid, reason)
{
	UpdatePlayerStatus(playerid);
    new string[256], vehicleid = GetPlayerVehicleID(playerid);
    switch(reason)
	{
	    case 0: format(string,sizeof(string)," * %s has left the server. (Crash)",GetName(playerid));
	    case 1: format(string,sizeof(string)," * %s has left the server. (Quit)",GetName(playerid));
	    case 2: format(string,sizeof(string)," * %s has left the server. (Kicked/Banned)",GetName(playerid));
	}
	ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	//--------------------------------------------------------------
	Remove_Iterator(playerid);
    if(gPlayerLogged[playerid] != false)
	{
		UpdateVar(playerid, "LastDayLogs", gettime());
		//--------------------------------------------------------------
	    OnPlayerUpdateEx(playerid);
		pUpdate(playerid, pPunishx);
		pUpdate(playerid, pFactionRankx);
		pUpdate(playerid, pBankx);
		pUpdate(playerid, pRPx);
		pUpdate(playerid, pMatsx);
		pUpdate(playerid, pDrugsx);
		pUpdate(playerid, pGoldx);
		pUpdate(playerid, pFWarnsx);
		pUpdate(playerid, pFreePointx);
		pUpdate(playerid, pJailedx);
		pUpdate(playerid, pWantedTimex);
	}
	if(viddd[playerid] != 0)
	{
	    DestroyVehicleEx(viddd[playerid]);
	    viddd[playerid] = 0;
	}
	if(ExamCar[playerid] != 0)
	{
	    DestroyVehicleEx(ExamCar[playerid]);
	    ExamCar[playerid] = 0;
	}
	if(AdvPlayer[playerid] != 0)
	{
		KillTimer_(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		StrmidEx(AdvMSG[playerid], "");
	}
	if(RentTime[playerid] > 0 && HireCar[playerid] != -1) {
		CarRented[GetPVarInt(playerid,"RentCar")] = 0;
	}
	//--------------------------------------------------------------
	UpdateVar(playerid, "Status", 0);
	//--------------------------------------------------------------
	foreach(new i: Player)
	{
	    if(TaxiAccepted[i] != -1)
		{
			if(TaxiAccepted[i] == playerid)
			{
				TaxiAccepted[i] = -1;
				GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
				TaxiCallTime[i] = 0;
				DisablePlayerCheckpointEx(i);
			}
		}
		if(IsACop(i) && (GetDistanceBetweenPlayers(playerid, i) < 10) && OnDuty[i] == 1)
		{
			if(Somatii[playerid] > 1 && GetPlayerWantedLevelEx(playerid) < 6)
			{
				SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid)+1);
				PlayerInfo[playerid][pWantedTime] = GetPlayerWantedLevelEx(playerid)*450;
				pUpdate(playerid, pWantedTimex);
			}
		}
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    new sendername[30],giveplayer[30];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    GetPlayerName(TransportDriver[playerid],giveplayer,sizeof(giveplayer));
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
			//--------------------------------------------------------------
		    format(string, sizeof(string), "~w~Passenger left~n~~g~Earned +$%s",FormatNumber(TransportCost[playerid]));
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		    format(string, sizeof(string), "# %s gets off the cab and pays $%s to %s.",sendername,FormatNumber(TransportCost[playerid]),giveplayer);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if(JobCar[playerid][PlayerInfo[playerid][pJob]] == GetPlayerVehicleID(playerid) && IsPlayerInVehicle(playerid, JobCar[playerid][PlayerInfo[playerid][pJob]]))
	{
		switch(PlayerInfo[playerid][pJob])
		{
			case 2:
			{
				if(farmerc[playerid] == 1)
				{
					DestroyVehicleEx(vehicleid);
					JobCar[playerid][2] = -1;
					gCarLock[vehicleid] = 0;
					StaticVeh[vehicleid][svJob] = 0;
				}
			}
			case 3:
			{
				DestroyVehicleEx(vehicleid);
				JobCar[playerid][3] = -1;
				gCarLock[vehicleid] = 0;
				StaticVeh[vehicleid][svJob] = 0;
				DisablePlayerCheckpointEx(playerid);
			}
			case 4:
			{
				DestroyVehicleEx(vehicleid);
				JobCar[playerid][4] = -1;
				gCarLock[vehicleid] = 0;
				StaticVeh[vehicleid][svJob] = 0;
				DisablePlayerCheckpointEx(playerid);
			}
			case 5:
			{
				DestroyVehicleEx(vehicleid);
				JobCar[playerid][5] = -1;
				gCarLock[vehicleid] = 0;
				StaticVeh[vehicleid][svJob] = 0;
				DisablePlayerCheckpointEx(playerid);
			}
			case 6:
			{
				DestroyVehicleEx(vehicleid);
				JobCar[playerid][6] = -1;
				gCarLock[vehicleid] = 0;
		        DestroyVehicleEx(viddd[playerid]);
		        viddd[playerid] = 0;
		        StaticVeh[vehicleid][svJob] = 0;
		        DisablePlayerCheckpointEx(playerid);
			}
		}
	}
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SCM(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
	            GoChase[GetChased[playerid]] = 999;
		        TogFind[GetChased[playerid]] = false;
		        PlayerInfo[GetChased[playerid]][pHitT] = 0;
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[GetChased[playerid]][pHitT], PlayerInfo[GetChased[playerid]][pNamePlayer]);
		        mysql_tquery(SQL, string, "","");
			}
	    }
	}
	if(GoChase[playerid] != 999)
	{
		GotHit[GoChase[playerid]] = 0;
		GetChased[GoChase[playerid]] = 999;
		GoChase[playerid] = 999;
	}
	if(JucatorCautat[playerid] > -1)
	{
        SCM(playerid, COLOR_YELLOW, "The player you followed left the server.");
        JucatorCautat[playerid] = -1;
        DisablePlayerCheckpointEx(playerid);
	}
    if(TransportDuty[playerid] == 1) TaxiDrivers -= 1;
	if(PlayerInfo[playerid][pJob] == 4) {
	    if(JobDuty[playerid] == 1) Mechanics -= 1;
	}
	if(PlayerPaintballing[playerid] != 0)
	{
		foreach(new i: Player)
		{
  			if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
	    	{
      			format(string,sizeof(string),"%s has left the paintball arena.", GetName(playerid));
	        	SCM(i, COLOR_YELLOW, string);
			}
		}
		for(new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
	    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		paintp[PlayerPaintballing[playerid]]--;
	}
	if(Event[playerid] == 1)
	{
		Event[playerid] = 0;
		EventInfo[EventPlayers]--;
		if(EventInfo[EventType] == 3)
		{
			DestroyVehicleEx(gLastCar[playerid]);
			if(EventInfo[EventPlayers] == 0)
			{
				EventInfo[EventType] = 0;
				EventInfo[EventMoney] = 0;
			}
		}
	}
	for(new car = 1, j = GetVehiclePoolSize(); car <= j; car++)
	{
		if(CarRented[car] == 1 && HireCar[playerid] == car)
		{
			CarRented[car] = 0;
			HireCar[playerid] = -1;
		}
	}
	for(new s = 0; s < 10; s++) {
		RemovePlayerAttachedObject(playerid, s); 
	}
	KillTimer_(logintime[playerid]);
	gPlayerLogged[playerid] = false;
	CheckVariables(playerid);
	return 1;
}
//==============================================================================
public OnPlayerDeath(playerid, killerid, reason)
{
    if(killerid != INVALID_PLAYER_ID)
	{
		playerdeath[playerid] = 0;
		PlayerEnterTime[playerid] += 221;
	    StopAudioStreamForPlayer(playerid);
		DisablePlayerCheckpointEx(playerid);
		new string[256], turfplayer, turfkiller;
		new factionplayer = PlayerInfo[playerid][pLeader] + PlayerInfo[playerid][pMember];
		new factionkiller = PlayerInfo[killerid][pLeader] + PlayerInfo[killerid][pMember];
		if(IsACop(killerid) && OnDuty[killerid] == 1 && GetPlayerWantedLevelEx(playerid) >= 1)
	    {
			new price = GetPlayerWantedLevelEx(playerid) * 1000;
			new count, wantedlost2 = GetPlayerWantedLevelEx(playerid);
			new rand = random(sizeof(Inchisoare));
			foreach(new i: Player)
			{
				if(IsACop(i) && CrimInRange(30.0, playerid, i) && OnDuty[i] == 1)
				{
					GameTextForPlayer(i, "~b~Running Suspect Bonus", 5000, 1);
					GivePlayerCash(i, price);
					count = 1;
				}
			}
			if(count == 1)
			{
				GivePlayerCash(playerid, -price);
				PlayerInfo[playerid][pJailed] = 1;
				PlayerInfo[playerid][pJailTime] = GetPlayerWantedLevelEx(playerid)*400;
				pUpdate(playerid,pJailedx);
				pUpdate(playerid,pJailTimex);
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(killerid,sendername,sizeof(sendername));
				format(string, sizeof(string), "* You are in Jail for %d Seconds and lose $%d because of running away and getting shot by the Officer %s.", PlayerInfo[playerid][pJailTime], price,sendername);
				SCM(playerid, COLOR_YELLOW, string);
				SetPlayerWantedLevelEx(playerid, 0);
				PlayerInfo[playerid][pWantedTime] = 0;
				PlayerTextDrawHide(playerid, WantedTime);
				SetPlayerInteriorEx(playerid, 10);
				SetPlayerPosEx(playerid,Inchisoare[rand][0],Inchisoare[rand][1],Inchisoare[rand][2]);
				new deathname[25];
				GetPlayerName(playerid,deathname,sizeof(deathname));
				if(PlayerInfo[killerid][pMember] == 1 || PlayerInfo[killerid][pLeader] == 1 || PlayerInfo[killerid][pMember] == 2 || PlayerInfo[killerid][pLeader] == 2 || PlayerInfo[killerid][pMember] == 3 || PlayerInfo[killerid][pLeader] == 3)
				{
					format(string, sizeof(string), "HQ: All Units. Officer %s has completed assignment.",sendername);
					SendTeamMessage(2, COLOR_DBLUE, string);
					format(string, sizeof(string), "HQ: %s has been processed, got killed having wanted %d.",deathname,wantedlost2);
					SendTeamMessage(2, COLOR_DBLUE, string);
				}
			}
		}
		if(Pizza[playerid] > 0)
		{
			Pizza[playerid] = 0;
			SCM(playerid,COLOR_GRAD1,"You lost your job at Pizza Boy because you died.");
			if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		}
		if(Event[playerid] == 1)
		{
			Event[playerid] = 0;
			EventInfo[EventPlayers]--;
			if(EventInfo[EventType] == 1 && EventInfo[EventPlayers] == 1) FinishEvent(EventInfo[EventMoney], EventInfo[EventType], PlayerInfo[killerid][pNamePlayer]);
		}
		if(Mobile[playerid] != -1)
		{
			if(Mobile[playerid] > -1)
			{
				SCM(Mobile[playerid], COLOR_GRAD2, "   Phone line died ...");
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				Mobile[Mobile[playerid]] = -1;
			}
			Mobile[playerid] = -1;
			CellTime[playerid] = 0;
		}
		if(killerid == playerid) return Kick(killerid);
		DeadScris[playerid] = CreateDynamic3DTextLabel("{f03337}[dead]", COLOR_WHITE, 0, 0, -20, 20, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DeadScris[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.31);
		for(new m = 0; m < 2; m++) {
			if(PlayerInfo[killerid][pQuest][m] == 2) CheckQuest(killerid, m);
		}
		for(new i = 1; i < MAX_TURFS; i++)
		{
			if(IsPlayerInTurf(playerid, i) == 1)
			{
				turfplayer = i;
				break;
			}
		}
		for(new i = 1; i < MAX_TURFS; i++)
		{
			if(IsPlayerInTurf(killerid, i) == 1)
			{
				turfkiller = i;
				break;
			}
		}
		if(IsAGangMember(playerid) && IsAGangMember(killerid))
		{
			if(WarInfo[turfkiller][wTime] > 0 && WarInfo[turfplayer][wTime] > 0)
			{
				if(turfkiller == turfplayer)
				{
					if(WarInfo[turfplayer][wFaction] == factionplayer && WarInfo[turfplayer][wAttacker] == factionkiller)
					{
						format(string,sizeof(string)," * You was killed by %s. +1 Death.",GetName(killerid),killerid);
						SCM(playerid, COLOR_GREEN,string);
						WarDeaths[playerid][turfplayer] += 1;
						//--------------------------------------------------------------
						WarScore[killerid][turfplayer] += 1;
						format(string,sizeof(string)," * You killed %s. +1 Kill.",GetName(playerid),playerid);
						SCM(killerid, COLOR_GREEN,string);
						DropWeapons(playerid);
					}
					if(WarInfo[turfplayer][wFaction] == factionkiller && WarInfo[turfplayer][wAttacker] == factionplayer)
					{
						WarScore[killerid][turfplayer] += 1;
						format(string,sizeof(string)," * You killed %s. +1 Kill.",GetName(playerid),playerid);
						SCM(killerid, COLOR_GREEN,string);
						for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(turfplayer, killerid, playerid, reason);
						//--------------------------------------------------------------
						WarDeaths[playerid][turfplayer] += 1;
						format(string,sizeof(string)," * You was killed by %s. +1 Death.",GetName(killerid),killerid);
						SCM(playerid, COLOR_GREEN,string);
						DropWeapons(playerid);
					}
				}
			}
		}
		if(PlayerPaintballing[playerid] != 0 && PlayerPaintballing[killerid] != 0)
		{
			foreach(new id: Player) {
		        if(PlayerPaintballing[id] == PlayerPaintballing[playerid]) SendDeathMessageToPlayer(id, killerid, playerid, reason);
			}
			KillP[killerid]++;
			format(string,sizeof(string),"You have %d kills and %d deaths.", KillP[killerid],DeathP[killerid]);
			PlayerTextDrawSetString(killerid, PaintballTD[0], string);
	        PlayerTextDrawShow(killerid, PaintballTD[0]);
			//--------------------------------------------------------------
			DeathP[playerid]++;
			format(string,sizeof(string),"You have %d kills and %d deaths.", KillP[playerid],DeathP[playerid]);
			PlayerTextDrawSetString(playerid, PaintballTD[0], string);
	        PlayerTextDrawShow(playerid, PaintballTD[0]);
			//--------------------------------------------------------------
	        PlayerPaintballScore[killerid] = KillP[killerid] - DeathP[killerid];
			PlayerPaintballScore[playerid] = KillP[playerid] - DeathP[playerid];
			//--------------------------------------------------------------
			if(PlayerPaintballing[killerid] == 3)
			{
			    if(KillP[killerid] == 2) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 29, 1000);
				else if(KillP[killerid] == 4) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 28, 1000);
				else if(KillP[killerid] == 6) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 33, 1000);
				else if(KillP[killerid] == 8) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 32, 1000);
				else if(KillP[killerid] == 10) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 25, 1000);
				else if(KillP[killerid] == 12) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 26, 1000);
				else if(KillP[killerid] == 14) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 34, 1000);
				else if(KillP[killerid] == 16) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 27, 1000);
				else if(KillP[killerid] == 18) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 31, 1000);
				else if(KillP[killerid] == 20) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 30, 1000);
				else if(KillP[killerid] == 22) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 23, 1000);
				else if(KillP[killerid] == 24) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 22, 1000);
				else if(KillP[killerid] == 26) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 9, 1);
				else if(KillP[killerid] == 28) ResetPlayerWeaponsEx(killerid), GivePlayerWeaponEx(killerid, 4, 1);
			}
		    if(KillP[killerid] == 29 && PlayerPaintballing[killerid] == 3)
		    {
		        foreach(new i: Player)
				{
  					if(PlayerPaintballing[i] == 3)
   					{
						PlayerTextDrawHide(i, PaintballTD[0]);
  						format(string,sizeof(string),"Round over! Winner: %s - 29 kills.",GetName(killerid));
						SCM(i, COLOR_YELLOW, string);
						SCM(i, COLOR_YELLOW, "Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			SetPlayerArmourEx(i, 0.0);
		    			KillP[i] = 0;
						DeathP[i] = 0;
		    			PaintBallVoted[i] = 0;
		    			PaintBallVoted2[i] = 0;
		    			for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				KillTimer_(paintrun3);
				paintt[3] = 0;
				paintrs[3] = 31;
				preparepaint3 = SetTimer_("PrepareRoundPaintBall3", 888, 1000, -1);
				PaintballWinner[3] = 999;
				PaintballWinnerScore[3] = 0;
				paintvotem[3][0] = 0;
				paintvotem[3][1] = 0;
				paintvotem[3][2] = 0;
				paintvotem[3][3] = 0;
				paintvotem[3][4] = 0;
				mapvoted[3] = 0;
		    }
		    if(PlayerPaintballScore[killerid] > PaintballWinnerScore[PlayerPaintballing[playerid]])
		    {
				PaintballWinner[PlayerPaintballing[playerid]] = killerid;
				PaintballWinnerScore[PlayerPaintballing[playerid]] = PlayerPaintballScore[killerid];
				foreach(new i: Player)
				{
				    if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"%s is in the lead with %d score.",GetName(killerid),PaintballWinnerScore[PlayerPaintballing[playerid]]);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
		}
		if(PlayerInfo[playerid][pHeadValue] > 0)
		{
	    	if(IsPlayerConnected(killerid))
	    	{
		    	if(PlayerInfo[killerid][pMember] == 8 || PlayerInfo[killerid][pLeader] == 8)
		    	{
		        	if(GoChase[killerid] == playerid)
		        	{
						new killer[MAX_PLAYER_NAME];
						GetPlayerName(killerid, killer, sizeof(killer));
						GivePlayerCash(killerid, PlayerInfo[playerid][pHeadValue]);
						if(Undercover[killerid] == 1 && PhoneOnline[killerid] == 1 && GetDistanceBetweenPlayers(killerid, playerid) >= 100)
						{
							format(string,sizeof(string),"%s has succesfully completed the contract on %s for $%s, distance: %.0fm.",killer,GetName(playerid),FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
							PlayerInfo[killerid][pContracts] += 1;
							pUpdate(killerid,pContractsx);
						}
						if(Undercover[killerid] == 0) format(string,sizeof(string),"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: not undercover.",killer,GetName(playerid),FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						if(PhoneOnline[killerid] == 0) format(string,sizeof(string),"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: phone turned on.",killer,GetName(playerid),FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						if(GetDistanceBetweenPlayers(killerid, playerid) < 150) format(string,sizeof(string),"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: distance/weapon.",killer,GetName(playerid),FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						SendFactionMessage(8, TEAM_AZTECAS_COLOR, string);
						PlayerInfo[playerid][pHeadValue] = 0;
						GotHit[playerid] = 0;
						OrderReady[killerid] = 0;
						GetChased[playerid] = 999;
						GoChase[killerid] = 999;
						UpdateVar(playerid, "HeadValue", 0);
				        TogFind[killerid] = false;
			            PlayerInfo[killerid][pHitT] = 300;
						UpdateVar(killerid, "HitT", 300);
					}
				}
			}
		}
		if(GetPlayerTeam(playerid) == 1 && factionplayer != factionkiller && (GetPlayerTeam(killerid) == 1 || GetPlayerTeam(killerid) == 3))
	    {
			StrmidEx(WantedName[playerid], PlayerInfo[killerid][pNamePlayer]);
			WantedReason[playerid] = reason;
			format(string,sizeof(string),"%s attacked you, use [/call 112]. You have 60 seconds to notify the police.",PlayerInfo[killerid][pNamePlayer]);
			SCM(playerid,COLOR_LIGHTBLUE,string);
			WantedTimer[playerid] = SetTimerEx_("ClearWanted",60000,60000,1,"i",playerid);
	    }
		if(GetPlayerTeam(playerid) == 3 && GetPlayerTeam(killerid) == 1 && factionplayer != factionkiller)
	    {
			StrmidEx(WantedName[playerid], PlayerInfo[killerid][pNamePlayer]);
			WantedReason[playerid] = reason;
			format(string,sizeof(string),"%s attacked you, use [/call 112]. You have 60 seconds to notify the police.",PlayerInfo[killerid][pNamePlayer]);
			SCM(playerid,COLOR_LIGHTBLUE,string);
			WantedTimer[playerid] = SetTimerEx_("ClearWanted",60000,60000,1,"i",playerid);
	    }
		killerid = INVALID_PLAYER_ID;
	}
	return 1;
}
//==============================================================================
public OnPlayerSpawn(playerid)
{
    if(PlayerInfo[playerid][pTut] == 0)
    {
	   	SetPlayerPosEx(playerid, -2026.765991, -84.237663, 21.766628);
		InterpolateCameraPos(playerid, -2399.519287, 321.964355, 37.035743, -2026.765991, -84.237663, 41.766628, 20000);
		InterpolateCameraLookAt(playerid, -2399.951416, 322.215942, 37.015625, -2026.787597, -84.917533, 41.520622, 20000);
		SPD(playerid,DIALOG_LOGIN2,DIALOG_STYLE_MSGBOX,"What is your sex?","Choose the sex that your character will have.","Male","Female");
		return 1;
    }
	if(gPlayerLogged[playerid] == false) return KickEx(playerid);
	SetPlayerArmourEx(playerid, 0.0);
	SetPlayerHealthEx(playerid, 99.9);
	DestroyDynamic3DTextLabel(DeadScris[playerid]);
	new skin = GetPlayerSkinEx(playerid);
	if(PlayerInfo[playerid][pHat] != -1) SetPlayerAttachedObject(playerid, 1, PlayerInfo[playerid][pHat], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3], SkinCaps[skin][4], SkinCaps[skin][5], 1.000, 1.000, 1.000);
	if(PlayerInfo[playerid][pGlasses] != -1) SetPlayerAttachedObject(playerid, 2, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5], 1.000, 1.000, 1.000);
	if(FlyMode[playerid] == 1)
	{
		FlyMode[playerid] = 0;
		StopFly(playerid);
	}
	if(OnDuty[playerid] > 0)
	{
		if(IsACop(playerid))
		{
			GivePlayerWeaponEx(playerid, 24, 300);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 99.9);
			SetPlayerHealthEx(playerid, 99.9);
		}
	}
	if(OrderReady[playerid] > 0)
	{
		GivePlayerWeaponEx(playerid, 23, 200);
		GivePlayerWeaponEx(playerid, 34, 40);
		GivePlayerWeaponEx(playerid, 4, 1);
		GivePlayerWeaponEx(playerid, 29, 150);
		GivePlayerCash(playerid, -8000);
		SCM(playerid, COLOR_LIGHTBLUE, "* You picked up your Ordered Package.");
		FactionInfo[8][fSafeMoney] += 8000;
		SaveFactions(8);
	}
	StopLoopingAnim(playerid);
	ClearAnimations(playerid);
	playerdeath[playerid] = 0;
	Undercover[playerid] = 0;
	HouseEntered[playerid] = -1;
	FactionEntered[playerid] = -1;
	BizzEntered[playerid] = -1;
	SetPlayerSpawn(playerid);
	return 1;
}
//==============================================================================
public OnPlayerEnterCheckpoint(playerid)
{
	new string[256];
	if(XCheckpoints[playerid] == 0) LastCheckpoint[playerid] = gettime();
	XCheckpoints[playerid]++;
	if(XCheckpoints[playerid] == 2)
	{
		if((gettime() - LastCheckpoint[playerid]) < 3)
		{
			if(JucatorCautat[playerid] == -1)
			{
				format(string, sizeof(string), "AdmWarning: %s (ID: %d) is able to use Checkpoint-Teleport-Hack.", GetName(playerid), playerid);
				SendAdminMessage(string,1);
				XCheckpoints[playerid] = 0;
				LastCheckpoint[playerid] = 0;
			}
			else XCheckpoints[playerid] = 0;
		}
		else if((gettime() - LastCheckpoint[playerid]) > 2) XCheckpoints[playerid] = 0;
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
		TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(CP[playerid] == 27 && GetPVarInt(playerid, "BizzStock") > 0)
	{
		//NEFINALIZAT
	}
	else if(CP[playerid] == 34 && JobCar[playerid][4] == GetPlayerVehicleID(playerid)) // tow car
	{
		new money = random(5000) + 10000;
		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) == 0) return SCM(playerid, COLOR_YELLOW2, "You do not have a car attached.");
		if(TowAcc[playerid] == 1) return SCM(playerid, COLOR_YELLOW2, "Wait 2 minutes to retread a vehicle.");
		DisablePlayerCheckpointEx(playerid);
		TowAcc[playerid] = 1;
		new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		GivePlayerCash(playerid, money, 10000);
		SCM(playerid,COLOR_WHITE,"You can drag a new vehicle in 2 minutes!");
		PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		SetTimerEx_("TowAgain", 120000, 120000, 1, "i", playerid);
	}
	else if(JobCar[playerid][3] == GetPlayerVehicleID(playerid))
	{
		if(CP[playerid] >= 5 && CP[playerid] < 26)
		{
			new money = random(5000) + 2000;
			GivePlayerCash(playerid, money);
			switch(CP[playerid])
			{
				case 5: SetPlayerCheckpointEx(playerid, 1935.622436, -111.348625, -0.443808, 7.0), CP[playerid] = 6;
				case 6: SetPlayerCheckpointEx(playerid, 1638.356933, -18.456909, -0.478204, 7.0), CP[playerid] = 7;
				case 7: SetPlayerCheckpointEx(playerid, 1457.820678, -240.281082, -0.495753, 7.0), CP[playerid] = 8;
				case 8: SetPlayerCheckpointEx(playerid, 1115.734985, -107.282005, -0.523614, 7.0), CP[playerid] = 9;
				case 9: SetPlayerCheckpointEx(playerid, 778.530883, -177.764175, -0.432832, 7.0), CP[playerid] = 10;
				case 10: SetPlayerCheckpointEx(playerid, 487.586944, -254.230606, -0.494582, 7.0), CP[playerid] = 11;
				case 11: SetPlayerCheckpointEx(playerid, 245.232299, -393.080200, -0.516360, 7.0), CP[playerid] = 12;
				case 12: SetPlayerCheckpointEx(playerid, 21.676059, -541.378417, -0.567655, 7.0), CP[playerid] = 13;
				case 13: SetPlayerCheckpointEx(playerid, -191.330718, -500.910614, -0.471122, 7.0), CP[playerid] = 14;
				case 14: SetPlayerCheckpointEx(playerid, -504.505310, -333.418151, -0.570109, 7.0), CP[playerid] = 15;
				case 15: SetPlayerCheckpointEx(playerid, -793.881774, -322.506927, -0.529296, 7.0), CP[playerid] = 16;
				case 16: SetPlayerCheckpointEx(playerid, -1023.602172, -201.363449, -0.585745, 7.0), CP[playerid] = 17;
				case 17: SetPlayerCheckpointEx(playerid, -860.523010, 193.355895, -0.473435, 7.0), CP[playerid] = 18;
				case 18: SetPlayerCheckpointEx(playerid, -488.148651, 382.929809, -0.517374, 7.0), CP[playerid] = 19;
				case 19: SetPlayerCheckpointEx(playerid, -95.205726, 355.981323, -0.449687, 7.0), CP[playerid] = 20;
				case 20: SetPlayerCheckpointEx(playerid, 313.282928, 416.412017, -0.510120, 7.0), CP[playerid] = 21;
				case 21: SetPlayerCheckpointEx(playerid, 800.198730, 551.270690, -0.548333, 7.0), CP[playerid] = 22;
				case 22: SetPlayerCheckpointEx(playerid, 1276.509277, 604.702880, -0.572417, 7.0), CP[playerid] = 23;
				case 23: SetPlayerCheckpointEx(playerid, 1534.414550, 557.475769, -0.376462, 7.0), CP[playerid] = 24;
				case 24: SetPlayerCheckpointEx(playerid, 2111.815185, 426.719726, -0.404228, 7.0), CP[playerid] = 25;
				case 25: SetPlayerCheckpointEx(playerid, 2106.097412, -86.618400, -0.508505, 7.0), CP[playerid] = 26;
			}
		}
		else if(CP[playerid] == 26)
		{
			new money = random(10000) + 10000;
			GivePlayerCash(playerid, money, 10000);
			DisablePlayerCheckpointEx(playerid);
			DestroyVehicleEx(JobCar[playerid][3]);
			StaticVeh[JobCar[playerid][3]][svJob] = 0;
			gCarLock[JobCar[playerid][3]] = 0;
			JobCar[playerid][3] = -1;
			SCM(playerid,COLOR_GREEN,"Congratulations! You've finished your job, you can use [/work] to get started again.");
		}
	}
	else if(CP[playerid] == 32)
	{
		if(JobCar[playerid][5] == GetPlayerVehicleID(playerid))
		{
			Pizza[playerid]--;
			DisablePlayerCheckpointEx(playerid);
			GivePlayerCash(playerid, pizzaprice[playerid]);
			PlayerInfo[playerid][pPizzaRem]--;
			PlayerInfo[playerid][pPizzaTimes]++;
			if(PlayerInfo[playerid][pPizzaSkill] <= 5)
			{
				if(PlayerInfo[playerid][pPizzaRem] <= 0)
				{
					PlayerInfo[playerid][pPizzaSkill]++;
					if(PlayerInfo[playerid][pPizzaSkill] == 1) PlayerInfo[playerid][pPizzaRem] = 16;
					else if(PlayerInfo[playerid][pPizzaSkill] == 2) PlayerInfo[playerid][pPizzaRem] = 32;
					else if(PlayerInfo[playerid][pPizzaSkill] == 3) PlayerInfo[playerid][pPizzaRem] = 64;
					else if(PlayerInfo[playerid][pPizzaSkill] == 4) PlayerInfo[playerid][pPizzaRem] = 128;
					else if(PlayerInfo[playerid][pPizzaSkill] == 5) PlayerInfo[playerid][pPizzaRem] = 256;
					format(string,sizeof(string),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pPizzaSkill]);
					SCM(playerid, COLOR_YELLOW, string);
				}
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			pizzaprice[playerid] = 0;
			pUpdate(playerid,pPizzaTimesx);
			pUpdate(playerid,pPizzaRemx);
			pUpdate(playerid,pPizzaSkillx);
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[playerid][pQuest][m] == 5) CheckQuest(playerid, m);
			}
			PlayerTextDrawHide(playerid,PizzaText);
			format(string,sizeof(string),"Pizza: ~r~%d~w~ /~g~ 5",Pizza[playerid]);
			PlayerTextDrawSetString(playerid,PizzaText,string);
			PlayerTextDrawShow(playerid,PizzaText);
		}
		else return SCM(playerid,COLOR_YELLOW2,"You're not in a job scooter!");
	}
	else if(CP[playerid] == 10 && GetPlayerWantedLevelEx(playerid) == 6)
	{
		new cash = 180000 + random(70000) + PlayerInfo[playerid][pRobSkill]*random(15000);
		PlayerInfo[playerid][pRobTimes]++;
		PlayerInfo[playerid][pRobRem]--;
		DisablePlayerCheckpointEx(playerid);
		GivePlayerCash(playerid, cash);
		format(string, sizeof(string),"You got %s$ for the robbery business.", FormatNumber(cash));
		SCM(playerid, COLOR_GREEN, string);
		RemovePlayerAttachedObject(playerid,0);
		RemovePlayerAttachedObject(playerid,1);
		if(PlayerInfo[playerid][pRobSkill] <= 5)
		{
			if(PlayerInfo[playerid][pRobRem] <= 0)
			{
				PlayerInfo[playerid][pRobSkill]++;
				if(PlayerInfo[playerid][pRobSkill] == 1) PlayerInfo[playerid][pRobRem] = 6;
				else if(PlayerInfo[playerid][pRobSkill] == 2) PlayerInfo[playerid][pRobRem] = 12;
				else if(PlayerInfo[playerid][pRobSkill] == 3) PlayerInfo[playerid][pRobRem] = 18;
				else if(PlayerInfo[playerid][pRobSkill] == 4) PlayerInfo[playerid][pRobRem] = 36;
				else if(PlayerInfo[playerid][pRobSkill] == 5) PlayerInfo[playerid][pRobRem] = 72;
				format(string,sizeof(string),"Congratulations! Now you have skill %d!",PlayerInfo[playerid][pRobSkill]);
				SCM(playerid, COLOR_YELLOW, string);
			}
		}
		pUpdate(playerid,pRobTimesx);
		pUpdate(playerid,pRobRemx);
		pUpdate(playerid,pRobSkillx);
	}
	else if(CP[playerid] == 11 && IsPlayerInAnyVehicle(playerid))
	{
		new rand = 30000 + random(5000);
		format(string, sizeof(string), "You sold the car for %s$, you could sell another, over 500 seconds.", FormatNumber(rand));
		SCM(playerid, COLOR_GREEN, string);
		GivePlayerCash(playerid, rand);
		PlayerInfo[playerid][pCarTime] = 500;
		GameTextForPlayer(playerid, "~y~Sold the car", 2500, 1);
		DisablePlayerCheckpointEx(playerid);
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
	else if(CP[playerid] == 3 && PlayerInfo[playerid][pJob] == 9)
	{
		DisablePlayerCheckpointEx(playerid);
		new mats;
		if(PlayerInfo[playerid][pMatsSkill] == 0) mats = 700 + random(700);
		else if(PlayerInfo[playerid][pMatsSkill] == 1) mats = 900 + random(900);
		else if(PlayerInfo[playerid][pMatsSkill] == 2) mats = 1200 + random(1200);
		else if(PlayerInfo[playerid][pMatsSkill] == 3) mats = 1500 + random(1500);
		else if(PlayerInfo[playerid][pMatsSkill] == 4) mats = 1700 + random(1700);
		else if(PlayerInfo[playerid][pMatsSkill] == 5) mats = 1900 + random(1900);
		else if(PlayerInfo[playerid][pMatsSkill] >= 6) mats = 2100 + random(2100);
		PlayerInfo[playerid][pMats] += mats;
		pUpdate(playerid, pMatsx);
		PlayerInfo[playerid][pMatsRem]--;
		PlayerInfo[playerid][pMatsTimes]++;
		if(PlayerInfo[playerid][pMatsSkill] <= 5)
		{
			if(PlayerInfo[playerid][pMatsRem] <= 0)
			{
				PlayerInfo[playerid][pMatsSkill]++;
				if(PlayerInfo[playerid][pMatsSkill] == 1) PlayerInfo[playerid][pMatsRem] = 16;
				else if(PlayerInfo[playerid][pMatsSkill] == 2) PlayerInfo[playerid][pMatsRem] = 32;
				else if(PlayerInfo[playerid][pMatsSkill] == 3) PlayerInfo[playerid][pMatsRem] = 64;
				else if(PlayerInfo[playerid][pMatsSkill] == 4) PlayerInfo[playerid][pMatsRem] = 128;
				else if(PlayerInfo[playerid][pMatsSkill] == 5) PlayerInfo[playerid][pMatsRem] = 256;
				format(string,sizeof(string),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pMatsSkill]);
				SCM(playerid, COLOR_YELLOW, string);
			}
		}
		PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~b~~h~+%s",FormatNumber(mats));
		GameTextForPlayer(playerid, string, 10000, 1);
		pUpdate(playerid,pMatsTimesx);
		pUpdate(playerid,pMatsRemx);
		pUpdate(playerid,pMatsSkillx);
	}
	else if(Trucker[playerid] >= 1 && CP[playerid] == 2)
	{
		new pertransport,skillmoney,totalmoney;
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && JobCar[playerid][6] == GetPlayerVehicleID(playerid)) return SCM(playerid, COLOR_WHITE, "You have no trailer attached!");
		DisablePlayerCheckpointEx(playerid);
		DestroyVehicleEx(viddd[playerid]);
		viddd[playerid] = 0;
		if(Trucker[playerid] == 1)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 2;
			SetPlayerCheckpointEx(playerid,CHKTruck2[2][0],CHKTruck2[2][1],CHKTruck2[2][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 2)
		{
			pertransport = 15000 + random(7000);
			Trucker2[playerid] = 2;
			SetPlayerCheckpointEx(playerid,CHKTruck2[4][0],CHKTruck2[4][1],CHKTruck2[4][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 3)
		{
			pertransport = 15000 + random(7000);
			Trucker2[playerid] = 3;
			SetPlayerCheckpointEx(playerid,CHKTruck2[11][0],CHKTruck2[11][1],CHKTruck2[11][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 4)
		{
			pertransport = 15000 + random(7000);
			Trucker2[playerid] = 3;
			SetPlayerCheckpointEx(playerid,CHKTruck2[10][0],CHKTruck2[10][1],CHKTruck2[10][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 5)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 3;
			SetPlayerCheckpointEx(playerid,CHKTruck2[7][0],CHKTruck2[7][1],CHKTruck2[7][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 6)
		{
			pertransport = 20000 + random(10000);
			Trucker2[playerid] = 3;
			SetPlayerCheckpointEx(playerid,CHKTruck2[6][0],CHKTruck2[6][1],CHKTruck2[6][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 7)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 3;
			SetPlayerCheckpointEx(playerid,CHKTruck2[8][0],CHKTruck2[8][1],CHKTruck2[8][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 8)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 3;
			SetPlayerCheckpointEx(playerid,CHKTruck2[9][0],CHKTruck2[9][1],CHKTruck2[9][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 9)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 2;
			SetPlayerCheckpointEx(playerid,CHKTruck2[3][0],CHKTruck2[3][1],CHKTruck2[3][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 10)
		{
			pertransport = 15000 + random(7000);
			Trucker2[playerid] = 2;
			SetPlayerCheckpointEx(playerid,CHKTruck2[5][0],CHKTruck2[5][1],CHKTruck2[5][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 11)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 4;
			SetPlayerCheckpointEx(playerid,CHKTruck2[12][0],CHKTruck2[12][1],CHKTruck2[12][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 12)
		{
			pertransport = 20000 + random(10000);
			Trucker2[playerid] = 4;
			SetPlayerCheckpointEx(playerid,CHKTruck2[13][0],CHKTruck2[13][1],CHKTruck2[13][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 13)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 4;
			SetPlayerCheckpointEx(playerid,CHKTruck2[17][0],CHKTruck2[17][1],CHKTruck2[17][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 14)
		{
			pertransport = 15000 + random(7000);
			Trucker2[playerid] = 4;
			SetPlayerCheckpointEx(playerid,CHKTruck2[15][0],CHKTruck2[15][1],CHKTruck2[15][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 15)
		{
			pertransport = 15000 + random(7000);
			Trucker2[playerid] = 4;
			SetPlayerCheckpointEx(playerid,CHKTruck2[16][0],CHKTruck2[16][1],CHKTruck2[16][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 16)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 4;
			SetPlayerCheckpointEx(playerid,CHKTruck2[14][0],CHKTruck2[14][1],CHKTruck2[14][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 17)
		{
			pertransport = 20000 + random(10000);
			Trucker2[playerid] = 1;
			SetPlayerCheckpointEx(playerid,CHKTruck2[0][0],CHKTruck2[0][1],CHKTruck2[0][2],5.0);
			CP[playerid] = 2;
		}
		else if(Trucker[playerid] == 18)
		{
			pertransport = 10000 + random(5000);
			Trucker2[playerid] = 2;
			SetPlayerCheckpointEx(playerid,CHKTruck2[1][0],CHKTruck2[1][1],CHKTruck2[1][2],5.0);
			CP[playerid] = 2;
		}
		skillmoney = 7000*PlayerInfo[playerid][pTruckSkill];
		totalmoney = pertransport + skillmoney;
		PlayerInfo[playerid][pTruckRem]--;
		PlayerInfo[playerid][pTruckTimes]++;
		GivePlayerCash(playerid, totalmoney, 10000);
		Trucker[playerid] = 0;
		if(PlayerInfo[playerid][pTruckSkill] < 6)
		{
			if(PlayerInfo[playerid][pTruckRem] <= 0)
			{
				PlayerInfo[playerid][pTruckSkill]++;
				if(PlayerInfo[playerid][pTruckSkill] == 1) PlayerInfo[playerid][pTruckRem] = 16;
				else if(PlayerInfo[playerid][pTruckSkill] == 2) PlayerInfo[playerid][pTruckRem] = 32;
				else if(PlayerInfo[playerid][pTruckSkill] == 3) PlayerInfo[playerid][pTruckRem] = 64;
				else if(PlayerInfo[playerid][pTruckSkill] == 4) PlayerInfo[playerid][pTruckRem] = 128;
				else if(PlayerInfo[playerid][pTruckSkill] == 5) PlayerInfo[playerid][pTruckRem] = 256;
				format(string,sizeof(string),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pTruckSkill]);
				SCM(playerid, COLOR_YELLOW, string);
			}
		}
		PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		pUpdate(playerid,pTruckTimesx);
		pUpdate(playerid,pTruckRemx);
		pUpdate(playerid,pTruckSkillx);
	}
	else if(Trucker2[playerid] == 1 && CP[playerid] == 2)//Langa Gas Station(primul)
	{
		SetTimerEx_("Truckerr1", 1000, 1000, 1, "i", playerid);
	}
	else if(Trucker2[playerid] == 2 && CP[playerid] == 2)//IN LS
	{
		SetTimerEx_("Truckerr2", 1000, 1000, 1, "i", playerid);
	}
	else if(Trucker2[playerid] == 3 && CP[playerid] == 2)//IN LV
	{
		SetTimerEx_("Truckerr3", 1000, 1000, 1, "i", playerid);
	}
	else if(Trucker2[playerid] == 4 && CP[playerid] == 2)//IN SF
	{
		SetTimerEx_("Truckerr4", 1000, 1000, 1, "i", playerid);
	}
	else if(MedicCallTime[playerid] > 0)
	{
		GameTextForPlayer(playerid, "~w~~h~Reached destination", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(MechanicCallTime[playerid] > 0)
	{
		GameTextForPlayer(playerid, "~w~~h~Reached destination", 5000, 1);
		MechanicCallTime[playerid] = 0;
		DisablePlayerCheckpointEx(playerid);
	}
	else if(CP[playerid] == 1) DisablePlayerCheckpointEx(playerid);
	return 1;
}
//==============================================================================
public OnPlayerEnterRaceCheckpoint(playerid)
{
	new string[256];
	if(XCheckpoints[playerid] == 0) LastCheckpoint[playerid] = gettime();
	XCheckpoints[playerid]++;
	if(XCheckpoints[playerid] == 2)
	{
		if((gettime() - LastCheckpoint[playerid]) < 1.5)
		{
			if(JucatorCautat[playerid] == -1)
			{
				format(string, sizeof(string), "AdmWarning: %s (ID: %d) is possible to use Checkpoint Teleport Hack.", GetName(playerid), playerid);
				SendAdminMessage(string,1);
				XCheckpoints[playerid] = 0;
				LastCheckpoint[playerid] = 0;
			}
			else XCheckpoints[playerid] = 0;
		}
		else if((gettime() - LastCheckpoint[playerid]) > 2) XCheckpoints[playerid] = 0;
	}
	if(IsPlayerInVehicle(playerid, ExamCar[playerid]) && TakingLesson[playerid] == 1)
	{
		if(CP[playerid] == 300)//Exam_01
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 301;
			SetPlayerRaceCheckpoint(playerid, 0, 920.8195,-1588.7004,13.1235, 897.0294,-1570.6616,13.1315, 4.0);
			GameTextForPlayer(playerid,"~h~~r~1/23",1500,1);
		}
		else if(CP[playerid] == 301)//Exam_02
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 302;
			SetPlayerRaceCheckpoint(playerid, 0, 897.0294,-1570.6616,13.1315, 847.8700,-1600.5890,13.1316, 4.0);
			GameTextForPlayer(playerid,"~h~~r~1/23",1500,1);
		}
		else if(CP[playerid] == 302)//Exam_03
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 303;
			SetPlayerRaceCheckpoint(playerid, 0, 847.8700,-1600.5890,13.1316, 820.6127,-1594.1359,13.1241, 4.0);
			GameTextForPlayer(playerid,"~h~~r~2/23",1500,1);
		}
		else if(CP[playerid] == 303)//Exam_04
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 304;
			SetPlayerRaceCheckpoint(playerid, 0, 820.6127,-1594.1359,13.1241, 640.0983,-1574.3392,15.2321, 4.0);
			GameTextForPlayer(playerid,"~h~~r~3/23",1500,1);
		}
		else if(CP[playerid] == 304)//Exam_05
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 305;
			SetPlayerRaceCheckpoint(playerid, 0, 640.0983,-1574.3392,15.2321, 607.6335,-1394.1748,13.1398, 4.0);
			GameTextForPlayer(playerid,"~h~~r~4/23",1500,1);
		}
		else if(CP[playerid] == 305)//Exam_06
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 306;
			SetPlayerRaceCheckpoint(playerid, 0, 607.6335,-1394.1748,13.1398, 417.4465,-1465.0675,30.1728, 4.0);
			GameTextForPlayer(playerid,"~h~~r~5/23",1500,1);
		}
		else if(CP[playerid] == 306)//Exam_07
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 307;
			SetPlayerRaceCheckpoint(playerid, 0, 417.4465,-1465.0675,30.1728, 268.0493,-1574.2046,32.6673, 4.0);
			GameTextForPlayer(playerid,"~h~~r~6/23",1500,1);
		}
		else if(CP[playerid] == 307)//Exam_08
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 308;
			SetPlayerRaceCheckpoint(playerid, 0, 268.0493,-1574.2046,32.6673, 277.9711,-1479.7235,30.7305, 4.0);
			GameTextForPlayer(playerid,"~h~~r~7/23",1500,1);
		}
		else if(CP[playerid] == 308)//Exam_09
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 309;
			SetPlayerRaceCheckpoint(playerid, 0, 277.9711,-1479.7235,30.7305, 116.6947,-1479.9351,17.0788, 4.0);
			GameTextForPlayer(playerid,"~h~~r~8/23",1500,1);
		}
		else if(CP[playerid] == 309)//Exam_10
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 310;
			SetPlayerRaceCheckpoint(playerid, 0, 116.6947,-1479.9351,17.0788, 405.5640,-1215.9908,49.9427, 4.0);
			GameTextForPlayer(playerid,"~h~~r~9/23",1500,1);
		}
		else if(CP[playerid] == 310)//Exam_11
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 311;
			SetPlayerRaceCheckpoint(playerid, 0, 405.5640,-1215.9908,49.9427, 685.8420,-1163.8966,15.2318, 4.0);
			GameTextForPlayer(playerid,"~h~~r~10/23",1500,1);
		}
		else if(CP[playerid] == 311)//Exam_12
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 312;
			SetPlayerRaceCheckpoint(playerid, 0, 685.8420,-1163.8966,15.2318, 783.8415,-1051.8502,24.1202, 4.0);
			GameTextForPlayer(playerid,"~h~~r~11/23",1500,1);
		}
		else if(CP[playerid] == 312)//EXAM!!!!!
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 313;
			SetPlayerRaceCheckpoint(playerid, 0, 783.8415,-1051.8502,24.1202, 916.8104,-1147.5005,23.5583, 4.0);
			GameTextForPlayer(playerid,"~h~~r~12/23",1500,1);
		}
		else if(CP[playerid] == 313)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 314;
			SetPlayerRaceCheckpoint(playerid, 0, 916.8104,-1147.5005,23.5583, 1057.1351,-1148.5450,23.4617, 4.0);
			GameTextForPlayer(playerid,"~h~~r~13/23",1500,1);
		}
		else if(CP[playerid] == 314)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 315;
			SetPlayerRaceCheckpoint(playerid, 0, 1057.1351,-1148.5450,23.4617, 1055.9777,-1380.2968,13.4749, 4.0);
			GameTextForPlayer(playerid,"~h~~r~14/23",1500,1);
		}
		else if(CP[playerid] == 315)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 316;
			SetPlayerRaceCheckpoint(playerid, 0, 1055.9777,-1380.2968,13.4749, 1054.8771,-1467.4893,13.3722, 4.0);
			GameTextForPlayer(playerid,"~h~~r~15/23",1500,1);
		}
		else if(CP[playerid] == 316)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 317;
			SetPlayerRaceCheckpoint(playerid, 0, 1054.8771,-1467.4893,13.3722, 1034.5548,-1568.8555,13.3906, 4.0);
			GameTextForPlayer(playerid,"~h~~r~16/23",1500,1);
		}
		else if(CP[playerid] == 317)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 318;
			SetPlayerRaceCheckpoint(playerid, 0, 1034.5548,-1568.8555,13.3906, 1035.4878,-1745.8621,13.3824, 4.0);
			GameTextForPlayer(playerid,"~h~~r~17/23",1500,1);
		}
		else if(CP[playerid] == 318)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 319;
			SetPlayerRaceCheckpoint(playerid, 0, 1035.4878,-1745.8621,13.3824, 1003.8361,-1787.4755,14.0497, 4.0);
			GameTextForPlayer(playerid,"~h~~r~18/23",1500,1);
		}
		else if(CP[playerid] == 319)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 320;
			SetPlayerRaceCheckpoint(playerid, 0, 1003.8361,-1787.4755,14.0497, 920.1559,-1770.5256,13.3906, 4.0);
			GameTextForPlayer(playerid,"~h~~r~19/23",1500,1);
		}
		else if(CP[playerid] == 320)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 321;
			SetPlayerRaceCheckpoint(playerid, 0, 920.1559,-1770.5256,13.3906, 920.2605,-1656.7196,13.3828, 4.0);
			GameTextForPlayer(playerid,"~h~~r~20/23",1500,1);
		}
		else if(CP[playerid] == 321)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 322;
			SetPlayerRaceCheckpoint(playerid, 0, 920.1365,-1665.5935,12.9610, 892.8291,-1648.2494,13.5469, 4.0);
			GameTextForPlayer(playerid,"~h~~r~21/23",1500,1);
		}
		else if(CP[playerid] == 322)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 323;
			SetPlayerRaceCheckpoint(playerid, 1, 892.8291,-1648.2494,13.5469, 0,0,0, 5.0);
			GameTextForPlayer(playerid,"~h~~r~22/23",1500,1);
		}
		else if(CP[playerid] == 323)//Exam_Final
		{
			RemovePlayerFromVehicleEx(playerid);
			TakingLesson[playerid] = 0;
			CP[playerid] = 0;
			DestroyVehicleEx(ExamCar[playerid]);
			ExamCar[playerid] = 0;
			GameTextForPlayer(playerid,"~h~~r~23/23",1000,1);
			DisablePlayerRaceCheckpoint(playerid);
			SCM(playerid, -1, "{ee5555}Felicitari!{a9c4e4} Ai terminat testul si ai fost taxat cu {ee5555}$45,000{a9c4e4}!");
			GivePlayerCash(playerid, -45000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 13500;
			SaveBusiness(BizzEntered[playerid]);
			PlayerInfo[playerid][pCarLic] = 100;
			SetPlayerInteriorEx(playerid,3);
			SetPlayerPosEx(playerid,-2026.8217,-114.3419,1035.1719);
			OnPlayerUpdateEx(playerid);
			SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$\n", "Cumpara", "Iesi" );
		}
	}
	if(IsPlayerInVehicle(playerid, ExamCar[playerid]) && TakingLesson[playerid] == 1)
	{
		if(CP[playerid] == 324)//Exam_01
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 325;
			SetPlayerRaceCheckpoint(playerid, 0, 240.4444,-2074.4124,-0.1859, 118.3543,-2108.3347,-0.1304, 4.0);
		}
		else if(CP[playerid] == 325)//Exam_02
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 326;
			SetPlayerRaceCheckpoint(playerid, 0, 118.3543,-2108.3347,-0.1304, 77.5625,-1997.1251,-0.2571, 4.0);
		}
		else if(CP[playerid] == 326)//Exam_03
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 327;
			SetPlayerRaceCheckpoint(playerid, 0, 77.5625,-1997.1251,-0.2571, 70.5086,-1804.0684,-0.0702, 4.0);
		}
		else if(CP[playerid] == 327)//Exam_04
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 328;
			SetPlayerRaceCheckpoint(playerid, 0, 70.5086,-1804.0684,-0.0702, 61.5156,-1608.7644,-0.0980, 4.0);
		}
		else if(CP[playerid] == 328)//Exam_05
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 329;
			SetPlayerRaceCheckpoint(playerid, 0, 61.5156,-1608.7644,-0.0980, 55.6332,-1452.0927,-0.1414, 4.0);
		}
		else if(CP[playerid] == 329)//Exam_06
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 330;
			SetPlayerRaceCheckpoint(playerid, 0, 55.6332,-1452.0927,-0.1414, 92.5749,-1179.8567,-0.2280, 4.0);
		}
		else if(CP[playerid] == 330)//Exam_07
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 331;
			SetPlayerRaceCheckpoint(playerid, 0, 92.5749,-1179.8567,-0.2280, 53.1649,-916.6714,-0.1384, 4.0);
		}
		else if(CP[playerid] == 331)//Exam_08
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 332;
			SetPlayerRaceCheckpoint(playerid, 0, 53.1649,-916.6714,-0.1384, 105.4644,-914.0349,-0.1508, 4.0);
		}
		else if(CP[playerid] == 332)//Exam_09
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 333;
			SetPlayerRaceCheckpoint(playerid, 0, 105.4644,-914.0349,-0.1508, 76.5405,-1114.1943,-0.1254, 4.0);
		}
		else if(CP[playerid] == 333)//Exam_10
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 334;
			SetPlayerRaceCheckpoint(playerid, 0, 76.5405,-1114.1943,-0.1254, 6.7520,-1282.7123,-0.1511, 4.0);
		}
		else if(CP[playerid] == 334)//Exam_11
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 335;
			SetPlayerRaceCheckpoint(playerid, 0, 6.7520,-1282.7123,-0.1511, 36.4564,-1584.6893,-0.0363, 4.0);
		}
		else if(CP[playerid] == 335)//Exam_12
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 336;
			SetPlayerRaceCheckpoint(playerid, 0, 36.4564,-1584.6893,-0.0363, 135.7337,-1973.1390,-0.2320, 4.0);
		}
		else if(CP[playerid] == 336)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 337;
			SetPlayerRaceCheckpoint(playerid, 0, 135.7337,-1973.1390,-0.2320, 324.4874,-1910.9631,-0.4350, 4.0);
		}
		else if(CP[playerid] == 337)//Exam_13
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 338;
			SetPlayerRaceCheckpoint(playerid, 1, 324.4874,-1910.9631,-0.4350, 0,0,0, 5.0);
		}
		else if(CP[playerid] == 338)//Exam_final
		{
			RemovePlayerFromVehicleEx(playerid);
			TakingLesson[playerid] = 0;
			CP[playerid] = 0;
			DestroyVehicleEx(ExamCar[playerid]);
			ExamCar[playerid] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			SCM(playerid, -1, "{ee5555}Felicitari!{a9c4e4} Ai terminat testul si ai fost taxat cu {ee5555}$35,000{a9c4e4}!");
			GivePlayerCash(playerid, -35000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 10500;
			SaveBusiness(BizzEntered[playerid]);
			PlayerInfo[playerid][pBoatLic] = 100;
			SetPlayerInteriorEx(playerid,3);
			SetPlayerPosEx(playerid,-2026.8217,-114.3419,1035.1719);
			OnPlayerUpdateEx(playerid);
			SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$\n", "Cumpara", "Iesi" );
		}
	}
	if(IsPlayerInVehicle(playerid, ExamCar[playerid]) && TakingLesson[playerid] == 1)
	{
		if(CP[playerid] == 339)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 340;
			SetPlayerRaceCheckpoint(playerid, 3, 1884.5710,-2481.1450,24.4512, 1667.5903,-2485.9426,24.5369, 6.0);
		}
		else if(CP[playerid] == 340)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 341;
			SetPlayerRaceCheckpoint(playerid, 3, 1667.5903,-2485.9426,24.5369, 1533.3113,-2493.7595,24.5693, 6.0);
		}
		else if(CP[playerid] == 341)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 342;
			SetPlayerRaceCheckpoint(playerid, 3, 1533.3113,-2493.7595,24.5693, 1423.0216,-2500.1799,24.6434, 6.0);
		}
		else if(CP[playerid] == 342)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 343;
			SetPlayerRaceCheckpoint(playerid, 3, 1423.0216,-2500.1799,24.6434, 1421.3856,-2590.6750,24.6916, 6.0);
		}
		else if(CP[playerid] == 343)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 344;
			SetPlayerRaceCheckpoint(playerid, 3, 1421.3856,-2590.6750,24.6916, 1652.6711,-2589.1670,24.7288, 6.0);
		}
		else if(CP[playerid] == 344)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 345;
			SetPlayerRaceCheckpoint(playerid, 3, 1652.6711,-2589.1670,24.7288, 1935.1965,-2592.4885,24.8028, 6.0);
		}
		else if(CP[playerid] == 345)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 346;
			SetPlayerRaceCheckpoint(playerid, 3, 1935.1965,-2592.4885,24.8028, 2111.5723,-2565.0994,24.8823, 6.0);
		}
		else if(CP[playerid] == 346)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 347;
			SetPlayerRaceCheckpoint(playerid, 3, 2111.5723,-2565.0994,24.8823, 2027.2155,-2484.8757,24.9863, 6.0);
		}
		else if(CP[playerid] == 347)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 348;
			SetPlayerRaceCheckpoint(playerid, 1, 2027.203735,-2484.610107,13.715803, 0.0,0.0,0.0, 6.0);
		}
		else if(CP[playerid] == 348)//Exam_final
		{
			RemovePlayerFromVehicleEx(playerid);
			TakingLesson[playerid] = 0;
			CP[playerid] = 0;
			DestroyVehicleEx(ExamCar[playerid]);
			ExamCar[playerid] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			SCM(playerid, -1, "{ee5555}Felicitari!{a9c4e4} Ai terminat testul si ai fost taxat cu {ee5555}$50,000{a9c4e4}!");
			GivePlayerCash(playerid, -50000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 15000;
			SaveBusiness(BizzEntered[playerid]);
			PlayerInfo[playerid][pFlyLic] = 100;
			SetPlayerInteriorEx(playerid,3);
			SetPlayerPosEx(playerid,-2026.8217,-114.3419,1035.1719);
			OnPlayerUpdateEx(playerid);
			SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$\n", "Cumpara", "Iesi" );
		}
	}
	if(IsPlayerInVehicle(playerid, racecar[0]) || IsPlayerInVehicle(playerid, racecar[1]) || IsPlayerInVehicle(playerid, racecar[2]) || IsPlayerInVehicle(playerid, racecar[3]) || IsPlayerInVehicle(playerid, racecar[4]) || IsPlayerInVehicle(playerid, racecar[5]) || IsPlayerInVehicle(playerid, racecar[6]) || IsPlayerInVehicle(playerid, racecar[7]))
	{
		if(CP[playerid] == 350)
		{
			GivePlayerCash(playerid, 5000);
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 351;
			SetPlayerRaceCheckpoint(playerid, 0, 2597.7568,-1605.5165,19.2209, 2382.7219,-1618.2913,9.0375, 5.0);
		}
		else if(CP[playerid] == 351)
		{
			GivePlayerCash(playerid, 5000);
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 352;
			SetPlayerRaceCheckpoint(playerid, 0, 2382.7219,-1618.2913,9.0375, 2115.9509,-1521.8102,2.1880, 5.0);
		}
		else if(CP[playerid] == 352)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 353;
			SetPlayerRaceCheckpoint(playerid, 0, 2115.9509,-1521.8102,2.1880, 1795.7296,-1499.8480,7.7311, 5.0);
			GivePlayerCash(playerid, 5000);
		}
		else if(CP[playerid] == 353)
		{
			DisablePlayerRaceCheckpoint(playerid);
			GivePlayerCash(playerid, 5000);
			CP[playerid] = 354;
			SetPlayerRaceCheckpoint(playerid, 0, 1795.7296,-1499.8480,7.7311, 1594.2689,-1695.8096,28.0585, 5.0);
		}
		else if(CP[playerid] == 354)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 355;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1594.2689,-1695.8096,28.0585, 1639.2158,-2046.4901,21.3413, 5.0);
		}
		else if(CP[playerid] == 355)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 356;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1639.2158,-2046.4901,21.3413, 1495.0544,-2115.2344,13.4409, 5.0);
		}
		else if(CP[playerid] == 356)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 357;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1495.0544,-2115.2344,13.4409, 1362.9117,-2151.9241,13.1136, 5.0);
		}
		else if(CP[playerid] == 357)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 358;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1362.9117,-2151.9241,13.1136, 1320.2468,-2434.4431,8.1870, 5.0);
		}
		else if(CP[playerid] == 358)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 359;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1320.2468,-2434.4431,8.1870, 1335.7605,-2595.9790,13.1021, 5.0);
		}
		else if(CP[playerid] == 359)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 360;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1335.7605,-2595.9790,13.1021, 1837.0188,-2685.0889,5.5943, 5.0);
		}
		else if(CP[playerid] == 360)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 361;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 1837.0188,-2685.0889,5.5943, 2123.0820,-2664.1599,13.1021, 5.0);
		}
		else if(CP[playerid] == 361)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 362;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2123.0820,-2664.1599,13.1021, 2178.7830,-2433.9680,13.1021, 5.0);
		}
		else if(CP[playerid] == 362)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 363;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2178.7830,-2433.9680,13.1021, 2358.4749,-2218.3884,13.1021, 5.0);
		}
		else if(CP[playerid] == 363)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 364;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2358.4749,-2218.3884,13.1021, 2658.5649,-2169.8655,10.6570, 5.0);
		}
		else if(CP[playerid] == 364)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 365;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2658.5649,-2169.8655,10.6570, 2828.6619,-2096.3091,10.6568, 5.0);
		}
		else if(CP[playerid] == 365)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 366;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2828.6619,-2096.3091,10.6568, 2875.2551,-1665.1022,10.6059, 5.0);
		}
		else if(CP[playerid] == 366)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 367;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2875.2551,-1665.1022,10.6059, 2725.0107,-1655.5156,12.7895, 5.0);
		}
		else if(CP[playerid] == 367)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 368;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2725.0107,-1655.5156,12.7895, 2716.7800,-1610.6288,12.5829, 5.0);
		}
		else if(CP[playerid] == 368)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 369;
			GivePlayerCash(playerid, 5000);
			SetPlayerRaceCheckpoint(playerid, 0, 2716.7800,-1610.6288,12.5829, 0.0,0.0,0.0, 5.0);
		}
		else if(CP[playerid] == 369) FinishEvent(EventInfo[EventMoney], EventInfo[EventType], PlayerInfo[playerid][pNamePlayer]);
	}
	return 1;
}
//==============================================================================
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[256], newcar = GetPlayerVehicleID(playerid);
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
		if(Centura[playerid] == true)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid,0)) RemovePlayerAttachedObject(playerid,0);
			Centura[playerid] = false;
		}
		if(CP[playerid] == 34)
		{
			TowAcc[playerid] = 1;
			DisablePlayerCheckpointEx(playerid);
			SetTimerEx_("TowAgain", 120000, 120000, 1, "i", playerid);
		}
		if(Trucker2[playerid] == 1)
		{
			Trucker2[playerid] = 0;
			DisablePlayerCheckpointEx(playerid);
		}
		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1) TaxiDrivers -= 1;
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Nu mai esti la servici si ai castigat $%s.", FormatNumber(TransportMoney[playerid]));
			SCM(playerid, COLOR_WHITE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; 
			TransportMoney[playerid] = 0;
			PlayerTextDrawHide(playerid, TaxiTD);
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
			if(IsPlayerConnected(TransportDriver[playerid]))
			{
				TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
				TransportTime[TransportDriver[playerid]] = 0;
				TransportCost[TransportDriver[playerid]] = 0;
				format(string, sizeof(string), "~w~The ride cost~n~~r~$%d",TransportCost[playerid]);
				GameTextForPlayer(playerid, string, 5000, 1);
				format(string, sizeof(string), "~w~Passenger left the taxi~n~~g~Earned $%d",TransportCost[playerid]);
				GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				GivePlayerCash(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
				PlayerTextDrawHide(TransportCost[playerid], TaxiTD);
			}
		}
		if(JobCar[playerid][PlayerInfo[playerid][pJob]] == gLastCar[playerid])
		{
			SCM(playerid,COLOR_JOB,"Vehiculul va disparea in 2 minute daca nu te urci in el.");
			JobTimer[playerid] = SetTimerEx_("StopWork", 60000, 120000, 1, "iii", playerid, JobCar[playerid][PlayerInfo[playerid][pJob]], PlayerInfo[playerid][pJob]);
		}
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(GetPlayerWantedLevelEx(playerid) > 0)
		{
			new wakaname[MAX_PLAYER_NAME], wakaname2[MAX_PLAYER_NAME];
			new price = GetPlayerWantedLevelEx(playerid) * 5000;
			new count = 0, rand = random(sizeof(Inchisoare));
			GetPlayerName(playerid, wakaname, MAX_PLAYER_NAME);
			foreach(new i: Player)
			{
				new fact = PlayerInfo[i][pLeader]+PlayerInfo[i][pMember];
				if((fact == 1 || fact == 2 || fact == 3) && CrimInRange(50.0, playerid, i))
				{
					GetPlayerName(i, wakaname2, MAX_PLAYER_NAME);
					count = 1;
					GameTextForPlayer(i, "~b~Running suspect bonus", 5000, 1);
					GivePlayerCash(i, price);
					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Ai primit $%d pentru prinderea suspectului %s!",price, wakaname);
					SCM(i,COLOR_BLUE,string);
					if(fact == 1 || fact == 2 || fact == 3)
					{
						format(string, sizeof(string), "HQ: All Units. Officer %s has completed assignment.",wakaname2);
						SendTeamMessage(2, COLOR_DBLUE, string);
						format(string, sizeof(string), "HQ: %s has been processed, got killed having wanted %d.",wakaname,GetPlayerWantedLevelEx(playerid));
						SendTeamMessage(2, COLOR_DBLUE, string);
					}
				}
			}
			if(count == 1)
			{
				GivePlayerCash(playerid, -price);
				PlayerInfo[playerid][pJailed] = 1;
				PlayerInfo[playerid][pJailTime] = GetPlayerWantedLevelEx(playerid)*400;
				pUpdate(playerid,pJailedx);
				pUpdate(playerid,pJailTimex);
				format(string, sizeof(string), "* You are in Jail for %d Seconds and lose $%s because of running away and getting shot by the Officer %s.", PlayerInfo[playerid][pJailTime], FormatNumber(price), wakaname2);
				SCM(playerid, COLOR_YELLOW, string);
				SetPlayerWantedLevelEx(playerid, 0);
				PlayerInfo[playerid][pWantedTime] = 0;
				SetPlayerInteriorEx(playerid, 10);
				SetPlayerPosEx(playerid,Inchisoare[rand][0],Inchisoare[rand][1],Inchisoare[rand][2]);
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER) 
	{
		switch(CarRadio[newcar])
		{
			case 0 .. 12: PlayAudioStreamForPlayer(playerid, RadioLink[CarRadio[newcar]]), ListenRadio[playerid] = CarRadio[newcar];
			case 13: YoutubeStream(playerid, Radio[newcar]), ListenRadio[playerid] = CarRadio[newcar];
			case 14: StopAudioStreamForPlayer(playerid), ListenRadio[playerid] = CarRadio[newcar];
		}
		foreach(new i: Player)
		{
			if(IsPlayerInVehicle(i, newcar) && GetPlayerState(i) == PLAYER_STATE_DRIVER && TransportDuty[i] > 0)
			{
				if(GetPlayerCash(playerid) < TransportValue[i])
				{
					format(string, sizeof(string), "* You need $%d to enter.", TransportValue[i]);
					SCM(playerid, COLOR_WHITE, string);
					RemovePlayerFromVehicleEx(playerid);
				}
				else
				{
					if(TransportDuty[i] == 1)
					{
						format(string, sizeof(string), "* You paid $%d to the Taxi Driver.", TransportValue[i]);
						SCM(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Passenger %s has entered your Taxi.", GetName(playerid));
						SCM(i, COLOR_WHITE, string);
						TransportTime[i] = 1;
						TransportTime[playerid] = 1;
						TransportCost[playerid] = TransportValue[i];
						TransportCost[i] = TransportValue[i];
						TransportDriver[playerid] = i;
					}
					GivePlayerCash(playerid, - TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			format(string,sizeof(string),"~r~~h~~h~~h~~h~%s",GetVehicleName(GetPlayerVehicleID(playerid)));
			GameTextForPlayer(playerid, string, 3000, 1);
			switch(CarRadio[newcar])
			{
				case 0 .. 12: PlayAudioStreamForPlayer(playerid, RadioLink[CarRadio[newcar]]), ListenRadio[playerid] = CarRadio[newcar];
				case 13: YoutubeStream(playerid, Radio[newcar]), ListenRadio[playerid] = CarRadio[newcar];
				case 14: StopAudioStreamForPlayer(playerid), ListenRadio[playerid] = CarRadio[newcar];
			}
			if(IsAPlane(newcar))
			{
				PlayerEnterTime[playerid] = GetTickCount();
				if(PlayerInfo[playerid][pFlyLic] < 1 && TakingLesson[playerid] != 1)
				{
					SCM(playerid, COLOR_GRAD2, "You still can not drive this category of vehicles!");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsABoat(newcar))
			{
				if(PlayerInfo[playerid][pBoatLic] < 1 && TakingLesson[playerid] != 1)
				{
					SCM(playerid, COLOR_GRAD2, "You still can not drive this category of vehicles!");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else
			{
				PlayerEnterTime[playerid] = GetTickCount();
				if(PlayerInfo[playerid][pCarLic] < 1 && TakingLesson[playerid] != 1 && !IsABike(newcar) && !IsAnRentVeh(newcar))
				{
					SCM(playerid, COLOR_GRAD2, "You still can not drive this category of vehicles!");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			if(IsAnOwnableCar(newcar))
			{
				new vsid = FindSpawnID(newcar);
				if(CarInfo[vsid][cInsurancecar] == 0)
				{
					if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
					{
						format(string, sizeof(string), "Acest vehicul nu mai are puncte de asigurare, cumpara tu 1 punct pentru %s$.", FormatNumber(CarInfo[vsid][cInscarprice]));
						SPD(playerid, DIALOG_CARDAMAGE, DIALOG_STYLE_MSGBOX, "\n", string, "Cumpara", "Inchide");
					}
					else
					{
						RemovePlayerFromVehicleEx(playerid);
						SCM(playerid, COLOR_VEHICLE,"Nu poti folosi acest vehicul deoarece nu mai are puncte de asigurare.");
					}
				}
				if(CarInfo[vsid][cOwned] == 1)
				{
					if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)	SFM(playerid, COLOR_GRAD2, "Acest %s (ID: %d) iti apartine. | Vechime: %d zile si %.1f km | Asigurare: %s$ (%d puncte)",CarInfo[vsid][cName],newcar,CarInfo[vsid][cDays],CarInfo[vsid][cKM],FormatNumber(CarInfo[vsid][cInscarprice]),CarInfo[vsid][cInsurancecar]);
					else SFM(playerid, COLOR_GRAD2, "Acest %s (ID: %d) este detinut de %s. | Vechime: %d zile si %.1f km | Asigurare: %s$ (%d puncte)",CarInfo[vsid][cName],newcar,CarInfo[vsid][cOwner],CarInfo[vsid][cDays],CarInfo[vsid][cKM],FormatNumber(CarInfo[vsid][cInscarprice]),CarInfo[vsid][cInsurancecar]);
				}
			}
			if(EngineSTATE[newcar] == 1) SetVehicleEngineState(newcar, true); else SetVehicleEngineState(newcar, false);
			if(LightsSTATE[newcar] == 1) SetVehicleLightsState(newcar, true); else SetVehicleLightsState(newcar, false);
			if(StaticVeh[newcar][svFaction] != GetPlayerFaction(playerid) && StaticVeh[newcar][svFaction] > 0)
			{
				format(string,sizeof(string)," Nu faci parte din factiunea %s.",NumeFactiune(StaticVeh[newcar][svFaction]));
				SCM(playerid,COLOR_GREY,string);
				RemovePlayerFromVehicleEx(playerid);
			}
			if(PlayerInfo[playerid][pFactionRank] < StaticVeh[newcar][svRank] && GetPlayerFaction(playerid) > 0)
			{
				format(string,sizeof(string),"	Acest vehicul poate fi folosit doar de cei cu Rank %d+.",StaticVeh[newcar][svRank]);
				SCM(playerid,COLOR_GRAD2,string);
				RemovePlayerFromVehicleEx(playerid);
			}
			if(PlayerInfo[playerid][pJob] == 6 && JobCar[playerid][6] == newcar)
			{
				if(Trucker[playerid] >= 1) KillTimer_(JobTimer[playerid]);
				if(Trucker2[playerid] == 0 && viddd[playerid] == 0)
				{
					Trucker2[playerid] = 1;
					SetPlayerCheckpointEx(playerid,-140.6853,-1117.4940,5.2682,5.0);
					CP[playerid] = 2;
					SCM(playerid, COLOR_WHITE, "{FEC3AC}Mergi la checkpoint pentru a incepe munca.");
					TruckID[playerid] = newcar;
				}
			}
			if(IsAnRentVeh(newcar))
			{
				if(HireCar[playerid] == newcar)	RentTime[playerid] = 600;
				else
				{
					TogglePlayerControllable(playerid, false);
					format(string, sizeof(string), "{ffffff}Poti inchiria aceast vehicul pentru doar {00CC66}%d$.",BizzInfo[20][bEntranceCost]);
					SPD(playerid,DIALOG_RENTV,DIALOG_STYLE_MSGBOX,"RentCar:",string,"{00CC66}Rent","{ff6633}Exit");
				}
			}
			gLastCar[playerid] = newcar;
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_DRIVER)
	{
		if((GetTickCount()-PlayerEnterTime[playerid]) < 220)
		{
			format(string, sizeof(string), "AdmWarning: %s (ID: %d) este posibil sa foloseasca In-Vehicle-Teleport-Hack.",GetName(playerid),playerid,GetPlayerScoreEx(playerid));
			SendAdminMessage(string, 1);
		}
	}
	return 1;
}
//==============================================================================
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][pMP3] == 0) StopAudioStreamForPlayer(playerid);
	if(IsAnOwnableCar(vehicleid))
	{
		new vsid = FindSpawnID(vehicleid);
		if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
		{
			new Float:x, Float:y, Float:z, Float:a;
			GetVehiclePos(vehicleid, x, y, z);
			GetVehicleZAngle(vehicleid, a);
			CarInfo[vsid][cLastX] = x;
			CarInfo[vsid][cLastY] = y;
			CarInfo[vsid][cLastZ] = z;
			CarInfo[vsid][cLastA] = a;
		}
	}
	if(Event[playerid] == 1 && EventInfo[EventType] == 3)
	{
		DisablePlayerRaceCheckpoint(playerid);
		CP[playerid] = 0;
		Event[playerid] = 0;
		DestroyVehicleEx(vehicleid);
		SpawnPlayer(playerid);
		EventInfo[EventPlayers]--;
		if(EventInfo[EventPlayers] == 0)
		{
			EventInfo[EventType] = 0;
			EventInfo[EventMoney] = 0;
		}
	}
	if(TakingLesson[playerid] == 1 && ExamCar[playerid] > 0)
	{
		TakingLesson[playerid] = 0;
		SCM(playerid, COLOR_LIGHT_RED,"* Ai picat examenul deoarece ai iesit din vehicul!");
		SetPlayerInteriorEx(playerid,3);
		SetPlayerPosEx(playerid,-2026.8217,-114.3419,1035.1719);
		DisablePlayerRaceCheckpoint(playerid);
		CP[playerid] = 0;
		DestroyVehicleEx(ExamCar[playerid]);
		ExamCar[playerid] = 0;
	}
	return 1;
}
//==============================================================================
public OnPlayerRequestClass(playerid, classid)
{
	new string[256];
	SetPlayerHealth(playerid, 99.9);
	PlayerTextDrawShow(playerid, NumePlayer);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	if(!gPlayerLogged[playerid])
	{
	    SetPlayerPosEx(playerid, 1967.677978, -1991.190795, -3.260505);
	    InterpolateCameraPos(playerid, 1642.303344, -2327.007568, 15.672925, 1967.677978, -1991.190795, 16.739494, 20000);
		InterpolateCameraLookAt(playerid, 1642.292968, -2327.523193, 15.546875, 1968.177246, -1991.205078, 16.651542, 20000);
		if(gPlayerAccount[playerid])
		{
			new laston[32], field[128];
			format(field,sizeof(field),"SELECT `lastOn` FROM `users` WHERE `name`='%s'",GetName(playerid));
			new Cache:last = mysql_query(SQL, field);
			if(cache_num_rows() > 0) cache_get_value(0, "lastOn", laston, 32);
			cache_delete(last);
			format(string,sizeof(string),"{B8DBFF}Bine ai revenit,  {427df4}%s{B8DBFF},  introdu parola pentru a te loga.\n\nData ultimei tale logari este:  {ffffff}%s",GetName(playerid),laston);
			SPD(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"Login:",string,"Login","Cancel");
			SCM(playerid,COLOR_LIGHT_RED," Ai 30 de secunde sa te loghezi pentru a nu primi kick.");
			logintime[playerid] = SetTimerEx_("LoginTime",30000,30000,1,"d",playerid);
		}
		else
		{
	        format(string,sizeof(string),"{B8DBFF}Bun venit, {427df4}%s\n{B8DBFF}Acest cont nu este inregistrat, te rog introdu o parola:",GetName(playerid));
			SPD(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,"Register:",string,"Register","Cancel");
			SCM(playerid,COLOR_LIGHT_RED," Ai 50 de secunde sa te inregistrezi pentru a nu primi kick.");
			logintime[playerid] = SetTimerEx_("LoginTime",50000,50000,1,"d",playerid);
	  	}
  	}
	return 1;
}
//==============================================================================
public OnGameModeInit()
{
    mysql_log(ALL);
    ConnectMySQL();
	SetGameModeText(SCRIPT_VERSION);
	//--------------------------------------------------------------
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(2);
	LimitPlayerMarkerRadius(5.0);
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	AntiDeAMX();
	ResetPickups();
	//--------------------------------------------------------------
	Time = TextDrawCreate(575.50000, 2.166669, "18.04.2017~n~22.22");
	TextDrawLetterSize(Time, 0.416249, 2.224167);
	TextDrawAlignment(Time, 2);
	TextDrawColor(Time, COLOR_WHITE);
	TextDrawSetShadow(Time, 2);
	TextDrawSetOutline(Time, 1);
	TextDrawBackgroundColor(Time, 255);
	TextDrawFont(Time, 3);
	TextDrawSetProportional(Time, 1);
	TextDrawSetShadow(Time, 2);
    //--------------------------------------------------------------
	PinTDs[0] = TextDrawCreate(361.356048, 170.083251, "usebox");
	TextDrawLetterSize(PinTDs[0], 0.000000, 17.467430);
	TextDrawTextSize(PinTDs[0], 261.309173, 0.000000);
	TextDrawAlignment(PinTDs[0], 1);
	TextDrawColor(PinTDs[0], 0);
	TextDrawUseBox(PinTDs[0], true);
	TextDrawBoxColor(PinTDs[0], -2139062017);
	TextDrawSetShadow(PinTDs[0], 0);
	TextDrawSetOutline(PinTDs[0], 0);
	TextDrawFont(PinTDs[0], 0);
	//--------------------------------------------------------------
	PinTDs[1] = TextDrawCreate(293.420227, 208.583328, "usebox");
	TextDrawLetterSize(PinTDs[1], 0.000000, 2.560183);
	TextDrawTextSize(PinTDs[1], 270.679382, 0.000000);
	TextDrawAlignment(PinTDs[1], 1);
	TextDrawColor(PinTDs[1], 0);
	TextDrawUseBox(PinTDs[1], true);
	TextDrawBoxColor(PinTDs[1], 102);
	TextDrawSetShadow(PinTDs[1], 0);
	TextDrawSetOutline(PinTDs[1], 0);
	TextDrawFont(PinTDs[1], 0);
	//--------------------------------------------------------------
	PinTDs[2] = TextDrawCreate(293.014648, 239.333190, "usebox");
	TextDrawLetterSize(PinTDs[2], 0.000000, 2.513329);
	TextDrawTextSize(PinTDs[2], 270.679382, 0.000000);
	TextDrawAlignment(PinTDs[2], 1);
	TextDrawColor(PinTDs[2], 0);
	TextDrawUseBox(PinTDs[2], true);
	TextDrawBoxColor(PinTDs[2], 102);
	TextDrawSetShadow(PinTDs[2], 0);
	TextDrawSetOutline(PinTDs[2], 0);
	TextDrawFont(PinTDs[2], 0);
	//--------------------------------------------------------------
	PinTDs[3] = TextDrawCreate(293.077545, 270.666656, "usebox");
	TextDrawLetterSize(PinTDs[3], 0.000000, 2.419625);
	TextDrawTextSize(PinTDs[3], 270.679290, 0.000000);
	TextDrawAlignment(PinTDs[3], 1);
	TextDrawColor(PinTDs[3], 0);
	TextDrawUseBox(PinTDs[3], true);
	TextDrawBoxColor(PinTDs[3], 102);
	TextDrawSetShadow(PinTDs[3], 0);
	TextDrawSetOutline(PinTDs[3], 0);
	TextDrawFont(PinTDs[3], 0);
	//--------------------------------------------------------------
	PinTDs[4] = TextDrawCreate(322.657867, 208.666656, "usebox");
	TextDrawLetterSize(PinTDs[4], 0.000000, 2.607033);
	TextDrawTextSize(PinTDs[4], 300.196746, 0.000000);
	TextDrawAlignment(PinTDs[4], 1);
	TextDrawColor(PinTDs[4], 0);
	TextDrawUseBox(PinTDs[4], true);
	TextDrawBoxColor(PinTDs[4], 102);
	TextDrawSetShadow(PinTDs[4], 0);
	TextDrawSetOutline(PinTDs[4], 0);
	TextDrawFont(PinTDs[4], 0);
	//--------------------------------------------------------------
	PinTDs[5] = TextDrawCreate(322.721038, 239.416717, "usebox");
	TextDrawLetterSize(PinTDs[5], 0.000000, 2.513329);
	TextDrawTextSize(PinTDs[5], 300.196990, 0.000000);
	TextDrawAlignment(PinTDs[5], 1);
	TextDrawColor(PinTDs[5], 0);
	TextDrawUseBox(PinTDs[5], true);
	TextDrawBoxColor(PinTDs[5], 102);
	TextDrawSetShadow(PinTDs[5], 0);
	TextDrawSetOutline(PinTDs[5], 0);
	TextDrawFont(PinTDs[5], 0);
	//--------------------------------------------------------------
	PinTDs[6] = TextDrawCreate(322.315307, 270.166656, "usebox");
	TextDrawLetterSize(PinTDs[6], 0.000000, 2.513329);
	TextDrawTextSize(PinTDs[6], 300.196838, 0.000000);
	TextDrawAlignment(PinTDs[6], 1);
	TextDrawColor(PinTDs[6], 0);
	TextDrawUseBox(PinTDs[6], true);
	TextDrawBoxColor(PinTDs[6], 102);
	TextDrawSetShadow(PinTDs[6], 0);
	TextDrawSetOutline(PinTDs[6], 0);
	TextDrawFont(PinTDs[6], 0);
	//--------------------------------------------------------------
	PinTDs[7] = TextDrawCreate(351.832672, 208.333404, "usebox");
	TextDrawLetterSize(PinTDs[7], 0.000000, 2.607033);
	TextDrawTextSize(PinTDs[7], 329.245697, 0.000000);
	TextDrawAlignment(PinTDs[7], 1);
	TextDrawColor(PinTDs[7], 0);
	TextDrawUseBox(PinTDs[7], true);
	TextDrawBoxColor(PinTDs[7], 102);
	TextDrawSetShadow(PinTDs[7], 0);
	TextDrawSetOutline(PinTDs[7], 0);
	TextDrawFont(PinTDs[7], 0);
	//--------------------------------------------------------------
	PinTDs[8] = TextDrawCreate(351.427124, 239.666687, "usebox");
	TextDrawLetterSize(PinTDs[8], 0.000000, 2.513329);
	TextDrawTextSize(PinTDs[8], 329.245788, 0.000000);
	TextDrawAlignment(PinTDs[8], 1);
	TextDrawColor(PinTDs[8], 0);
	TextDrawUseBox(PinTDs[8], true);
	TextDrawBoxColor(PinTDs[8], 102);
	TextDrawSetShadow(PinTDs[8], 0);
	TextDrawSetOutline(PinTDs[8], 0);
	TextDrawFont(PinTDs[8], 0);
	//--------------------------------------------------------------
	PinTDs[9] = TextDrawCreate(351.021789, 270.416656, "usebox");
	TextDrawLetterSize(PinTDs[9], 0.000000, 2.466475);
	TextDrawTextSize(PinTDs[9], 329.246032, 0.000000);
	TextDrawAlignment(PinTDs[9], 1);
	TextDrawColor(PinTDs[9], 0);
	TextDrawUseBox(PinTDs[9], true);
	TextDrawBoxColor(PinTDs[9], 102);
	TextDrawSetShadow(PinTDs[9], 0);
	TextDrawSetOutline(PinTDs[9], 0);
	TextDrawFont(PinTDs[9], 0);
	//--------------------------------------------------------------
	PinTDs[10] = TextDrawCreate(322.036163, 300.583282, "usebox");
	TextDrawLetterSize(PinTDs[10], 0.000000, 2.419625);
	TextDrawTextSize(PinTDs[10], 300.197448, 0.000000);
	TextDrawAlignment(PinTDs[10], 1);
	TextDrawColor(PinTDs[10], 0);
	TextDrawUseBox(PinTDs[10], true);
	TextDrawBoxColor(PinTDs[10], 102);
	TextDrawSetShadow(PinTDs[10], 0);
	TextDrawSetOutline(PinTDs[10], 0);
	TextDrawFont(PinTDs[10], 0);
	//--------------------------------------------------------------
	PinTDs[11] = TextDrawCreate(267.868041, 202.166656, "usebox");
	TextDrawLetterSize(PinTDs[11], 0.000000, -3.701313);
	TextDrawTextSize(PinTDs[11], 355.481628, 0.000000);
	TextDrawAlignment(PinTDs[11], 1);
	TextDrawColor(PinTDs[11], 0);
	TextDrawUseBox(PinTDs[11], true);
	TextDrawBoxColor(PinTDs[11], 102);
	TextDrawSetShadow(PinTDs[11], 0);
	TextDrawSetOutline(PinTDs[11], 0);
	TextDrawFont(PinTDs[11], 0);
	//--------------------------------------------------------------
	PinTDs[12] = TextDrawCreate(294.825775, 303.083312, "usebox");
	TextDrawLetterSize(PinTDs[12], 0.000000, 1.685554);
	TextDrawTextSize(PinTDs[12], 269.742309, 0.000000);
	TextDrawAlignment(PinTDs[12], 1);
	TextDrawColor(PinTDs[12], 0);
	TextDrawUseBox(PinTDs[12], true);
	TextDrawBoxColor(PinTDs[12], 16711935);
	TextDrawSetShadow(PinTDs[12], 0);
	TextDrawSetOutline(PinTDs[12], 0);
	TextDrawFont(PinTDs[12], 0);
	//--------------------------------------------------------------
	PinTDs[13] = TextDrawCreate(353.922546, 302.916625, "usebox");
	TextDrawLetterSize(PinTDs[13], 0.000000, 1.685554);
	TextDrawTextSize(PinTDs[13], 326.902069, 0.000000);
	TextDrawAlignment(PinTDs[13], 1);
	TextDrawColor(PinTDs[13], 0);
	TextDrawUseBox(PinTDs[13], true);
	TextDrawBoxColor(PinTDs[13], -16776961);
	TextDrawSetShadow(PinTDs[13], 0);
	TextDrawSetOutline(PinTDs[13], 0);
	TextDrawFont(PinTDs[13], 0);
	//-------------------------------Obiecte spawn-------------------------------
	CreateDynamicObject(1522,861.134460,-1636.732299,13.929459,0.000000,0.000000,79.400093);
	CreateDynamicObject(3526, 895, -1653.4000244141, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(3526, 894.90002441406, -1673.6999511719, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(2745, 893.40002441406, -1673.9000244141, 14.5, 0, 0, 90.75);
	CreateDynamicObject(2745, 893.5, -1653.3000488281, 14.5, 0, 0, 90.7470703125);
	CreateDynamicObject(3660, 869.19476, -1685.31311, 15.06123,   0.00000, 0.00000, 0.20504);
	CreateDynamicObject(3660, 888.83167, -1685.24719, 15.07293,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 897.59747, -1685.25696, 15.08041,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(994, 881.29998779297, -1654.9000244141, 12.5, 0, 0, 270.5);
	CreateDynamicObject(994, 894.7998046875, -1654.7998046875, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 890.2998046875, -1654.8994140625, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 885.8994140625, -1654.8994140625, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 867.90002441406, -1654.9000244141, 12.60000038147, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 876.7998046875, -1654.8994140625, 12.60000038147, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 872.2998046875, -1654.8994140625, 12.60000038147, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 867.90002441406, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 872.29998779297, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 876.90002441406, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 881.29998779297, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 885.90002441406, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 890.09997558594, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(994, 894.79998779297, -1666.1999511719, 12.5, 0, 0, 270.49987792969);
	CreateDynamicObject(983, 885.74670, -1645.25659, 13.23410, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 879.32477, -1645.25024, 13.23410, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 872.92096, -1645.25244, 13.23410, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 867.27649, -1642.02002, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 870.47559, -1645.26123, 13.23410, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 888.92865, -1642.03613, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 895.74066, -1642.04846, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 898.92310, -1645.22534, 13.23410, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 903.76166, -1645.19104, 13.23410, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 906.97736, -1641.96985, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 907.44025, -1648.67651, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 907.42651, -1655.06934, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 907.46167, -1671.47705, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 907.43237, -1677.87476, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 907.42151, -1684.25745, 13.23410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 907.20129, -1644.18042, 13.29688, 356.85840, 0.00000, 3.14159);
	CreateDynamicObject(638, 907.19696, -1641.54297, 13.29688, 356.85840, 0.00000, 3.14159);
	CreateDynamicObject(638, 859.67889, -1685.96631, 13.29688, 356.85840, 0.00000, 3.14159);
	CreateDynamicObject(638, 859.68921, -1688.63562, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.69562, -1691.29639, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.69537, -1693.96545, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.67828, -1696.58118, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.67810, -1699.17358, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.65552, -1701.76453, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.64606, -1704.39819, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.64209, -1707.07581, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.63422, -1709.71338, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.63422, -1709.71338, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.61243, -1712.40002, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.61182, -1715.07788, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.60089, -1717.75781, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 859.56982, -1720.43762, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 857.92767, -1721.82495, 13.29690, 0.00000, 0.00000, -89.00000);
	CreateDynamicObject(638, 855.23767, -1721.87378, 13.29690, 0.00000, 0.00000, -89.00000);
	CreateDynamicObject(638, 854.24225, -1692.10022, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.23138, -1694.78369, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.22070, -1697.46680, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.21814, -1700.13354, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.23541, -1702.80310, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.24866, -1705.45044, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.26025, -1708.06995, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.24384, -1710.75269, 13.29690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 854.25189, -1713.44666, 13.29690, 0.00000, 0.00000, 0.00000);
	//-------------------------------Primarie Object-------------------------------
	CreateDynamicObject(10377, 1479.58997, -1804.57996, 30.70000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1500.84998, -1742.14001, 13.20000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1526.43005, -1742.14001, 13.20000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1547.20996, -1742.16003, 13.20000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1559.92004, -1755.03003, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.92004, -1771.03003, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.93005, -1777.43994, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 1558.41003, -1790.10999, 18.09000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1559.44995, -1812.85999, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.45996, -1828.81006, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.44995, -1832.02002, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1444.47998, -1742.18994, 13.20000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1418.84998, -1742.28003, 13.20000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1402.82996, -1742.27002, 13.20000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1399.65002, -1755.14001, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1399.66003, -1771.18005, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 1400.97998, -1791.96997, 18.07000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1399.06995, -1814.56995, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1399.04004, -1830.56995, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1399.04004, -1833.78003, 13.20000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4825, 1477.31006, -1661.80005, 9.80000, 0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8661, 1454.85999, -1717.68994, 11.67000, -4.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1514.80005, -1696.02002, 12.03000, -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1514.88000, -1616.15002, 12.28000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1485.02002, -1606.31006, 12.28000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1445.20996, -1606.25000, 12.28000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1444.67004, -1626.23999, 12.28000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1485.07996, -1626.28003, 12.28000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1494.01001, -1727.27002, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1514.62000, -1727.28003, 13.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1470.22998, -1727.30005, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1399.63000, -1755.15002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.59998, -1709.52002, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1478.00000, -1597.53003, 12.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4826, 1477.27002, -1618.93005, 21.86000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(9833, 1458.12000, -1643.28003, 13.66000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1495.90002, -1643.66003, 13.34000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1450.85999, -1658.77002, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1468.12000, -1658.13000, 13.04000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1470.38000, -1671.68994, 13.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1450.52002, -1670.60999, 13.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1464.72998, -1681.85999, 13.07000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1451.32996, -1680.84998, 13.07454,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1487.02002, -1659.05005, 13.08000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1502.40002, -1658.46997, 13.08000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1502.28003, -1669.93994, 13.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1501.12000, -1682.37000, 13.06000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1484.75000, -1679.47998, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1485.46997, -1668.26001, 13.07000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(712, 1514.98999, -1660.82996, 20.00000,   0.00000, 0.00000, -51.06000);
	CreateDynamicObject(712, 1515.60999, -1670.44995, 20.00000,   0.00000, 0.00000, 12.54000);
	CreateDynamicObject(712, 1515.44995, -1679.58997, 20.00000,   0.00000, 0.00000, -7.74000);
	CreateDynamicObject(712, 1515.55005, -1690.64001, 20.00000,   0.00000, 0.00000, -19.02000);
	CreateDynamicObject(712, 1515.40002, -1703.29004, 20.00000,   0.00000, 0.00000, 30.36000);
	CreateDynamicObject(712, 1515.70996, -1716.05005, 20.00000,   0.00000, 0.00000, -40.44000);
	CreateDynamicObject(712, 1440.68005, -1716.16003, 21.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1441.68994, -1700.73999, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1441.56006, -1685.05005, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1440.93994, -1670.75000, 21.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1440.56995, -1656.35999, 21.21000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1450.83997, -1701.83997, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1469.68994, -1703.07996, 13.10000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1470.18005, -1712.09998, 13.08017,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1469.81006, -1723.55005, 13.08000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1450.50000, -1713.20996, 13.05000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1484.70996, -1715.06995, 13.07450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1450.92004, -1723.77002, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1503.68994, -1714.25000, 13.07000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1503.29004, -1702.69995, 13.07000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1483.54004, -1703.70996, 13.08359,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1483.77002, -1723.91003, 13.07000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1503.06995, -1723.94995, 13.07000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(712, 1513.08997, -1608.00000, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1498.40002, -1607.68994, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1456.96997, -1608.52002, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1442.06995, -1607.69995, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.05005, -1656.13000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.40002, -1662.76001, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.75000, -1667.08997, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.23999, -1672.70996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.22998, -1676.19995, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.21997, -1682.47998, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.38000, -1686.93994, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.60999, -1683.91003, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.60999, -1658.27002, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.56995, -1628.52002, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.56006, -1615.73999, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1452.34998, -1597.52002, 12.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1503.59998, -1597.51001, 12.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1514.68005, -1656.09998, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1515.04004, -1616.32996, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1463.81006, -1727.27002, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1457.37000, -1727.25000, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1450.91125, -1727.24182, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1516.80005, -1607.07996, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1516.81995, -1610.26001, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1495.77002, -1607.00000, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1495.78003, -1610.18994, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1494.81995, -1717.69995, 11.67000,   -4.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1514.68994, -1736.00000, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1516.41003, -1693.62000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.40002, -1699.13000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.97998, -1706.43994, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.87000, -1712.14001, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.91003, -1720.09998, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1443.70996, -1715.02002, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1226, 1467.97998, -1727.67004, 15.96000,   3.14000, 0.00000, 1.57000);
	CreateDynamicObject(1226, 1485.17004, -1727.67004, 15.94000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1226, 1504.96997, -1727.01001, 16.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1443.70996, -1696.83997, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1443.73999, -1674.94995, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1451.43005, -1695.28003, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1458.19995, -1695.33997, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1465.02002, -1695.32996, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1464.87000, -1686.29004, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1458.17004, -1686.35999, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1451.32996, -1686.31995, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1490.02002, -1686.37000, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1497.04004, -1686.46997, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1504.03003, -1686.38000, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1490.68994, -1695.33997, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1497.33997, -1695.31006, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1503.69995, -1695.31006, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1510.81995, -1657.13000, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1510.96997, -1677.06006, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1443.77002, -1655.40002, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1510.84998, -1696.79004, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1510.91003, -1716.69995, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.68994, -1727.16003, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1476.43005, -1727.09998, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1478.23999, -1727.06995, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.16003, -1727.06006, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1508.28003, -1727.14001, 12.27000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1510.07996, -1727.08997, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1444.62000, -1726.69995, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1446.73999, -1726.62000, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1440.06458, -1727.17725, 13.04000,   0.00000, 0.00000, 89.28000);
	CreateDynamicObject(1256, 1480.34998, -1705.67004, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1480.29004, -1721.92004, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1474.31995, -1721.90002, 12.89000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1256, 1474.32996, -1705.75000, 12.89000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(802, 1491.19995, -1703.87000, 12.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(804, 1489.39001, -1710.41003, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1490.53003, -1706.56006, 13.44000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1490.93005, -1700.89001, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1495.31006, -1700.07996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1499.93005, -1701.07996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1487.37000, -1703.54004, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1486.70996, -1707.73999, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1487.93005, -1712.06995, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1466.44995, -1708.57996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1466.13000, -1704.16003, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1464.23999, -1699.67004, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1459.71997, -1699.10999, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1455.31006, -1700.04004, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1463.58997, -1707.06006, 13.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1463.32996, -1702.02002, 13.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(804, 1462.25000, -1706.18994, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1500.42004, -1695.98999, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1493.80005, -1695.88000, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1461.38000, -1696.06006, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1454.23999, -1696.00000, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1442.97998, -1723.28003, 14.91000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1443.00012, -1702.61719, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1443.05005, -1681.89001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1442.93994, -1659.67004, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1433.81006, -1676.68994, 16.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1656.25000, 16.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1636.22998, 16.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1619.05005, 16.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1444.55005, -1596.94995, 12.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1511.62000, -1722.81006, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1511.57996, -1703.31995, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1511.60864, -1683.23914, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1511.81995, -1659.95996, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1256, 1480.35999, -1656.28003, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1480.31006, -1677.21997, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1474.29004, -1677.42004, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1474.31006, -1656.31006, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1231, 1481.25000, -1704.00000, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1481.12000, -1723.64001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.59998, -1723.94995, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.56006, -1704.06995, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.50000, -1679.01001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1481.07996, -1679.03003, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.62000, -1654.26001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1481.17004, -1654.28003, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1214, 1484.07996, -1742.48999, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1486.90002, -1742.45996, 12.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(745, 1447.21997, -1608.09998, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(746, 1506.32996, -1609.04004, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(811, 1501.23999, -1608.67004, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1453.10999, -1605.76001, 13.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1438.91003, -1605.98999, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1438.91003, -1609.18005, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1459.93994, -1609.20996, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1459.96997, -1606.01001, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1471.34998, -1596.69995, 15.98000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1451.33997, -1596.69995, 16.03000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1283, 1440.33997, -1593.85999, 15.31000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1488.53003, -1596.69995, 16.05000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1504.89001, -1596.69995, 16.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 1460.54004, -1742.19995, 13.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1466.97998, -1742.20996, 13.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1214, 1481.47998, -1742.46997, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1478.52002, -1742.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1475.33997, -1742.48999, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.97998, -1742.43994, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8841, 1429.01001, -1769.87000, 15.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16363, 1430.28003, -1769.48999, 12.62000,   0.00000, 0.00000, -214.14000);
	CreateDynamicObject(1340, 1510.59998, -1690.81995, 13.30000,   0.00000, 0.00000, 179.82001);
	CreateDynamicObject(1341, 1443.79004, -1690.57996, 13.29000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1342, 1438.85999, -1652.31006, 13.29000,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(10378, 1479.56995, -1768.47998, 11.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11247, 1529.65002, -1686.52002, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11247, 1529.65002, -1639.21997, 12.93000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11246, 1529.64001, -1686.55005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11246, 1529.69995, -1639.17004, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.34998, -1666.00000, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.50000, -1679.90002, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.40002, -1632.95996, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.57996, -1645.26001, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.59998, -1654.94995, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.39001, -1713.35999, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.45996, -1702.77002, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.50000, -1691.23999, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 1529.47998, -1686.75000, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1529.42004, -1700.15002, 13.05000,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(8990, 1529.42004, -1706.45996, 13.05000,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(8990, 1529.48999, -1659.10999, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1529.76001, -1648.43005, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1529.45996, -1638.87000, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1439.12000, -1662.68994, 12.29000,   0.00000, 0.00000, -119.94000);
	CreateDynamicObject(8990, 1439.10999, -1674.95996, 12.29000,   0.00000, 0.00000, -63.42000);
	CreateDynamicObject(8990, 1439.13000, -1686.40002, 12.29000,   0.00000, 0.00000, -119.94000);
	CreateDynamicObject(8990, 1438.83997, -1698.71997, 12.29000,   0.00000, 0.00000, -63.42000);
	CreateDynamicObject(8990, 1439.53003, -1711.34998, 12.29000,   0.00000, 0.00000, -119.94000);
	CreateDynamicObject(9152, 1459.81995, -1675.37000, 12.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9152, 1458.52002, -1717.14001, 12.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9152, 1495.51001, -1719.53003, 12.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9152, 1494.83997, -1670.71997, 12.82000,   0.00000, 0.00000, 77.82000);
	CreateDynamicObject(1283, 1528.48999, -1605.57996, 15.34000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1229, 1524.21997, -1673.70996, 13.80000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1229, 1524.21997, -1693.96997, 13.87000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1226, 1450.33997, -1727.39001, 16.09000,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(1283, 1430.19995, -1719.26001, 15.34000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1702.35999, 16.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, 1525.35999, -1715.58997, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.42004, -1696.38000, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.12000, -1677.66003, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.50000, -1661.21997, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.43005, -1643.53003, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.44995, -1626.92004, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.55005, -1607.25000, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1214, 1537.78003, -1681.88000, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1534.92004, -1681.76001, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.78003, -1680.92004, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.75000, -1678.70996, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.75000, -1676.48999, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.72998, -1673.97998, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.73999, -1671.65002, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.73999, -1669.37000, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.71997, -1666.98999, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.76001, -1664.84998, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1534.83997, -1663.50000, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.71997, -1663.51001, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1534.73999, -1718.43994, 11.67000,   -4.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1512.64001, -1752.82996, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1519.35999, -1752.79004, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1527.07996, -1752.73999, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1535.28003, -1752.84998, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1543.73999, -1752.94995, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1597, 1466.02002, -1747.78003, 15.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1492.88000, -1747.62000, 15.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1466.02002, -1760.31995, 15.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1492.93994, -1760.79004, 15.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8841, 1527.31006, -1769.23999, 15.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16363, 1528.21997, -1769.08997, 12.62000,   0.00000, 0.00000, -214.14000);
	CreateDynamicObject(1231, 1466.47998, -1754.01001, 15.16000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1492.96997, -1754.10999, 15.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1493.00000, -1767.06006, 15.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1466.68005, -1766.96997, 15.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1256, 1491.65002, -1747.64001, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1491.70996, -1760.85999, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1467.66003, -1747.93005, 13.11000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(1256, 1467.57996, -1760.18005, 13.11000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(1214, 1536.22998, -1663.45996, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1536.40002, -1681.83997, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1499.02002, -1613.47998, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1505.44995, -1613.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1511.90002, -1613.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1513.47998, -1613.47998, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1513.55005, -1603.80005, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1507.13000, -1603.80005, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1500.68994, -1603.77002, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1499.10999, -1603.78003, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1456.76001, -1602.77002, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1450.31995, -1602.73999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1443.85999, -1602.73999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1442.26001, -1602.75000, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1442.10999, -1612.47998, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1448.51001, -1612.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1454.93005, -1612.51001, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1456.51001, -1612.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1492.87000, -1773.64001, 15.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1466.10999, -1773.65002, 15.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1491.70996, -1773.80005, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1467.75000, -1773.93005, 13.11000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(11245, 1482.95996, -1783.62000, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 1476.47998, -1783.67004, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 1469.95996, -1783.69995, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 1489.48999, -1783.78003, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11489, 1479.37000, -1754.54004, 12.45000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11245, 1479.85999, -1754.63000, 28.44000,   0.00000, -70.00000, 0.00000);
	CreateDynamicObject(1233, 1534.92004, -1681.81995, 13.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1233, 1534.85999, -1663.53003, 13.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1502.39001, -1643.12000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1490.59998, -1643.38000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1463.90002, -1643.15002, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1452.10999, -1642.93005, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1452.80005, -1643.64001, 13.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1463.85999, -1643.55005, 13.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1490.68005, -1643.76001, 13.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1502.38000, -1643.20996, 13.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1449.32788, -1580.72302, 15.12807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1450.66968, -1561.24353, 15.12807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 1439.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.77999);
	CreateDynamicObject(1223, 1443.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(1223, 1447.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(1223, 1451.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(1223, 1441.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 1445.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 1449.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 1453.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1290, 1429.59375, -1716.12610, 18.40295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1719.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.94702, -1709.47156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1429.57019, -1713.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1702.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.94702, -1683.97156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1652, 1429.94702, -1658.47156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1652, 1429.94702, -1632.97156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1652, 1429.94702, -1615.47156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(792, 1429.80176, -1709.68677, 11.39865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1709.68677, 11.39865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1705.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1699.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1696.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1692.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1688.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1685.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1682.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1679.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1675.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1671.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1668.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.18701, -1709.47156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1652, 1429.18701, -1683.97156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1215, 1429.59680, -1707.85010, 12.50014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1690.85010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1673.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.18701, -1658.47156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1652, 1429.18701, -1632.97156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1652, 1429.18701, -1615.47156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1290, 1429.59375, -1665.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1661.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1658.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1654.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1656.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1651.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1647.62610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1644.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1640.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1636.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1633.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1638.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1630.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1627.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1623.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1619.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1616.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1622.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1613.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1609.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1606.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1602.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1604.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14415, 12.88219833374, 24.883560180664, 978.47216796875, 0, 0, 0);
	CreateDynamicObject(3921, 31.192150115967, 33.572292327881, 972.84558105469, 0, 0, 0);
	CreateDynamicObject(3921, 13.071014404297, 34.188335418701, 972.85186767578, 0, 0, 180.5);
	CreateDynamicObject(2571, 25.396900177002, 26.564920425415, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2571, 15.2236328125, 26.583984375, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2290, 27.921730041504, 20.485948562622, 972.30810546875, 0, 0, 182);
	CreateDynamicObject(2290, 17.409408569336, 20.573760986328, 972.30810546875, 0, 0, 181.99951171875);
	CreateDynamicObject(1707, 27.71630859375, 29.205331802368, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1707, 17.3935546875, 29.2294921875, 972.30810546875, 0, 0, 179.99450683594);
	CreateDynamicObject(1703, 7.7965579032898, 29.939395904541, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(15037, 22.77286529541, 36.493759155273, 972.71508789063, 0, 0, 182);
	CreateDynamicObject(14820, 25.40202331543, 36.640998840332, 972.41784667969, 0, 0, 0);
	CreateDynamicObject(2007, 20.468437194824, 38.37629699707, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2007, 24.645927429199, 38.371906280518, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2164, 22.331247329712, 38.572845458984, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2604, 34.933959960938, 20.424879074097, 973.10498046875, 0, 0, 0);
	CreateDynamicObject(2606, 8.0697784423828, 11.172622680664, 976.63165283203, 0, 0, 180);
	CreateDynamicObject(2606, 34.8369140625, 18.109375, 977.14007568359, 0, 0, 179.99450683594);
	CreateDynamicObject(2606, 35.246299743652, 38.610122680664, 976.86743164063, 0, 0, 359.99450683594);
	CreateDynamicObject(2737, 17.911577224731, 38.541591644287, 973.97918701172, 0, 0, 0);
	CreateDynamicObject(2737, 27.660676956177, 38.560729980469, 973.94757080078, 0, 0, 0);
	CreateDynamicObject(2616, 22.929857254028, 38.561264038086, 974.73468017578, 0, 0, 0);
	CreateDynamicObject(2118, 26.409599304199, 30.025247573853, 972.30810546875, 0, 0, 1.99951171875);
	CreateDynamicObject(2118, 16.136476516724, 30.2375831604, 972.30810546875, 0, 0, 359.99450683594);
	CreateDynamicObject(2116, 14.27580165863, 32.348472595215, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2116, 14.261756896973, 34.729187011719, 972.31439208984, 0, 0, 270);
	CreateDynamicObject(2116, 14.253480911255, 36.957927703857, 972.31439208984, 0, 0, 270);
	CreateDynamicObject(2116, 29.676477432251, 36.449016571045, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2116, 29.681119918823, 34.118865966797, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2116, 29.697277069092, 31.77455329895, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2086, 17.574542999268, 37.748474121094, 972.69970703125, 0, 0, 0);
	CreateDynamicObject(2086, 27.391899108887, 37.749706268311, 972.69970703125, 0, 0, 0);
	CreateDynamicObject(2069, 21.363128662109, 38.315517425537, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2069, 25.351539611816, 38.396476745605, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1670, 23.198328018188, 36.262851715088, 973.14465332031, 0, 0, 0);
	CreateDynamicObject(1671, 27.455299377441, 36.875652313232, 972.76831054688, 0, 0, 182);
	CreateDynamicObject(1671, 17.64453125, 36.6513671875, 972.76831054688, 0, 0, 181.99952697754);
	CreateDynamicObject(1671, 34.210556030273, 19.518211364746, 972.76831054688, 0, 0, 181.99951171875);
	CreateDynamicObject(1954, 17.669990539551, 37.625129699707, 973.20056152344, 0, 0, 0);
	CreateDynamicObject(1954, 27.362134933472, 37.69454574585, 973.20056152344, 0, 0, 0);
	CreateDynamicObject(1724, 15.037530899048, 14.392949104309, 972.30810546875, 0, 0, 230);
	CreateDynamicObject(2224, 13.830142021179, 11.110122680664, 972.34448242188, 0, 0, 85.994506835938);
	CreateDynamicObject(2298, 25.16895866394, 15.669061660767, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2296, 27.540256500244, 11.400924682617, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(2564, 14.243070602417, 17.120758056641, 972.31439208984, 0, 0, 0);
	CreateDynamicObject(2817, 25.916971206665, 15.994219779968, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 21.178152084351, 18.482625961304, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 22.655033111572, 18.502902984619, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2819, 18.964454650879, 18.088655471802, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2824, 15.739050865173, 18.306798934937, 972.95251464844, 0, 0, 0);
	CreateDynamicObject(2827, 25.992832183838, 16.486358642578, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2834, 26.308320999146, 12.033020973206, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2834, 20.250049591064, 13.853987693787, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2842, 17.296726226807, 16.154273986816, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2842, 15.229259490967, 16.15841293335, 972.31439208984, 0, 0, 0);
	CreateDynamicObject(14806, 16.639596939087, 11.288228988647, 973.39410400391, 0, 0, 179.5);
	CreateDynamicObject(14867, 31.68688583374, 15.309727668762, 973.83782958984, 0, 0, 90);
	CreateDynamicObject(1661, 19.631978988647, 14.763167381287, 978.30493164063, 0, 0, 0);
	CreateDynamicObject(1719, 13.667896270752, 11.951212882996, 972.36254882813, 0, 0, 310);
	CreateDynamicObject(2591, 24.288017272949, 17.858940124512, 975.01000976563, 0, 0, 0);
	CreateDynamicObject(2591, 20.239166259766, 17.948934555054, 975.01000976563, 0, 0, 0);
	CreateDynamicObject(2025, 22.409246444702, 11.337461471558, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(2267, 17.997169494629, 19.534685134888, 974.07666015625, 0, 0, 0);
	CreateDynamicObject(2268, 16.750827789307, 19.030666351318, 972.73992919922, 0, 0, 0);
	CreateDynamicObject(2255, 26.490245819092, 19.066036224365, 973.24829101563, 0, 0, 0);
	CreateDynamicObject(14455, 12.639927864075, 17.95885848999, 973.98614501953, 0, 0, 272);
	CreateDynamicObject(2817, 21.625564575195, 28.82405090332, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 21.711833953857, 20.185459136963, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 21.660312652588, 27.023685455322, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2202, 36.803932189941, 18.899320602417, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2202, 24.63761138916, 37.468852996826, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2626, 35.280879974365, 36.280433654785, 972.82580566406, 0, 0, 0);
	CreateDynamicObject(2622, 36.956295013428, 36.370143890381, 973.09289550781, 0, 0, 0);
	CreateDynamicObject(2620, 33.731910705566, 36.326976776123, 973.08508300781, 0, 0, 0);
	CreateDynamicObject(2593, 36.487594604492, 35.63069152832, 973.16003417969, 0, 0, 0);
	CreateDynamicObject(2593, 34.102012634277, 35.51358795166, 973.16003417969, 0, 0, 0);
	CreateDynamicObject(2583, 35.283836364746, 38.360736846924, 973.17553710938, 0, 0, 0);
	CreateDynamicObject(2578, 36.859916687012, 38.510147094727, 975.36224365234, 0, 0, 0);
	CreateDynamicObject(2579, 33.567043304443, 38.485324859619, 975.31433105469, 0, 0, 0);
	CreateDynamicObject(2493, 36.414253234863, 35.376281738281, 973.50927734375, 0, 0, 0);
	CreateDynamicObject(2494, 34.086681365967, 35.259178161621, 973.38006591797, 0, 0, 0);
	CreateDynamicObject(2441, 32.674644470215, 38.402313232422, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2500, 32.878299713135, 38.434543609619, 973.36364746094, 0, 0, 0);
	CreateDynamicObject(1622, 38.19469833374, 24.578357696533, 977.69091796875, 0, 0, 0);
	CreateDynamicObject(1616, 32.209762573242, 18.145559310913, 977.42974853516, 0, 0, 266.25);
	CreateDynamicObject(1569, 20.682876586914, 28.321384429932, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1569, 23.704778671265, 28.339315414429, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1567, 23.69469833374, 20.05552482605, 972.32745361328, 0, 0, 180);
	CreateDynamicObject(1567, 20.65625, 19.998046875, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1566, 38.551471710205, 35.110122680664, 973.82348632813, 0, 0, 270);
	CreateDynamicObject(1566, 38.579376220703, 31.94659614563, 973.82348632813, 0, 0, 90);
	CreateDynamicObject(1536, 0.1027472242713, 20.447515487671, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1536, -2.9169917106628, 20.417507171631, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1533, -16.739162445068, 31.108661651611, 972.30810546875, 0, 0, 90);
	CreateDynamicObject(1533, -16.720016479492, 32.591186523438, 972.30810546875, 0, 0, 90);
	CreateDynamicObject(1502, 4.8464765548706, 12.098909378052, 972.30810546875, 0, 0, 92);
	CreateDynamicObject(1502, 4.7102832794189, 15.118394851685, 972.30810546875, 0, 0, 272);
	CreateDynamicObject(16151, -10.247404098511, 15.523916244507, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1545, -11.324516296387, 17.689949035645, 973.60852050781, 0, 0, 86);
	CreateDynamicObject(1541, -11.39905166626, 16.616081237793, 973.56921386719, 0, 0, 88);
	CreateDynamicObject(12842, -3.7752265930176, 15.031318664551, 972.76275634766, 0, 0, 270);
	CreateDynamicObject(2755, 2.4838740825653, 20.037475585938, 976.58355712891, 0, 0, 0);
	CreateDynamicObject(2755, -5.923828125, 20.0732421875, 976.57702636719, 0, 0, 0);
	CreateDynamicObject(1959, -9.3243026733398, 14.623206138611, 972.91351318359, 0, 0, 270);
	CreateDynamicObject(2543, -9.9081935882568, 20.110122680664, 973.07745361328, 0, 0, 0);
	CreateDynamicObject(2541, 35.353992462158, 38.485992431641, 974.5927734375, 0, 0, 0);
	CreateDynamicObject(2589, -11.085306167603, 29.989120483398, 977.59020996094, 0, 0, 0);
	CreateDynamicObject(2589, -8.6594562530518, 29.722650527954, 977.59020996094, 0, 0, 0);
	CreateDynamicObject(2589, -8.775390625, 30.046875, 977.59020996094, 0, 0, 0);
	CreateDynamicObject(14651, 2.1854705810547, 23.477369308472, 974.54956054688, 0, 0, 180);
	CreateDynamicObject(14651, -4.84765625, 22.9833984375, 974.54956054688, 0, 0, 0);
	CreateDynamicObject(18092, -0.81538456678391, 38.172164916992, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2627, -6.1045513153076, 29.97894859314, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2627, -6.109375, 28.1572265625, 972.30810546875, 0, 0, 269.99951171875);
	CreateDynamicObject(2628, -6.6654834747314, 26.530153274536, 972.30810546875, 0, 0, 90);
	CreateDynamicObject(2629, 3.8869113922119, 30.582801818848, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2630, 3.7616939544678, 28.667652130127, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2632, -1.5915441513062, 29.137714385986, 972.35443115234, 0, 0, 270);
	CreateDynamicObject(2632, -1.5576171875, 23.265625, 972.35443115234, 0, 0, 270);
	CreateDynamicObject(18051, -1.4311602115631, 30.826602935791, 973.80603027344, 0, 0, 90);
	CreateDynamicObject(1840, 4.381275177002, 27.128513336182, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1829, -11.235162734985, 35.651714324951, 972.77264404297, 0, 0, 0);
	CreateDynamicObject(1828, -0.92138195037842, 33.358615875244, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2389, -7.3990516662598, 34.519687652588, 973.67736816406, 0, 0, 0);
	CreateDynamicObject(2390, 4.6067409515381, 34.333801269531, 973.71411132813, 0, 0, 0);
	CreateDynamicObject(2626, -5.6212368011475, 32.458377838135, 972.82580566406, 0, 0, 90);
	CreateDynamicObject(2771, -5.5377707481384, 32.867343902588, 973.58660888672, 0, 0, 0);
	CreateDynamicObject(1586, -0.58652114868164, 38.610122680664, 973.45587158203, 0, 0, 0);
	CreateDynamicObject(1586, -6.7048645019531, 38.610122680664, 973.56640625, 0, 0, 0);
	CreateDynamicObject(1586, -3.7177734375, 38.609375, 973.45330810547, 0, 0, 0);
	CreateDynamicObject(1586, -2.134765625, 38.609375, 973.45941162109, 0, 0, 0);
	CreateDynamicObject(1583, 0.92487996816635, 38.032722473145, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(1583, -2.6566796302795, 38.016735076904, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(1586, 4.0108051300049, 38.610122680664, 973.59674072266, 0, 0, 0);
	CreateDynamicObject(1586, 2.48583984375, 38.610122680664, 973.57299804688, 0, 0, 0);
	CreateDynamicObject(1586, 1.0338573455811, 38.610122680664, 973.54650878906, 0, 0, 0);
	CreateDynamicObject(1586, -5.3076171875, 38.609375, 973.48376464844, 0, 0, 0);
	CreateDynamicObject(1585, -1.4420177936554, 38.066814422607, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(1584, -0.23490512371063, 38.052879333496, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(2915, 3.3318185806274, 26.921283721924, 972.42926025391, 0, 0, 0);
	CreateDynamicObject(2915, 3.41015625, 27.5634765625, 972.42926025391, 0, 0, 0);
	CreateDynamicObject(2916, 3.8861789703369, 29.872987747192, 972.42462158203, 0, 0, 0);
	CreateDynamicObject(2916, 3.8790969848633, 31.269302368164, 972.42462158203, 0, 0, 0);
	CreateDynamicObject(3002, 2.4578876495361, 23.508266448975, 973.45599365234, 0, 0, 0);
	CreateDynamicObject(2558, -7.2763109207153, 31.367443084717, 973.50927734375, 0, 0, 90);
	CreateDynamicObject(2558, -7.2600908279419, 33.121574401855, 973.50927734375, 0, 0, 90);
	CreateDynamicObject(2176, 6.1406030654907, 24.292280197144, 975.15026855469, 0, 0, 0);
	CreateDynamicObject(2723, 3.0490531921387, 26.460178375244, 972.67620849609, 0, 0, 0);
	CreateDynamicObject(2723, -5.5178318023682, 25.616340637207, 972.67620849609, 0, 0, 0);
	CreateDynamicObject(2252, 16.717227935791, 27.389533996582, 973.11993408203, 0, 0, 0);
	CreateDynamicObject(2252, 26.81929397583, 27.304201126099, 973.11993408203, 0, 0, 0);
	CreateDynamicObject(2011, 19.718963623047, 27.536556243896, 972.30725097656, 0, 0, 0);
	CreateDynamicObject(2011, 24.1640625, 27.654296875, 972.2822265625, 0, 0, 0);
	CreateDynamicObject(2001, 18.710739135742, 20.741733551025, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2001, 24.725276947021, 20.633800506592, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(644, 7.2097082138062, 12.016550064087, 972.6083984375, 0, 0, 88);
	CreateDynamicObject(14415, 9.5577001571655, 12.275719642639, 985.42260742188, 0, 0, 0);
	CreateDynamicObject(14415, 9.5577001571655, 12.275719642639, 985.42260742188, 0, 0, 0);
	CreateDynamicObject(644, 9.5849609375, 11.93359375, 972.6083984375, 0, 0, 87.994995117188);
	CreateDynamicObject(1985, 2.503586769104, 28.136322021484, 977.46246337891, 0, 0, 0);
	CreateDynamicObject(16782, -16.313255310059, 32.607196807861, 976.00128173828, 0, 0, 0);
	CreateDynamicObject(1671, -6.7292366027832, 32.442501068115, 972.76831054688, 0, 0, 90);
	//-------------------------------Vama-------------------------------
	CreateDynamicObject(7033, 65.927567, -1533.642700, 8.355223, 0.8594, 0.0000, 83.3654);
	CreateDynamicObject(3877, 67.976868, -1531.783813, 5.551031, 0.0000, 0.0000, 353.9839);
	CreateDynamicObject(3877, 68.430626, -1522.038086, 5.578691, 0.0000, 0.0000, 356.5623);
	CreateDynamicObject(3877, 67.889786, -1545.917603, 5.697998, 0.0000, 0.0000, 356.5623);
	CreateDynamicObject(3877, 68.519646, -1536.313232, 5.706335, 0.0000, 0.0000, 354.8434);
	CreateDynamicObject(3877, 28.482025, -1527.640137, 5.680993, 0.0000, 0.0000, 351.4056);
	CreateDynamicObject(3877, 19.857996, -1525.820435, 5.018308, 0.0000, 0.0000, 348.8273);
	CreateDynamicObject(3877, 13.395845, -1524.428955, 4.614534, 0.0000, 0.0000, 348.8273);
	CreateDynamicObject(3877, 34.13360, -1516.79785, 6.40950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 30.49570, -1542.27893, 6.40950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 1743.17200, 506.35672, 33.48760,   0.00000, 0.00000, -18.00000);
	CreateDynamicObject(3749, 1724.58789, 512.37354, 33.48760,   0.00000, 0.00000, -18.04000);
	//-------------------------------Benzinarie-------------------------------
	CreateDynamicObject(1215, 1010.20001, -952.40002, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1011.59998, -952.29999, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1008.90002, -952.59998, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1007.59998, -952.70001, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1006.40002, -952.79999, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1005, -952.90002, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1003.70001, -953.09998, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1002.5, -953.20001, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1001.20001, -953.40002, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 999.79999, -953.5, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 998.5, -953.59998, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 997.40002, -953.79999, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 996.5, -944.5, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 997.70001, -944.40002, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 998.79999, -944.29999, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 1000.09998, -944.09998, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1001.29999, -944, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1002.5, -943.90002, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1003.70001, -943.79999, 41.7, 0, 0, 0);
	CreateDynamicObject(1215, 1005, -943.59998, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1006.20001, -943.5, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1007.40002, -943.40002, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1008.59998, -943.29999, 41.8, 0, 0, 0);
	CreateDynamicObject(1215, 1009.90002, -943.09998, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1011.09998, -943, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 992.40002, -949.79999, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 992.40002, -949, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 992.5, -948.20001, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 992.70001, -947.40002, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 993, -946.70001, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 993.5, -946.09998, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 994.09998, -945.5, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 994.79999, -945.09998, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 995.59998, -944.70001, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 992.59998, -950.59998, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 992.90002, -951.40002, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 993.29999, -952.09998, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 993.90002, -952.70001, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 994.70001, -953.29999, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 995.59998, -953.59998, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 996.40002, -953.79999, 41.6, 0, 0, 0);
	CreateDynamicObject(1215, 1012.5, -952.09998, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1013.29999, -951.90002, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1014, -951.5, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1014.59998, -951, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.09998, -950.40002, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.5, -949.79999, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.70001, -949.09998, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.90002, -948.40002, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.90002, -947.70001, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.90002, -947, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.79999, -946.29999, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.5, -945.59998, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1015.09998, -944.90002, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1014.59998, -944.29999, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1014, -943.79999, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1013.29999, -943.40002, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1012.5, -943.09998, 41.9, 0, 0, 0);
	CreateDynamicObject(1215, 1011.79999, -943, 41.9, 0, 0, 0);
	CreateDynamicObject(1597, 1004.20001, -948.09998, 43.8, 0, 0, 278);
	CreateDynamicObject(1676, 1002.40002, -937.20001, 42.9, 0, 0, 7.998);
	CreateDynamicObject(1676, 1005.5, -936.70001, 42.9, 0, 0, 7.998);
	CreateDynamicObject(1676, 1009.29999, -936.20001, 42.9, 0, 0, 7.998);
	CreateDynamicObject(1676, 998.5, -937.70001, 42.9, 0, 0, 7.998);
	CreateDynamicObject(1361, 1000.40002, -937.29999, 42.1, 0, 0, 0);
	CreateDynamicObject(1361, 1007.40002, -936.29999, 42.1, 0, 0, 0);
	//-------------------------------Gate Spray-------------------------------
    CreateDynamicObject(19912, 720.04590, -462.54245, 19.07934, -0.11999, -90.54002, 359.78787);
	CreateDynamicObject(19870, 1022.55939, -1029.43359, 33.11450, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19870, 485.85831, -1734.49976, 12.09600, 0.00000, -1.00000, -7.00000);
	CreateDynamicObject(19870, 2071.53809, -1833.95166, 14.32440, 0.00000, 0.00000, 91.00000);
	//--------------------------------------------------------------
	CreateDynamicObject(3353, 773.25891, -500.96588, 16.32810, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1501, 769.49170, -505.68149, 17.00000, 0.00000, 0.00000, 1.00000);
	CreateDynamicObject(971, 1843.32751, -1855.42114, 12.00100, 0.00000, 0.0000, 90.0000);
	//--------------------------------------------------------------
	actor1 = CreateDynamicActor(171,-2660.7856,1428.7192,906.4609,178.0027);//dice
	actor2 = CreateDynamicActor(171,-2654.4878,1428.7196,906.4609,179.6947);//dice
	new actor01 = CreateDynamicActor(194,2318.5112,-15.2178,26.7422,87.2930);//bank
	new actor02 = CreateDynamicActor(171,2319.2710,-7.4924,26.7422,87.8570);//bank
	new actor03 = CreateDynamicActor(6,-2034.6785,-117.9247,1035.1719,294.3863);//spawncar
	SetDynamicActorVirtualWorld(actor01,4);
	SetDynamicActorVirtualWorld(actor02,4);
	SetDynamicActorVirtualWorld(actor03,15);
	SetDynamicActorVirtualWorld(actor1,32);
	SetDynamicActorVirtualWorld(actor2,32);
	//--------------------------------------------------------------
	CreateDynamic3DTextLabel("Pentru a juca la barbut foloseste\n /dice",COLOR_GRAD2,-2654.5740,1426.0248,906.4609,15);
	CreateDynamic3DTextLabel("Pentru a juca la barbut foloseste\n /dice",COLOR_GRAD2,-2660.7439,1426.0248,906.4609,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Ca sa te predai\n Scrie: {107BAD}/mapredau",COLOR_GRAD4,250.0502,67.6689,1003.6406,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Pentru a merge in PD\n Tasteaza [ENTER]",COLOR_GRAD4,1524.921142,-1678.078857,5.890625,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Pentru a merge in garaj\n Tasteaza [ENTER] ",COLOR_GRAD4,242.248916,66.478530,1003.640625,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Pentru a merge pe acoperis\n Tasteaza [ENTER] ",COLOR_GRAD4,246.396865,87.863830,1003.640625,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Pentru a merge inapoi in PD\n Tasteaza [ENTER] ",COLOR_GRAD4,1572.044433,-1675.611938,28.395452,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Pentru a merge pe acoperis\n Scrie: /fbiup",COLOR_GRAD4,302.3943,-1533.1412,24.9219,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Pentru a merge inapoi in FBI\n Scrie: /fbidown",COLOR_GRAD4,337.222656,-1495.263183,76.539062,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{ffffff}DealerShip\n Foloseste {D91616}/buyvehicle",COLOR_LIGHT_BLUE,2131.4885,-1150.5781,24.1383, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);//ds
	CreateDynamic3DTextLabel("{ffffff}DealerShip\n Aici poti sa-ti vinzi vehiculul personal la stat",COLOR_LIGHT_BLUE,2135.7876,-1129.0999,25.3125, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);//ds
	CreateDynamic3DTextLabel("Centru de Licente\n Scrie {00CC00}/buylicense",0xCC0000FF,-2026.8217,-114.3419,1035.1719, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);//scoala
	CreateDynamic3DTextLabel("{ffffff}Foloseste {7FFF00}/restock{FFFFFF} pentru a lua pizza!",COLOR_WHITE,371.8752,-119.0085,1001.4922, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);//pizza
	//--------------------------------------------------------------
	barrierlv = CreateDynamicObject(968,2238.16210938,2450.41113281,10.71316910,0.00000000,90.00000000,90.00000000); 
	barrierls = CreateDynamicObject(968,1544.69641113,-1630.79003906,13.00000000,0.00000000,89.00000000,90.00000000); 
	garagels = CreateDynamicObject(980,1588.38684082,-1638.21655273,13.69999981,0.00000000,0.00000000,0.00000000); 
	garagelv = CreateDynamicObject(980,2335.28149414,2444.17993164,6.96999979,0.00000000,0.00000000,240.00000000); 
	garagelv1 = CreateDynamicObject(980,2294.00000000,2498.59155273,4.50000000,0.00000000,0.00000000,90.00000000); 
    barmata1 = CreateDynamicObject(10671, 2720.21436, -2503.87183, 13.42200,   0.00000, 0.00000, -1.00000);
	barmata2 = CreateDynamicObject(10671, 2720.23364, -2405.36719, 13.44570,   0.00000, 0.00000, -1.00000);
	vama1 = CreateDynamicObject(971, 67.61866, -1526.49878, 7.67815,   0.00000, 0.00000, 91.54827);
    vama2 = CreateDynamicObject(971, 67.32999, -1541.33826, 7.57409,   0.00000, 0.00000, 87.22391);
   	vama3 = CreateDynamicObject(980, 1743.43616, 506.75204, 30.59650,   0.00000, 0.00000, -18.00000);
	vama4 = CreateDynamicObject(980, 1724.68164, 512.72815, 30.59650,   0.00000, 0.00000, -18.00000);
	//--------------------------------------------------------------
    CreateDynamicPickup(1239, 23, 302.3943,-1533.1412,24.9219);//fbiup
    CreateDynamicPickup(1239, 23, 371.8752,-119.0085,1001.4922);//pizza
	CreateDynamicPickup(1239, 23, -2033.4347,-117.6303,1035.1719);//spawncar
	CreateDynamicPickup(1277, 23, 2131.4885,-1150.5781,24.1383);
	CreateDynamicPickup(1239, 23, 2135.7876,-1129.0999,25.3125);//sellcar
	CreateDynamicPickup(1581, 23, -2026.8217,-114.3419,1035.1719);//buylicense
	CreateDynamicPickup(1239, 23, 1512.33,-1459.90,9.50); //Factory
	CreateDynamicPickup(1239, 23, 1174.9100,-1365.7330,13.9876); // Elevator 1
	CreateDynamicPickup(1239, 23, 1174.9591,-1369.8761,23.9736); // Elevator 2
	//----- GunShop-------------------------------------------------
	CreateDynamicPickup(1239, 23, 305.3512,-141.8769,1004.0625);           // Sala GunShop: 1
	CreateDynamicPickup(1239, 23, 299.2108,-141.9607,1004.0547);           // Sala GunShop: 1
	CreateDynamicPickup(1239, 23, 286.1735,-29.8436,1001.5156);            // Sala GunShop: 2
	CreateDynamicPickup(1239, 23, 286.1049,-23.7126,1001.5229);            // Sala GunShop: 2
	CreateDynamicPickup(1239, 23, 312.1575,-166.1419,999.6010);			//buygun
	CreateDynamicPickup(1239, 23, 306.3999,-159.0712,999.5938);			// |>
	CreateDynamicPickup(1239, 23, 297.9745,-169.3398,999.5938);			// |>
	//--------------------------------------------------------------
	CreateDynamicPickup(1239, 23, 1528.779,-1678.113,5.890625); //Arrest Place
	CreateDynamicPickup(1239, 23, 246.396865,87.863830,1003.640625); //PDUP
	CreateDynamicPickup(1239, 23, 1572.0142,-1675.5951,28.3955); //PDDOWN
	CreateDynamicPickup(1239, 23, 337.222656,-1495.263183,76.539062); //FBIDOWN
	CreateDynamicPickup(1239, 23, 324.7172,1119.0161,1083.8828); //Getting Drugs for DrugDealers
	CreateDynamicPickup(1239, 23, 1368.2200,-1280.0271,13.5469); //materials get
	CreateDynamicPickup(1239, 23, 250.0502,67.6689,1003.6406);//mapredau
	//--------------------------------------------------------------
	skincivil = LoadModelSelectionMenu("skincivil.txt");
	skingrove = LoadModelSelectionMenu("skingrove.txt");
	skinrusian = LoadModelSelectionMenu("skinrusian.txt");
	skinazt = LoadModelSelectionMenu("skinazt.txt");
	skinnews = LoadModelSelectionMenu("skinnews.txt");
	skinhit = LoadModelSelectionMenu("skinhit.txt");
	skinpd = LoadModelSelectionMenu("skinpd.txt");
	skinfbi = LoadModelSelectionMenu("skinfbi.txt");
	skinmedic = LoadModelSelectionMenu("skinmedic.txt");
	skintaxi = LoadModelSelectionMenu("skintaxi.txt");
	skinballas = LoadModelSelectionMenu("skinballas.txt");
	skinvagos = LoadModelSelectionMenu("skinvagos.txt");
	glasseslist = LoadModelSelectionMenu("glasseslist.txt");
	carlist = LoadModelSelectionMenu("carlist.txt");
	hatlist = LoadModelSelectionMenu("hatlist.txt");
	//--------------------------------------------------------------
	LoadStock();				LoadCar();
	LoadClan();					LoadJobs();
	LoadHouse();				LoadBusiness();
 	LoadFactions();				LoadTurfs();				
	LoadATM();					LoadVehicles();
	LoadGiftBox();				LoadUsers();
	//--------------------------------------------------------------
	for(new car = 1; car < MAX_VEHICLES; car++)
	{
		Gas[car] = 100.5;
		CarRadio[car] = sizeof(RadioName)+1;
		CreateCar[car] = -1;
	}
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	//--------------------------------------------------------------
	mysql_query(SQL, "UPDATE `users` SET `Status` = '0'");
	EventInfo[EventEnabled] = 0; 
	EventInfo[EventMoney] = 0; 
	EventInfo[EventPlayers] = 0;
	paintm[1] = 1; 
	paintm[2] = 1; 
	paintm[3] = 1; 
	paintm[4] = 1;
	News[hTaken1] = 0; 
	News[hTaken2] = 0; 
	News[hTaken3] = 0; 
	News[hTaken4] = 0; 
	News[hTaken5] = 0;
	StrmidEx(News[hAdd1], "Nothing");
	StrmidEx(News[hAdd2], "Nothing");
	StrmidEx(News[hAdd3], "Nothing");
	StrmidEx(News[hAdd4], "Nothing");
	StrmidEx(News[hAdd5], "Nothing");
	StrmidEx(News[hContact1], "No-one");
	StrmidEx(News[hContact2], "No-one");
	StrmidEx(News[hContact3], "No-one");
	StrmidEx(News[hContact4], "No-one");
	StrmidEx(News[hContact5], "No-one");
	//--------------------------------------------------------------
	if(realtime)
	{
		new tmphour, tmpminute, tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	//--------------------------------------------------------------
	printf("\n[Streamer]: DynamicObjects: %d  |  DynamicPickups: %d", CountDynamicObjects(), CountDynamicPickups());
	printf("[Streamer]: DynamicMapIcons: %d  |  Dynamic3DTextLabelText: %d", CountDynamicMapIcons(), CountDynamic3DTextLabels());
	//--------------------------------------------------------------
	//ScriptTimer[0] = SetTimer_("MoneyTimer", 300, 1000, -1);
	ScriptTimer[1] = SetTimer_("CheckTimer", 700, 1000, -1);
	ScriptTimer[2] = SetTimer_("SendMSG", 600000, 600000, -1);
	ScriptTimer[3] = SetTimer_("Viata", 100000, 120000, -1);
	ScriptTimer[4] = SetTimer_("SaveData", 1000000, 1500000, -1);
	ScriptTimer[5] = SetTimer_("SyncTime", 30000, 35000, -1);
	ScriptTimer[6] = SetTimer_("OtherTimer", 600, 1000, -1);
	ScriptTimer[7] = SetTimer_("WarTimer", 1000, 1000, -1);
	ScriptTimer[8] = SetTimer_("Spectator", 800, 1000, -1);
	// ScriptTimer[9] = SetTimer_("CheckGas", 1000, 1000, -1);
	//ScriptTimer[10] = SetTimer_("CheckCar", 700, 1000, -1);
	//ScriptTimer[11] = SetTimer_("Kicks", 3000000, 3000000, -1);
	ScriptTimer[12] = SetTimer_("globalPlayerLoop", 10000, 5000, -1);
	ScriptTimer[13] = SetTimer_("AntiCheatTimer", 500, 1000, -1);
	return 1;
}
//==============================================================================
public OnVehicleSpawn(vehicleid)
{
	SetVehicleHealth(vehicleid, 999.9);
	if(IsABike(vehicleid)) EngineSTATE[vehicleid] = 1;
	else EngineSTATE[vehicleid] = 0;
  	LightsSTATE[vehicleid] = 0;
  	CarRadio[vehicleid] = sizeof(RadioName)+1;
    if(IsAnOwnableCar(vehicleid))
  	{
		SetTunning(vehicleid);
		SetVehicleHealth(vehicleid, CarInfo[FindSpawnID(vehicleid)][cHealth]);
		UpdateVehicleDamageStatus(vehicleid, CarInfo[FindSpawnID(vehicleid)][cDamage][0], CarInfo[FindSpawnID(vehicleid)][cDamage][1], CarInfo[FindSpawnID(vehicleid)][cDamage][2], CarInfo[FindSpawnID(vehicleid)][cDamage][3]);
  	}
	foreach(new i: Player)
	{
		if(HireCar[i] != -1)
		{
			if(gCarLock[HireCar[i]] == 0) SetVehicleDoorsState(HireCar[i], false);
			if(gCarLock[HireCar[i]] == 1) SetVehicleDoorsState(HireCar[i], true);
		}
	}
  	return 1;
}
//==============================================================================
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(gPlayerLogged[playerid] == false)
	{	
		SCM(playerid, COLOR_RED, "Trebuie sa fii logat pentru a putea folosi o comanda!");
		return 0;
	}
	if(GasesteReclama(params)) return 0;
    if(restartsv == 1 && !IsPlayerScripter(playerid))
	{
		SCM(playerid,COLOR_YELLOW2,"Nu poti folosi nicio comanda cat timp serverul se restarteaza!");
		return 0;
	}
	if(GetSVarInt(cmd) == 1)
	{
		SCM(playerid,COLOR_YELLOW2,"Aceasta comanda este blocata momentan.");
		return 0;
	}
	return 1;
}
//==============================================================================
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
    if(result == -1)
    {
		SFM(playerid,COLOR_YELLOW2,"Eroare: Comanda /%s nu este recunoscuta de server!",cmd);
		return 0;
    }
	return 1;
}
//==============================================================================
public OnPlayerText(playerid, text[])
{
	new string[MAX_STRING];
	if(gPlayerLogged[playerid] == false) return 0;
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
		return 0;
	}
	if(text[0] && !strcmp(text, LastText[playerid]) && LastTextTime[playerid] > GetTickCount() && PlayerInfo[playerid][pAdmin] < 1) return 0;
	if(text[0] >= 'a' && text[0] <= 'z') text[0] -= 32;
	LastTextTime[playerid] = GetTickCount() + 2000;
	strcpy(LastText[playerid], text, MAX_STRING);
	Cenzura(text);
	if(TalkingLive[playerid] != 255)
	{
		if(GetPlayerFaction(playerid) == 9)
		{
			format(string, sizeof(string), "{F41FA6}Reporter {FFAF00}%s: {B7FF00}%s", GetName(playerid), text);
			SCMAll(COLOR_LIGHTGREEN, string);
		}
		else
		{
			format(string, sizeof(string), "{00C0FF}Invitat {FFAF00}%s: {B7FF00}%s", GetName(playerid), text);
			SCMAll(COLOR_LIGHTGREEN, string);
		}
	}
	else if(Mobile[playerid] != -1)
	{
		switch(Mobile[playerid])
		{
			case 911: 
			{
				if(!strcmp(text, "LSPD", true) || !strcmp(text, "police", true))
				{
					SCM(playerid, COLOR_WHITE, "(cellphone) 911: You have reached the Los Santos Police emergency hotline; can you describe the crime?");
					Mobile[playerid] = 912;
				}
				else if(!strcmp(text, "medic", true) || !strcmp(text, "Paramedic", true))
				{
					SCM(playerid, COLOR_WHITE, "(cellphone) 911: This is the Los Santos Fire & Medic Department emergency hotline; describe the emergency, please.");
					Mobile[playerid] = 914;
				}
				else SCM(playerid, COLOR_WHITE, "(cellphone) 911: Sorry, I didn't quite understand that... speak again?");
			}
			case 912: 
			{
				if(strlen(text) > 1) 
				{
					format(string, sizeof(string), "Dispatch: %s has reported: '%s' (10-20 %s)", PlayerInfo[playerid][pNamePlayer], text, GetPlayerZone(playerid));
					SendTeamMessage(2, COLOR_RED, string);
					SCM(playerid, COLOR_WHITE, "(cellphone) 911: Thank you for reporting this incident; a patrol unit is now on its way.");
					SCM(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
					if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(playerid, 4);
					Mobile[playerid] = -1;
				}
			}
			case 914:
			{
				if(strlen(text) > 1)
				{
					format(string, sizeof(string), "Dispatch: %s has reported '%s' (10-20 %s)", PlayerInfo[playerid][pNamePlayer], text, GetPlayerZone(playerid));
					SendTeamMessage(2, COLOR_RED, string);
					SCM(playerid, COLOR_WHITE, "(cellphone) 911: Thank you for reporting this incident; we are on our way.");
					SCM(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
					if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(playerid, 4);
					Mobile[playerid] = -1;
				}
			}
			default:
			{
				if(Mobile[Mobile[playerid]] == playerid)
				{
					if(IsPlayerConnected(Mobile[playerid]))
					{
						format(string, sizeof(string),"(telefon) %s: %s", GetName(playerid), text);
						SCM(Mobile[playerid], COLOR_FADE1, string);
						ProxDetector(10.0,playerid,string,COLOR_FADE1,COLOR_FADE1,COLOR_FADE2,COLOR_FADE2,COLOR_FADE3);
					}
				}
			}
		}
	}
	else if(PlayerPaintballing[playerid] != 0 && GetPlayerTeam(playerid) == 5)
	{
		format(string, sizeof(string), " {9999ff}%s (score %d): %s", GetName(playerid), (KillP[playerid]-DeathP[playerid]), text);
		SendTeamMessage(5, COLOR_WHITE, string);
	}
	else if(PlayerInfo[playerid][pColor] == 0)
	{
		format(string, sizeof(string), "%s spune: %s", GetName(playerid), text);
		ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		SetPlayerChatBubble(playerid, text, COLOR_GRAD2, 100.0, 5000);
	}
	else if(PlayerInfo[playerid][pColor] == 1)
	{
		format(string, sizeof(string), "{%s}%s {ffffff}spune: %s",PlayerInfo[playerid][pColors], GetName(playerid), text);
		ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		SetPlayerChatBubble(playerid, text, COLOR_GRAD2, 100.0, 5000);
	}
	return 0;
}
//==============================================================================
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[1500];
	mysql_escape_string(inputtext, inputtext, MAX_STRING);
	//--------------------------------------------------------------
	if(dialogid == DIALOG_LOGIN2)
	{
		SetPlayerPosEx(playerid, 1168.088500, 1381.582641, -3.185750);
		InterpolateCameraPos(playerid, 1711.642089, 1448.227294, 13.340233, 1168.088500, 1381.582641, 16.814249, 20000);
		InterpolateCameraLookAt(playerid, 1711.144897, 1448.224365, 13.289665, 1168.084472, 1381.082641, 16.674325, 20000);
		if(response)
		{
			PlayerInfo[playerid][pSex] = 1;
			UpdateVar(playerid, "Sex", 1);
			//--------------------------------------------------------------
			SCM(playerid,COLOR_YELLOW,"(!) Sexul dumneavoastra a fost ales ca fiind {6600ff}masculin.");
			SPD(playerid,DIALOG_LOGIN3,DIALOG_STYLE_INPUT,"Email:","Care este adresa ta de email?","Ok","");
		}
		else if(!response)
		{
			PlayerInfo[playerid][pSex] = 2;
			UpdateVar(playerid, "Sex", 2);
			//--------------------------------------------------------------
			SCM(playerid,COLOR_YELLOW,"(!) Sexul dumneavoastra a fost ales ca fiind {ff3366}feminin.");
			SPD(playerid,DIALOG_LOGIN3,DIALOG_STYLE_INPUT,"Email:","Care este adresa ta de email?","Ok","");
		}
		else return SPD(playerid,DIALOG_LOGIN2,DIALOG_STYLE_MSGBOX,"Care este sexul tau?","Alege sexul pe care o sa-l aiba caracterul tau.","Masculin","Feminin");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_LOGIN3)
	{
		if(response)
		{
			if(IsMail(inputtext))
			{
				if(strlen(inputtext) > 64)
				{
					SPD(playerid,DIALOG_LOGIN3,DIALOG_STYLE_INPUT,"Email:","Care este adresa ta de email?","Ok","");
					SCM(playerid, COLOR_WHITE, "Aceasta adresa este prea lunga!");
				}
				else
				{
					new emailtext[64];
					mysql_escape_string(inputtext, emailtext);
					StrmidEx(PlayerInfo[playerid][pEmail], emailtext);
					//--------------------------------------------------------------
					mysql_format(SQL, string, sizeof(string),"UPDATE `users` SET `Email`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pEmail],PlayerInfo[playerid][pNamePlayer]);
					mysql_tquery(SQL, string);
					format(string, sizeof(string),"(!) Adresa ta de email este {6600ff}%s.",PlayerInfo[playerid][pEmail]);
					SCM(playerid,COLOR_YELLOW,string);
					//--------------------------------------------------------------
					SetPlayerPosEx(playerid, 1786.1758,-1258.4976,13.6417);
					SetPlayerCameraPos(playerid,1945.0199,-1193.6335,24.6674);
					SetPlayerCameraLookAt(playerid,1850.4360,-1266.4731,48.9110);
					SetPlayerInteriorEx(playerid, 0);
					//--------------------------------------------------------------
					format(string, sizeof(string)," ");
					strcat(string, "  {B8FF02}Descriere Generala Server de SA:MP {0000ff}Red{ffffff}Line\n");
					strcat(string, " \n");
					strcat(string, " {FFFFFF}Acest server utilizeaza modul Role Playing Games.\n");
					strcat(string, " {FFFFFF}In continuare vei urmari un tutorial ce va descrie la mod general serverul.\n");
					strcat(string, " {FFFFFF}Banii pentru a cumpara cele spuse mai sus se fac din joburi si din afaceri.\n");
					strcat(string, " {FFFFFF}Pe acest server sunt interzise: reclama, omorul playerilor, spam-ul, limbajul vulgar, inselaciunile, abuzul de buguri (erori).\n");
					TutTime[playerid] = 1;
					SPD(playerid,DIALOG_TUTORIAL,DIALOG_STYLE_MSGBOX,"Tutorial:",string,"Next","");
				}
			}
			else
			{
				SPD(playerid,DIALOG_LOGIN3,DIALOG_STYLE_INPUT,"Email:","Care este adresa ta de email?","Ok","");
				SCM(playerid, COLOR_WHITE, "Acest e-mail nu este valid!");
			}
		}
		else return	SPD(playerid,DIALOG_LOGIN3,DIALOG_STYLE_INPUT,"Email:","Care este adresa ta de email?","Ok","");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_LOGIN)
	{
		if(response)
		{
			if(strlen(inputtext) < 32 && strlen(inputtext) > 5 && !GasesteCaractere(inputtext))	OnPlayerLogin(playerid, inputtext);
			else
			{
				gPlayerLogTries[playerid]--;
				format(string,sizeof(string),"Parola introdusa este incorecta.\n\nTe rugam sa introduci parola corecta. Mai ai [%d] incercari",gPlayerLogTries[playerid]);
				SPD(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"Login:",string,"Login","Cancel");
				if(gPlayerLogTries[playerid] == 0) KickEx(playerid);
			}
		}
		else return KickEx(playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_REGISTER)
	{
		if(response)
		{
			if(strlen(inputtext) < 32 && strlen(inputtext) > 5 && !GasesteCaractere(inputtext))
			{
				new query[MAX_STRING], playersip[32];
				GetPlayerIp(playerid, playersip, sizeof(playersip));
		        SHA256_PassHash(inputtext, "x_=gez2Q3@-#UnFm", PlayerInfo[playerid][pPassword], 128);
				StrmidEx(PlayerInfo[playerid][pNamePlayer], GetName(playerid));
				mysql_format(SQL, query, sizeof(query), "INSERT INTO `users` (`name`,`password`) VALUES ('%s','%e')", GetName(playerid), PlayerInfo[playerid][pPassword]);
				mysql_tquery(SQL, query);
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Ip`='%s' WHERE `name`='%s'", playersip, GetName(playerid));
				mysql_tquery(SQL, query);
				SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login:", "Acum contul tau este inregistrat, introdu din nou parola pentru a te loga.", "Login", "Cancel");
			}
			else
			{
				format(string, sizeof(string),"{FFffff}Bun venit, {9966ff}%s\n{FFffff}Tu nu ai cont.\nTe rugam sa te inregistrezi:",GetName(playerid));
				SPD(playerid, DIALOG_REGISTER,DIALOG_STYLE_INPUT,"Register:",string,"Register","Cancel");
				SCM(playerid, COLOR_WHITE, "{FFFFCC}Error: Parola trebuie sa aiba caracterele cuprinse intre 5 si 32.");
			}
		}
		else return KickEx(playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TICKET)
	{
		if(response)
		{
			new giveplayerid = TicketOffer[playerid];
			if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 8.0) return SCM(playerid, COLOR_GRAD1, "Acel player nu este langa tine."); 
			format(string, sizeof(string), "* I-ai dat lui %s o amenda in valoare de %s$, motiv: %s", GetName(giveplayerid), FormatNumber(TicketValue(listitem)), TicketName(listitem));
			SCM(playerid, COLOR_LIGHTGREEN, string);
			format(string, sizeof(string), "* Ofiter %s ti-a dat o amenda in valoare de %s$, motiv: %s, scrie [/accept ticket %d] pentru a accepta.", GetName(playerid), FormatNumber(TicketValue(listitem)), TicketName(listitem), playerid);
			SCM(giveplayerid, COLOR_LIGHTGREEN, string);
			TicketOffer[giveplayerid] = playerid;
			TicketMoney[giveplayerid] = TicketValue(listitem);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GOTO_JOB)
	{
		if(response)
		{
			new job = listitem + 1;
			SetPlayerPosEx(playerid,JobInfo[job][JobX],JobInfo[job][JobY],JobInfo[job][JobZ]);
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			format(string, sizeof(string),"AdmCmd: %s s-a teleportat la jobul %s.",GetName(playerid),NumeJob(job));
			SendAdminMessage(string, 1);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_VOTE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pVoted] == 1) return SCM(playerid,COLOR_YELLOW2,"Ai votat deja pe cineva, asteapta rezultatul voturilor.");
			new i = listitem, id = GetPlayerID(VoteInfo[i][ProposePlayer]);
			if(VoteInfo[i][VotedPlayer] == 1) 
			{
				PlayerInfo[playerid][pVoted] = 1;
				VoteInfo[i][Votes]++;
				format(string,sizeof(string),"Felicitari! L-ai votat pe %s.",VoteInfo[i][ProposePlayer]);
				SCM(playerid,COLOR_YELLOW,string);
				if(IsPlayerConnected(id))
				{
					format(string,sizeof(string),"Ai primit un vot in plus de la %s, acum ai %d voturi.",GetName(playerid),VoteInfo[i][Votes]);
					SCM(id,COLOR_PURPLE,string);
				}
				UpdateVar(playerid, "Voted", 1);
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PROPOSE)
	{
		if(response)
		{
			new name[MAX_PLAYER_NAME], Cache:result = mysql_query(SQL, "SELECT `name` FROM `users`");
			for(new i, j = cache_num_rows(); i != j; i++)
			{
				cache_get_value(i, "name", name, MAX_PLAYER_NAME);
				if(strcmp(inputtext, name, true) == 0 && strcmp(inputtext, VoteInfo[0][ProposePlayer], true) != 0 && strcmp(inputtext, VoteInfo[1][ProposePlayer], true) != 0 && strcmp(inputtext, VoteInfo[2][ProposePlayer], true) != 0 && strcmp(inputtext, VoteInfo[3][ProposePlayer], true) != 0 && strcmp(inputtext, VoteInfo[4][ProposePlayer], true) != 0)
				{
					if(VoteInfo[0][VotedPlayer] == 0) 
					{
						StrmidEx(VoteInfo[0][ProposePlayer], inputtext);
						VoteInfo[0][VotedPlayer] = 1;
					}
					else if(VoteInfo[1][VotedPlayer] == 0)  
					{
						StrmidEx(VoteInfo[1][ProposePlayer], inputtext);
						VoteInfo[1][VotedPlayer] = 1;
					}
					else if(VoteInfo[2][VotedPlayer] == 0)  
					{
						StrmidEx(VoteInfo[2][ProposePlayer], inputtext);
						VoteInfo[2][VotedPlayer] = 1;
					}
					else if(VoteInfo[3][VotedPlayer] == 0) 
					{
						StrmidEx(VoteInfo[3][ProposePlayer], inputtext);
						VoteInfo[3][VotedPlayer] = 1;
					}
					else if(VoteInfo[4][VotedPlayer] == 0)  
					{
						StrmidEx(VoteInfo[4][ProposePlayer], inputtext);
						VoteInfo[4][VotedPlayer] = 1;
					}
					else return SCM(playerid,COLOR_GRAD1,"Nu mai poti propune alti jucatori la votare!");
					PlayerInfo[playerid][pPropose] = 1;
					UpdateVar(playerid, "Propose", 1);
				}
			}
			cache_delete(result);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BAR)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) < 500) return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani la tine.");
				GivePlayerCash(playerid,-500);
				BizzInfo[BizzEntered[playerid]][bMoney] += 500;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) < 500) return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani la tine.");
				GivePlayerCash(playerid,-500);
				BizzInfo[BizzEntered[playerid]][bMoney] += 500;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) < 600) return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani la tine.");
				if(PlayerDrunk[playerid] > 9)
				{
					SetPlayerDrunkLevel(playerid, 10000);
					SCM(playerid, COLOR_WHITE, "Esti beat, nu poti sa bei mai mult.");
					return 1;
				}
				GivePlayerCash(playerid,-600);
				BizzInfo[BizzEntered[playerid]][bMoney] += 600;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				PlayerDrunk[playerid] += 1;
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) < 1000) return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani la tine.");
				if(PlayerDrunk[playerid] > 9)
				{
					SetPlayerDrunkLevel(playerid, 10000);
					SCM(playerid, COLOR_WHITE, "Esti beat, nu poti sa bei mai mult.");
					return 1;
				}
				GivePlayerCash(playerid,-1000);
				BizzInfo[BizzEntered[playerid]][bMoney] += 1000;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				PlayerDrunk[playerid] += 1;
			}
			SaveBusiness(BizzEntered[playerid]);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BID)
	{
		if(response)
		{
			if(Licitatie == 0) return SCM(playerid, -1, "Nu este o licitatie activa!");
			new suma = GetPVarInt(playerid, "LicitatieMoney");
			if(GetPlayerCash(playerid) < TotalBani) return SCM(playerid, -1, "Nu ai destui bani!");
			if(GetPlayerCash(playerid) < suma) return SCM(playerid, -1, "Nu ai destui bani!");
			if(suma < TotalBani+5000 && TotalBani != 0) 
			{
				format(string, sizeof(string), "Suma invalida! Poti licita minim $%s.", FormatNumber(TotalBani+5000));
				SCM(playerid, COLOR_GREY, string);
				return 1;
			}				
			TotalBani = suma;
			TotalMoney[playerid] = suma;
			LastPlayer = playerid;
			if(TogBid[playerid] == false) 
			{
				TogBid[playerid] = true;
				SCM(playerid, COLOR_YELLOW, "Server-ul ti-a activat automat optiunea de a vedea mesajele de la licitatie.");
			}
			format(string, sizeof(string), "[BID] %s a licitat suma de $%s.", GetName(playerid), FormatNumber(suma));
			MesajLicitatie(0x483d8bFF, string);
		}
	}		
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PROPUNERE)
	{
		if(response)
		{
			format(string, sizeof(string),"SELECT * FROM `propuneri` WHERE `propuneri`.`ID`='%d'",Select[playerid][listitem]);
			new Cache:result = mysql_query(SQL, string);
			cache_get_value_int(0, "ID", Select[playerid][listitem]);
			mysql_format(SQL, string, sizeof(string),"DELETE FROM `propuneri` WHERE `propuneri`.`ID` = '%d'",Select[playerid][listitem]);
			mysql_tquery(SQL, string);
			SCM(playerid,COLOR_YELLOW,"Propunerea a fost inchisa cu succes!");
			Select[playerid][listitem] = 0;
			cache_delete(result);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BUGS)
	{
		if(response)
		{
			format(string, sizeof(string),"SELECT * FROM `bugs` WHERE `bugs`.`ID`='%d'",Select[playerid][listitem]);
			new Cache:result = mysql_query(SQL, string);
			cache_get_value_int(0, "ID", Select[playerid][listitem]);
			mysql_format(SQL, string, sizeof(string),"DELETE FROM `bugs` WHERE `bugs`.`ID` = '%d'",Select[playerid][listitem]);
			mysql_tquery(SQL, string);
			SCM(playerid,COLOR_YELLOW,"Reportul de bug a fost sters cu succes!");
			Select[playerid][listitem] = 0;
			cache_delete(result);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GMX)
	{
		if(response)
		{
			SCMAll(COLOR_GREEN, " ");
			SCMAll(COLOR_GREEN, "---- SERVER RESTART ----");
			SCMAll(COLOR_WHITE,"SERVER: Serverul se va restarta peste 30 de secunde!");
			foreach(new x: Player)
			{
				OnPlayerUpdateEx(x);
				pUpdate(x, pPunishx);
				pUpdate(x, pFactionRankx);
				pUpdate(x, pBankx);
				pUpdate(x, pRPx);
				pUpdate(x, pMatsx);
				pUpdate(x, pDrugsx);
				pUpdate(x, pGoldx);
				pUpdate(x, pFWarnsx);
				pUpdate(x, pFreePointx);
				pUpdate(x, pJailedx);
				pUpdate(x, pWantedTimex);
			}
			iGMXTick = 31;
			restartsv = 1;
			ScriptTimer[15] = SetTimer_("restartTimer", 999, 1000, -1);
		}
		else return SCM(playerid, COLOR_GREY, "Restart anulat!");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_NEON)
	{
		if(response)
		{
			new car = GetPlayerVehicleID(playerid), vsid = FindSpawnID(car);
			if(listitem == 0)
			{
				CarInfo[vsid][cNeon] = 1;
				AttachNeons(CarInfo[vsid][cSpawned],NEON_RED);
				GivePlayerCash(playerid,-15000);
				SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat un neon pentru vehiculul tau personal.");
				SCM(playerid,COLOR_YELLOW,"INFO: Neonul este vizibil doar noaptea sau in anumite perioade ale zilei.");
				vUpdate(vsid,cNeonx);
			}
			if(listitem == 1)
			{
				CarInfo[vsid][cNeon] = 2;
				AttachNeons(CarInfo[vsid][cSpawned],NEON_BLUE);
				GivePlayerCash(playerid,-15000);
				SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat un neon pentru vehiculul tau personal.");
				SCM(playerid,COLOR_YELLOW,"INFO: Neonul este vizibil doar noaptea sau in anumite perioade ale zilei.");
				vUpdate(vsid,cNeonx);
			}
			if(listitem == 2)
			{
				CarInfo[vsid][cNeon] = 3;
				AttachNeons(CarInfo[vsid][cSpawned],NEON_YELLOW);
				GivePlayerCash(playerid,-15000);
				SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat un neon pentru vehiculul tau personal.");
				SCM(playerid,COLOR_YELLOW,"INFO: Neonul este vizibil doar noaptea sau in anumite perioade ale zilei.");
				vUpdate(vsid,cNeonx);
			}
			if(listitem == 3)
			{
				CarInfo[vsid][cNeon] = 4;
				AttachNeons(CarInfo[vsid][cSpawned],NEON_GREEN);
				GivePlayerCash(playerid,-15000);
				SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat un neon pentru vehiculul tau personal.");
				SCM(playerid,COLOR_YELLOW,"INFO: Neonul este vizibil doar noaptea sau in anumite perioade ale zilei.");
				vUpdate(vsid,cNeonx);
			}
			if(listitem == 4)
			{
				CarInfo[vsid][cNeon] = 6;
				AttachNeons(CarInfo[vsid][cSpawned],NEON_PINK);
				GivePlayerCash(playerid,-15000);
				SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat un neon pentru vehiculul tau personal.");
				SCM(playerid,COLOR_YELLOW,"INFO: Neonul este vizibil doar noaptea sau in anumite perioade ale zilei.");
				vUpdate(vsid,cNeonx);
			}
			if(listitem == 5)
			{
				CarInfo[vsid][cNeon] = 7;
				AttachNeons(CarInfo[vsid][cSpawned],NEON_WHITE);
				GivePlayerCash(playerid,-15000);
				SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat un neon pentru vehiculul tau personal.");
				SCM(playerid,COLOR_YELLOW,"INFO: Neonul este vizibil doar noaptea sau in anumite perioade ale zilei.");
				vUpdate(vsid,cNeonx);
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PAINTBALL_WEAPON)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerPaintballing[playerid]][0]++;
				gunvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted2[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for the weapon set that includes the weapons deagle, m4, grenade & spray.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
			if(listitem == 1)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerPaintballing[playerid]][1]++;
				gunvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted2[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for weapon baseball bat.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
			if(listitem == 2)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerPaintballing[playerid]][2]++;
				gunvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted2[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for weapon chainsaw.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PAINTBALL_MAP)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerPaintballing[playerid]][0]++;
				mapvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for map rc_arena.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
			if(listitem == 1)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerPaintballing[playerid]][1]++;
				mapvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for map tennis.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
			if(listitem == 2)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerPaintballing[playerid]][2]++;
				mapvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for map farm.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
			if(listitem == 3)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerPaintballing[playerid]][3]++;
				mapvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for map beach.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
			if(listitem == 4)
			{
				new sendernamee[30];
				if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerPaintballing[playerid]][4]++;
				mapvoted[PlayerPaintballing[playerid]]++;
				PaintBallVoted[playerid] = 1;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						format(string,sizeof(string),"[VOTE] %s voted for map lspd.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PAINTBALL)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new sendernamee[30];
				if(paintp[1] >= 20) return SCM(playerid, COLOR_LIGHT_RED, "This arena is full.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0.0);
				}
				PlayerPaintballing[playerid] = 1;
				SetPlayerTeam(playerid, 5);
				BizzEntered[playerid] = 21;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
						format(string,sizeof(string),"%s has joined the paintball arena.", sendernamee);
						SCM(i, COLOR_YELLOW, string);
					}
				}
				paintp[1]++;
				if(paintp[1] == 1)
				{
					PlayerTextDrawHide(playerid, PaintballTD[0]);
					PlayerTextDrawShow(playerid, PaintballTD[1]);
					PlayerTextDrawSetString(playerid, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
					GameTextForPlayer(playerid, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
				}
				if(paintp[1] == 2)
				{
					paintrs[1] = 31;
					paintt[1] = 0;
					preparepaint1 = SetTimer_("PrepareRoundPaintBall1", 1000, 1000, -1);
				}
				SCM(playerid, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
				SpawnPlayer(playerid);
			}
			if(listitem == 1)
			{
				new stringg[128],sendernamee[30];
				if(paintp[2] >= 20) return SCM(playerid, COLOR_LIGHT_RED, "This arena is full.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0.0);
				}
				PlayerPaintballing[playerid] = 2;
				SetPlayerTeam(playerid, 5);
				BizzEntered[playerid] = 21;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
						format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
						SCM(i, COLOR_YELLOW, stringg);
					}
				}
				paintp[2]++;
				if(paintp[2] == 1)
				{
					PlayerTextDrawHide(playerid, PaintballTD[0]);
					PlayerTextDrawShow(playerid, PaintballTD[1]);
					PlayerTextDrawSetString(playerid, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
					GameTextForPlayer(playerid, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
				}
				if(paintp[2] == 2)
				{
					paintrs[2] = 31;
					paintt[2] = 0;
					preparepaint2 = SetTimer_("PrepareRoundPaintBall2", 1000, 1000, -1);
				}
				SCM(playerid, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
				SpawnPlayer(playerid);
			}
			if(listitem == 2)
			{
				new stringg[128],sendernamee[30];
				if(paintp[3] >= 20) return SCM(playerid, COLOR_LIGHT_RED, "This arena is full.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0.0);
				}
				PlayerPaintballing[playerid] = 3;
				SetPlayerTeam(playerid, 5);
				BizzEntered[playerid] = 21;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
						format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
						SCM(i, COLOR_YELLOW, stringg);
					}
				}
				paintp[3]++;
				if(paintp[3] == 1)
				{
					PlayerTextDrawHide(playerid, PaintballTD[0]);
					PlayerTextDrawShow(playerid, PaintballTD[1]);
					PlayerTextDrawSetString(playerid, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
					GameTextForPlayer(playerid, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
				}
				if(paintp[3] == 2)
				{
					paintrs[3] = 31;
					paintt[3] = 0;
					preparepaint3 = SetTimer_("PrepareRoundPaintBall3", 1000, 1000, -1);
				}
				SCM(playerid, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
				SpawnPlayer(playerid);
			}
			if(listitem == 3)
			{
				new stringg[128],sendernamee[30];
				if(paintp[4] >= 20) return SCM(playerid, COLOR_LIGHT_RED, "This arena is full.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0.0);
				}
				PlayerPaintballing[playerid] = 4;
				SetPlayerTeam(playerid, 5);
				BizzEntered[playerid] = 21;
				foreach(new i: Player)
				{
					if(PlayerPaintballing[i] == PlayerPaintballing[playerid])
					{
						GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
						format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
						SCM(i, COLOR_YELLOW, stringg);
					}
				}
				paintp[4]++;
				if(paintp[4] == 1)
				{
					PlayerTextDrawHide(playerid, PaintballTD[0]);
					PlayerTextDrawShow(playerid, PaintballTD[1]);
					PlayerTextDrawSetString(playerid, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
					GameTextForPlayer(playerid, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
				}
				if(paintp[4] == 2)
				{
					paintrs[4] = 31;
					paintt[4] = 0;
					preparepaint4 = SetTimer_("PrepareRoundPaintBall4", 1000, 1000, -1);
				}
				SCM(playerid, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
				SpawnPlayer(playerid);
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BUY_LEVEL)
	{
		if(response)
		{
			SetPlayerScoreEx(playerid, GetPlayerScoreEx(playerid)+1);
			PlayerInfo[playerid][pExp] = 0;
			if(GiftInfo[gOpen] == 1) PlayerInfo[playerid][pGpoint] += 2;
			PlayerInfo[playerid][pGold] += 5;
			format(string, sizeof(string), "~w~Felicitari, acum ai ~g~level %d!",GetPlayerScoreEx(playerid));
			GameTextForPlayer(playerid, string, 5000, 1);
			pUpdate(playerid, pGpointx);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_MEMBERS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pFactionRank] < 6) return 1;
			format(Selected2[playerid], 64, Selected[playerid][listitem]);
			new userID = GetPlayerID(Selected2[playerid]);
			if(IsPlayerConnected(userID)) return SCM(playerid, COLOR_YELLOW2, "Acel player este conectat.");
			else
			{
				format(string, sizeof(string), "Member: %s", Selected2[playerid]);
				SPD(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_LIST, string, "Rank\nFaction warn\nUnfaction warn\nUninvite", "Select", "Back");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_MEMBERS2) 
	{
		new szQuery[256];
		if(!response) return ShowFactionMembers(playerid);
		if(PlayerInfo[playerid][pFactionRank] < 6) return 1;
		new userID = GetPlayerID(Selected2[playerid]);
		if(IsPlayerConnected(userID)) return SCM(playerid, COLOR_YELLOW2, "Acel player este conectat.");
		switch(listitem) 
		{
			case 0: 
			{
				format(string, sizeof(string), "Ce rank vrei sa-i oferi jucatorului %s?", Selected2[playerid]);
				SPD(playerid, DIALOG_MEMBERS3, DIALOG_STYLE_INPUT, "Give rank", string, "Ok", "Cancel");
			}
			case 1: 
			{
				new fw;
				format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `name` = '%s'", Selected2[playerid]);
				new Cache:result = mysql_query(SQL, szQuery);
				cache_get_value_int(0, "FWarn", fw);
				cache_delete(result);
				fw++;
				format(string, sizeof(string), "{00B8E6}You gave %s (offline) a faction warn.", Selected2[playerid]);
				SCM(playerid, COLOR_WHITE, string);
				mysql_format(SQL,string, sizeof(string),"UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s' LIMIT 1",fw,Selected2[playerid]);
				mysql_tquery(SQL,string, "", "");
				if(fw >= 5)
				{
					format(string, sizeof(string), "* AdmBot uninvited %s reason 5/5 faction warns.", Selected2[playerid]);
					SCM(playerid, COLOR_LIGHT_RED, string);
					mysql_format(SQL, string, sizeof(string),"UPDATE `users` SET `Member`='0',`PlayerFaction`='0',`FactionDays`='0',`FactionRank`='0',`Skin`='289',`FPunish`='10',`FWarn`='0' WHERE `name`='%s' LIMIT 1",Selected2[playerid]);
					mysql_tquery(SQL, string, "", "");
				}
			}
			case 2: 
			{
				new fw;
				format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `name` = '%s'", Selected2[playerid]);
				new Cache:result = mysql_query(SQL, szQuery);
				cache_get_value_int(0, "FWarn", fw);
				cache_delete(result);
				if(fw == 0) return SCM(playerid, COLOR_YELLOW2, "This member have 0/5 faction warns!");
				format(string, sizeof(string), "{00B8E6}You remove %s (offline) a faction warn.", Selected2[playerid]);
				SCM(playerid, COLOR_WHITE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s' LIMIT 1",fw-1,Selected2[playerid]);
				mysql_tquery(SQL,string, "", "");
			}
			case 3: 
			{
				format(string, sizeof(string), "Uninvite %s?", Selected2[playerid]);
				SPD(playerid, DIALOG_MEMBERS4, DIALOG_STYLE_LIST, string, "Cu fp\nFara fp", "Ok", "Cancel");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_MEMBERS3)
	{
		if(!response) return 1;
		if(PlayerInfo[playerid][pFactionRank] < 6) return 1;
		new userID = GetPlayerID(Selected2[playerid]);
		if(IsPlayerConnected(userID)) return SCM(playerid, COLOR_YELLOW2, "Acel player este conectat.");
		new rank = strval(inputtext);
		if(rank < 1 || rank > 5) return SCM(playerid, COLOR_YELLOW2, "Eroare: Rank invalid.");
		format(string, sizeof(string), "{00B8E6}* You promoted %s (offline) to rank %d.", Selected2[playerid],rank);
		SCM(playerid, COLOR_WHITE, string);
		mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `FactionRank`='%d' WHERE `name`='%s' LIMIT 1",rank,Selected2[playerid]);
		mysql_tquery(SQL, string, "","");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_MEMBERS4) 
	{
		if(!response) return 1;
		if(PlayerInfo[playerid][pFactionRank] < 6) return 1;
		new userID = GetPlayerID(Selected2[playerid]);
		if(IsPlayerConnected(userID)) return SCM(playerid, COLOR_YELLOW2, "Acel player este conectat.");
		switch(listitem) 
		{
			case 0: 
			{ // with fp
				format(string, sizeof(string), "You kicked out %s (offline) from your faction with 20 faction punish.", Selected2[playerid]);
				SCM(playerid, COLOR_LIGHT_RED, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `Member`='0',`PlayerFaction`='0',`FactionDays`='0',`FactionRank`='0',`Skin`='289',`FPunish`='20',`FWarn`='0',`Spawn`='0' WHERE `name`='%s' LIMIT 1",Selected2[playerid]);
				mysql_tquery(SQL,string, "", "");
			}
			case 1: 
			{ // without fp
				format(string, sizeof(string), "You kicked out %s (offline) from your faction without faction punish.", Selected2[playerid]);
				SCM(playerid, COLOR_LIGHT_RED, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `Member`='0',`PlayerFaction`='0',`FactionDays`='0',`FactionRank`='0',`Skin`='289',`FPunish`='0',`FWarn`='0',`Spawn`='0' WHERE `name`='%s' LIMIT 1",Selected2[playerid]);
				mysql_tquery(SQL,string, "", "");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SELL_MATS)
	{
		if(response)
		{
			new bani = PlayerInfo[playerid][pMats] * 12 + random(2000);
			GivePlayerCash(playerid,bani);
			PlayerInfo[playerid][pMats] = 0;
			pUpdate(playerid, pMatsx);
			format(string,sizeof(string),"Felicitari, ti-ai vandut materialele pentru %s$.",FormatNumber(bani));
			SCM(playerid,COLOR_GREEN,string);
			BizzInfo[BizzEntered[playerid]][bMoney] += bani/4;
			SaveBusiness(BizzEntered[playerid]);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: SPD(playerid, DIALOG_SEIF1, DIALOG_STYLE_LIST, "Seif Money:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
				case 1: SPD(playerid, DIALOG_SEIF2, DIALOG_STYLE_LIST, "Seif Drugs:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
				case 2: SPD(playerid, DIALOG_SEIF3, DIALOG_STYLE_LIST, "Seif Materials:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string, sizeof(string), "In aceast moment ai %s$ la tine.\nIntrodu suma de bani pe care vrei sa o depozitezi in seiful factiunii.",FormatNumber(PlayerInfo[playerid][pMoney]));
				SPD(playerid,DIALOG_SEIF4,DIALOG_STYLE_INPUT,"Seif Money:",string,"Introdu","Inapoi");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pLeader] < 1) return SCM(playerid,COLOR_GRAD2,"Nu esti lider sau nu ai rank-ul necesar pentru a scoate bani din seif!");
				format(string, sizeof(string), "In aceast moment ai %s$ la tine.\nIntrodu suma de bani pe care vrei sa o extragi din seiful factiunii.",FormatNumber(PlayerInfo[playerid][pMoney]));
				SPD(playerid,DIALOG_SEIF5,DIALOG_STYLE_INPUT,"Seif Money:",string,"Introdu","Inapoi");
			}
		}
		else
		{
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			format(string,sizeof(string),"Nume\tValoare\nMoney\t%s$\nDrugs\t%sg\nMaterials\t%s",FormatNumber(FactionInfo[x][fSafeMoney]),FormatNumber(FactionInfo[x][fSafeDrugs]),FormatNumber(FactionInfo[x][fSafeMats]));
			SPD(playerid,DIALOG_SEIF,DIALOG_STYLE_TABLIST_HEADERS,"Seif:",string,"Alege","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string, sizeof(string), "In aceast moment ai %d droguri.\nIntrodu cantitatea de droguri pe care vrei sa o depozitezi in seiful factiunii.",PlayerInfo[playerid][pDrugs]);
				SPD(playerid,DIALOG_SEIF6,DIALOG_STYLE_INPUT,"Seif Drugs:",string,"Introdu","Inapoi");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pLeader] < 1) return SCM(playerid,COLOR_GRAD2,"Nu esti lider sau nu ai rank-ul necesar pentru a scoate bani din seif!");
				format(string, sizeof(string), "In aceast moment ai %d droguri.\nIntrodu cantitatea de droguri pe care vrei sa o extragi din seiful factiunii.",PlayerInfo[playerid][pDrugs]);
				SPD(playerid,DIALOG_SEIF7,DIALOG_STYLE_INPUT,"Seif Drugs:",string,"Introdu","Inapoi");
			}
		}
		else
		{
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			format(string,sizeof(string),"Nume\tValoare\nMoney\t%s$\nDrugs\t%sg\nMaterials\t%s",FormatNumber(FactionInfo[x][fSafeMoney]),FormatNumber(FactionInfo[x][fSafeDrugs]),FormatNumber(FactionInfo[x][fSafeMats]));
			SPD(playerid,DIALOG_SEIF,DIALOG_STYLE_TABLIST_HEADERS,"Seif:",string,"Alege","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF3)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string, sizeof(string), "In aceast moment ai %d materiale.\nIntrodu cantitatea de materiale pe care vrei sa o depozitezi in seiful factiunii.",PlayerInfo[playerid][pMats]);
				SPD(playerid,DIALOG_SEIF8,DIALOG_STYLE_INPUT,"Seif Materials:",string,"Introdu","Inapoi");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pLeader] < 1) return SCM(playerid,COLOR_GRAD2,"Nu esti lider sau nu ai rank-ul necesar pentru a scoate bani din seif!");
				format(string, sizeof(string), "In aceast moment ai %d materiale.\nIntrodu cantitatea de materiale pe care vrei sa o extragi din seiful factiunii.",PlayerInfo[playerid][pMats]);
				SPD(playerid,DIALOG_SEIF9,DIALOG_STYLE_INPUT,"Seif Materials:",string,"Introdu","Inapoi");
			}
		}
		else
		{
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			format(string,sizeof(string),"Nume\tValoare\nMoney\t%s$\nDrugs\t%sg\nMaterials\t%s",FormatNumber(FactionInfo[x][fSafeMoney]),FormatNumber(FactionInfo[x][fSafeDrugs]),FormatNumber(FactionInfo[x][fSafeMats]));
			SPD(playerid,DIALOG_SEIF,DIALOG_STYLE_TABLIST_HEADERS,"Seif:",string,"Alege","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF4)
	{
		if(response)
		{
			new money = strval(inputtext);
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			if(money == 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti pune in seif 0$!");
			if(money <= GetPlayerCash(playerid))
			{
				GivePlayerCash(playerid, -money);
				FactionInfo[x][fSafeMoney] += money;
				format(string, sizeof(string), "Ai depozitat %s$ in seiful factiunii, Money Total: %s$ ", FormatNumber(money),FormatNumber(FactionInfo[x][fSafeMoney]));
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s a depozitat %s$ in seiful factiunii.",GetName(playerid),FormatNumber(money));
				SendFactionMessage(x, TEAM_AZTECAS_COLOR, string);
				SaveFactions(x);
			}
			else return SCM(playerid, COLOR_GREY, "Nu ai atat de multi bani la tine!");
		}
		else return SPD(playerid, DIALOG_SEIF1, DIALOG_STYLE_LIST, "Seif Money:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF5)
	{
		if(response)
		{
			new money = strval(inputtext);
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			if(money == 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti scoate din seif 0$!");
			if(money <= FactionInfo[x][fSafeMoney])
			{
				GivePlayerCash(playerid, money);
				FactionInfo[x][fSafeMoney] -= money;
				format(string, sizeof(string), "Ai extras %s$ din seiful factiunii, Money Total: %s$ ", FormatNumber(money),FormatNumber(FactionInfo[x][fSafeMoney]));
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s a extras %s$ din seiful factiunii.",GetName(playerid),FormatNumber(money));
				SendFactionMessage(x, TEAM_AZTECAS_COLOR, string);
				SaveFactions(x);
			}
			else return SCM(playerid, COLOR_GREY, "Seiful nu detine aceasta suma de bani!");
		}
		else return SPD(playerid, DIALOG_SEIF1, DIALOG_STYLE_LIST, "Seif Money:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF6)
	{
		if(response)
		{
			new grame = strval(inputtext);
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			if(grame == 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti pune in seif 0 grame de droguri!");
			if(grame <= PlayerInfo[playerid][pDrugs])
			{
				PlayerInfo[playerid][pDrugs] -= grame;
				FactionInfo[x][fSafeDrugs] += grame;
				format(string, sizeof(string), "Ai depozitat %dg droguri in seiful factiunii, Drugs Total: %dg ", grame,FactionInfo[x][fSafeDrugs]);
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s a depozitat %dg droguri in seiful factiunii.",GetName(playerid),grame);
				SendFactionMessage(x, TEAM_AZTECAS_COLOR, string);
				SaveFactions(x);
			}
			else return SCM(playerid, COLOR_GREY, "Nu ai atat de multe droguri la tine!");
		}
		else return SPD(playerid, DIALOG_SEIF2, DIALOG_STYLE_LIST, "Seif Drugs:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF7)
	{
		if(response)
		{
			new grame = strval(inputtext);
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			if(grame == 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti scoate din seif 0 grame de droguri!");
			if(grame <= FactionInfo[x][fSafeDrugs])
			{
				PlayerInfo[playerid][pDrugs] += grame;
				FactionInfo[x][fSafeDrugs] -= grame;
				format(string, sizeof(string), "Ai extras %dg droguri din seiful factiunii, Drugs Total: %dg ", grame,FactionInfo[x][fSafeDrugs]);
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s a extras %dg droguri din seiful factiunii.",GetName(playerid),grame);
				SendFactionMessage(x, TEAM_AZTECAS_COLOR, string);
				SaveFactions(x);
			}
			else return SCM(playerid, COLOR_GREY, "Seiful nu detine atatea grame de droguri!");
		}
		else return SPD(playerid, DIALOG_SEIF2, DIALOG_STYLE_LIST, "Seif Drugs:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF8)
	{
		if(response)
		{
			new mats = strval(inputtext);
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			if(mats == 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti pune in seif 0 materiale!");
			if(mats <= PlayerInfo[playerid][pMats])
			{
				PlayerInfo[playerid][pMats] -= mats;
				FactionInfo[x][fSafeMats] += mats;
				format(string, sizeof(string), "Ai depozitat %s materiale in seiful factiunii, Materials Total: %s ", FormatNumber(mats),FormatNumber(FactionInfo[x][fSafeMats]));
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s a depozitat %s materiale in seiful factiunii.",GetName(playerid),FormatNumber(mats));
				SendFactionMessage(x, TEAM_AZTECAS_COLOR, string);
				SaveFactions(x);
				pUpdate(playerid, pMatsx);
			}
			else return SCM(playerid, COLOR_GREY, "Nu ai atat de multe materiale la tine!");
		}
		else return SPD(playerid, DIALOG_SEIF3, DIALOG_STYLE_LIST, "Seif Materials:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SEIF9)
	{
		if(response)
		{
			new mats = strval(inputtext);
			new x = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			if(mats == 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti scoate din seif 0 materiale!");
			if(mats <= FactionInfo[x][fSafeMats])
			{
				PlayerInfo[playerid][pMats] += mats;
				FactionInfo[x][fSafeMats] -= mats;
				format(string, sizeof(string), "Ai extras %s materiale din seiful factiunii, Materials Total: %s ", FormatNumber(mats),FormatNumber(FactionInfo[x][fSafeMats]));
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s a extras %s materiale din seiful factiunii.",GetName(playerid),FormatNumber(mats));
				SendFactionMessage(x, TEAM_AZTECAS_COLOR, string);
				SaveFactions(x);
				pUpdate(playerid, pMatsx);
			}
			else return SCM(playerid, COLOR_GREY, "Seiful nu detine atatea materiale!");
		}
		else return SPD(playerid, DIALOG_SEIF3, DIALOG_STYLE_LIST, "Seif Materials:", "Depoziteaza\nExtrage", "Alege", "Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BANK)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					format(string, sizeof(string), "Tu detii %s$ in cont.",FormatNumber(PlayerInfo[playerid][pBank]));
					SPD(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Interogare sold:", string, "Ok", "");
				}
				case 1: SPD(playerid,DIALOG_BANK1,DIALOG_STYLE_INPUT,"Depoziteaza:","Introdu suma de bani pe care vrei sa o depozitezi in cont.","Introdu","Inapoi");
				case 2: SPD(playerid,DIALOG_BANK2,DIALOG_STYLE_INPUT,"Extrage:","Introdu suma de bani pe care vrei sa o extragi din cont.","Introdu","Inapoi");
				case 3:	SPD(playerid,DIALOG_BANK3,DIALOG_STYLE_INPUT,"Transfera:","Introdu ID-ul jucatorului caruia vrei sa-i transferi banii.","Introdu","Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BANK1)
	{
		if(response)
		{
			new cash = strval(inputtext);
			if(cash > GetPlayerCash(playerid) || cash < 1) return SCM(playerid, COLOR_YELLOW2, " Nu detii aceasta suma in mana!");
			GivePlayerCash(playerid, -cash);
			new curfunds = PlayerInfo[playerid][pBank];
			PlayerInfo[playerid][pBank] += cash;
			SCM(playerid, COLOR_WHITE, " ");
			SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), "  Old Balance: %s$", FormatNumber(curfunds));
			SCM(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Deposit: %s$",FormatNumber(cash));
			SCM(playerid, COLOR_GRAD4, string);
			SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: %s$", FormatNumber(PlayerInfo[playerid][pBank]));
			SCM(playerid, COLOR_WHITE, string);
			SCM(playerid, COLOR_WHITE, " ");
			pUpdate(playerid,pBankx);
		}
		else return SPD(playerid,DIALOG_BANK,DIALOG_STYLE_LIST,"Bank:","Interogare sold\nDepoziteaza\nExtrage\nTransfera\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BANK2)
	{
		if(response)
		{
			new cash = strval(inputtext), curfunds = PlayerInfo[playerid][pBank];
			if(cash > curfunds || cash < 1) return SCM(playerid, COLOR_YELLOW2, " Nu detii aceasta suma in banca!");
			PlayerInfo[playerid][pBank] -= cash;
			GivePlayerCash(playerid, cash);
			SCM(playerid, COLOR_WHITE, " ");
			SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), "  Old Balance: %s$", FormatNumber(curfunds));
			SCM(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Extract: %s$",FormatNumber(cash));
			SCM(playerid, COLOR_GRAD4, string);
			SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: %s$", FormatNumber(PlayerInfo[playerid][pBank]));
			SCM(playerid, COLOR_WHITE, string);
			SCM(playerid, COLOR_WHITE, " ");
			pUpdate(playerid,pBankx);
		}
		else return SPD(playerid,DIALOG_BANK,DIALOG_STYLE_LIST,"Bank:","Interogare sold\nDepoziteaza\nExtrage\nTransfera\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BANK3)
	{
		if(response)
		{
			TransferOffer[playerid] = strval(inputtext);
			if(IsPlayerConnected(TransferOffer[playerid])) SPD(playerid,DIALOG_BANK4,DIALOG_STYLE_INPUT,"Transfera:","Introdu suma de bani pe care vrei sa i-o transferi jucatorului.","Introdu","Inapoi");
			else
			{
				SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
				TransferOffer[playerid] = 999;
			}
		}
		else return SPD(playerid,DIALOG_BANK,DIALOG_STYLE_LIST,"Bank:","Interogare sold\nDepoziteaza\nExtrage\nTransfera\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BANK4)
	{
		if(response)
		{
			TransferMoney[playerid] = strval(inputtext);
			if(TransferMoney[playerid] > PlayerInfo[playerid][pBank] || TransferMoney[playerid] < 1) return SCM(playerid, COLOR_YELLOW2, " Nu detii aceasta suma in banca!");
			format(string,sizeof(string),"Esti sigur ca vrei sa-i transferi lui %s suma de %s$.",GetName(TransferOffer[playerid]),FormatNumber(TransferMoney[playerid]));
			SPD(playerid, DIALOG_BANK5, DIALOG_STYLE_MSGBOX, "Transfera:", string, "Da", "Nu");
		}
		else return SPD(playerid,DIALOG_BANK3,DIALOG_STYLE_INPUT,"Transfera:","Introdu ID-ul jucatorului caruia vrei sa-i transferi banii.","Introdu","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BANK5)
	{
		if(response)
		{
			new curfunds = PlayerInfo[playerid][pBank];
			PlayerInfo[playerid][pBank] -= TransferMoney[playerid];
			PlayerInfo[TransferOffer[playerid]][pBank] += TransferMoney[playerid];
			SCM(playerid, COLOR_WHITE, " ");
			SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), "  Old Balance: %s$", FormatNumber(curfunds));
			SCM(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Transfered to %s: %s$",GetName(TransferOffer[playerid]),FormatNumber(TransferMoney[playerid]));
			SCM(playerid, COLOR_GRAD4, string);
			SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: %s$", FormatNumber(PlayerInfo[playerid][pBank]));
			SCM(playerid, COLOR_WHITE, string);
			SCM(playerid, COLOR_WHITE, " ");
			pUpdate(playerid,pBankx);
			pUpdate(TransferOffer[playerid],pBankx);
			format(string, sizeof(string), "{52CC52}Ai primit de la %s, in cont, suma de %s$.",GetName(playerid), FormatNumber(TransferMoney[playerid]));
			SCM(TransferOffer[playerid], COLOR_WHITE, string);
			PlayerPlaySound(TransferOffer[playerid], 1052, 0.0, 0.0, 0.0);
			TransferOffer[playerid] = 999;
			TransferMoney[playerid] = 0;
		}
		else
		{
			TransferOffer[playerid] = 999;
			TransferMoney[playerid] = 0;
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GARAGE)
	{
		if(response)
		{
			if(sVehicle[listitem][playerid] == 0) return 1;
			sVehicle[9][playerid] = sVehicle[listitem][playerid];
			if(CarInfo[sVehicle[9][playerid]][cSpawned] != 0)
			{
				if(PlayerInfo[playerid][pPremium] == 0) SPD(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST, "Vehicles:", "Informatii\nLocalizeaza\nSchimba culorile intre ele\nRemorcheaza\nParcheaza\nInmatriculeaza\nCumpara puncte de asigurare\nAscunde\nVinde la stat", "Selecteaza", "Inapoi");
				else
				{
					if(CarInfo[sVehicle[9][playerid]][cNeon] == 0) SPD(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST, "Vehicles:", "Informatii\nLocalizeaza\nSchimba culorile intre ele\nRemorcheaza\nParcheaza\nInmatriculeaza\nCumpara puncte de asigurare\nAscunde\nVinde la stat\nInstaleaza neon", "Selecteaza", "Inapoi");
					else if(CarInfo[sVehicle[9][playerid]][cNeon] > 0) SPD(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST, "Vehicles:", "Informatii\nLocalizeaza\nSchimba culorile intre ele\nRemorcheaza\nParcheaza\nInmatriculeaza\nCumpara puncte de asigurare\nAscunde\nVinde la stat\nSterge neon", "Selecteaza", "Inapoi");
				}
			}
			else if(CarInfo[sVehicle[9][playerid]][cSpawned] == 0)
			{
				if(CarInfo[sVehicle[9][playerid]][cLastX] != 0.0) SPD(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST, "Vehicles:", "Informatii\nLocalizeaza\nSchimba culorile intre ele\nRemorcheaza\nParcheaza\nInmatriculeaza\nCumpara puncte de asigurare\nSpawneaza la locul de parcare\nVinde la stat\nSpawneaza la ultimul loc cunoscut", "Selecteaza", "Inapoi");
				else SPD(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST, "Vehicles:", "Informatii\nLocalizeaza\nSchimba culorile intre ele\nRemorcheaza\nParcheaza\nInmatriculeaza\nCumpara puncte de asigurare\nSpawneaza la locul de parcare\nVinde la stat", "Selecteaza", "Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GARAGE1)
	{
		if(response)
		{
			new vsid = sVehicle[9][playerid];
			switch(listitem)
			{
				case 0:
				{ // info
					new vstr[256],locked[32];
					if(CarInfo[vsid][cLock] == 1) locked = "~h~~r~Incuiat";
					else locked = "~h~~g~Descuiat";
					//--------------------------------------------------------------
					if(IsVehicleOccupied(CarInfo[vsid][cSpawned])) format(vstr, sizeof(vstr), "~h~~y~Ocupat");
					else if(CarInfo[vsid][cSpawned] > 0) format(vstr, sizeof(vstr), "~h~~b~Disponibil");
					else format(vstr, sizeof(vstr), "~h~~w~Ascuns");
					PlayerTextDrawSetString(playerid, VehicleInfoTD[6], vstr);
					//--------------------------------------------------------------
					format(vstr,sizeof(vstr),"Vechime:  %d zile si %.1f Km~n~~n~Pret asigurare:  %s$~n~~n~Culoarea 1 si 2:  %d | %d",CarInfo[vsid][cDays],CarInfo[vsid][cKM],FormatNumber(CarInfo[vsid][cInscarprice]),CarInfo[vsid][cColorOne],CarInfo[vsid][cColorTwo]);
					PlayerTextDrawSetString(playerid, VehicleInfoTD[1], vstr);
					//--------------------------------------------------------------
					format(vstr,sizeof(vstr),"Puncte de asigurare:  %d~n~~n~Numar de inmatriculare:  %s~n~~n~Status: %s",CarInfo[vsid][cInsurancecar],CarInfo[vsid][cLicense],locked);
					PlayerTextDrawSetString(playerid, VehicleInfoTD[2], vstr);
					//--------------------------------------------------------------
					format(vstr,sizeof(vstr),"Vehicul: %s",CarInfo[vsid][cName]);
					PlayerTextDrawSetString(playerid, VehicleInfoTD[3], vstr);
					//--------------------------------------------------------------
					PlayerTextDrawSetPreviewModel(playerid, VehicleInfoTD[4], CarInfo[vsid][cModel]);
					PlayerTextDrawSetPreviewVehCol(playerid, VehicleInfoTD[4], CarInfo[vsid][cColorOne], CarInfo[vsid][cColorTwo]);
					//--------------------------------------------------------------
					ShowTDMenu(playerid);
					SelectTextDraw(playerid, COLOR_WHITE);
					Used[playerid] = true;
				}
				case 1:
				{ // find
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					if(CP[playerid] == 0)
					{
						new Float:x,Float:y,Float:z;
						GetVehiclePos(CarInfo[vsid][cSpawned], x, y, z);
						SetPlayerCheckpointEx(playerid, x, y, z, 4);
						SCM(playerid,COLOR_WHITE,"{5CAD5C}Locatia masini a fost gasita, du-te la punctul rosu de pe minimap.");
					}
					else return SCM(playerid,COLOR_WHITE,"{FFF8C6}Ai deja un checkpoint pe minimap, foloseste /killcp pentru al anula.");
				}
				case 2:
				{ // switch colors
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					new car = GetPlayerVehicleID(playerid);
					if(car == CarInfo[vsid][cSpawned])
					{
						if(CarInfo[vsid][cColorOne] == CarInfo[vsid][cColorTwo]) return SCM(playerid,COLOR_VEHICLE,"Nu poti schimba culorile acestui vehicul deoarece sunt la fel.");
						if(GetPlayerCash(playerid) < 2000) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficienti bani pentru a schimba culorile.");
						new colorid = CarInfo[vsid][cColorOne];
						GivePlayerCash(playerid, -2000);
						BizzInfo[1][bMoney] += 2000;
						CarInfo[vsid][cColorOne] = CarInfo[vsid][cColorTwo];
						CarInfo[vsid][cColorTwo] = colorid;
						ChangeVehicleColor(car, CarInfo[vsid][cColorOne], CarInfo[vsid][cColorTwo]);
						vUpdate(vsid, cColorOnex);
						vUpdate(vsid, cColorTwox);
						ShowVehiclesMenu(playerid);
					}
					else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
				}
				case 3:
				{ // tow
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					if(IsVehicleOccupied(CarInfo[vsid][cSpawned])) return SCM(playerid, COLOR_VEHICLE, "Vehiculul tau personal este ocupat.");
					if(GetPlayerCash(playerid) > 2500)
					{
						GivePlayerCash(playerid,-2500);
						SetVehicleToRespawn(CarInfo[vsid][cSpawned]);
						EngineSTATE[CarInfo[vsid][cSpawned]] = 0;
						ShowVehiclesMenu(playerid);
					}
					else return SCM(playerid, COLOR_VEHICLE,"You do not have enough money.");
				}
				case 4:
				{ // park
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					new Float:x,Float:y,Float:z,Float:a, getcarid;
					getcarid = GetPlayerVehicleID(playerid);
					GetVehiclePos(getcarid, x, y, z);
					GetVehicleZAngle(getcarid, a);
					if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
					{
						if(IsPlayerInVehicle(playerid,CarInfo[vsid][cSpawned]))
						{
							new Float:health2;
							GetVehicleHealth(getcarid, health2);
							if(IsPlayerInRangeOfPoint(playerid, 40, 879.7794,-1663.9092,13.5469)) return SCM(playerid,COLOR_YELLOW2,"{FFB870}Nu iti poti parca vehiculul la spawn civil.");
							if(health2 < 500.0) return SCM(playerid,COLOR_VEHICLE,"Vehiculul este prea distrus pentru a putea fi parcat.");
							if(getcarid == CarInfo[vsid][cSpawned])
							{
								CarInfo[vsid][cLocationx] = x;
								CarInfo[vsid][cLocationy] = y;
								CarInfo[vsid][cLocationz] = z;
								CarInfo[vsid][cAngle] = a;
								DestroyVehicleEx(CarInfo[vsid][cSpawned]);
								new car = CreateVehicleEx(CarInfo[vsid][cModel],CarInfo[vsid][cLocationx],CarInfo[vsid][cLocationy],CarInfo[vsid][cLocationz]+1.0,CarInfo[vsid][cAngle],CarInfo[vsid][cColorOne],CarInfo[vsid][cColorTwo],-1);
								UpdateVehicleDamageStatus(car, CarInfo[vsid][cDamage][0], CarInfo[vsid][cDamage][1], CarInfo[vsid][cDamage][2], CarInfo[vsid][cDamage][3]);
								SetVehicleHealth(car,CarInfo[vsid][cHealth]);
								EngineSTATE[car] = 0;
								CarInfo[vsid][cSpawned] = car;
								vUpdate(vsid,cLocationxx);
								vUpdate(vsid,cLocationyx);
								vUpdate(vsid,cLocationzx);
								vUpdate(vsid,cAnglex);
								SetTunning(CarInfo[vsid][cSpawned]);
								PutPlayerInVehicleEx(playerid, car, 0);
								SCM(playerid, COLOR_VEHICLE,"Vehiculul a fost parcat cu succes.");
							}
						}
					}
					else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
				}
				case 5:
				{ // plate
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					if(GetPlayerCash(playerid) >= 5000)
					{
						if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned]) {
							if(IsPlayerInVehicle(playerid, CarInfo[vsid][cSpawned])) SPD(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "Inmatriculare:", "Introdu noul numar de inmatriculare", "Schimba", "Anuleaza");
						}
						else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
					}
					else return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani, ai nevoie de 5.000$.");
				}
				case 6:
				{ // insurance
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					new inscarpricee = CarInfo[vsid][cInscarprice];
					if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
					{
						if(IsPlayerInVehicle(playerid, CarInfo[vsid][cSpawned]))
						{
							if(CarInfo[vsid][cInsurancecar] < 10)
							{
								if(GetPlayerCash(playerid) >= inscarpricee)
								{
									CarInfo[vsid][cInsurancecar] += 1;
									format(string, sizeof(string), "{FFFFCC}Ai cumparat 1 punct de asigurare pentru %s$.", FormatNumber(inscarpricee));
									SCM(playerid, COLOR_WHITE, string);
									GivePlayerCash(playerid, -inscarpricee);
									vUpdate(vsid,cInsurancecarx);
									ShowVehiclesMenu(playerid);
								}
								else return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani pentru a cumpara puncte de asigurare.");
							}
							else return SCM(playerid, COLOR_VEHICLE,"Vehiculul acesta detine deja 10 puncte de asigurare.");
						}
						else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
					}
					else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehicul.");
				}
				case 7:
				{ // despawn & spawn
					if(CarInfo[vsid][cSpawned] == 0)
					{
						if(GetSpawnedCar(playerid) == 4 && PlayerInfo[playerid][pPremium] == 0) return SCM(playerid,COLOR_YELLOW2,"Poti avea spawnate doar patru vehicule personale daca nu ai cont premium.");
						new carid = CreateVehicleEx(CarInfo[vsid][cModel],CarInfo[vsid][cLocationx],CarInfo[vsid][cLocationy],CarInfo[vsid][cLocationz],CarInfo[vsid][cAngle],CarInfo[vsid][cColorOne],CarInfo[vsid][cColorTwo],-1);
						UpdateVehicleDamageStatus(carid, CarInfo[vsid][cDamage][0], CarInfo[vsid][cDamage][1], CarInfo[vsid][cDamage][2], CarInfo[vsid][cDamage][3]);
						format(string, sizeof(string), "Ti-ai spawnat vehiculul de tip %s.", CarInfo[vsid][cName]);
						SCM(playerid, COLOR_VEHICLE, string);
						Gas[carid] = CarInfo[vsid][cFuel];
						SetVehicleHealth(carid, CarInfo[vsid][cHealth]);
						CarInfo[vsid][cSpawned] = carid;
						CarInfo[vsid][cTime] = 900;
						SetTunning(carid);
						EngineSTATE[carid] = 0;
						SwitchKey[playerid] = 1;
						ShowVehiclesMenu(playerid);
					}
					else
					{
						if(IsVehicleOccupied(CarInfo[vsid][cSpawned])) return SCM(playerid, COLOR_VEHICLE, "Vehiculul tau personal este ocupat.");
						if(CarInfo[vsid][cNeon] > 0) RemoveNeons(CarInfo[vsid][cSpawned]);
						DestroyVehicleEx(CarInfo[vsid][cSpawned]);
						format(string, sizeof(string), "Ti-ai ascuns vehiculul de tip %s.", CarInfo[vsid][cName]);
						SCM(playerid, COLOR_VEHICLE, string);
						CarInfo[vsid][cSpawned] = 0;
						CarInfo[vsid][cTime] = 0;
						ShowVehiclesMenu(playerid);
					}
				}
				case 8:
				{ // sell
					if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
					if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
					if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2135.7876,-1129.0999,25.3125))
					{
						SCM(playerid,COLOR_VEHICLE,"Nu esti in locul potrivit pentru a vinde vehiculul, du-te la checkpoint.");
						SetPlayerCheckpointEx(playerid,2135.7876,-1129.0999,25.3125,5.0);
						return 1;
					}
					if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
					{
						if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
						{
							new cashveh = floatround(floatmul(CarInfo[vsid][cValue],0.60),floatround_ceil);
							if(cashveh < 10000 && !IsPlayerScripter(playerid)) return SCM(playerid,COLOR_VEHICLE,"Vehiculele castigate la giftbox sau cele premium luate din DS nu pot fi vandute,");
							format(string, sizeof(string),"{ffffff}Daca doriti sa va vindeti vehiculul la stat veti primi {66ff00}%s$ {ffffff}pe el, acceptati?",FormatNumber(cashveh));
							SPD(playerid,DIALOG_SELL_VEH,DIALOG_STYLE_MSGBOX,"Informatii:",string,"Accept","Iesi");
						}
						else return SCM(playerid, COLOR_VEHICLE, "Acesta nu este vehiculul tau.");
					}
					else return SCM(playerid, COLOR_VEHICLE, "Trebuie sa te afli in vehiculul tau pentru al putea vinde.");
				}
				case 9:
				{ // spawn
					if(CarInfo[vsid][cSpawned] == 0)
					{
						if(GetSpawnedCar(playerid) == 4 && PlayerInfo[playerid][pPremium] == 0) return SCM(playerid,COLOR_YELLOW2,"Poti avea spawnate doar patru vehicule personale daca nu ai cont premium.");
						if(CarInfo[vsid][cLastX] != 0.0)
						{
							new carid = CreateVehicleEx(CarInfo[vsid][cModel],CarInfo[vsid][cLastX],CarInfo[vsid][cLastY],CarInfo[vsid][cLastZ],CarInfo[vsid][cLastA],CarInfo[vsid][cColorOne],CarInfo[vsid][cColorTwo],-1);
							UpdateVehicleDamageStatus(carid, CarInfo[vsid][cDamage][0], CarInfo[vsid][cDamage][1], CarInfo[vsid][cDamage][2], CarInfo[vsid][cDamage][3]);
							format(string,sizeof(string),"Ti-ai spawnat vehiculul de tip %s in ultimul loc cunoscut.",CarInfo[vsid][cName]);
							SCM(playerid,COLOR_VEHICLE,string);
							SwitchKey[playerid] = 1;
							Gas[carid] = CarInfo[vsid][cFuel];
							SetVehicleHealth(carid, CarInfo[vsid][cHealth]);
							CarInfo[vsid][cSpawned] = carid;
							CarInfo[vsid][cTime] = 900;
							SetTunning(carid);
							EngineSTATE[carid] = 0;
							ShowVehiclesMenu(playerid);
						}
						else return SCM(playerid,COLOR_VEHICLE,"Acest vehicul nu are o locatie anterioara salvata.");
					}
					else
					{
						if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
						{
							if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
							{
								if(CarInfo[vsid][cType] == 0) return SCM(playerid,COLOR_VEHICLE,"Poti pune neon doar pe un vehicul premium sau castigat la giftbox!");
								new car = GetPlayerVehicleID(playerid);
								if(CarInfo[vsid][cNeon] == 0)
								{
									if(!IsABoat(car) && !IsAPlane(car) && !IsABike(car) && GetVehicleModel(car) != 461 && GetVehicleModel(car) != 462 && GetVehicleModel(car) != 463 && GetVehicleModel(car) != 468 && GetVehicleModel(car) != 521 && GetVehicleModel(car) != 522 && GetVehicleModel(car) != 581 && GetVehicleModel(car) != 586) {
										SPD(playerid,DIALOG_NEON,DIALOG_STYLE_LIST,"Neon:","{ff0000}Red\n{0000ff}Blue\n{ffff00}Yellow\n{00ff00}Green\n{ff0099}Pink\n{ffffff}White","Alege","Inchide");
									}
									else return SCM(playerid,COLOR_YELLOW2,"Nu poti pune neon la acest tip de vehicul!");
								}
								else
								{
									CarInfo[vsid][cNeon] = 0;
									RemoveNeons(CarInfo[vsid][cSpawned]);
									SCM(playerid,COLOR_VEHICLE,"Neon-ul a fost sters cu succes!");
									vUpdate(vsid,cNeonx);
									ShowVehiclesMenu(playerid);
								}
							}
							else return SCM(playerid, COLOR_VEHICLE,"Acesta nu este vehiculul tau.");
						}
						else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
					}
				}
			}
		}
		else return ShowVehiclesMenu(playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SELL_VEH)
	{
		if(response)
		{
			new vsid = FindSpawnID(GetPlayerVehicleID(playerid));
			if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
			{
				if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
				{
					if(PlayerInfo[playerid][pCarKey][0] == vsid) PlayerInfo[playerid][pCarKey][0] = 0;
					else if(PlayerInfo[playerid][pCarKey][1] == vsid) PlayerInfo[playerid][pCarKey][1] = 0;
					else if(PlayerInfo[playerid][pCarKey][2] == vsid) PlayerInfo[playerid][pCarKey][2] = 0;
					else if(PlayerInfo[playerid][pCarKey][3] == vsid) PlayerInfo[playerid][pCarKey][3] = 0;
					else if(PlayerInfo[playerid][pCarKey][4] == vsid) PlayerInfo[playerid][pCarKey][4] = 0;
					else if(PlayerInfo[playerid][pCarKey][5] == vsid) PlayerInfo[playerid][pCarKey][5] = 0;
					else if(PlayerInfo[playerid][pCarKey][6] == vsid) PlayerInfo[playerid][pCarKey][6] = 0;
					else if(PlayerInfo[playerid][pCarKey][7] == vsid) PlayerInfo[playerid][pCarKey][7] = 0;
					else if(PlayerInfo[playerid][pCarKey][8] == vsid) PlayerInfo[playerid][pCarKey][8] = 0;
					else if(PlayerInfo[playerid][pCarKey][9] == vsid) PlayerInfo[playerid][pCarKey][9] = 0;
					pUpdate(playerid,pCarsx);
					DestroyVehicleEx(CarInfo[vsid][cSpawned]);
					new cashveh = floatround(floatmul(CarInfo[vsid][cValue],0.60),floatround_ceil);
					GivePlayerCash(playerid, cashveh);
					format(string, sizeof(string), "{5CAD5C}* Ti-ai vandut vehiculul la stat pentru %s$.",FormatNumber(cashveh));
					SCM(playerid, COLOR_WHITE, string);
					if(CarInfo[vsid][cNeon] >= 1) RemoveNeons(CarInfo[vsid][cSpawned]);
					mysql_format(SQL, string, sizeof(string), "UPDATE `cars` SET `Locationx`='NULL',`Locationy`='NULL',`Locationz`='NULL',`Angle`='NULL',`ColorOne`='NULL',`ColorTwo`='NULL',`Owner`='NULL',`License`='NULL',`Lock`='NULL',`Insurancecar`='NULL',`Owned`='NULL',`Mods`='NULL',`PaintJ`='NULL',`Health`='NULL',`Fuel`='NULL',`Neon`='NULL',`Damage`='NULL',`Type`='NULL',`Value`='%d' WHERE `carID`='%d'",CarInfo[vsid][cValue]/4,vsid);
					mysql_tquery(SQL, string);
					CarInfo[vsid][cID] = -2;
					CarInfo[vsid][cSpawned] = 0;
					CarInfo[vsid][cTime] = 0;
				}
				else return SCM(playerid, COLOR_VEHICLE,"Acesta nu este vehiculul tau.");
			}
			else return SCM(playerid, COLOR_VEHICLE,"Acesta nu este vehiculul tau.");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_MUSIC)
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				format(string, sizeof(string), "https://6t.pe/?song=%s", inputtext);
				PlayAudioStreamForPlayer(playerid, string);
				ListenRadio[playerid] = sizeof(RadioName)-1;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_ATM)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string, sizeof(string), "In aceast moment ai %s$ in cont.\nIntrodu suma de bani pe care vrei sa o depozitezi in cont.",FormatNumber(PlayerInfo[playerid][pBank]));
				SPD(playerid,DIALOG_ATM1,DIALOG_STYLE_INPUT,"Depoziteaza:",string,"Introdu","Inapoi");
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "In aceast moment ai %s$ in cont.\nIntrodu suma de bani pe care vrei sa o extragi din cont.",FormatNumber(PlayerInfo[playerid][pBank]));
				SPD(playerid,DIALOG_ATM2,DIALOG_STYLE_INPUT,"Extrage:",string,"Introdu","Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_ATM1)
	{
		if(response)
		{
			new cash = strval(inputtext);
			if(cash > GetPlayerCash(playerid) || cash < 1) return SCM(playerid, COLOR_YELLOW2, " Suma invalida!");
			GivePlayerCash(playerid, -cash);
			new curfunds = PlayerInfo[playerid][pBank];
			PlayerInfo[playerid][pBank] += cash;
			SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), "  Old Balance: %s$", FormatNumber(curfunds));
			SCM(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Deposit: %s$",FormatNumber(cash));
			SCM(playerid, COLOR_GRAD4, string);
			SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: %s$", FormatNumber(PlayerInfo[playerid][pBank]));
			SCM(playerid, COLOR_WHITE, string);
			SCM(playerid, COLOR_WHITE, " ");
			pUpdate(playerid,pBankx);
		}
		else return SPD(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"ATM:","Depoziteaza\nExtrage\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_ATM2)
	{
		if(response)
		{
			new cash = strval(inputtext);
			if(cash > PlayerInfo[playerid][pBank] || cash < 1) return SCM(playerid, COLOR_YELLOW2, " Suma invalida!");
			new curfunds = PlayerInfo[playerid][pBank];
			PlayerInfo[playerid][pBank] -= cash;
			GivePlayerCash(playerid, cash);
			SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), "  Old Balance: %s$", FormatNumber(curfunds));
			SCM(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Extract: %s$",FormatNumber(cash));
			SCM(playerid, COLOR_GRAD4, string);
			SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: %s$", FormatNumber(PlayerInfo[playerid][pBank]));
			SCM(playerid, COLOR_WHITE, string);
			SCM(playerid, COLOR_WHITE, " ");
			pUpdate(playerid,pBankx);
		}
		else return SPD(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"ATM:","Depoziteaza\nExtrage\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_RADIO5)
	{
		if(response)
		{
			new house = PlayerInfo[playerid][pHouseKey];
			if(listitem == sizeof(RadioName)-1)
			{
				StopAudioStreamForPlayer(playerid);
				StrmidEx(HouseInfo[house][hRadioLink], "Stopped.");
				ListenRadio[playerid] = sizeof(RadioName);
				HouseInfo[house][hRadio] = 0;
			}
			else
			{
				PlayAudioStreamForPlayer(playerid, RadioLink[listitem]);
				StrmidEx(HouseInfo[house][hRadioLink], RadioLink[listitem]);
				HouseInfo[house][hRadio] = 1;
				ListenRadio[playerid] = listitem;
			}
			SaveHouse(house);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_QUITGROUP1)
	{
		if(response)
		{
			new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
			if(faction != 0)
			{
				if(PlayerInfo[playerid][pFactionRank] <= 5)
				{
					new que[256], dayz, szMessage[256];
					format(que, sizeof(que), "SELECT * FROM `users` WHERE `name` = '%e'", PlayerInfo[playerid][pNamePlayer]);
					new Cache:resultmem = mysql_query(SQL, que);
					if(cache_num_rows() != 0) cache_get_value_int(playerid, "FactionDays", dayz);
					cache_delete(resultmem);
					format(szMessage, sizeof(szMessage), "%s has left the faction %s(rank %d), using /quitfaction, without FP, after %d days, reason: the faction had no leader when he/she left.", PlayerInfo[playerid][pNamePlayer], FactionInfo[faction][fName], PlayerInfo[playerid][pFactionRank],dayz);
					SendFactionMessage(faction, COLOR_SYSTEM, szMessage);
					new quer[256];
					SetPlayerSkinEx(playerid, 289);
					mysql_format(SQL, quer, sizeof(quer), "INSERT INTO `faction_logs` (`playerID`, `Text`) VALUES ('%d', '%s')", PlayerInfo[playerid][pSQLID], szMessage);
					mysql_tquery(SQL, quer);
					format(szMessage,sizeof(szMessage), "You have left the group %s.",FactionInfo[faction][fName]);
					SCM(playerid,COLOR_WHITE,szMessage);
					//--------------------------------------------------------------
					new query[320];
					mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction` = '0', `FactionDays` = '0' WHERE `name` = '%s'",PlayerInfo[playerid][pNamePlayer]);
					mysql_tquery(SQL, query);
					//--------------------------------------------------------------
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pFactionRank] = 0;
					PlayerInfo[playerid][pFwarn] = 0;
					PlayerInfo[playerid][pPunish] = 0;
					SetPlayerSkinEx(playerid, 289);
					SetPlayerTeamColor(playerid);
					SpawnPlayer(playerid);
					pUpdate(playerid,pMemberx);
				}
				else return SCM(playerid, -1, "You are a leader, you can't left your group!");
			}
			else return SCM(playerid, -1, "You don't have a group to quit!");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_QUITGROUP2)
	{
		if(response)
		{
			new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
			if(faction != 0)
			{
				if(PlayerInfo[playerid][pFactionRank] <= 5)
				{
					new que[256], dayz, szMessage[256];
					format(que, sizeof(que), "SELECT * FROM `users` WHERE `name` = '%e'", PlayerInfo[playerid][pNamePlayer]);
					new Cache:resultmem = mysql_query(SQL, que);
					if(cache_num_rows() != 0) cache_get_value_int(playerid, "FactionDays", dayz);
					cache_delete(resultmem);
					format(szMessage, sizeof(szMessage), "%s has left the faction %s(rank %d), using /quitfaction, after %d days, with FP", PlayerInfo[playerid][pNamePlayer], FactionInfo[faction][fName], PlayerInfo[playerid][pFactionRank],dayz);
					SendFactionMessage(faction, COLOR_SYSTEM, szMessage);
					new quer[256];
					SetPlayerSkinEx(playerid, 299);
					mysql_format(SQL, quer, sizeof(quer), "INSERT INTO `faction_logs` (`playerID`, `Text`) VALUES ('%d', '%s')", PlayerInfo[playerid][pSQLID], szMessage);
					mysql_tquery(SQL, quer);
					format(szMessage,sizeof(szMessage), "You have left the group %s.",FactionInfo[faction][fName]);
					SCM(playerid,COLOR_WHITE,szMessage);
					//--------------------------------------------------------------
					new query[320];
					mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction` = '0', `FactionDays` = '0' WHERE `name` = '%s'",PlayerInfo[playerid][pNamePlayer]);
					mysql_tquery(SQL, query);
					//--------------------------------------------------------------
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pFactionRank] = 0;
					PlayerInfo[playerid][pFwarn] = 0;
					PlayerInfo[playerid][pPunish] = 20;
					SetPlayerTeamColor(playerid);
					SetPlayerSkinEx(playerid, 289);
					SpawnPlayer(playerid);
					pUpdate(playerid,pMemberx);
				}
				else return SCM(playerid, -1, "You are a leader, you can't left your group!");
			}
			else return SCM(playerid, -1, "You don't have a group to quit!");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PCOLOR)
	{
		if(response)
		{
			if(strlen(inputtext) != 6) return SPD(playerid, DIALOG_PCOLOR, DIALOG_STYLE_INPUT, "Premium Color:", "Introdu culoarea ta personalizata intrand pe [www.colorpicker.com]\nCuloarea alba este FFFFFF", "Introdu", "Inchide");
			new safetext[10];
			mysql_escape_string(inputtext, safetext);
			PlayerInfo[playerid][pColor] = 1;
			StrmidEx(PlayerInfo[playerid][pColors], safetext);
			SCM(playerid,-1, "Ai schimbat culoare numelui din chat.");
			if(strcmp(safetext,"ffffff", true) == 0) PlayerInfo[playerid][pColor] = 0;
			//--------------------------------------------------------------
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Color`='%d', `Colors`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pColor],PlayerInfo[playerid][pColors],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, string);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_STAFF)
	{
		if(response)
		{
			new stringg[260];
			if(listitem == 0)
			{
				format(string, sizeof(string),"Name\tRank\tDays\tHours\n");
				format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `Admin` >= '1' ORDER BY `Admin` DESC");
				new test, query[MAX_PLAYER_NAME], days, hours;
				new Cache:result12 = mysql_query(SQL, stringg);
				for(new i, j = cache_num_rows(); i != j; ++i)
				{
					cache_get_value(i, "name", query, MAX_PLAYER_NAME);
					cache_get_value_int(i, "Admin", test);
					cache_get_value_int(i, "AdminDays", days);
					cache_get_value_int(i, "AdminHours", hours);
					//--------------------------------------------------------------
					format(string, sizeof(string), "%s%s\t%s\t%d\t%d\n",string, query, NumeAdmin(test), days, hours);
					SPD(playerid,DIALOG_NULL,DIALOG_STYLE_TABLIST_HEADERS,"Admins:",string,"Cancel","");
				}
				if(cache_num_rows() == 0) SCM(playerid, COLOR_SYSTEM, "* There is no admins on the server.");
				cache_delete(result12);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string),"Name\tRank\tDays\tHours\n");
				format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `Helper` >= '1' ORDER BY `Helper` DESC");
				new test, query[MAX_PLAYER_NAME], days, hours;
				new Cache:result12 = mysql_query(SQL, stringg);
				for(new i, j = cache_num_rows(); i != j; ++i)
				{
					cache_get_value(i, "name", query, MAX_PLAYER_NAME);
					cache_get_value_int(i, "Helper", test);
					cache_get_value_int(i, "HelperDays", days);
					cache_get_value_int(i, "HelperHours", hours);
					//--------------------------------------------------------------
					format(string, sizeof(string), "%s%s\t%d\t%d\t%d\n",string, query, test, days, hours);
					SPD(playerid,DIALOG_NULL,DIALOG_STYLE_TABLIST_HEADERS,"Helpers:",string,"Cancel","");
				}
				if(cache_num_rows() == 0) SCM(playerid, COLOR_SYSTEM, "* There is no helpers on the server.");
				cache_delete(result12);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string),"Name\tFactiune\tDays\tHours\n");
				format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `Leader` >= '1' ORDER BY `Leader` ASC");
				new test, query[MAX_PLAYER_NAME], days, hours;
				new Cache:result12 = mysql_query(SQL, stringg);
				for(new i, j = cache_num_rows(); i != j; ++i)
				{
					cache_get_value(i, "name", query, MAX_PLAYER_NAME);
					cache_get_value_int(i, "Leader", test);
					cache_get_value_int(i, "FactionDays", days);
					cache_get_value_int(i, "LeaderHours", hours);
					//--------------------------------------------------------------
					format(string, sizeof(string), "%s%s\t%d\t%d\t%d\n",string, query, test, days, hours);
					SPD(playerid,DIALOG_NULL,DIALOG_STYLE_TABLIST_HEADERS,"Leaders:",string,"Cancel","");
				}
				if(cache_num_rows() == 0) SCM(playerid, COLOR_SYSTEM, "* There is no leaders on the server.");
				cache_delete(result12);
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_FREE)
	{
		new copid = GetPVarInt(playerid, "fID"), price = GetPVarInt(playerid, "fPrice");
		if(response)
		{
			if(IsPlayerConnected(copid))
			{
				new group = PlayerInfo[copid][pLeader]+PlayerInfo[copid][pMember];
				if(group == 1 || group == 2 || group == 3)
				{
					if(GetPlayerCash(playerid) < price) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficienti bani!");
					GivePlayerCash(copid, price);
					GivePlayerCash(playerid, -price);
					PlayerInfo[playerid][pJailTime] = 0;
					PlayerInfo[playerid][pJailed] = 0;
					FactionEntered[playerid] = 1;
					PlayerInfo[copid][pFreePoint] -= 5;
					pUpdate(playerid,pJailedx);
					pUpdate(playerid,pJailTimex);
					//--------------------------------------------------------------
					format(string, sizeof(string), "%s has accepted your free.", GetName(playerid));
					SCM(copid, COLOR_LIGHTGREEN, string);
					format(string, sizeof(string), "Ai acceptat free-ul de la %s pentru %s$.", GetName(copid), FormatNumber(price));
					SCM(playerid, COLOR_LIGHTGREEN, string);
					DeletePVar(playerid, "fID");
					DeletePVar(playerid, "fPrice");
					SetPlayerPosEx(playerid, 246.4436,67.6344,1003.6406);
					SetPlayerInteriorEx(playerid, 6);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerHealthEx(playerid, 99.9);
					SetPlayerArmourEx(playerid, 0.0);
				}
				else return SCM(playerid, COLOR_GRAD2, "Acest jucator nu e politist!");
			}
			else return	SCM(playerid, COLOR_YELLOW2, "Acest jucator nu este online!");
		}
		else
		{
			format(string, sizeof(string), "%s has declined your free.",GetName(playerid));
			SCM(copid, COLOR_LIGHTGREEN, string);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pClan] >= 1)
			{
				if(listitem == 0) {
					SPD(playerid, DIALOG_CLAN_TAG, DIALOG_STYLE_LIST, "Clan Tag:","Type 0: Off\nType 1: Tag Name\nType 2: Name Tag", "Selecteaza", "Inchide");
				}
				if(listitem == 1)
				{
					new stringg[336], Members, test, name[MAX_PLAYER_NAME], last[32], str[128], days, warn, clanid = PlayerInfo[playerid][pClan];
					format(string, sizeof(string),"Name\tRank - CWarn\tLast On\tDays\n");
					format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `users`.`Clan` = '%d' ORDER BY `users`.`ClanRank` DESC LIMIT 50",clanid);
					new Cache:result12 = mysql_query(SQL, stringg);
					for(new i, j = cache_num_rows(); i != j; ++i)
					{
						cache_get_value(i, "name", name, MAX_PLAYER_NAME);
						cache_get_value_int(i, "ClanRank", test);
						cache_get_value(i, "lastOn", last, 32);
						cache_get_value_int(i, "ClanDays", days);
						cache_get_value_int(i, "ClanWarn", warn);
						format(Selected[playerid][Members], MAX_PLAYER_NAME, name);
						//--------------------------------------------------------------
						new id = GetPlayerID(name);
						if(id != INVALID_PLAYER_ID) format(string, sizeof(string), "%s%s\t%d - %d\tonline\t%d\n",string, name, test, warn, days);
						else format(string, sizeof(string), "%s%s\t%d - %d\t%s\t%d\n",string, name, test, warn, last, days);
						Members++;
					}
					cache_delete(result12);
					format(str,sizeof(str),"{%s}%s {FFFFFF}Members: %d/%d Owner: %s",ClanInfo[clanid][ClanColor],ClanInfo[clanid][ClanName],Members,ClanInfo[clanid][ClanMembers],ClanInfo[clanid][ClanOwner]);
					SPD(playerid,DIALOG_CLAN_MEMBERS,DIALOG_STYLE_TABLIST_HEADERS,str,string,"Selecteaza","Inchide");
				}
				if(listitem == 2)
				{
					if(PlayerInfo[playerid][pClanRank] < 7) return SCM(playerid,COLOR_YELLOW2,"Nu esti tu liderul acestui clan!");
					if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
					SPD(playerid,DIALOG_CLAN_OPTIONS,DIALOG_STYLE_LIST,"Clan Options:","Informatii clan\nSchimba numele clanului\nSchimba culoarea\nSchimba tag-ul\nSchimba mesajul zilei\n","Alege","Inchide");
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_OPTIONS)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new clan = PlayerInfo[playerid][pClan], clanstring[350];
					format(string,sizeof(string),"Clan ID: %d\nClan name: %s\n",clan,ClanInfo[clan][ClanName]);
					strcat(clanstring, string);
					format(string,sizeof(string),"Clan tag: %s\n",ClanInfo[clan][ClanTag]);
					strcat(clanstring, string);
					format(string, sizeof(string),"Rank 1: %s\nRank 2: %s\n",ClanInfo[clan][ClanRankName1],ClanInfo[clan][ClanRankName2]);
					strcat(clanstring, string);
					format(string, sizeof(string),"Rank 3: %s\nRank 4: %s\n",ClanInfo[clan][ClanRankName3],ClanInfo[clan][ClanRankName4]);
					strcat(clanstring, string);
					format(string, sizeof(string),"Rank 5: %s\nRank 6: %s\nRank 7: %s\n",ClanInfo[clan][ClanRankName5],ClanInfo[clan][ClanRankName6],ClanInfo[clan][ClanRankName7]);
					strcat(clanstring, string);
					format(string, sizeof(string),"Clan motd: %s\n",ClanInfo[clan][ClanMOTD]);
					strcat(clanstring, string);
					SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Informatii clan:",clanstring,"Inchide","");
				}
				case 1: SPD(playerid,DIALOG_CLAN_NAME,DIALOG_STYLE_INPUT,"Clan Name:","Introdu numele pe care vrei sa-l aiba clanul tau.","Introdu","Inchide");
				case 2: SPD(playerid,DIALOG_CLAN_COLOR,DIALOG_STYLE_INPUT,"Clan Color:","Introdu codul culorii pe care vrei sa-l aiba clanul tau. Ex: FFFFFF\nPentru a folosi o culoare customizata acceseaza linkul: http://www.colorpicker.com","Introdu","Inchide");
				case 3: SPD(playerid,DIALOG_CLAN_TAG1,DIALOG_STYLE_INPUT,"Clan Tag:","Introdu tag-ul pe care vrei sa-l aiba clanul tau. Ex: [abc]","Introdu","Inchide");
				case 4: SPD(playerid,DIALOG_CLAN_MOTD,DIALOG_STYLE_INPUT,"Clan Motd:","Introdu mesajul pe care vrei sa-l aiba clanul tau atunci cand intra pe server. Ex: Bine ati venit!","Introdu","Inchide");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_NAME)
	{
		if(response)
		{
			if(strlen(inputtext) > 5 && strlen(inputtext) < 25)
			{
				new safestr[64];
				mysql_escape_string(inputtext, safestr);
				format(string, sizeof(string), "SELECT `clanName` FROM `clans` WHERE `clans`.`clanName` = '%s'", safestr);
				new Cache:resultoo = mysql_query(SQL, string);
				if(cache_num_rows() > 0)
				{
					cache_delete(resultoo);
					return SCM(playerid, COLOR_GREY, "Acest nume este deja luat.");
				}
				cache_delete(resultoo);
				format(string, sizeof(string), "{%s}Numele clanului a fost schimbat in [%s].",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], safestr);
				SendClanMessage(PlayerInfo[playerid][pClan], -1, string);
				StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanName], safestr);
				SaveClans(PlayerInfo[playerid][pClan]);
			}
			else return SPD(playerid,DIALOG_CLAN_NAME,DIALOG_STYLE_INPUT,"Clan Name:","Introdu numele pe care vrei sa-l aiba clanul tau.","Introdu","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_MOTD)
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				new safestr[128];
				mysql_escape_string(inputtext, safestr);
				format(string, sizeof(string), "Ai schimbat MOTD-ul in [%s].", safestr);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "{%s}%s a schimbat MOTD-ul clanului in [%s].",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], GetName(playerid), safestr);
				SendClanMessage(PlayerInfo[playerid][pClan], -1, string);
				StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanMOTD], safestr);
				SaveClans(PlayerInfo[playerid][pClan]);
			}
			else return SPD(playerid,DIALOG_CLAN_MOTD,DIALOG_STYLE_INPUT,"Clan Motd:","Introdu mesajul pe care vrei sa-l aiba clanul tau atunci cand intra pe server.\tEx: Bine ati venit!","Introdu","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_TAG1)
	{
		if(response)
		{
			if(strlen(inputtext) < 7 && strlen(inputtext) > 2)
			{
				new safestr[16];
				mysql_escape_string(inputtext, safestr);
				format(string, sizeof(string), "SELECT `clanTag` FROM `clans` WHERE `clans`.`clanTag` = '%s'", safestr);
				new Cache:resultooo = mysql_query(SQL, string);
				if(cache_num_rows() > 0)
				{
					cache_delete(resultooo);
					return SCM(playerid, COLOR_YELLOW2, "Acest tag este luat deja.");
				}
				cache_delete(resultooo);
				format(string, sizeof(string), "{%s}Tag-ul clanului a fost schimbat in %s.",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], safestr);
				SendClanMessage(PlayerInfo[playerid][pClan], -1, string);
				StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanTag], safestr);
				SaveClans(PlayerInfo[playerid][pClan]);
				foreach(new i: Player)
				{
					if(PlayerInfo[i][pClan] == PlayerInfo[playerid][pClan])
					{
						if(PlayerInfo[i][pClanTagType] == 1) format(string, sizeof(string),"%s%s",ClanInfo[PlayerInfo[i][pClan]][ClanTag],PlayerInfo[i][pNamePlayer]);
						else if(PlayerInfo[i][pClanTagType] == 2) format(string, sizeof(string),"%s%s",PlayerInfo[i][pNamePlayer],ClanInfo[PlayerInfo[i][pClan]][ClanTag]);
						else format(string, sizeof(string),"%s",PlayerInfo[i][pNamePlayer]);
						SetPlayerName(i, string);
					}
				}
			}
			else return SPD(playerid,DIALOG_CLAN_TAG1,DIALOG_STYLE_INPUT,"Clan Tag:","Introdu tag-ul pe care vrei sa-l aiba clanul tau.\tEx: [abc]\nAcum foloseste mai putin de 7 caractere si mai mult de 2.","Introdu","Inchide");
		}	
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_COLOR)
	{
		if(response)
		{
			if(strlen(inputtext) == 6)
			{
				new safestr[10];
				mysql_escape_string(inputtext, safestr);
				StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], safestr);
				format(string,sizeof(string),"{%s}Culoarea clanului a fost schimbata!",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor]);
				SendClanMessage(PlayerInfo[playerid][pClan], COLOR_WHITE, string);
				SaveClans(PlayerInfo[playerid][pClan]);
			}
			else return SPD(playerid,DIALOG_CLAN_COLOR,DIALOG_STYLE_INPUT,"Clan Color:","Introdu din nou codul culorii pe care vrei sa-l aiba clanul tau.\tEx: [abc]\nPentru a folosi o culoare customizata acceseaza linkul: http://www.colorpicker.com/","Introdu","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_TAG)
	{
		if(response)
		{
			new string2[128];
			if(listitem == 0)
			{
				format(string2,sizeof(string2),"%s",PlayerInfo[playerid][pNamePlayer]);
				SetPlayerName(playerid, string2);
				format(string,sizeof(string),"Numele a fost schimbat in: %s",string2);
				SCM(playerid,COLOR_WHITE,string);
				PlayerInfo[playerid][pClanTagType] = 0;
			}
			if(listitem == 1)
			{
				format(string2,sizeof(string2),"%s%s",ClanInfo[PlayerInfo[playerid][pClan]][ClanTag],PlayerInfo[playerid][pNamePlayer]);
				SetPlayerName(playerid, string2);
				format(string,sizeof(string),"Numele a fost schimbat in: %s",string2);
				SCM(playerid,COLOR_WHITE,string);
				PlayerInfo[playerid][pClanTagType] = 1;
			}
			if(listitem == 2)
			{
				format(string2,sizeof(string2),"%s%s",PlayerInfo[playerid][pNamePlayer],ClanInfo[PlayerInfo[playerid][pClan]][ClanTag]);
				SetPlayerName(playerid, string2);
				format(string,sizeof(string),"Numele a fost schimbat in: %s",string2);
				SCM(playerid,COLOR_WHITE,string);
				PlayerInfo[playerid][pClanTagType] = 2;
			}
			pUpdate(playerid,pClanTagTypex);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_MEMBERS) 
	{
		if(response) 
		{
			if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
			if(PlayerInfo[playerid][pClanRank] < 7) return SCM(playerid, COLOR_YELLOW2, "La aceasta categorie, are acces doar propietarul clanului.");
			format(Selected2[playerid], MAX_PLAYER_NAME, Selected[playerid][listitem]);
			SPD(playerid, DIALOG_CLAN_MEMBERS2, DIALOG_STYLE_LIST, "Setari:", "Da-l afara\nDa-i rank up\nDa-i un clan warn\nSterge-i un clan warn", "Selecteaza" ,"Inapoi");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_MEMBERS2)
	{
		if(response) 
		{
			switch(listitem)
			{
				case 0:
				{
					new userID = GetPlayerID(Selected2[playerid]), clanid = PlayerInfo[playerid][pClan];
					if(userID == playerid) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta optiune pe tine deoarece esti lider.");
					if(IsPlayerConnected(userID)) 
					{
						format(string, sizeof(string), "Ai fost dat afara din clan de catre %s.", GetName(playerid));
						SCM(userID, COLOR_LIGHTBLUE, string);
						PlayerInfo[userID][pClan] = 0;
						PlayerInfo[userID][pClanWarn] = 0;
						PlayerInfo[userID][pClanRank] = 0;
						pUpdate(userID,pClanRankx);
						pUpdate(userID,pClanx);
						pUpdate(userID,pClanWarnx);
						format(string, sizeof(string), "{%s}(CLAN) %s l-a dat pe %s afara.", ClanInfo[clanid][ClanColor], GetName(playerid), Selected2[playerid]);
						SetPlayerName(userID, PlayerInfo[userID][pNamePlayer]);
					}
					else format(string, sizeof(string), "{%s}(CLAN) %s l-a dat pe %s (neconectat) afara.", ClanInfo[clanid][ClanColor], GetName(playerid), Selected2[playerid]);
					SendClanMessage(clanid, COLOR_WHITE, string);
					//--------------------------------------------------------------
					mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanWarn`='0', `ClanTagType`='0' WHERE `name`='%s'", Selected2[playerid]);
					mysql_tquery(SQL, string, "","");
					//--------------------------------------------------------------
					ClanInfo[clanid][ClanMembers] -= 1;
					SaveClans(clanid);
				}
				case 1:
				{
					format(string, sizeof(string), "Ce rank vrei sa ii acorzi membrului %s?\nScrie un rank valid (1-6).", Selected2[playerid]);
					SPD(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_INPUT, "Rank up:", string, "Selecteaza", "Inchide");
				}
				case 2:
				{
					new userID = GetPlayerID(Selected2[playerid]), clanid = PlayerInfo[playerid][pClan];
					if(userID == playerid) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta optiune pe tine deoarece esti lider.");
					if(IsPlayerConnected(userID)) 
					{
						format(string, sizeof(string), "%s ti-a dat clan warn.", GetName(playerid));
						SCM(userID, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "{%s}(CLAN) %s i-a dat lui %s clan warn.", ClanInfo[clanid][ClanColor], GetName(playerid), Selected2[playerid]);
						PlayerInfo[userID][pClanWarn] += 1;
						pUpdate(userID,pClanWarnx);
					}
					else format(string, sizeof(string), "{%s}(CLAN) %s i-a dat lui %s (neconectat) clan warn.", ClanInfo[clanid][ClanColor], GetName(playerid), Selected2[playerid]);
					SendClanMessage(clanid, COLOR_WHITE, string);
					//--------------------------------------------------------------
					mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `ClanWarn`=`ClanWarn`+1 WHERE `name`='%s' AND `Clan` = '%d'", Selected2[playerid], PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL, string, "","");
					//--------------------------------------------------------------
					if(IsPlayerConnected(userID)) 
					{
						if(PlayerInfo[userID][pClanWarn] >= 3)
						{
							SCM(userID, COLOR_LIGHTBLUE, "Ai fost dat afara din clan. Motiv: 3/3 clan warn.");
							PlayerInfo[userID][pClan] = 0;
							PlayerInfo[userID][pClanRank] = 0;
							PlayerInfo[userID][pClanWarn] = 0;
							pUpdate(userID,pClanRankx);
							pUpdate(userID,pClanx);
							pUpdate(userID,pClanWarnx);
							format(string, sizeof(string), "{%s}(CLAN) %s a fost dat afara din clan. Motiv: 3/3 clan warn.", ClanInfo[clanid][ClanColor], Selected2[playerid]);
							SetPlayerName(userID, PlayerInfo[userID][pNamePlayer]);
						}
					}
					else 
					{
						new result[128], cw;
						format(result,sizeof(result),"SELECT * FROM `users` WHERE `name`='%s'",Selected2[playerid]);
						new Cache:file = mysql_query(SQL, result);
						if(cache_num_rows() > 0) cache_get_value_int(0, "ClanWarn", cw);
						cache_delete(file);
						if(cw >= 2)
						{
							format(string, sizeof(string), "{%s}(CLAN) %s (neconectat) a fost dat afara din clan. Motiv: 3/3 clan warn.", ClanInfo[clanid][ClanColor], Selected2[playerid]);
							SendClanMessage(clanid, COLOR_WHITE, string);
							//--------------------------------------------------------------
							mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanWarn`='0', `ClanTagType`='0' WHERE `name`='%s'", Selected2[playerid]);
							mysql_tquery(SQL, string, "","");
							//--------------------------------------------------------------
							ClanInfo[clanid][ClanMembers] -= 1;
						}
					}
					SaveClans(clanid);	
				}
				case 3:
				{
					new userID = GetPlayerID(Selected2[playerid]), clanid = PlayerInfo[playerid][pClan];
					if(userID == playerid) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta optiune pe tine deoarece esti lider.");
					new result[128], cw;
					format(result,sizeof(result),"SELECT * FROM `users` WHERE `name`='%s'",Selected2[playerid]);
					new Cache:file = mysql_query(SQL, result);
					if(cache_num_rows() > 0) cache_get_value_int(0, "ClanWarn", cw);
					cache_delete(file);
					if(cw < 1) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu are niciun clan warn.");
					if(IsPlayerConnected(userID)) 
					{
						format(string, sizeof(string), "%s ti-a sters un clan warn.", GetName(playerid));
						SCM(userID, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "{%s}(CLAN) %s i-a sters lui %s un clan warn.", ClanInfo[clanid][ClanColor], GetName(playerid), Selected2[playerid]);
						PlayerInfo[userID][pClanWarn] -= 1;
						pUpdate(userID,pClanWarnx);
					}
					else format(string, sizeof(string), "{%s}(CLAN) %s i-a sters lui %s (neconectat) un clan warn.", ClanInfo[clanid][ClanColor], GetName(playerid), Selected2[playerid]);
					SendClanMessage(clanid, COLOR_WHITE, string);
					//--------------------------------------------------------------
					mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `ClanWarn`=`ClanWarn`-1 WHERE `name`='%s' AND `Clan` = '%d'", Selected2[playerid], PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL, string, "","");
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CLAN_RANK)
	{
		if(response) 
		{
			if(strval(inputtext) <= 0 || strval(inputtext) > 6) return SCM(playerid, COLOR_GREY, "Rank-ul este invalid. Trebuie sa fie cuprins intre 1 si 6!");
			new userID = GetPlayerID(Selected2[playerid]), clanid = PlayerInfo[playerid][pClan];
			if(userID == playerid) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta optiune pe tine deoarece esti lider.");
			if(IsPlayerConnected(userID)) 
			{
				PlayerInfo[userID][pClanRank] = strval(inputtext);
				format(string, sizeof(string), "{%s}(CLAN) %s i-a dat rank %d lui %s.", ClanInfo[clanid][ClanColor], GetName(playerid), strval(inputtext), Selected2[playerid]);
				pUpdate(userID,pClanRankx);
			}
			else format(string, sizeof(string), "{%s}(CLAN) %s i-a dat rank %d lui %s (neconectat).", ClanInfo[clanid][ClanColor], GetName(playerid), strval(inputtext), Selected2[playerid]);
			SendClanMessage(clanid, COLOR_WHITE, string);
			//--------------------------------------------------------------
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `ClanRank`='%d' WHERE `name`='%s'", strval(inputtext), Selected2[playerid]);
			mysql_tquery(SQL, string, "","");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SKILL)
	{
		if(response)
		{
			new str[500];
			if(listitem == 0)
			{
				format(string,sizeof(string),"{ccffff}Skill {99ff33}%d {ccffff}din {99ff33}6.\n",PlayerInfo[playerid][pRobSkill]);
				strcat(str,string);
				format(string,sizeof(string),"{ccffff}Ai dat pana acum {99ff33}%d {ccffff}roburi.\n",PlayerInfo[playerid][pRobTimes]);
				strcat(str,string);
				if(PlayerInfo[playerid][pRobSkill] < 6)
				{
					format(string,sizeof(string),"{ccffff}Mai trebuie sa dai inca {99ff33}%d {ccffff}roburi pentru a face skill {99ff33}%d.",PlayerInfo[playerid][pRobRem],PlayerInfo[playerid][pRobSkill]+1);
					strcat(str,string);
				}
				SPD(playerid,DIALOG_SKILLS,DIALOG_STYLE_MSGBOX,"Rob skill:",str,"Inchide","Inapoi");
			}
			if(listitem == 1)
			{
				format(string,sizeof(string),"{ccffff}Skill {99ff33}%d {ccffff}din {99ff33}6.\n",PlayerInfo[playerid][pTruckSkill]);
				strcat(str,string);
				format(string,sizeof(string),"{ccffff}Ai livrat pana acum {99ff33}%d {ccffff}transporturi cu marfa.\n",PlayerInfo[playerid][pTruckTimes]);
				strcat(str,string);
				if(PlayerInfo[playerid][pTruckSkill] < 6)
				{
					format(string,sizeof(string),"{ccffff}Mai trebuie sa duci inca {99ff33}%d {ccffff}transporturi pentru a face skill {99ff33}%d.",PlayerInfo[playerid][pTruckRem],PlayerInfo[playerid][pTruckSkill]+1);
					strcat(str,string);
				}
				SPD(playerid,DIALOG_SKILLS,DIALOG_STYLE_MSGBOX,"Trucker skill:",str,"Inchide","Inapoi");
			}
			if(listitem == 2)
			{
				format(string,sizeof(string),"{ccffff}Skill {99ff33}%d {ccffff}din {99ff33}6.\n",PlayerInfo[playerid][pFarmSkill]);
				strcat(str,string);
				format(string,sizeof(string),"{ccffff}Ai vandut pana acum {99ff33}%d {ccffff}saci cu faina.\n",PlayerInfo[playerid][pFarmTimes]);
				strcat(str,string);
				if(PlayerInfo[playerid][pFarmSkill] < 6)
				{
					format(string,sizeof(string),"{ccffff}Mai trebuie sa vinzi inca {99ff33}%d {ccffff}saci cu faina pentru a face skill {99ff33}%d.",PlayerInfo[playerid][pFarmRem],PlayerInfo[playerid][pFarmSkill]+1);
					strcat(str,string);
				}
				SPD(playerid,DIALOG_SKILLS,DIALOG_STYLE_MSGBOX,"Farmer skill:",str,"Inchide","Inapoi");
			}
			if(listitem == 3)
			{
				format(string,sizeof(string),"{ccffff}Skill {99ff33}%d {ccffff}din {99ff33}6.\n",PlayerInfo[playerid][pPizzaSkill]);
				strcat(str,string);
				format(string,sizeof(string),"{ccffff}Ai livrat pana acum {99ff33}%d {ccffff}pizza.\n",PlayerInfo[playerid][pPizzaTimes]);
				strcat(str,string);
				if(PlayerInfo[playerid][pPizzaSkill] < 6)
				{
					format(string,sizeof(string),"{ccffff}Mai trebuie sa livrezi inca {99ff33}%d {ccffff}pizza pentru a face skill {99ff33}%d.",PlayerInfo[playerid][pPizzaRem],PlayerInfo[playerid][pPizzaSkill]+1);
					strcat(str,string);
				}
				SPD(playerid,DIALOG_SKILLS,DIALOG_STYLE_MSGBOX,"Pizza skill:",str,"Inchide","Inapoi");
			}
			if(listitem == 4)
			{
				format(string,sizeof(string),"{ccffff}Skill {99ff33}%d {ccffff}din {99ff33}6.\n",PlayerInfo[playerid][pMatsSkill]);
				strcat(str,string);
				format(string,sizeof(string),"{ccffff}Ai facut pana acum {99ff33}%d {ccffff}ture de materiale.\n",PlayerInfo[playerid][pMatsTimes]);
				strcat(str,string);
				if(PlayerInfo[playerid][pMatsSkill] < 6)
				{
					format(string,sizeof(string),"{ccffff}Mai trebuie sa faci inca {99ff33}%d {ccffff}ture pentru a face skill {99ff33}%d.",PlayerInfo[playerid][pMatsRem],PlayerInfo[playerid][pMatsSkill]+1);
					strcat(str,string);
				}
				SPD(playerid,DIALOG_SKILLS,DIALOG_STYLE_MSGBOX,"Pizza skill:",str,"Inchide","Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SKILLS) {
		if(!response) return SPD(playerid,DIALOG_SKILL,DIALOG_STYLE_LIST,"Skills:","Rob Skill\nTrucker Skill\nFarmer Skill\nPizza Skill\nMaterials Skill\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_RENTV)
	{
		if(response)
		{
			new car = GetPlayerVehicleID(playerid);
			if(IsAnRentVeh(car))
			{
				if(HireCar[playerid] != -1)
				{
					SCM(playerid,COLOR_YELLOW2,"Ai inchiriat deja un vehicul, foloseste /unrentveh!");
					TogglePlayerControllable(playerid, true);
					RemovePlayerFromVehicleEx(playerid);
					return 1;
				}
				if(CarRented[car] == 1)
				{
					SCM(playerid,COLOR_YELLOW2,"Aceast vehicul este deja inchiriat de cineva.");
					RemovePlayerFromVehicleEx(playerid);
					TogglePlayerControllable(playerid, true);
					return 1;
				}
				if(GetPlayerCash(playerid) <  BizzInfo[20][bEntranceCost])
				{
					SCM(playerid, COLOR_GRAD2, "Nu ai atat de mult cash!");
					TogglePlayerControllable(playerid, true);
					RemovePlayerFromVehicleEx(playerid);
					return 1;
				}
				GivePlayerCash(playerid,-BizzInfo[20][bEntranceCost]);
				BizzInfo[20][bMoney] += BizzInfo[20][bEntranceCost];
				HireCar[playerid] = car;
				CarRented[car] = 1;
				SaveBusiness(20);
				RentTime[playerid] = 600;
				SetPVarInt(playerid, "RentCar", car);
				TogglePlayerControllable(playerid, true);
				SCM(playerid,COLOR_YELLOW,"INFO: Comenzi disponibile: /unrentveh, /rentfind.");
				SCM(playerid,COLOR_YELLOW,"INFO: Vehiculul va deveni rentabil daca timp de 10 minute nu il folosesti.");
			}
		}
		else
		{
			TogglePlayerControllable(playerid, true);
			RemovePlayerFromVehicleEx(playerid);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKSELECTX)
	{
		if(response)
		{
			if(Trucker4[playerid] == 1) SetTimerEx_("Truckerr1", 250, 200, 1, "i",playerid);
			else if(Trucker4[playerid] == 2) SetTimerEx_("Truckerr2", 250, 200, 1, "i",playerid);
			else if(Trucker4[playerid] == 3) SetTimerEx_("Truckerr3", 250, 200, 1, "i",playerid);
			else if(Trucker4[playerid] == 4) SetTimerEx_("Truckerr4", 250, 200, 1, "i",playerid);
			Trucker4[playerid] = 0;
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKSELECT)
	{
		if(response)
		{
			new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx_("AttachTrailerrr", 1000, 1000, 1, "i", playerid);
			Trucker2[playerid] = 0;
			SCM(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			if(Trucker3[playerid] == 1)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 400);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 12)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 400);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 13)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 14)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 15)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 16)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
			CP[playerid] = 2;
		}
		else SetTimerEx_("Truckerr1", 250, 200, 1, "i",playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKSELECT2)
	{
		if(response)
		{
			new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx_("AttachTrailerrr", 1000, 1000, 1, "i", playerid);
			Trucker2[playerid] = 0;
			SCM(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			if(Trucker3[playerid] == 1)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 2)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 3)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 4)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 5)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 6)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 7)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 8)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 9)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 10)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 11)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 12)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 15;
			}
			Trucker3[playerid] = 0;
			CP[playerid] = 2;
		}
		else SetTimerEx_("Truckerr2", 250, 200, 1, "i",playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKSELECT3)
	{
		if(response)
		{
			new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx_("AttachTrailerrr", 1000, 1000, 1, "i", playerid);
			Trucker2[playerid] = 0;
			SCM(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			if(Trucker3[playerid] == 1)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 4)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 5)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 6)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 7)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 8)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 9)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 10)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 11)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 12)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
			CP[playerid] = 2;
		}
		else SetTimerEx_("Truckerr3", 250, 200, 1, "i",playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKSELECT4)
	{
		if(response)
		{
			new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx_("AttachTrailerrr", 1000, 1000, 1, "i", playerid);
			Trucker2[playerid] = 0;
			SCM(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			if(Trucker3[playerid] == 1)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 12)
			{
				SetPlayerCheckpointEx(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
				SetVehicleHealth(viddd[playerid], 400);
				Trucker[playerid] = 17;
			}
			Trucker3[playerid] = 0;
			CP[playerid] = 2;
		}
		else SetTimerEx_("Truckerr4", 250, 200, 1, "i",playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKER1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 1;
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 3;
				}
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 5;
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 7;
			}
			if(listitem == 7)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 8;
			}
			if(listitem == 8)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 9;
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 10;
				}
			}
			if(listitem == 10)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 11;
			}
			if(listitem == 11)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 12;
				}
			}
			if(listitem == 12)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 13;
			}
			if(listitem == 13)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 14;
				}
			}
			if(listitem == 14)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 15;
				}
			}
			if(listitem == 15)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 16;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKER2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 1;
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 3;
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 5;
			}
			if(listitem == 5)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 6;
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 7;
				}
			}
			if(listitem == 7)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 8;
			}
			if(listitem == 8)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 9;
				}
			}
			if(listitem == 9)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 10;
			}
			if(listitem == 10)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 11;
				}
			}
			if(listitem == 11)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 12;
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKER3)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 1;
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 3;
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 5;
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 7;
			}
			if(listitem == 7)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 8;
				}
			}
			if(listitem == 8)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 9;
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 10;
				}
			}
			if(listitem == 10)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 11;
				}
			}
			if(listitem == 11)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 12;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TRUCKER4)
	{
		if(response)
		{
			if(listitem == 0)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 1;
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 3;
				}
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 5;
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 7;
			}
			if(listitem == 7)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 8;
			}
			if(listitem == 8)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 9;
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 2)
				{
					format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
					SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 10;
				}
			}
			if(listitem == 10)
			{
				format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
				SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
				Trucker3[playerid] = 11;
			}
			if(listitem == 11)
			{
				if(PlayerInfo[playerid][pTruckSkill] < 3)
				{
					format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
					SPD(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
					format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
					SPD(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
					Trucker3[playerid] = 12;
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_FACTIUNI)
	{
		if(response)
		{
			new factiune = listitem + 1, lead[MAX_PLAYER_NAME], members, ftext[64], query[500], stringy[256];
			format(stringy, sizeof(stringy), "SELECT * FROM `users` WHERE `PlayerFaction` = '%d' AND `FactionRank` = '6' LIMIT 1", factiune);
			new Cache:resultz = mysql_query(SQL, stringy);
			//--------------------------------------------------------------
			if(cache_num_rows() != 0) cache_get_value(0, "name", lead, 24);
			cache_delete(resultz);
			//--------------------------------------------------------------
			format(query, sizeof(query),"SELECT * FROM `users` WHERE `Member` = '%d'", factiune);
			new Cache:resultx = mysql_query(SQL, query);
			members = cache_num_rows();
			cache_delete(resultx);
			//--------------------------------------------------------------
			new szDialogText[500], on = 0;
			SetPVarInt(playerid, "Faction", factiune);
			foreach(new t: Player) {
				if(PlayerInfo[t][pMember] == factiune) on++;
			}
			if(FactionInfo[factiune][fAplication] == 1) ftext="{33cc00}Deschise";
			else ftext="{cc3300}Inchise";
			new id = GetPlayerID(lead);
			if(id != INVALID_PLAYER_ID) format(szDialogText,sizeof(szDialogText),"{ffffff}Factiune: %s\nID: %i\nMembrii: %d/%d\nMembrii online: %d\nLider: %s ({33cc00}online{ffffff})\nAplicatii: %s",FactionInfo[factiune][fName],factiune,members,FactionInfo[factiune][fSlots],on,lead,ftext);
			else format(szDialogText,sizeof(szDialogText),"{ffffff}Factiune: %s\nID: %i\nMembrii: %d/%d\nMembrii online: %d\nLider: %s ({cc3300}offline{ffffff})\nAplicatii: %s",FactionInfo[factiune][fName],factiune,members,FactionInfo[factiune][fSlots],on,lead,ftext);
			SPD(playerid,DIALOG_FACTIUNI1,DIALOG_STYLE_MSGBOX,"Faction Info:", szDialogText,"Checkpoint", "Inapoi");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_FACTIUNI1)
	{
		if(response)
		{
			new f = GetPVarInt(playerid, "Faction");
			format(string, sizeof(string), "Un checkpoint ti-a fost setat la factiunea %s.", FactionInfo[f][fName]);
			SCM(playerid, COLOR_ORANGE, string);
			SetPlayerCheckpointEx(playerid, FactionInfo[f][fHQExteriorPosX], FactionInfo[f][fHQExteriorPosY], FactionInfo[f][fHQExteriorPosZ], 2.5);
			DeletePVar(playerid, "Faction");
		}
		else
		{
			new members, color[15];
			color[0] = EOS;
			for(new xf = 1; xf < MAX_FACTIONS; xf++)
			{
				switch(xf)
				{
					case 1: color[1] = COLOR_PD;
					case 2: color[2] = COLOR_FBI;
					case 3: color[3] = COLOR_NG;
					case 4: color[4] = COLOR_MEDIC;
					case 5: color[5] = TEAM_AZTECAS_COLOR;
					case 6: color[6] = TEAM_RUSSIAN_COLOR;
					case 7: color[7] = COLOR_MAYOR;
					case 8: color[8] = COLOR_HITMAN;
					case 9: color[9] = COLOR_NEWS;
					case 10: color[10] = COLOR_YELLOW;
					case 11: color[11] = TEAM_GROVE_COLOR;
					case 12: color[12] = TEAM_VAGOS_COLOR;
					case 13: color[13] = TEAM_BALLAS_COLOR;
					case 14: color[14] = COLOR_BLOOD;
				}
				if(strlen(FactionInfo[xf][fName]) >= 1)
				{
					new string2[128];
					format(string2, sizeof(string2), "SELECT * FROM `users` WHERE `Member` = '%d'", xf);
					new Cache:resultx = mysql_query(SQL, string2);
					members = cache_num_rows();
					cache_delete(resultx);
					format(string, sizeof(string),"%s[%d/%d]\t%s%s\n",string,members,FactionInfo[xf][fSlots],GetColorHex(color[xf]),FactionInfo[xf][fName]);
				}
				DeletePVar(playerid, "Faction");
			}
			SPD(playerid,DIALOG_FACTIUNI, DIALOG_STYLE_TABLIST,"Factions:", string, "Select", "Cancel");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SELL_FISH)
	{
		if(response)
		{
			GivePlayerCash(playerid, PlayerInfo[playerid][pFishPrice]);
			format(string,sizeof(string),"Felicitari, ai vandut pestele pentru %s$.", FormatNumber(PlayerInfo[playerid][pFishPrice]));
			SCM(playerid, COLOR_GREEN, string);
			PlayerInfo[playerid][pFishPrice] = 0;
			PlayerInfo[playerid][pFishes] = 0;
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARBUY6)
	{
		if(response)
		{
			PlayerTextDrawHide(playerid, DealerShipModel);
			new num = BuyCar[playerid];
			if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
			if(GetPlayerCash(playerid) >= Stock[num][vPrice])
			{
				if(Stock[num][vStock] > 0) InsertCar(playerid, Stock[num][vModel], Stock[num][vPrice], Stock[num][vName], Stock[num][vID]);
				else
				{
					format(string,sizeof(string),"Aceast vehicul numai este disponibila in Dealership. Stoc epuizat.");
					SPD(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Fara stock:", string, "Inchide","");
				}
			}
			else return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani pentru a cumpara acest vehicul.");
		}
		else
		{
			PlayerTextDrawHide(playerid, DealerShipModel);
			static dstring[2500];
			if(BuyCar[playerid] > 0 && BuyCar[playerid] < 57)
			{
				format(dstring, sizeof(dstring), "Vehicul\tPret\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 7000000 && Stock[xf][vType] == 1)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY2, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
			else if(BuyCar[playerid] >= 57 && BuyCar[playerid] < 77)
			{
				format(dstring, sizeof(dstring), "Vehicul\tPret\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] > 7000000 && Stock[xf][vPrice] < 20000000 && Stock[xf][vType] == 1)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY3, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
			else if(BuyCar[playerid] >= 77 && BuyCar[playerid] < 95)
			{
				format(dstring, sizeof(dstring), "Vehicul\tPret\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] >= 20000000 && Stock[xf][vPrice] < 100000001 && Stock[xf][vType] == 1)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY4, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
			else if(BuyCar[playerid] >= 95)
			{
				format(dstring, sizeof(dstring), "Vehicul\tGold\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] < 5001 && Stock[xf][vType] == 2)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{D1D10D}%s\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{D1D10D}%s\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY5, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARBUY2)
	{
		if(response)
		{
			new num = listitem + 1;
			BuyCar[playerid] = num;
			new stringtitle[128];
			format(stringtitle, sizeof(stringtitle), "%s - {0CA607}%s$", Stock[num][vName], FormatNumber(Stock[num][vPrice]));
			format(string, sizeof(string), "Nume vehicul: %s\nVehicule disponibile in stock: %s\nViteza maxima: %.0f km/h", Stock[num][vName], FormatNumber(Stock[num][vStock]), GetVehicleTopSpeed(Stock[num][vModel]));
			SPD(playerid, DIALOG_CARBUY6, DIALOG_STYLE_MSGBOX, stringtitle, string, "Cumpara", "Inapoi");
			PlayerTextDrawSetPreviewModel(playerid, DealerShipModel, Stock[num][vModel]);
			PlayerTextDrawSetPreviewVehCol(playerid, DealerShipModel, -1, -1);
			PlayerTextDrawShow(playerid, DealerShipModel);
		}
		else
		{
			BuyCar[playerid] = -1;
			SPD(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Vehicles:", "Vehicule ieftine\nVehicule normale\nVehicule scumpe\nVehicule premium", "Selecteaza", "Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARBUY3)
	{
		if(response)
		{
			new num = listitem + 57;
			BuyCar[playerid] = num;
			new stringtitle[128];
			format(stringtitle, sizeof(stringtitle), "%s - {0CA607}%s$", Stock[num][vName], FormatNumber(Stock[num][vPrice]));
			format(string, sizeof(string), "Nume vehicul: %s\nVehicule disponibile in stock: %s\nViteza maxima: %.0f km/h", Stock[num][vName], FormatNumber(Stock[num][vStock]), GetVehicleTopSpeed(Stock[num][vModel]));
			SPD(playerid, DIALOG_CARBUY6, DIALOG_STYLE_MSGBOX, stringtitle, string, "Cumpara", "Inapoi");
			PlayerTextDrawSetPreviewModel(playerid, DealerShipModel, Stock[num][vModel]);
			PlayerTextDrawSetPreviewVehCol(playerid, DealerShipModel, -1, -1);
			PlayerTextDrawShow(playerid, DealerShipModel);
		}
		else
		{
			BuyCar[playerid] = -1;
			SPD(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Vehicles:", "Vehicule ieftine\nVehicule normale\nVehicule scumpe\nVehicule premium", "Selecteaza", "Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARBUY4)
	{
		if(response)
		{
			new num = listitem + 77;
			BuyCar[playerid] = num;
			new stringtitle[128];
			format(stringtitle, sizeof(stringtitle), "%s - {0CA607}%s$", Stock[num][vName], FormatNumber(Stock[num][vPrice]));
			format(string, sizeof(string), "Nume vehicul: %s\nVehicule disponibile in stock: %s\nViteza maxima: %.0f km/h", Stock[num][vName], FormatNumber(Stock[num][vStock]), GetVehicleTopSpeed(Stock[num][vModel]));
			SPD(playerid, DIALOG_CARBUY6, DIALOG_STYLE_MSGBOX, stringtitle, string, "Cumpara", "Inapoi");
			PlayerTextDrawSetPreviewModel(playerid, DealerShipModel, Stock[num][vModel]);
			PlayerTextDrawSetPreviewVehCol(playerid, DealerShipModel, -1, -1);
			PlayerTextDrawShow(playerid, DealerShipModel);
		}
		else
		{
			BuyCar[playerid] = -1;
			SPD(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Vehicles:", "Vehicule ieftine\nVehicule normale\nVehicule scumpe\nVehicule premium", "Selecteaza", "Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARBUY5)
	{
		if(response)
		{
			new num = listitem + 95;
			BuyCar[playerid] = num;
			new stringtitle[128];
			format(stringtitle, sizeof(stringtitle), "%s - {D1D10D}%s gold", Stock[num][vName], FormatNumber(Stock[num][vPrice]));
			format(string, sizeof(string), "Nume vehicul: %s\nVehicule disponibile in stock: %s\nViteza maxima: %.0f km/h", Stock[num][vName], FormatNumber(Stock[num][vStock]), GetVehicleTopSpeed(Stock[num][vModel]));
			SPD(playerid, DIALOG_CARBUY6, DIALOG_STYLE_MSGBOX, stringtitle, string, "Cumpara", "Inapoi");
			PlayerTextDrawSetPreviewModel(playerid, DealerShipModel, Stock[num][vModel]);
			PlayerTextDrawSetPreviewVehCol(playerid, DealerShipModel, -1, -1);
			PlayerTextDrawShow(playerid, DealerShipModel);
		}
		else
		{
			BuyCar[playerid] = -1;
			SPD(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Vehicles:", "Vehicule ieftine\nVehicule normale\nVehicule scumpe\nVehicule premium", "Selecteaza", "Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARBUY)
	{
		if(response)
		{
			static dstring[2500];
			if(listitem == 0)
			{
				format(dstring, sizeof(dstring), "Vehicul\tPret\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 7000000 && Stock[xf][vType] == 1)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY2, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
			if(listitem == 1)
			{
				format(dstring, sizeof(dstring), "Vehicul\tPret\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] > 7000000 && Stock[xf][vPrice] < 20000000 && Stock[xf][vType] == 1)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY3, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
			if(listitem == 2)
			{
				format(dstring, sizeof(dstring), "Vehicul\tPret\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] >= 20000000 && Stock[xf][vPrice] < 100000001 && Stock[xf][vType] == 1)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{0CA607}%s$\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY4, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
			if(listitem == 3)
			{
				format(dstring, sizeof(dstring), "Vehicul\tGold\tStock\n");
				for(new xf = 0; xf < MAX_STOCK_CARS; xf++)
				{
					if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] < 5001 && Stock[xf][vType] == 2)
					{
						if(Stock[xf][vStock] > 10) format(dstring, sizeof(dstring), "%s%s\t{D1D10D}%s\t{00A3D9}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
						else format(dstring, sizeof(dstring), "%s%s\t{D1D10D}%s\t{DE0000}%d\n", dstring, Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
					}
				}
				SPD(playerid, DIALOG_CARBUY5, DIALOG_STYLE_TABLIST_HEADERS, "Dealership:", dstring, "Selecteaza", "Inapoi");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CARDAMAGE)
	{
		if(response)
		{
			new carid = GetPlayerVehicleID(playerid), vsid = FindSpawnID(carid);
			if(CarInfo[vsid][cSpawned] != 0)
			{
				if(carid == 0) return SCM(playerid,COLOR_WHITE,"You are not in vehicle.");
				new inscarp = CarInfo[vsid][cInscarprice];
				if(carid == CarInfo[vsid][cSpawned])
				{
					if(CarInfo[vsid][cInsurancecar] == 0)
					{
						if(GetPlayerCash(playerid) >= inscarp)
						{
							CarInfo[vsid][cInsurancecar] = 1;
							GivePlayerCash(playerid, -inscarp);
							vUpdate(vsid,cInsurancecarx);
						}
						else
						{
							SCM(playerid, COLOR_VEHICLE,"** You don't have enough cash with you.");
							RemovePlayerFromVehicleEx(playerid);
						}
					}
				}
				else
				{
					SCM(playerid, COLOR_VEHICLE,"Acesta nu este vehiculul tau.");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else return RemovePlayerFromVehicleEx(playerid);
		}
		else return RemovePlayerFromVehicleEx(playerid);
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_PLATE)
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				new id = GetPlayerVehicleID(playerid), vsid = FindSpawnID(id), plate[32];
				mysql_escape_string(inputtext, plate);
				StrmidEx(CarInfo[vsid][cLicense], plate);
				SetVehicleNumberPlate(id, plate);
				GivePlayerCash(playerid, -5000);
				BizzInfo[1][bMoney] += 5000;
				vUpdate(vsid, cLicensex);
				SCM(playerid, COLOR_WHITE, "Numarul de inmatriculare a fost schimbat cu succes!");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_FIGHT)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
					SCM(playerid,COLOR_GRAD2,"Stil de lupta cumparat cu succes!");
				}
				case 1:
				{
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
					SCM(playerid,COLOR_GRAD2,"Stil de lupta cumparat cu succes!");
				}
				case 2:
				{
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
					SCM(playerid,COLOR_GRAD2,"Stil de lupta cumparat cu succes!");
				}
				case 3:
				{
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
					SCM(playerid,COLOR_GRAD2,"Stil de lupta cumparat cu succes!");
				}
				case 4:
				{
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
					SCM(playerid,COLOR_GRAD2,"Stil de lupta cumparat cu succes!");
				}
			}
			GivePlayerCash(playerid,-5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
			SaveBusiness(BizzEntered[playerid]);
			UpdateVar(playerid, "FightStyle", PlayerInfo[playerid][pFightStyle]);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_WANTED)
	{
		if(response)
		{
			new idx = Selected[playerid][listitem];
			JucatorCautat[playerid] = idx;
			CP[playerid] = 2;
			new Float:dist = GetDistanceBetweenPlayers(playerid,idx);
			format(string, sizeof(string), "Un checkpoint ti-a fost pus pe %s. Distanta: %0.2f metri", PlayerInfo[idx][pNamePlayer], dist);
			SCM(playerid, COLOR_YELLOW, string);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SELL_BIZZ)
	{
		if(response)
		{
			if(strcmp(PlayerInfo[playerid][pNamePlayer], BizzInfo[PlayerInfo[playerid][pBizzKey]][bOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pBizzKey];
				new bani = floatround(floatmul(BizzInfo[bouse][bPrice],0.60),floatround_ceil);
				BizzInfo[bouse][bLocked] = 1;
				BizzInfo[bouse][bOwned] = 0;
				BizzInfo[bouse][bEntranceCost] = 1;
				StrmidEx(BizzInfo[bouse][bOwner], "The State");
				GivePlayerCash(playerid, bani);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pBizzKey] = 255;
				if(BizzEntered[playerid] == bouse)
				{
					BizzEntered[playerid] = -1;
					SetPlayerInteriorEx(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPosEx(playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ]);
				}
				SaveBusiness(bouse);
				pUpdate(playerid,pBizzKeyx);
				OnPropUpdate("bizz", bouse);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o casa.");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_HOUSE1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new house = PlayerInfo[playerid][pHouseKey];
				if(HouseEntered[playerid] != house) return SCM(playerid,COLOR_YELLOW2,"Nu te afli in casa ta!");
				if(HouseInfo[house][hHeall] == 0)
				{
					if(GetPlayerScoreEx(playerid) < 5) return SCM(playerid, COLOR_YELLOW2, "Trebuie sa ai level 5 ca sa cumperi acest upgrade.");
					if(GetPlayerCash(playerid) < 50000) return SCM(playerid, COLOR_YELLOW2, "You do not have enough money.");
					HouseInfo[house][hHeall] = 1;
					GivePlayerCash(playerid,-50000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SCM(playerid, -1, "{cc00ff}Felicitari, acum poti folosi comanda /heal.");
					SaveHouse(house);
				}
				else return SCM(playerid,COLOR_YELLOW2,"Aceasta are deja upgrade pentru viata.");
			}
			if(listitem == 1)
			{
				new house = PlayerInfo[playerid][pHouseKey];
				if(HouseEntered[playerid] != house) return SCM(playerid,COLOR_YELLOW2,"Nu te afli in casa ta!");
				if(HouseInfo[house][hArmor] == 0)
				{
					if(!IsACop(playerid)) return SCM(playerid, COLOR_YELLOW2, "Nu esti politist!");
					if(GetPlayerScoreEx(playerid) < 5) return SCM(playerid, COLOR_YELLOW2, "Trebuie sa ai level 5 ca sa cumperi acest upgrade.");
					if(GetPlayerCash(playerid) < 50000) return SCM(playerid, COLOR_YELLOW2, "You do not have enough money.");
					HouseInfo[house][hArmor] = 1;
					GivePlayerCash(playerid,-50000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SCM(playerid, -1, "{cc00ff}Felicitari, acum poti folosi comanda /duty.");
					SaveHouse(house);
				}
				else return SCM(playerid,COLOR_YELLOW2,"Aceasta are deja upgrade pentru armura.");
			}
			if(listitem == 2)
			{
				new house = PlayerInfo[playerid][pHouseKey];
				if(GetPlayerScoreEx(playerid) < 5) return SCM(playerid, COLOR_YELLOW2, "Trebuie sa ai level 5 ca sa cumperi acest upgrade.");
				if(HouseEntered[playerid] != house) return SCM(playerid,COLOR_YELLOW2,"Nu te afli in casa ta!");
				if(ChooseInt[playerid] == 0)
				{
					ChooseInt[playerid] = 1;
					SCM(playerid,COLOR_YELLOW,"Foloseste {00ffff}SPACE {ffff00}pentru a schimba interiorul!");
					SCM(playerid,COLOR_YELLOW,"Apasa {00ffff}CLICK {ffff00}pentru a cumpara interiorul dorit!");
					SCM(playerid,COLOR_YELLOW,"Apasa {00ffff}tasta H {ffff00}pentru a parasi shop-ul casei!");
				}
				else
				{
					ChooseInt[playerid] = 0;
					PlayerTextDrawHide(playerid,HouseUpgradeTD);
				}
			}
			if(listitem == 3)
			{
				new house = PlayerInfo[playerid][pHouseKey];
				if(HouseEntered[playerid] == house)
				{
					new RString[600];
					strcat(RString, "Nume\n");
					for(new i = 0; i < sizeof(RadioName)-1; i++)
					{
						format(string, sizeof(string), "{00ff00}Play {ffffff}%s\n", RadioName[i]);
						strcat(RString, string);
					}
					strcat(RString, "{FF9900}Opreste Radioul\n");
					SPD(playerid, DIALOG_RADIO5, DIALOG_STYLE_TABLIST_HEADERS,"Radio List:",RString,"Select","Cancel");
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SELL_HOUSE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
			{
				new house = PlayerInfo[playerid][pHouseKey];
				new bani = floatround(floatmul(HouseInfo[house][hPrice],0.60),floatround_ceil);
				HouseInfo[house][hHeall] = 0;
				HouseInfo[house][hArmor] = 0;
				HouseInfo[house][hRadio] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				StrmidEx(HouseInfo[house][hOwner], "The State");
				StrmidEx(HouseInfo[house][hOwner], "The State");
				GivePlayerCash(playerid, bani);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pSpawn] = 0;
				PlayerInfo[playerid][pHouseKey] = 255;
				if(HouseEntered[playerid] == house)
				{
					HouseEntered[playerid] = -1;
					SetPlayerInteriorEx(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPosEx(playerid,HouseInfo[house][hEntranceX],HouseInfo[house][hEntranceY],HouseInfo[house][hEntranceZ]);
				}
				SaveHouse(house);
				pUpdate(playerid,pHouseKeyx);
				OnPropUpdate("casa", house);
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Spawn`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSpawn], PlayerInfo[playerid][pNamePlayer]);
				mysql_tquery(SQL, string);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o casa.");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SPAWN)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SCM(playerid, COLOR_GRAD2, "Veti fi spawnat la spawn-ul obisnuit!");
				PlayerInfo[playerid][pSpawn] = 0;
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pHouseKey] == 255) return SCM(playerid, COLOR_YELLOW2, "Nu ai casa sau rent la una!");
				SCM(playerid, COLOR_GRAD2, "Veti fi spawnat la casa ta/casa unde ai rent!");
				PlayerInfo[playerid][pSpawn] = 1;
			}
			if(listitem == 2)
			{
				if(GetPlayerFaction(playerid) == 0) return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-o factiune.");
				SCM(playerid, COLOR_GRAD2, "Veti fi spawnat la HQ!");
				PlayerInfo[playerid][pSpawn] = 2;
			}
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Spawn`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSpawn], PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, string);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CHANGE_PASS)
	{
		if(response)
		{
			if(strlen(inputtext) < 32 && strlen(inputtext) > 5 && !GasesteCaractere(inputtext))
			{
				SHA256_PassHash(inputtext, "x_=gez2Q3@-#UnFm", inputtext, 128);
				if(strcmp(inputtext, PlayerInfo[playerid][pPassword], true) == 0) return SPD(playerid,DIALOG_CHANGE_PASS1,DIALOG_STYLE_PASSWORD,"Securitate:","Introdu parola cea noua.","Schimba","Inchide");
				else return SCM(playerid, COLOR_LIGHT_RED, "Parola incorecta.");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CHANGE_PASS1)
	{
		if(response)
		{
			if(strlen(inputtext) < 32 && strlen(inputtext) > 5 && !GasesteCaractere(inputtext))
			{
				if(strlen(inputtext) > 32 || strlen(inputtext) < 5) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Error: Parola trebuie sa aiba caracterele cuprinse intre 5 si 32.");
				new pass[128];
				SHA256_PassHash(inputtext, "x_=gez2Q3@-#UnFm", pass, 128);
				StrmidEx(PlayerInfo[playerid][pPassword], pass);
				mysql_format(SQL, string, sizeof(string),"UPDATE `users` SET `password`='%e' WHERE `name`='%s'",pass,PlayerInfo[playerid][pNamePlayer]);
				mysql_tquery(SQL, string);
				SCM(playerid, COLOR_YELLOW, "Parola ta a fost schimbata cu succes.");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TUTORIAL)
	{
		if(response)
		{
			if(TutTime[playerid] == 1)
			{
				strcat(string, " {B8FF02}Joburi Server SA:MP {0000ff}Red{ffffff}Line \n");
				strcat(string, " \n");
				strcat(string, " {FFFFFF}Momentan, pe acest server sunt disponibile 8 joburi.\n");
				strcat(string, " {FFFFFF}Acestia ajuta sa faceti bani pentru a cumpara masini, casa sau o afacere personala.\n");
				strcat(string, " {FFFFFF}Cele 16 joburi se impart in doua categorii: Legale si Ilegale.\n");
				strcat(string, " {FFFFFF}Cele Legale sunt: Detectiv, Fermier, Mecanic, Tractorist, Pescar, Camionagiu, Vanzator de Pizza.\n");
				strcat(string, " {FFFFFF}Cele Ilegale sunt: Dealer de Droguri, Dealer de Arme.\n");
				SPD(playerid,DIALOG_TUTORIAL1,DIALOG_STYLE_MSGBOX,"Tutorial:",string,"Next","");
				TutTime[playerid] = 2;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TUTORIAL1)
	{
		if(response)
		{
			if(TutTime[playerid] == 2)
			{
				strcat(string, " {B8FF02}Nivel Player pe {0000ff}Red{ffffff}Line RPG\n");
				strcat(string, " \n");
				strcat(string, " {FFFFFF}Levelul este necesar pentru a aplica in factiuni.\n");
				strcat(string, " {FFFFFF}Initial ai level 1 acesta putand fi crescut atunci cand acumulezi x/x puncte de respect (RP). (apare la /stats RP)\n");
				strcat(string, " {FFFFFF}Un punct de respect se acumuleaza atunci cand iei PayDay (la fiecare ora jucata).\n");
				strcat(string, " {FFFFFF}Daca aveti mai multe puncte de respect decat cate trebuie acestea se vor reseta la nivelul urmator.\n");
				strcat(string, " {FFFFFF}Cand acumulezi x/x puncte de respect (RP) atunci poti scrie /buylevel\n");
				strcat(string, " {FFFFFF}Pentru a trece la level nou ai nevoie si de o anumita suma de bani.\n");
				strcat(string, " {FFFFFF}Aceasta suma se afla la comanda /stats (la Urm.Level). Aceasta suma de bani va fi luata din cont.\n");
				strcat(string, " {FFFFFF}Este necesar ca bani necesari ca sa treci la nivelul urmator sa ii ai in mana.\n");
				SPD(playerid,DIALOG_TUTORIAL2,DIALOG_STYLE_MSGBOX,"Tutorial:",string,"Next","");
				TutTime[playerid] = 3;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TUTORIAL2)
	{
		if(response)
		{
			if(TutTime[playerid] == 3)
			{
				strcat(string, " {B8FF02}Descriere Generala Server de SA:MP RPG \n");
				strcat(string, " \n");
				strcat(string, " {FFFFFF}Pe langa 'averea ta' din joc poti aplica la o Factiune.\n");
				strcat(string, " {FFFFFF}Pentru un taxi {5BE81A}/service taxi\n");
				strcat(string, " {FFFFFF}Daca nu cunosti bine orasul tasteaza {FD6507}/gps\n");
				SPD(playerid,DIALOG_TUTORIAL3,DIALOG_STYLE_MSGBOX,"Tutorial:",string,"Next","");
				TutTime[playerid] = 4;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TUTORIAL3)
	{
		if(response)
		{
			if(TutTime[playerid] == 4)
			{
				strcat(string, " {B8FF02}PayDay & Banca PG \n");
				strcat(string, " \n");
				strcat(string, " {FFFFFF}La fiecare ora jucata o sa primesti payday (salariu).\n");
				strcat(string, " {FFFFFF}Salariul va veni in banca.\n");
				strcat(string, " {FFFFFF}La banca va puteti depozita bani pentru a primi dobanda la fiecare payday.\n");
				strcat(string, " {FFFFFF}Banca o puteti gasi folosind /gps.\n");
				SPD(playerid,DIALOG_TUTORIAL4,DIALOG_STYLE_MSGBOX,"Tutorial:",string,"Next","");
				TutTime[playerid] = 5;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TUTORIAL4)
	{
		if(response)
		{
			if(TutTime[playerid] == 5)
			{
				strcat(string, "  {B8FF02}Sfarsit Tutorial \n");
				strcat(string, " \n");
				strcat(string, " {FFFFFF}Primul lucru pe care trebuie sa-l faci trebuie sa iti iei permisul de conducere.\n");
				strcat(string, " {FFFFFF}Acesta il gasesti folosind comanda {F81414}/gps -> Centru de licente si pasaport\n");
				strcat(string, " {FFFFFF}Daca ai nevoie de ajutor foloseste comanda /helpme\n");
				strcat(string, " {FFFFFF}Staff-ul serverului iti ureaza Bun Venit pe {0000ff}Red{ffffff}Line.\n");
				strcat(string, " \n");
				SPD(playerid,DIALOG_TUTORIAL5,DIALOG_STYLE_MSGBOX,"Tutorial:",string,"Finish","");
				TutTime[playerid] = 6;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_TUTORIAL5)
	{
		if(response)
		{
			if(TutTime[playerid] == 6)
			{
				gPlayerLogged[playerid] = true;
				TutTime[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				TogglePlayerControllable(playerid, true);
				SetCameraBehindPlayer(playerid);
				SetPlayerVirtualWorld(playerid,0);
				PlayerInfo[playerid][pReg] = 1;
				PlayerInfo[playerid][pGpoint] += 10;
				PlayerInfo[playerid][pGold] += 100;
				SetPlayerScoreEx(playerid, 2);
				SCM(playerid,COLOR_YELLOW,"INFO: Pentru inceput ai primit {99FF66}10 Gift Point, 1 Level Up {FFFF00}si {99FF66}100 Gold.");
				SCM(playerid,COLOR_YELLOW,"INFO: Cat timp esti incepator poti folosi comanda /spawncar.");
				SCM(playerid,COLOR_WHITE,"Contul tau nu are un PIN setat, foloseste /addpin!");
				pUpdate(playerid,pRegx);
				SpawnPlayer(playerid);
				SavePlayerData(playerid);
				//--------------------------------------------------------------
				mysql_format(SQL, string, sizeof(string),"UPDATE `users` SET `Tutorial`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNamePlayer]);
				mysql_tquery(SQL, string);
			}
		}
	}
	//----------------------------------------------------------------
	if(dialogid == DIALOG_TOG)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(ShowHealth[playerid] == false)
				{
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
					ShowHealth[playerid] = true;
					SCM(playerid,COLOR_ACHAT,"Ai activat HP-ul in dreapta sus.");
				}
				else
				{
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
					ShowHealth[playerid] = false;
					PlayerTextDrawHide(playerid, HealthTD);
					SCM(playerid,COLOR_ACHAT,"Ai dezactivat HP-ul.");
				}
				mysql_format(SQL,string,sizeof(string), "UPDATE `users` SET `ShowHealth`='%d' WHERE `name`='%s'",ShowHealth[playerid],PlayerInfo[playerid][pNamePlayer]);
				mysql_tquery(SQL,string);
				ShowTogMenu(playerid);
			}
			if(listitem == 1)
			{
				if(ShowFPS[playerid] == false)
				{
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
					ShowFPS[playerid] = true;
					SCM(playerid,COLOR_ACHAT,"Ai activat FPS-urie in dreapta jos.");
				}
				else
				{
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
					ShowFPS[playerid] = false;
					PlayerTextDrawHide(playerid, FramesTD);
					SCM(playerid,COLOR_ACHAT,"Ai dezactivat FPS-urile.");
				}
				mysql_format(SQL,string,sizeof(string), "UPDATE `users` SET `ShowFPS`='%d' WHERE `name`='%s'",ShowFPS[playerid],PlayerInfo[playerid][pNamePlayer]);
				mysql_tquery(SQL,string);
				ShowTogMenu(playerid);
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pAdmin] > 0)
				{
					if(TogAdmin[playerid] == false)
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogAdmin[playerid] = true;
						SCM(playerid,COLOR_ACHAT,"Ai activat chat-ul adminilor, acum poti vedea warning-urile si mesajele pe care le primesti.");
					}
					else
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogAdmin[playerid] = false;
						SCM(playerid,COLOR_ACHAT,"Ai dezactivat chat-ul adminilor, acum nu mai poti vedea warning-urile si mesajele pe care le primesti.");
					}
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu esti admin!");
				ShowTogMenu(playerid);
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pHelper] > 0)
				{
					if(TogHelper[playerid] == false)
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogHelper[playerid] = true;
						SCM(playerid,COLOR_ACHAT,"Ai activat chat-ul helperilor, acum poti vedea warning-urile si mesajele pe care le primesti.");
					}
					else
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogHelper[playerid] = false;
						SCM(playerid,COLOR_ACHAT,"Ai dezactivat chat-ul helperilor, acum nu mai poti vedea warning-urile si mesajele pe care le primesti.");
					}
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu esti helper!");
				ShowTogMenu(playerid);
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pPremium] > 0)
				{
					if(TogPremium[playerid] == false)
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogPremium[playerid] = true;
						SCM(playerid,COLOR_ACHAT,"Ai activat chat-ul premium, acum poti vedea mesajele pe care le primesti.");
					}
					else
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogPremium[playerid] = false;
						SCM(playerid,COLOR_ACHAT,"Ai dezactivat chat-ul premium, acum nu mai poti mesajele pe care le primesti.");
					}
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu ai cont premium!");
				ShowTogMenu(playerid);
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember] > 0)
				{
					if(TogFaction[playerid] == false)
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogFaction[playerid] = true;
						SCM(playerid,COLOR_ACHAT,"Ai activat chat-ul factiunii, acum poti vedea mesajele pe care le primesti in factiune.");
					}
					else
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogFaction[playerid] = false;
						SCM(playerid,COLOR_ACHAT,"Ai dezactivat chat-ul factiunii, acum nu mai poti vedea mesajele pe care le primesti.");
					}
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-o factiune!");
				ShowTogMenu(playerid);
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pClan] > 0)
				{
					if(TogClan[playerid] == false)
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogClan[playerid] = true;
						SCM(playerid,COLOR_ACHAT,"Ai activat chat-ul clanului, acum poti vedea mesajele pe care le primesti in clan.");
					}
					else
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogClan[playerid] = false;
						SCM(playerid,COLOR_ACHAT,"Ai dezactivat chat-ul clanului, acum nu mai poti vedea mesajele pe care le primesti.");
					}
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-un clan!");
				ShowTogMenu(playerid);
			}
			if(listitem == 7)
			{
				if(Licitatie == 1)
				{
					if(TogBid[playerid] == false)
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogBid[playerid] = true;
						SCM(playerid,COLOR_ACHAT,"Ai activat chat-ul licitatiei, acum poti vedea sumele licitate de jucatori.");
					}
					else
					{
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
						TogBid[playerid] = false;
						SCM(playerid,COLOR_ACHAT,"Ai dezactivat chat-ul licitatiei, acum nu mai poti vedea sumele licitate de jucatori.");
					}
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu este o licitatie pornita!");
				ShowTogMenu(playerid);
			}
			if(listitem == 8)
			{
				if(TogCheckpoint[playerid] == false)
				{
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
					TogCheckpoint[playerid] = true;
					SCM(playerid,COLOR_ACHAT,"Ai activat distanta in metri pana la checkpoint.");
				}
				else
				{
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0),
					TogCheckpoint[playerid] = false;
					PlayerTextDrawHide(playerid, FindTD);
					SCM(playerid,COLOR_ACHAT,"Ai dezactivat distanta in metri pana la checkpoint.");
				}
				ShowTogMenu(playerid);
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) > 3000)
				{
					if(PlayerInfo[playerid][pPhone] == 0)
					{
						GivePlayerCash(playerid,-3000);
						BizzInfo[BizzEntered[playerid]][bMoney] += 3000;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						new randphone = 10000 + random(89999);
						PlayerInfo[playerid][pNumber] = randphone;
						PlayerInfo[playerid][pPhone] = 1;
						format(string, sizeof(string), " Ti-ai cumparat un telefon mobil. Numarul tau este: %d", randphone);
						SCM(playerid, COLOR_GRAD4, string);
						SCM(playerid, COLOR_GRAD5, "Iti poti vedea numarul tastand /stats");
						pUpdate(playerid, pPhonex);
					}
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) > 3000)
				{
					if(PlayerInfo[playerid][pPhoneBook] != 1)
					{
						GivePlayerCash(playerid,-3000);
						BizzInfo[BizzEntered[playerid]][bMoney] += 3000;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pPhoneBook] = 1;
						format(string, sizeof(string), " Agenda cumparata, acum poti afla nr. oricarui player !");
						SCM(playerid, COLOR_GRAD4, string);
						SCM(playerid, COLOR_WHITE, "HINT: Scrie /number <id/name>.");
						pUpdate(playerid,pPhoneBookx);
					}
				}
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) > 2000)
				{
					if(PlayerInfo[playerid][pUndita] != 1)
					{
						GivePlayerCash(playerid,-2000);
						BizzInfo[BizzEntered[playerid]][bMoney] += 2000;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), " Felicitari, ai cumparat o undita.");
						SCM(playerid, COLOR_GRAD4, string);
						PlayerInfo[playerid][pUndita] = 1;
						mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Undita`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pUndita], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, string);
					}
				}
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) > 5000)
				{
					if(PlayerInfo[playerid][pMP3] != 1)
					{
						new payout = 5000;
						GivePlayerCash(playerid, - payout);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), " Felicitari, ai cumparat un MP3.");
						SCM(playerid, COLOR_GRAD4, string);
						SCM(playerid, COLOR_WHITE, " Acum poti asculta radio online oriunde te-ai afla apasand tasta Y.");
						PlayerInfo[playerid][pMP3] = 1;
						BizzInfo[BizzEntered[playerid]][bMoney] += 500;
						mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `MP3`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMP3], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, string);
					}
				}
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) > 5000)
				{
					if(PlayerInfo[playerid][pCanistra] != 1)
					{
						new payout = 5000;
						GivePlayerCash(playerid, -payout);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), " Felicitari, ai cumparat o canistra.");
						SCM(playerid, COLOR_GRAD4, string);
						PlayerInfo[playerid][pCanistra] = 1;
						BizzInfo[BizzEntered[playerid]][bMoney] += payout;
						mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Canistra`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pCanistra], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, string);
					}
				}
			}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) > 500)
				{
					new payout = 500;
					GivePlayerCash(playerid, -payout);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), " Felicitari, ai cumparat 5 rame.");
					SCM(playerid, COLOR_GRAD4, string);
					PlayerInfo[playerid][pMomeala] += 5;
					BizzInfo[BizzEntered[playerid]][bMoney] += payout;
					pUpdate(playerid,pMomealax);
				}
			}
			if(listitem == 6)
			{
				if(GetPlayerCash(playerid) > 2500)
				{
					new payout = 2500;
					GivePlayerCash(playerid, -payout);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), " Felicitari, ai cumparat 5 artificii, le poti folosi tastand comanda /fireworks.");
					SCM(playerid, COLOR_GRAD4, string);
					PlayerInfo[playerid][pFireworks] += 5;
					mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Fireworks`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFireworks],PlayerInfo[playerid][pNamePlayer]);
					mysql_tquery(SQL, string, "","");
					BizzInfo[BizzEntered[playerid]][bMoney] += payout;
					for(new m = 0; m < 2; m++) {
						if(PlayerInfo[playerid][pQuest][m] == 3) CheckQuest(playerid, m);
					}
				}
			}
			SaveBusiness(BizzEntered[playerid]);
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CONT_PREMIUM)
	{
	   if(response)
	   {
			zilegold[playerid] = strval(inputtext);
			goldcost[playerid] = zilegold[playerid]*10;
			if(zilegold[playerid] < 1) return SCM(playerid,COLOR_YELLOW2,"Eroare: Ai introdus un numar prea mic de zile!");
			if(PlayerInfo[playerid][pGold] < goldcost[playerid]) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficient gold pentru acest numar de zile.");
			format(string,sizeof(string),"Esti dispus sa dai %d gold pentru a avea cont premium %d zile?",goldcost[playerid],zilegold[playerid]);
			SPD(playerid,DIALOG_CONT_PREMIUM2,DIALOG_STYLE_MSGBOX,"Premium:",string,"Da","Nu");
	   }
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CONT_PREMIUM2)
	{
	   if(response)
	   {
			new year, month, day;
			getdate(year, month, day);
			day += zilegold[playerid];
			if(IsMonth31(month))
			{
				if(day > 31)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 31) day -= 31;
					}
					else while(day > 31) day -= 31;
				}
			}
			else if(!IsMonth31(month))
			{
				if(day > 30)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 30) day -= 30;
					}
					else while(day > 30) day -= 30;
				}
			}
			else if(!IsMonth31(month) && IsMonth29(year) && month == 2)
			{
				if(day > 29)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 29) day -= 29;
					}
					else while(day > 29) day -= 29;
				}
			}
			else if(!IsMonth31(month) && !IsMonth29(year) && month == 2)
			{
				if(day > 28)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 28) day -= 28;
					}
					else while(day > 28) day -= 28;
				}
			}
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `TempPremiumDay`='%d', `TempPremiumMonth`='%d', `TempPremiumYear`='%d' WHERE `name`='%s'", day, month, year, PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, string, "","");
			PlayerInfo[playerid][pGold] -= goldcost[playerid];
			PlayerInfo[playerid][pPremium] = 1;
			pUpdate(playerid,pPremiumx);
			format(string,sizeof(string),"Felicitari, ai cumparat {A90202}Cont Premium {ffffff}pentru {ffcc00}%d gold",goldcost[playerid]);
			SCM(playerid,COLOR_WHITE,string);
			goldcost[playerid] = 0;
			zilegold[playerid] = 0;
	   }
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_SHOP)
	{
	   if(response)
	   {
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pPremium] != 0) return SCM(playerid,COLOR_WHITE,"Ai deja Cont Premium!");
				SPD(playerid,DIALOG_CONT_PREMIUM,DIALOG_STYLE_INPUT,"Premium:","Introdu numarul de zile cat vrei sa ai cont premium.","Introdu","Inchide");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pGold] >= 250)
				{
					if(PlayerInfo[playerid][pWarns] >= 1)
					{
						PlayerInfo[playerid][pGold] -= 250;
						PlayerInfo[playerid][pWarns] -= 1;
						SCM(playerid,COLOR_WHITE,"Felicitari, ti-ai sters {00cc00}1 Warning {ffffff}pentru {FFB95E}250 gold");
						pUpdate(playerid, pWarnsx);
					}
					else return SCM(playerid,COLOR_WHITE,"Nu ai niciun Warning!"); 
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}250!");
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pGold] >= 550)
				{
					if(PlayerInfo[playerid][pWarns] >= 1)
					{
						PlayerInfo[playerid][pGold] -= 550;
						PlayerInfo[playerid][pWarns] = 0;
						SCM(playerid,COLOR_WHITE,"Felicitari, ti-ai sters {00cc00}Toate Warning-urile {ffffff}pentru {FFB95E}550 gold");
						pUpdate(playerid, pWarnsx);
					}
					else return SCM(playerid,COLOR_WHITE,"Nu ai niciun Warning!"); 
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}550!");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pGold] >= 350)
				{
					if(PlayerInfo[playerid][pPunish] >= 10)
					{
						PlayerInfo[playerid][pGold] -= 350;
						PlayerInfo[playerid][pPunish] -= 10;
						SCM(playerid,COLOR_WHITE,"Felicitari, ti-ai sters {00cc00}10 Faction Punish {ffffff}pentru {FFB95E}350 gold");
					}
					else return SCM(playerid,COLOR_WHITE,"Nu iti poti sterge Faction Punish, ai prea putine!"); 
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}350!");
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pGold] >= 500)
				{
					if(PlayerInfo[playerid][pPunish] >= 20)
					{
						PlayerInfo[playerid][pGold] -= 500;
						PlayerInfo[playerid][pPunish] -= 20;
						SCM(playerid,COLOR_WHITE,"Felicitari, ti-ai sters {00cc00}20 Faction Punish {ffffff}pentru {FFB95E}500 gold");
					}
					else return SCM(playerid,COLOR_WHITE,"Nu iti poti sterge Faction Punish, ai prea putine!"); 
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}500!");
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pGold] >= 25)
				{
					PlayerInfo[playerid][pGold] -= 25;
					GivePlayerCash(playerid,140000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}140.000$ {ffffff}pentru {FFB95E}25 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}25!");
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pGold] >= 50)
				{
					PlayerInfo[playerid][pGold] -= 50;
					GivePlayerCash(playerid,290000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}290.000$ {ffffff}pentru {FFB95E}50 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}50!");
			}
			if(listitem == 7)
			{
				if(PlayerInfo[playerid][pGold] >= 120)
				{
					PlayerInfo[playerid][pGold] -= 120;
					GivePlayerCash(playerid,580000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}580.000$ {ffffff}pentru {FFB95E}120 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}120!");
			}
			if(listitem == 8)
			{
				if(PlayerInfo[playerid][pGold] >= 300)
				{
					PlayerInfo[playerid][pGold] -= 300;
					GivePlayerCash(playerid,1430000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}1.430.000$ {ffffff}pentru {FFB95E}300 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}300!");
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pGold] >= 420)
				{
					PlayerInfo[playerid][pGold] -= 420;
					GivePlayerCash(playerid,2670000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}2.670.000$ {ffffff}pentru {FFB95E}420 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}420!");
			}
			if(listitem == 10)
			{
				if(PlayerInfo[playerid][pGold] >= 840)
				{
					PlayerInfo[playerid][pGold] -= 840;
					GivePlayerCash(playerid,5240000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}5.240.000$ {ffffff}pentru {FFB95E}840 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}840!");
			}
			if(listitem == 11)
			{
				if(PlayerInfo[playerid][pGold] >= 970)
				{
					PlayerInfo[playerid][pGold] -= 970;
					GivePlayerCash(playerid,6730000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}6.730.000$ {ffffff}pentru {FFB95E}970 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}970!");
			}
			if(listitem == 12)
			{
				if(PlayerInfo[playerid][pGold] >= 1060)
				{
					PlayerInfo[playerid][pGold] -= 1060;
					GivePlayerCash(playerid,7100000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}7.100.000$ {ffffff}pentru {FFB95E}1060 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}1060!");
			}
			if(listitem == 13)
			{
				if(PlayerInfo[playerid][pGold] >= 1135)
				{
					PlayerInfo[playerid][pGold] -= 1135;
					GivePlayerCash(playerid,8670000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}8.670.000${ffffff} pentru {FFB95E}1135 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}1135!");
			}
			if(listitem == 14)
			{
				if(PlayerInfo[playerid][pGold] >= 1200)
				{
					PlayerInfo[playerid][pGold] -= 1200;
					GivePlayerCash(playerid,9500000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}9.500.000$ {ffffff}pentru {FFB95E}1200 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}1200!");
			}
			if(listitem == 15)
			{
				if(PlayerInfo[playerid][pGold] >= 1350)
				{
					PlayerInfo[playerid][pGold] -= 1350;
					GivePlayerCash(playerid,10240000);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}10.240.000$ {ffffff}pentru {FFB95E}1350 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}1350!");
			}
			if(listitem == 16)
			{
				if(PlayerInfo[playerid][pGold] < 150) return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}150!");
				SPD(playerid,DIALOG_CHANGE_NAME,DIALOG_STYLE_INPUT,"Change name:","Introdu noul nume pe care vrei sa-l folosesti","Schimba","Inchide");
			}
			if(listitem == 17)
			{
				if(PlayerInfo[playerid][pGold] >= 470)
				{
					if(GetPlayerScoreEx(playerid) < 5) return SCM(playerid,COLOR_YELLOW2,"Poti sa creezi un clan de la level 5!");
					if(PlayerInfo[playerid][pClan] == 0)
					{
						PlayerInfo[playerid][pGold] -= 470;
						PlayerInfo[playerid][pClanRank] = 7;
						SCM(playerid,COLOR_WHITE,"Felicitari, ai creat un nou clan pentru {FFB95E}470 gold");
						SCM(playerid, COLOR_WHITE, "Foloseste /help -> clan pentru a vedea comenzile clanului.");
						format(string, sizeof(string), "INSERT INTO `clans` (`clanName`, `clanOwner`) VALUES ('New Clan', '%s')", PlayerInfo[playerid][pNamePlayer]);
						new i, Cache:resultoccc = mysql_query(SQL, string);
						//--------------------------------------------------------------
						i = cache_insert_id();
						cache_delete(resultoccc);
						//--------------------------------------------------------------
						PlayerInfo[playerid][pClan] = i;
						StrmidEx(ClanInfo[i][ClanTag], " ");
						StrmidEx(ClanInfo[i][ClanOwner], PlayerInfo[playerid][pNamePlayer]);
						StrmidEx(ClanInfo[i][ClanMOTD], "Fara");
						StrmidEx(ClanInfo[i][ClanRankName1], "(1) Newbie");
						StrmidEx(ClanInfo[i][ClanRankName2], "(2) Member");
						StrmidEx(ClanInfo[i][ClanRankName3], "(3) Advanced");
						StrmidEx(ClanInfo[i][ClanRankName4], "(4) Expert");
						StrmidEx(ClanInfo[i][ClanRankName5], "(5) Legend");
						StrmidEx(ClanInfo[i][ClanRankName6], "(6) Clan Mananger");
						StrmidEx(ClanInfo[i][ClanRankName7], "(7) Clan Owner");
						StrmidEx(ClanInfo[i][ClanColor], "ffffff");
						ClanInfo[PlayerInfo[playerid][pClan]][ClanMembers] += 1;
						//--------------------------------------------------------------
						SaveClans(PlayerInfo[playerid][pClan]);
						pUpdate(playerid,pClanx);
						pUpdate(playerid,pClanRankx);
					}
					else return SCM(playerid,COLOR_WHITE,"Esti deja intr-un clan, foloseste /quitclan daca vrei sa-l parasesti.");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}470!");
			}
			if(listitem == 18)
			{
				if(PlayerInfo[playerid][pGold] >= 560)
				{
					if(PlayerInfo[playerid][pCarKey][4] == -1)
					{
						PlayerInfo[playerid][pCarKey][4] = 0;
						PlayerInfo[playerid][pGold] -= 560;
					}
					else if(PlayerInfo[playerid][pCarKey][5] == -1)
					{
						PlayerInfo[playerid][pCarKey][5] = 0;
						PlayerInfo[playerid][pGold] -= 560;
					}
					else if(PlayerInfo[playerid][pCarKey][6] == -1)
					{
						PlayerInfo[playerid][pCarKey][6] = 0;
						PlayerInfo[playerid][pGold] -= 560;
					}
					else if(PlayerInfo[playerid][pCarKey][7] == -1)
					{
						PlayerInfo[playerid][pCarKey][7] = 0;
						PlayerInfo[playerid][pGold] -= 560;
					}
					else if(PlayerInfo[playerid][pCarKey][8] == -1)
					{
						PlayerInfo[playerid][pCarKey][8] = 0;
						PlayerInfo[playerid][pGold] -= 560;
					}
					else if(PlayerInfo[playerid][pCarKey][9] == -1)
					{
						PlayerInfo[playerid][pCarKey][9] = 0;
						PlayerInfo[playerid][pGold] -= 560;
					}
					else return SCM(playerid,COLOR_YELLOW2,"Nu mai poti cumpara sloturi, ai toate sloturile deblocate.");
					pUpdate(playerid,pCarsx);
					SCM(playerid,COLOR_WHITE,"Felicitari, ai cumparat {00cc00}un nou slot de vehicul {ffffff}pentru {FFB95E}560 gold");
				}
				else return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}560!");
			}
			if(listitem == 19)
			{
				new vsid = FindSpawnID(GetPlayerVehicleID(playerid));
				if(PlayerInfo[playerid][pGold] < 430) return SCM(playerid,COLOR_LIGHT_RED,"Nu ai suficient gold, ai nevoie de {FFB95E}430!");
				if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0 && GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned] && IsPlayerInAnyVehicle(playerid))
				{
					if(CarInfo[vsid][cType] == 1 || CarInfo[vsid][cType] == 2) return SCM(playerid,COLOR_YELLOW2,"Acest vehicul este deja premium sau e castigat la giftbox");
					SPD(playerid, DIALOG_UPGRADE_VEH, DIALOG_STYLE_MSGBOX, "Upgrade vehicul:","Esti sigur ca vrei sa faci upgrade la acest vehicul?", "Da","Nu");
				}
				else return SCM(playerid,COLOR_YELLOW2,"Nu te afli in vehiculul tau personal!");
			}
	   }
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_UPGRADE_VEH)
	{
		if(response)
		{
			new vsid = FindSpawnID(GetPlayerVehicleID(playerid));
			if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
			{
				CarInfo[vsid][cType] = 1;
				PlayerInfo[playerid][pGold] -= 430;
				SCM(playerid,COLOR_WHITE,"Felicitari, ai facut upgrade la acest vehicul {ffffff}pentru {FFB95E}430 gold");
				mysql_format(SQL, string, sizeof(string),"UPDATE `cars` SET `Type` = '1' WHERE `carID` = '%d'",vsid);
				mysql_tquery(SQL, string);
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_CHANGE_NAME)
	{
		if(response)
		{
			if(strlen(inputtext) < MAX_PLAYER_NAME && strlen(inputtext) > 5)
			{
				if(IsPlayerConnected(playerid))
				{
					new newname = MySQLCheckAccount(inputtext);
					if(newname != 0) return SCM(playerid,COLOR_VEHICLE,"Acest nume exista deja!");
					if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
					{
						new houseid = PlayerInfo[playerid][pHouseKey];
						StrmidEx(HouseInfo[houseid][hOwner], inputtext);
						SaveHouse(houseid);
					}
					if(PlayerInfo[playerid][pBizzKey] != 255)
					{
						new bizid2 = PlayerInfo[playerid][pBizzKey];
						StrmidEx(BizzInfo[bizid2][bOwner], inputtext);
						SaveBusiness(bizid2);
					}
					for(new i = 0; i < 10; i++)
					{
						if(PlayerInfo[playerid][pCarKey][i] > 0)
						{
							new carid = PlayerInfo[playerid][pCarKey][i];
							StrmidEx(CarInfo[carid][cOwner], inputtext);
							vUpdate(carid, cOwnerx);
						}
					}
					new query[228];
					mysql_format(SQL,query,sizeof(query),"UPDATE `users` SET `name`='%s' WHERE `PlayerID`='%d'",inputtext,PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query);
					StrmidEx(PlayerInfo[playerid][pNamePlayer], inputtext);
					SetPlayerName(playerid, inputtext);
					PlayerInfo[playerid][pGold] -= 150;
					SCM(playerid,COLOR_LIGHT_RED,"Ai primit kick pentru a se reinitializa noul nume.");
					KickEx(playerid);
				}
			}
			else return SPD(playerid,DIALOG_CHANGE_NAME,DIALOG_STYLE_INPUT,"Change name:","Numele nu poate sa contina mai mult de 25 de caractere\n\tIntrodu din nou numele","Schimba","Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GPS1)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: SPD(playerid, DIALOG_GPS, DIALOG_STYLE_LIST,"Locatii:","1.\tLos Santos\n2.\tSan Fierro\n3.\tLas Venturas\n4.\tAlte locatii importante","Alege","Inapoi");
				case 1:
				{
					new tip[16], jstring[128];
					strcat(string, "Nume\tTip\tMuncitori\n");
					for(new j = 1; j < MAX_JOBS; j++)
					{
						if(JobInfo[j][jType] == 1) tip = "{D60000}Ilegal";
						else if(JobInfo[j][jType] == 0) tip = "{6BD600}Legal";
						format(jstring, sizeof(jstring), "%s\t%s\t%d\n", JobInfo[j][jName], tip, GetJobWorkers(j));
						strcat(string, jstring);
					}
					SPD(playerid, DIALOG_JOBS, DIALOG_STYLE_TABLIST_HEADERS, "Locatii Joburi:", string, "Alege", "Inapoi");
				}
				case 2: SPD(playerid, DIALOG_FINDH1, DIALOG_STYLE_INPUT, "Case:", "Introdu ID-ul casei pe care vrei sa o cauti.", "Cauta", "Inapoi");
				case 3: SPD(playerid, DIALOG_FINDB1, DIALOG_STYLE_INPUT, "Afaceri:", "Introdu ID-ul afacerii pe care vrei sa o cauti.", "Cauta", "Inapoi");
				case 4:
				{
					if(GiftInfo[gOpen] == 1)
					{
						SCM(playerid,COLOR_ORANGE,"Ti-am pus un checkpoint! Urmareste-l pentru a ajunge la Giftbox.");
						SetPlayerCheckpointEx(playerid, GiftInfo[gLocationX], GiftInfo[gLocationY], GiftInfo[gLocationZ], 3);
					}
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_FINDH1)
	{
		if(response)
		{
			new casa = strval(inputtext);
			if(casa < 1 || casa >= MAX_HOUSES) return SCM(playerid,COLOR_YELLOW2,"ID invalid!");
			SetPlayerCheckpointEx(playerid,HouseInfo[casa][hEntranceX],HouseInfo[casa][hEntranceY],HouseInfo[casa][hEntranceZ],3);
			format(string,sizeof(string),"Ti-am setat un checkpoint la casa %d, urmareste-l!",casa);
			SCM(playerid,COLOR_ORANGE,string);
		}
		else return SPD(playerid, DIALOG_GPS1, DIALOG_STYLE_LIST,"GPS:","San Andreas\nLocatii Joburi\nCauta Case\nCauta Afaceri\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_FINDB1)
	{
		if(response)
		{
			new bizz = strval(inputtext);
			if(bizz < 1 || bizz >= MAX_BUSINESS) return SCM(playerid,COLOR_YELLOW2,"ID invalid!");
			SetPlayerCheckpointEx(playerid,BizzInfo[bizz][bEntranceX], BizzInfo[bizz][bEntranceY], BizzInfo[bizz][bEntranceZ],3);
			format(string,sizeof(string),"Ti-am setat un checkpoint la afacerea %d, urmareste-l!",bizz);
			SCM(playerid,COLOR_ORANGE,string);
		}
		else return SPD(playerid, DIALOG_GPS1, DIALOG_STYLE_LIST,"GPS:","San Andreas\nLocatii Joburi\nCauta Case\nCauta Afaceri\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GPS)
	{
		if(response)
		{
			new stringg[2000];
			if(listitem == 0)
			{
				SetPVarInt(playerid, "GPS", 1);
				strcat(stringg, "ID\tDescriere\tDistanta\n");
				for(new b = 1; b < MAX_BUSINESS; b++)
				{
					if(BizzInfo[b][bLocation] == 1)
					{
						format(string, sizeof(string), "%d\t%s\t%.0f metri\n",b,BizzInfo[b][bName],GetPlayerDistanceFromPoint(playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]));
						strcat(stringg, string);
					}
				}
				SPD(playerid, DIALOG_GPS2, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Bizz-uri:", stringg, "Alege", "Inapoi");
			}
			if(listitem == 1)
			{
				SetPVarInt(playerid, "GPS", 2);
				strcat(stringg, "ID\tDescriere\tDistanta\n");
				for(new b = 1; b < MAX_BUSINESS; b++)
				{
					if(BizzInfo[b][bLocation] == 2)
					{
						format(string, sizeof(string), "%d\t%s\t%.0f metri\n",b,BizzInfo[b][bName],GetPlayerDistanceFromPoint(playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]));
						strcat(stringg, string);
					}
				}
				SPD(playerid, DIALOG_GPS2, DIALOG_STYLE_TABLIST_HEADERS, "San Fierro Bizz-uri:", stringg, "Alege", "Inapoi");
			}
			if(listitem == 2)
			{
				SetPVarInt(playerid, "GPS", 3);
				strcat(stringg, "ID\tDescriere\tDistanta\n");
				for(new b = 1; b < MAX_BUSINESS; b++)
				{
					if(BizzInfo[b][bLocation] == 3)
					{
						format(string, sizeof(string), "%d\t%s\t%.0f metri\n",b,BizzInfo[b][bName],GetPlayerDistanceFromPoint(playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]));
						strcat(stringg, string);
					}
				}
				SPD(playerid, DIALOG_GPS2, DIALOG_STYLE_TABLIST_HEADERS, "Las Venturas Bizz-uri:", stringg, "Alege", "Inapoi");
			}
			if(listitem == 3)
			{
				SPD(playerid, DIALOG_GPS3, DIALOG_STYLE_TABLIST, "Alte locatii:", "DealerShip", "Alege", "Inchide");
			}
		}
		else return SPD(playerid, DIALOG_GPS1, DIALOG_STYLE_LIST,"GPS:","San Andreas\nLocatii Joburi\nCauta Case\nCauta Afaceri\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GPS3)
	{
		if(response)
		{
			if(listitem == 0)
			{
			
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_GPS2)
	{
		if(response)
		{
			new b = 0;
			if(GetPVarInt(playerid, "GPS") == 1) b = listitem + 1;
			else if(GetPVarInt(playerid, "GPS") == 2) b = listitem + 62;
			else if(GetPVarInt(playerid, "GPS") == 3) b = listitem + 34;
			format(string, sizeof(string), "Un checkpoint ti-a fost setat la afacerea %s (ID: %d).", BizzInfo[b][bName], b);
			SCM(playerid, COLOR_ORANGE, string);
			SetPlayerCheckpointEx(playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ], 2.5);
		}
		else return SPD(playerid, DIALOG_GPS, DIALOG_STYLE_LIST,"Locatii:","1.\tLos Santos\n2.\tSan Fierro\n3.\tLas Venturas\n","Alege","Inapoi");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_JOBS)
	{
		if(response)
		{
			new j = listitem + 1;
			format(string, sizeof(string), "Un checkpoint ti-a fost setat la jobul %s.", JobInfo[j][jName]);
			SCM(playerid, COLOR_ORANGE, string);
			SetPlayerCheckpointEx(playerid, JobInfo[j][JobX], JobInfo[j][JobY], JobInfo[j][JobZ], 2.5);
		}
		else return SPD(playerid, DIALOG_GPS1, DIALOG_STYLE_LIST,"GPS:","San Andreas\nLocatii Joburi\nCauta Case\nCauta Afaceri\n","Alege","Inchide");
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BUYGUN)
	{
	   if(response)
	   {
			if(listitem == 0)
			{
				GivePlayerWeaponEx(playerid,24,100);
				GivePlayerCash(playerid,-3000);
				BizzInfo[BizzEntered[playerid]][bMoney] += 3000;
			}
			if(listitem == 1)
			{
				GivePlayerWeaponEx(playerid,25,50);
				GivePlayerCash(playerid,-2000);
				BizzInfo[BizzEntered[playerid]][bMoney] += 2000;
			}
			if(listitem == 2)
			{
				GivePlayerWeaponEx(playerid,29,150);
				GivePlayerCash(playerid,-4000);
				BizzInfo[BizzEntered[playerid]][bMoney] += 4000;
			}
			if(listitem == 3)
			{
				GivePlayerWeaponEx(playerid,32,100);
				GivePlayerCash(playerid,-3500);
				BizzInfo[BizzEntered[playerid]][bMoney] += 3500;
			}
			if(listitem == 4)
			{
				GivePlayerWeaponEx(playerid,31,150);
				GivePlayerCash(playerid,-7000);
				BizzInfo[BizzEntered[playerid]][bMoney] += 7000;
			}
			SaveBusiness(BizzEntered[playerid]);
			SPD(playerid, DIALOG_BUYGUN, DIALOG_STYLE_TABLIST_HEADERS, "Lista cu Arme:","Arma\tValoare\tMunitie\nDeagle\t{66FF00}3000$\t100\nShotgun\t{66FF00}2000$\t50\nMP5\t{66FF00}4000$\t150\nTec-9\t{66FF00}3500$\t100\nM4\t{66FF00}7000$\t150","Alege", "Inchide");
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_HELP)
	{
	   if(response)
	   {
			if(listitem == 0)
			{
				strcat(string, "/stats  /buylevel  /pay  /tog  /switchkey  /bug\n");
				strcat(string, "/seatbelt  /killcp  /license  /showlicense  /propunere\n");
				strcat(string, "/report  /eject  /usedrugs  /contract  /admins  /helpers\n");
				strcat(string, "/w  /cw  /s  /animlist  /helpme  /missions\n");
				SPD(playerid, DIALOG_NULL,DIALOG_STYLE_MSGBOX, "General:", string, "OK","");
			}
			if(listitem == 1)
			{
				switch(PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader])
				{
					case 0: SCM(playerid,COLOR_YELLOW2,"Nu faci parte dintr-o factiune!");
					case 1 .. 3:
					{
						strcat(string, "/faction  /departments  /megaphone  /suspect  /arrest  /duty  /wanted  /cuff  /tazer\n");
						strcat(string, "/frisk  /confisca  /ticket  /ram  /startradar  /nearwanted  /fvr\n");
					}
					case 5, 6, 11 .. 13: strcat(string, "/turfs  /attack  /takeguns  /faction  /warstats  /fvr");
					case 7: strcat(string, "/givecharity  /gov  /fvr");
					case 8:
					{
						strcat(string, "/undercover  /gethit  /faction  /cancelhit  /contracts\n");
						strcat(string, "/checkcontract  /mycontract  /members  /fvr\n");
					}
					case 9: strcat(string, "/live  /news  /faction  /fvr");
					case 10: strcat(string, "/fare  /faction  /fvr");
					case 14: strcat(string, "/faction  /takeguns  /fvr");
				}
				SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX, "Faction:", string, "Cancel","");
			}
			if(listitem == 2)
			{
				switch(PlayerInfo[playerid][pJob])
				{
					case 0: SCM(playerid,COLOR_YELLOW2,"You are not employed in any job.!");
					case 1: strcat(string, "/find");
					case 3: strcat(string, "/work  /stopwork");
					case 4: strcat(string, "/work  /repair  /refill  /duty  /tow  /stopwork");
					case 5: strcat(string, "/work  /pizza  /stopwork"); 
					case 7: strcat(string, "/getdrugs  /selldrugs"); 
					case 8: strcat(string, "/dropcar"); 
					case 9: strcat(string, "/sellgun  /sellmats  /getmats  /creategun"); 
				}
				SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Job:", string, "Cancel","");
			}
			if(listitem == 3)
			{
				strcat(string, "Contul Premium iti ofera avantaje la joburi si payday plus multe altele. Comenzi utile:\n\n");
				strcat(string, " /premium - Prin aceasta comanda poti vorbi cu toti jucatorii care au cont premium.\n");
				strcat(string, " /pcolor - Iti schimbi culoarea numelui din chat.\n");
				strcat(string, " /music - Asculti orice muzica vrei indiferent unde de afli daca ai un MP3 sau esti intr-un vehicul.\n");
				SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX, "Premium:", string, "Cancel","");
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
				new dstring[64];
				strcat(string, "Produs\tValoare\n");
				strcat(string, "Cumpara cont premium\t \n");
				strcat(string, "Sterge 1 warning\t {FFB95E}250 gold\n");
				strcat(string, "Sterge toate warning-urile\t {FFB95E}550 gold\n");
				strcat(string, "Sterge 10 faction punish\t {FFB95E}350 gold\n");
				strcat(string, "Sterge 20 faction punish\t {FFB95E}500 gold\n");
				strcat(string, "140.000$\t {FFB95E}25 gold\n");
				strcat(string, "290.000$\t {FFB95E}50 gold\n");
				strcat(string, "580.000$\t {FFB95E}120 gold\n");
				strcat(string, "1.430.000$\t {FFB95E}300 gold\n");
				strcat(string, "2.670.000$\t {FFB95E}420 gold\n");
				strcat(string, "5.240.000$\t {FFB95E}840 gold\n");
				strcat(string, "6.730.000$\t {FFB95E}970 gold\n");
				strcat(string, "7.100.000$\t {FFB95E}1060 gold\n");
				strcat(string, "8.670.000$\t {FFB95E}1135 gold\n");
				strcat(string, "9.500.000$\t {FFB95E}1200 gold\n");
				strcat(string, "10.240.000$\t {FFB95E}1350 gold\n");
				strcat(string, "Schimba-ti numele\t {FFB95E}150 gold\n");
				strcat(string, "Creeaza un clan\t {FFB95E}470 gold\n");
				strcat(string, "Deblocheaza un nou slot de vehicul\t {FFB95E}560 gold\n");
				strcat(string, "Upgrade la vehicul premium\t {FFB95E}430 gold\n");
				format(dstring, sizeof(dstring),"Shop: In acest moment detii {FFB95E}%s gold",FormatNumber(PlayerInfo[playerid][pGold]));
				SPD(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, dstring, string, "Select","Cancel");
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pAdmin] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu faci parte din echipa de Admini!");
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
					strcat(string, "{ffd700}Test Admin:{FFFFFF} /a /o /pm /check /setint /setvw /unfreeze /gotohouse /getteam /setteam /respawnveh /togfind\n");
					strcat(string, "{ffd700}Test Admin:{FFFFFF} /slap /area /gethere /setskin /freeze /spec /slapcar /gotobizz /gotocheckpoint /sethp /setarmor /fspec\n");
					strcat(string, "{ffd700}Test Admin:{FFFFFF} /ajail /gotomark /mark /gotospawn /gotods /mutedlist /reports /gotohq /vstats /healme /checkhp\n");
					strcat(string, "{ffd700}Test Admin:{FFFFFF} /gotojob /gotoin /givegun /cc /vehname /fixveh /desync /respawn /checkr /closereport /jaillist /undercoverlist /checkvehicles\n\n");
				}
				if(PlayerInfo[playerid][pAdmin] >= 2) {
					strcat(string, "{ffd700}Advanced Admin:{FFFFFF} /ban  /setjob  /unjail  /checkgun  /deletead  /entercar\n\n");
				}
				if(PlayerInfo[playerid][pAdmin] >= 3) {
					strcat(string, "{ffd700}Proffesional Admin:{FFFFFF} /disarm  /cnnn  /flip  /clearwanted  /agl\n\n");
				}
				if(PlayerInfo[playerid][pAdmin] >= 4) {
					strcat(string, "{ffd700}Manager Admin:{FFFFFF} /fpk  /unwarn  /gotocar  /getcar  /propuneri  /bugs  /startvote\n\n");
				}
				if(PlayerInfo[playerid][pAdmin] >= 5)
				{
					strcat(string, "{ffd700}Owner:{FFFFFF} /unban  /tod  /aopen  /setleader\n");
					strcat(string, "{ffd700}Owner:{FFFFFF} /startevent  /stopevent  /ip  /blockcmd  /licitatie\n\n");
				}
				if(PlayerInfo[playerid][pAdmin] >= 6)
				{
					strcat(string, "{ffd700}Fondator:{FFFFFF} /givemoney  /rac  /weatherall  /sethelper  /setstat  /vrank  /edit\n");
					strcat(string, "{ffd700}Fondator:{FFFFFF} /gift  /salariile  /setpremium  /setmoney  /givegold  /setadmin\n\n");
				}
				if(IsPlayerScripter(playerid))
				{
					strcat(string, "{ffd700}Scripter:{FFFFFF} /gpforall  /moneyforall  /editint  /setcar  /savedata  /deleteclan  /destroycar\n");
					strcat(string, "{ffd700}Scripter:{FFFFFF} /vcreate  /createhouse  /vedit  /resetmissions  /intrarecasa  /intrarebiz  /intrarehq\n");
					strcat(string, "{ffd700}Scripter:{FFFFFF} /iesirecasa  /iesirebiz  /createbizz  /savec\n");
				}
				SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX, "Admin Help:", string, "Cancel","");
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pHelper] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu faci parte din echipa de Helperi!");
				if(PlayerInfo[playerid][pHelper] >= 1)
				{
					strcat(string, " {00ff66}Helper 1:{FFFFFF} /pm  /check  /setint  /slap  /ac  /freeze  /unfreeze\n");
					strcat(string, " {00ff66}Helper 1:{FFFFFF} /goto  /mute  /gotom  /helps  /checkh  /closeh\n");
				}
				if(PlayerInfo[playerid][pHelper] >= 2)
				{
					strcat(string, " {00ff66}Helper 2:{FFFFFF} /gotosf  /gotols  /gotolv  /setvw  /respawn\n");
					strcat(string, " {00ff66}Helper 2:{FFFFFF} /gotospawn  /kick  /gotods\n");
				}
				if(PlayerInfo[playerid][pHelper] >= 3) {
					strcat(string, " {00ff66}Helper 3:{FFFFFF} /gethere\n");
				}
				if(PlayerInfo[playerid][pHelper] >= 4) {
					strcat(string, " {00ff66}Helper 4:{FFFFFF} /setjob  /ajail\n");
				}
				SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX, "Helper Help:", string, "Cancel","");
			}
			if(listitem == 7)
			{
				if(PlayerInfo[playerid][pHouseKey] == 255) return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio casa.");
				strcat(string, "/houseinfo  /open  /home  /heal  /houseupgrade  /setrentable  /housename  /hdeposit\n");
				strcat(string, "/evictall  /setrent  /evict  /housewithdraw  /sellhousetostate\n");
				SPD(playerid, DIALOG_NULL,DIALOG_STYLE_MSGBOX,"House Help:",string,"Cancel","");
			}
			if(listitem == 8)
			{
				if(PlayerInfo[playerid][pBizzKey] == 255) return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio afacere.");
				strcat(string, "/bizzinfo  /bizzfee  /bizzwithdraw  /open  /sellbizztostate\n");
				SPD(playerid, DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Bizz Help:",string,"Cancel","");
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pClan] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu esti liderul unui clan.");
				strcat(string, "/clan  /showmotd  /c  /cinvite  /crankname\n");
				SPD(playerid, DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Clan Help:",string,"Cancel","");
			}
			if(listitem == 10)
			{
				strcat(string, "Codul PIN este un cod de securitate folosit pentru a iti oferi acces la comenzile de transfer al banilor si altele. Comenzi utile:\n\n");
				strcat(string, " /addpin - Deschide panoul cu taste si permite introducerea unui cod PIN de 4 cifre.\n");
				strcat(string, " /changepin - Deschide panoul cu taste si permite schimbarea codului PIN.\n");
				strcat(string, " /pin - Deschide panoul cu taste si permite deblocarea contului prin introducerea codului PIN.\n");
				strcat(string, " /lockacc - Aceasta comanda permite blocarea contului.\n");
				SPD(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Pin Help:", string, "Cancel", "");
			}
			if(listitem == 11)
			{
				if(GetPlayerVehicles(playerid) == 0) return SCM(playerid,COLOR_VEHICLE,"Nu ai niciun vehicul personal.");
				strcat(string, "Vehiculele personale sunt foarte folositoare si te ajuta sa te deplasezi in locatii in care ajungi mai greu pe jos. Comenzi utile:\n\n");
				strcat(string, " /v - Deschide panoul cu lista de vehicule personale.\n");
				strcat(string, " /sellvehto - Vinzi vehiculul personal unei persoane.\n");
				strcat(string, " /lock - Inchizi/deschizi usile vehiculul.\n");
				strcat(string, " /carcolor - Pui pe vehiculul tau o culoare, daca e hidden vei plati 200 gold sau un punct hidden.\n");
				strcat(string, " /changekey - Schimbi incuietoarea.\n");
				strcat(string, " /givekey - Oferi cheile vehiculului tau unei persoane.\n");
				strcat(string, " /spawnallcars - Iti spawnezi toate vehiculele personale.\n");
				strcat(string, " /despawnallcars - Iti ascunzi toate vehiculele personale.\n");
				SPD(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Car Help:", string, "Cancel", "");
			}
			if(listitem == 12)
			{
				if(PlayerInfo[playerid][pLeader] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu esti lider la nicio factiune.");
				strcat(string, "Comenzi utile:\n\n");
				strcat(string, "/lc - Comanda prin care vorbesti cu ceilalti lideri.\n");
				strcat(string, "/faplicatii - Activezi/dezactivezi aplicatiile din panel.\n");
				strcat(string, "/invite - Inviti pe cineva in factiunea ta.\n");
				strcat(string, "/uninvite - Dai pe cineva afara din faciunea ta.\n");
				strcat(string, "/giverank - Oferi la cineva din factiune un rank mai mare decat cel actual.\n");
				strcat(string, "/fwarn - Oferi la cineva din factiune un Faction Warn daca a facut ceva gresit.\n");
				strcat(string, "/fmotd - Pui un mesaj care iti apare atunci cand intri pe server la toti cei din factiune.\n");
				strcat(string, "/vrank - Schimbi rank-ul unui vehicul al factiunii tale.\n");
				strcat(string, "/lockhq - Inchizi/deschizi HQ-ul factiunii tale.\n");
				if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3) {
					strcat(string, "/clearwanted - Stergi wanted-ul unui jucator daca a fost acordat gresit.\n");
				}
				SPD(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Leader Help:", string, "Cancel", "");
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_RADIO1)
	{
		if(response)
		{
			if(listitem == sizeof(RadioName)-1) {
				if(GetPlayerPing(playerid) > 200) return SCM(playerid,COLOR_YELLOW2,"Nu poti asculta muzica de pe YT cat timp ai ping-ul mare!");
				SPD(playerid,DIALOG_RADIO2,DIALOG_STYLE_INPUT,"{00ff00}Play {ffffff}Youtube URL","Introdu link-ul dorit","Ok","Ichide");
			}
			else if(listitem == sizeof(RadioName))
			{
				StopAudioStreamForPlayer(playerid);
				ListenRadio[playerid] = sizeof(RadioName);
			}
			else
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~ASCULTI %s",RadioName[listitem]);
				GameTextForPlayer(playerid, string, 4000, 5);
				PlayAudioStreamForPlayer(playerid, RadioLink[listitem]);	
				ListenRadio[playerid] = listitem;
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_RADIO)
	{
		if(response)
		{
			new VID = GetPlayerVehicleID(playerid);
			foreach(new i: Player)
			{
				if(GetPlayerVehicleID(i) == VID)
				{
					if(listitem == sizeof(RadioName)-1) {
						if(GetPlayerPing(playerid) > 200) return SCM(playerid,COLOR_YELLOW2,"Nu poti asculta muzica de pe YT cat timp ai ping-ul mare!");
						SPD(playerid,DIALOG_RADIO2,DIALOG_STYLE_INPUT,"{00ff00}Play {ffffff}Youtube URL","Introdu link-ul dorit","Ok","Ichide");
					}
					else if(listitem == sizeof(RadioName))
					{
						StopAudioStreamForPlayer(i);
						ListenRadio[i] = sizeof(RadioName);
					}
					else
					{
						format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~ASCULTI %s",RadioName[listitem]);
						GameTextForPlayer(i, string, 4000, 5);
						PlayAudioStreamForPlayer(i, RadioLink[listitem]);	
						ListenRadio[i] = listitem;
						CarRadio[VID] = listitem;
					}
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_RADIO2)
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				new VID = GetPlayerVehicleID(playerid);
				foreach(new i: Player)
				{
					if(GetPlayerVehicleID(i) == VID)
					{
						YoutubeStream(i, inputtext);
						StrmidEx(Radio[VID], inputtext);
						CarRadio[VID] = sizeof(RadioName)-1;
						ListenRadio[i] = sizeof(RadioName)-1;
					}
				}
			}
		}
	}
	//--------------------------------------------------------------
	if(dialogid == DIALOG_BUYLICENTE)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCarLic] == 0)
				{
					if(GetPlayerCash(playerid) < 45000) return SCM(playerid, COLOR_GREY, "Nu ai bani destui pentru licenta!");
					CP[playerid] = 300;
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInteriorEx(playerid, 0);
					SetPlayerPosEx(playerid, 937.4717,-1739.2224,13.5469);
					SetPlayerRaceCheckpoint(playerid, 0, 920.1365,-1665.5935,12.9610, 920.8195,-1588.7004,13.1235, 5.0);
					TakingLesson[playerid] = 1;
					ExamCar[playerid] = CreateVehicleEx(426, 931.4620, -1726.0000, 13.2806, 90.9661, -1, -1, -1);
					PutPlayerInVehicleEx(playerid, ExamCar[playerid], 0);
					SCM(playerid, COLOR_WHITE, "Atunci cand motorul este oprit, il poti porni apasand {30a030}tasta 2 {FFFFFF}sau folosind {30a030}/engine.");
					SCM(playerid, COLOR_WHITE, "Pentru a nu primi amenda nu uita sa-ti pui centura folosind comanda {30a030}/seatbelt.");
					TogglePlayerControllable(playerid, true);
					EngineSTATE[ExamCar[playerid]] = 0;
				}
				else return SCM(playerid, COLOR_LICENSES, "Ai deja licenta de condus!");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pFlyLic] == 0)
				{
					if(GetPlayerCash(playerid) < 50000) return SCM(playerid, COLOR_GREY, "Nu ai bani destui pentru licenta!");
					CP[playerid] = 339;
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInteriorEx(playerid, 0);
					SetPlayerRaceCheckpoint(playerid, 3, 2023.3060,-2439.3242,24.2643, 2024.3340,-2487.0356,24.3563, 5.0);
					TakingLesson[playerid] = 1;
					ExamCar[playerid] = CreateVehicleEx(487, 2024.5995, -2420.0195, 13.7222, 175.8347, -1, -1, -1);
					PutPlayerInVehicleEx(playerid, ExamCar[playerid], 0);
					SCM(playerid, COLOR_WHITE, "Atunci cand motorul este oprit, il poti porni folosind {30a030}/engine.");
					TogglePlayerControllable(playerid, true);
					EngineSTATE[ExamCar[playerid]] = 0;
				}
				else return SCM(playerid, COLOR_LICENSES, "Ai deja licenta de zbor!");
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pBoatLic] == 0)
				{
					if(GetPlayerCash(playerid) < 35000) return SCM(playerid, COLOR_GREY, "Nu ai bani destui pentru licenta!");
					CP[playerid] = 324;
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInteriorEx(playerid, 0);
					SetPlayerRaceCheckpoint(playerid, 0, 325.5872,-2007.1125,-0.3055, 240.4444,-2074.4124,-0.1859, 5.0);
					TakingLesson[playerid] = 1;
					ExamCar[playerid] = CreateVehicleEx(493, 347.9074, -1919.2236, -0.1461, 179.3345, -1, -1, -1);
					PutPlayerInVehicleEx(playerid, ExamCar[playerid], 0);
					SCM(playerid, COLOR_WHITE, "Atunci cand motorul este oprit, il poti porni apasand {30a030}tasta 2 {FFFFFF}sau folosind {30a030}/engine.");
					TogglePlayerControllable(playerid, true);
					EngineSTATE[ExamCar[playerid]] = 0;
				}
				else return SCM(playerid, COLOR_LICENSES, "Ai deja licenta navigare!");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pFishLic] == 0)
				{
					if(GetPlayerCash(playerid) < 35000) return SCM(playerid, COLOR_GREY, "Nu ai bani destui pentru licenta!");
					SCM(playerid, COLOR_LICENSES, "Ai cumparat licenta de pescuit pentru 35,000$.");
					GivePlayerCash(playerid, -35000);
					PlayerInfo[playerid][pFishLic] = 100;
					BizzInfo[BizzEntered[playerid]][bMoney] += 10500;
					SaveBusiness(BizzEntered[playerid]);
					OnPlayerUpdateEx(playerid);
					SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$\n", "Cumpara", "Iesi" );
				}
				else return SCM(playerid, COLOR_LICENSES, "Ai deja licenta de pescuit!");
			}
			if(listitem == 4)
			{
				if(GetPlayerScoreEx(playerid) >= 3)
				{
					if(PlayerInfo[playerid][pGunLic] == 0)
					{
						foreach(new i: Player) {
							if(TakingLesson[i] == 2) return SCM(playerid,COLOR_YELLOW2,"Este deja cineva care da testul de port arma. Asteapta...");
						}
						if(GetPlayerCash(playerid) < 45000) return SCM(playerid, COLOR_GREY, "Nu ai bani destui pentru licenta!");
						SCM(playerid,COLOR_LICENSES,"Incearca sa distrugi toate tintele cat mai bine.");
						SetPlayerInteriorEx(playerid,1);
						SetPlayerVirtualWorld(playerid,playerid);
						SetPlayerPosEx(playerid,294.1699,-27.1584,1001.5160);
						GivePlayerWeaponEx(playerid,24,10);
						TakingLesson[playerid] = 2;
						Glass[0][playerid] = CreatePlayerObject(playerid, 1461, 297.9945,-10.4647,1001.5156, 0.00000, 0.00000, 0.00000);
						Glass[1][playerid] = CreatePlayerObject(playerid, 1461, 286.2522,-14.3072,1001.5156, 0.00000, 0.00000, 0.00000);
						Glass[2][playerid] = CreatePlayerObject(playerid, 1461, 291.8387,-17.8645,1001.5156, 0.00000, 0.00000, 0.00000);
						Glass[3][playerid] = CreatePlayerObject(playerid, 1461, 292.0401,-7.9681,1001.5156, 0.00000, 0.00000, 0.00000);
						Glass[4][playerid] = CreatePlayerObject(playerid, 1461, 297.7271,-4.4396,1002.6815, 0.00000, 0.00000, 0.00000);
						Glass[5][playerid] = CreatePlayerObject(playerid, 1461, 286.7316,-9.7264,1001.5156, 0.00000, 0.00000, 0.00000);
						Glass[6][playerid] = CreatePlayerObject(playerid, 1461, 284.3918,-19.6071,1001.5156, 0.00000, 0.00000, 0.00000);
					}
					else return SCM(playerid, COLOR_LICENSES, "Ai deja licenta de arme!");
				}
				else return SCM(playerid, COLOR_YELLOW2, " Ai nevoie de level 3 pentru a cumpara aceasta licenta!");
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pPassport] == 0)
				{
					if(GetPlayerCash(playerid) < 30000) return SCM(playerid, COLOR_GREY, "Nu ai bani destui pentru licenta!");
					SCM(playerid, COLOR_LICENSES, "Ai cumparat pasaportul pentru 30,000$.");
					GivePlayerCash(playerid, -30000);
					PlayerInfo[playerid][pPassport] = 80;
					BizzInfo[BizzEntered[playerid]][bMoney] += 9000;
					SaveBusiness(BizzEntered[playerid]);
					OnPlayerUpdateEx(playerid);
					SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$\n", "Cumpara", "Iesi" );
				}
				else return SCM(playerid, COLOR_LICENSES, "Ai deja pasaportul!");
			}
		}
	}
	return 1;
}
/*enum {
	DIALOG_EVENT = 500,
	DIALOG_EVENT_CREATE,	
	DIALOG_EVENT_PRIZE,
	DIALOG_EVENT_DESCRIPTION,
	DIALOG_EVENT_COMMANDS,
	DIALOG_EVENT_GIVE,
	DIALOG_EVENT_SET

};
enum e_event {
	event_status,
	event_prize,
	event_description[64]
};
new EventInfo[e_event];
CMD:event(playerid, params[]) return ShowPlayerDialog(playerid, DIALOG_EVENT, DIALOG_STYLE_LIST, "Event:", "Create\nStart\nEnd\nCommands\n", "Select", "Exit");
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		case DIALOG_EVENT:
		{
			if(response)
			{
				if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_EVENT_CREATE, DIALOG_STYLE_LIST, "Create:", "Set the prize\nSet the description\n", "Select", "Back");
				if(listitem == 1) return 1;
				if(listitem == 2) return 1;
				if(listitem == 3) ShowPlayerDialog(playerid, DIALOG_EVENT_COMMANDS, DIALOG_STYLE_LIST, "Commands:", "Give\nSet\nDisarm\nRespawn\nFreeze\nUnfreeze\nRepair\nGet\nSlap\nMute\nUnmute\n", "Select", "Back");
			}
		}
		case DIALOG_EVENT_COMMANDS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, DIALOG_EVENT_GIVE, DIALOG_STYLE_INPUT, "Give:", "Introdu viata + armura + armele pe care vrei sa i le dai jucatorului si separatorul '',''.\n\nEx: 100,50,24", "Insert", "Back");
					case 1: ShowPlayerDialog(playerid, DIALOG_EVENT_SET, DIALOG_STYLE_INPUT, "Set:", "Introdu viata + armura pe care vrei sa i le setezi jucatorului si separatorul '',''.\n\nEx: 100,50,24", "Insert", "Back");
					case 2: return 1;//disarm
					case 3: return 1;//respawn
					case 4: return 1;//freeze
					case 5: return 1;//unfreeze
					case 6: return 1;//repair
					case 7: return 1;//get
					case 8: return 1;//slap
					case 9: return 1;//mute
					case 10: return 1;//unmute
				}
			}
			else ShowPlayerDialog(playerid, DIALOG_EVENT, DIALOG_STYLE_LIST, "Event:", "Create\nStart\nEnd\nCommands\n", "Select", "Exit");
		}
		case DIALOG_EVENT_SET:
		{
			if(response)
			{
				new Float:health, Float:armour;
				if(sscanf(inputtext, "p<,>ff", health, armour)) return ShowPlayerDialog(playerid, DIALOG_EVENT_SET, DIALOG_STYLE_INPUT, "Set:", "Introdu din nou!\nViata + armura + armele si separatorul '',''.\n\nEx: 100,50,24", "Insert", "Back");
				SetPlayerHealth(playerid, health);
				SetPlayerArmour(playerid, armour);
				SEFM(0xcc33ff, "Ai primit %.0f viata si %.0f armura.",health,armour);
			}
			else ShowPlayerDialog(playerid, DIALOG_EVENT_COMMANDS, DIALOG_STYLE_LIST, "Commands:", "Give\nSet\nDisarm\nRespawn\nFreeze\nUnfreeze\nRepair\nGet\nSlap\nMute\nUnmute\n", "Select", "Back");
		}
		case DIALOG_EVENT_GIVE:
		{
			if(response)
			{
				new Float:health, Float:armour, gun;
				if(sscanf(inputtext, "p<,>ffd", health, armour, gun)) return ShowPlayerDialog(playerid, DIALOG_EVENT_GIVE, DIALOG_STYLE_INPUT, "Give:", "Introdu din nou!\nViata + armura + armele si separatorul '',''.\n\nEx: 100,50,24", "Insert", "Back");
				GivePlayerHealth(playerid, health);
				GivePlayerArmour(playerid, armour);
				GivePlayerWeapon(playerid, gun, 999);
				SEFM(0xcc33ff, "Ai primit %.0f viata, %.0f armura si arma %d.",health,armour,gun);
			}
			else ShowPlayerDialog(playerid, DIALOG_EVENT_COMMANDS, DIALOG_STYLE_LIST, "Commands:", "Give\nSet\nDisarm\nRespawn\nFreeze\nUnfreeze\nRepair\nGet\nSlap\nMute\nUnmute\n", "Select", "Back");
		}
		case DIALOG_EVENT_CREATE:
		{
			if(response)
			{
				if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_EVENT_PRIZE, DIALOG_STYLE_INPUT, "Set prize:", "Set the prize for the winer.", "Insert", "Back");
				if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_EVENT_DESCRIPTION, DIALOG_STYLE_INPUT, "Set description:", "Set the description for the event.", "Insert", "Back");
			}
			else ShowPlayerDialog(playerid, DIALOG_EVENT, DIALOG_STYLE_LIST, "Event:", "Create\nStart\nEnd\nCommands\n", "Select", "Exit");
		}
		case DIALOG_EVENT_PRIZE:
		{
			if(response)
			{
				if(strval(inputtext) < 5000 || strval(inputtext) > 1000000) return SendClientMessage(playerid, -1, "The prize can't be lower than $5,000 or higher than $1,000,000.");
				EventInfo[event_prize] = strval(inputtext);
				SEFM(0xcc33ff, "Premiul evenimentului este: %d$", EventInfo[event_prize]);
			}
			else ShowPlayerDialog(playerid, DIALOG_EVENT_CREATE, DIALOG_STYLE_LIST, "Create:", "Set the prize\nSet the description\n", "Select", "Back");
		}
		case DIALOG_EVENT_DESCRIPTION:
		{
			if(response)
			{
				strmid(EventInfo[event_description], inputtext, 0, strlen(inputtext), 255);
				SEFM(0xcc33ff, "Descrierea evenimentului este: '%s'", EventInfo[event_description]);
			}
			else ShowPlayerDialog(playerid, DIALOG_EVENT_CREATE, DIALOG_STYLE_LIST, "Create:", "Set the prize\nSet the description\n", "Select", "Back");
		}	
	}
	return 1;
}*/
//==============================================================================
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new string[256];
	if(newkeys & KEY_FIRE)
	{
		new weapon = GetPlayerWeapon(playerid), slot = GetWeaponSlot(weapon);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && WeaponData[playerid][slot] == false && slot != 0 && weapon != 46  && GetPlayerWeapon(playerid) != 9)
		{
			ResetPlayerWeaponsEx(playerid);
			format(string, sizeof(string), "AdmWarning: %s (ID: %d, Weapon: %s) este posibil sa foloseasca Weapon-Hack.",GetName(playerid),playerid,GetWeaponNameEx(weapon));
			SendAdminMessage(string,1);
		}
		if(GetPVarInt(playerid, "EnableBoast") == 1)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new Float:v[3];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), v[0],v[1],v[2]);
				SetVehicleVelocity(GetPlayerVehicleID(playerid), v[0]*1.8,v[1]*1.8,v[2]*1.8);
			}
		}
	}
	if(newkeys & KEY_NO)
	{
		new car = GetClosestVehicle(playerid);
		if(CheckPlayerDistanceToVehicle(7.0, playerid, car))
		{
			if(JobCar[playerid][PlayerInfo[playerid][pJob]] == car)
			{
				if(gCarLock[JobCar[playerid][PlayerInfo[playerid][pJob]]] == 0)
				{
					SetVehicleDoorsState(JobCar[playerid][PlayerInfo[playerid][pJob]], true);
					format(string,sizeof(string),"~w~%s ~r~Incuiat",GetVehicleName(JobCar[playerid][PlayerInfo[playerid][pJob]]));
					GameTextForPlayer(playerid, string, 3000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[JobCar[playerid][PlayerInfo[playerid][pJob]]] = 1;
				}
				else if(gCarLock[JobCar[playerid][PlayerInfo[playerid][pJob]]] == 1)
				{
					SetVehicleDoorsState(JobCar[playerid][PlayerInfo[playerid][pJob]], false);
					format(string,sizeof(string),"~w~%s ~g~Descuiat",GetVehicleName(JobCar[playerid][PlayerInfo[playerid][pJob]]));
					GameTextForPlayer(playerid, string, 3000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[JobCar[playerid][PlayerInfo[playerid][pJob]]] = 0;
				}
			}
			else if(HireCar[playerid] == car)
			{
				if(gCarLock[HireCar[playerid]] == 0)
				{
					SetVehicleDoorsState(HireCar[playerid], true);
					format(string,sizeof(string),"~w~%s ~r~Incuiat",GetVehicleName(HireCar[playerid]));
					GameTextForPlayer(playerid, string, 2000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[HireCar[playerid]] = 1;
				}
				else if(gCarLock[HireCar[playerid]] == 1)
				{
					SetVehicleDoorsState(HireCar[playerid], false);
					format(string,sizeof(string),"~w~%s ~g~Descuiat",GetVehicleName(HireCar[playerid]));
					GameTextForPlayer(playerid, string, 2000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[HireCar[playerid]] = 0;
				}
			}
			else if(IsAnOwnableCar(car))
			{
				new vsid = FindSpawnID(car);
				if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
				{
					if(CarInfo[vsid][cLock] == 0)
					{
						SetVehicleDoorsState(car, true);
						format(string, sizeof(string), "~h~%s~n~~r~Incuiat",CarInfo[vsid][cName]);
						GameTextForPlayer(playerid, string, 2000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						CarInfo[vsid][cLock] = 1;
						vUpdate(vsid,cLockx);
					}
					else if(CarInfo[vsid][cLock] == 1)
					{
						SetVehicleDoorsState(car, false);
						format(string, sizeof(string), "~h~%s~n~~g~Descuiat",CarInfo[vsid][cName]);
						GameTextForPlayer(playerid, string, 2000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						CarInfo[vsid][cLock] = 0;
						vUpdate(vsid,cLockx);
					}
				}
				else if(SwitchKey[playerid] == 2 && KeyCar[playerid] == car)
				{
					if(KeyCar[playerid] == -1) return SCM(playerid,COLOR_VEHICLE,"Nu ai niciun vehicul inchiriat.");
					if(CarInfo[vsid][cLock] == 0)
					{
						format(string, sizeof(string), "~w~%s ~r~Incuiat", GetVehicleName(KeyCar[playerid]));
						GameTextForPlayer(playerid, string, 4000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						CarInfo[vsid][cLock] = 1;
						vUpdate(vsid,cLockx);
						SetVehicleDoorsState(KeyCar[playerid], true);
					}
					else if(CarInfo[vsid][cLock] == 1)
					{
						format(string, sizeof(string), "~w~%s ~g~Descuiat",GetVehicleName(KeyCar[playerid]));
						GameTextForPlayer(playerid, string, 4000, 3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						SetVehicleDoorsState(KeyCar[playerid], false);
						CarInfo[vsid][cLock] = 0;
						vUpdate(vsid,cLockx);
					}
				}
			}
			else return SCM(playerid, COLOR_GRAD2, "Nu poti incuia sau descuia acest vehicul.");
		}
	}
	if(ChooseInt[playerid] > 0)
	{
		if(newkeys == KEY_CTRL_BACK)
		{
			new h = PlayerInfo[playerid][pHouseKey];
			ChooseInt[playerid] = 0;
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			SCM(playerid,COLOR_GRAD2,"Ai parasit shop-ul casei!");
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
		}
		if(newkeys == KEY_SECONDARY_ATTACK) return SCM(playerid,COLOR_YELLOW2,"Nu poti apasa aceasta tasta cat timp cumperi un interior!");
	}
	if(newkeys == KEY_SPRINT)
	{
		if(gPlayerUsingLoopingAnim[playerid] == 1) StopLoopingAnim(playerid);
		if(ChooseInt[playerid] == 1)
		{
			ChooseInt[playerid] = 2;
			SetPlayerInteriorEx(playerid,12);
			SetPlayerPosEx(playerid,2324.5222,-1148.2889,1050.7101);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD,"House Upgrade~n~~n~~r~ < ~w~Gold: ~y~~h~2000 ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
		else if(ChooseInt[playerid] == 2)
		{
			ChooseInt[playerid] = 3;
			SetPlayerInteriorEx(playerid,7);
			SetPlayerPosEx(playerid,225.8138,1023.0130,1084.0132);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD,"House Upgrade~n~~n~~r~ < ~w~Gold: ~y~~h~2700 ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
		else if(ChooseInt[playerid] == 3)
		{
			ChooseInt[playerid] = 4;
			SetPlayerInteriorEx(playerid,6);
			SetPlayerPosEx(playerid,2196.2903,-1204.1464,1049.0234);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD," \t\tHouse Upgrade~n~~n~~r~< ~w~Pret: ~g~15.000.000$ ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
		else if(ChooseInt[playerid] == 4)
		{
			ChooseInt[playerid] = 5;
			SetPlayerInteriorEx(playerid,9);
			SetPlayerPosEx(playerid,83.0531,1322.8805,1083.8662);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD,"House Upgrade~n~~n~~r~ < ~w~Gold: ~y~~h~1600 ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
		else if(ChooseInt[playerid] == 5)
		{
			ChooseInt[playerid] = 6;
			SetPlayerInteriorEx(playerid,8);
			SetPlayerPosEx(playerid,2365.3706,-1134.9180,1050.8750);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD," \t\tHouse Upgrade~n~~n~~r~< ~w~Pret: ~g~11.000.000$ ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
		else if(ChooseInt[playerid] == 6)
		{
			ChooseInt[playerid] = 7;
			SetPlayerInteriorEx(playerid,1);
			SetPlayerPosEx(playerid,2217.5347,-1076.1351,1050.4844);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD," \t\tHouse Upgrade~n~~n~~r~< ~w~Pret: ~g~8.000.000$ ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
		else if(ChooseInt[playerid] == 7)
		{
			ChooseInt[playerid] = 1;
			SetPlayerInteriorEx(playerid,6);
			SetPlayerPosEx(playerid,234.2000,1064.9000,1084.2106);
			PlayerTextDrawSetString(playerid,HouseUpgradeTD,"House Upgrade~n~~n~~r~ < ~w~Gold: ~y~~h~2400 ~r~>");
			PlayerTextDrawShow(playerid,HouseUpgradeTD);
		}
	}
	if(newkeys == KEY_FIRE)
	{
		new h = PlayerInfo[playerid][pHouseKey];
		if(ChooseInt[playerid] == 1)
		{
			if(PlayerInfo[playerid][pGold] < 2400) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficient gold.");
			HouseInfo[h][hExitX] = 234.2000;
			HouseInfo[h][hExitY] = 1064.9000;
			HouseInfo[h][hExitZ] = 1084.2106;
			HouseInfo[h][hInterior] = 6;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			PlayerInfo[playerid][pGold] -= 2400;
			GameTextForPlayer(playerid,"~y~-2400",2000,1);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		else if(ChooseInt[playerid] == 2)
		{
			if(PlayerInfo[playerid][pGold] < 2000) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficient gold.");
			HouseInfo[h][hExitX] = 2324.5222;
			HouseInfo[h][hExitY] = -1148.2889;
			HouseInfo[h][hExitZ] = 1050.7101;
			HouseInfo[h][hInterior] = 12;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			PlayerInfo[playerid][pGold] -= 2000;
			GameTextForPlayer(playerid,"~y~-2000",2000,1);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		else if(ChooseInt[playerid] == 3)
		{
			if(PlayerInfo[playerid][pGold] < 2700) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficient gold.");
			HouseInfo[h][hExitX] = 225.8138;
			HouseInfo[h][hExitY] = 1023.0130;
			HouseInfo[h][hExitZ] = 1084.0132;
			HouseInfo[h][hInterior] = 7;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			PlayerInfo[playerid][pGold] -= 2700;
			GameTextForPlayer(playerid,"~y~-2700",2000,1);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		else if(ChooseInt[playerid] == 4)
		{
			if(GetPlayerCash(playerid) < 15000000) return SCM(playerid,COLOR_YELLOW2,"You do not have enough money.");
			HouseInfo[h][hExitX] = 2195.6858;
			HouseInfo[h][hExitY] = -1204.2390;
			HouseInfo[h][hExitZ] = 1049.0234;
			HouseInfo[h][hInterior] = 6;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			GivePlayerCash(playerid, -15000000);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		else if(ChooseInt[playerid] == 5)
		{
			if(PlayerInfo[playerid][pGold] < 1600) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficient gold.");
			HouseInfo[h][hExitX] = 83.0531;
			HouseInfo[h][hExitY] = 1322.8805;
			HouseInfo[h][hExitZ] = 1083.8662;
			HouseInfo[h][hInterior] = 9;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			PlayerInfo[playerid][pGold] -= 1600;
			GameTextForPlayer(playerid,"~y~-1600",2000,1);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		else if(ChooseInt[playerid] == 6)
		{
			if(GetPlayerCash(playerid) < 11000000) return SCM(playerid,COLOR_YELLOW2,"You do not have enough money.");
			HouseInfo[h][hExitX] = 2365.3706;
			HouseInfo[h][hExitY] = -1134.9180;
			HouseInfo[h][hExitZ] = 1050.8750;
			HouseInfo[h][hInterior] = 8;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			GivePlayerCash(playerid, -11000000);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		else if(ChooseInt[playerid] == 7)
		{
			if(GetPlayerCash(playerid) < 8000000) return SCM(playerid,COLOR_YELLOW2,"You do not have enough money.");
			HouseInfo[h][hExitX] = 2217.5347;
			HouseInfo[h][hExitY] = -1076.1351;
			HouseInfo[h][hExitZ] = 1050.4844;
			HouseInfo[h][hInterior] = 1;
			SetPlayerPosEx(playerid,HouseInfo[h][hExitX],HouseInfo[h][hExitY],HouseInfo[h][hExitZ]);
			SetPlayerInteriorEx(playerid,HouseInfo[h][hInterior]);
			PlayerTextDrawHide(playerid,HouseUpgradeTD);
			GivePlayerCash(playerid, -8000000);
			ChooseInt[playerid] = 0;
			SCM(playerid,-1,"{cc00ff}Congratulations, now your home has a new interior!");
			SaveHouse(h);
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(GetPlayerCash(playerid) > BizzInfo[NearToBizz(playerid)][bEntranceCost])
			{
				new tmpcar = GetPlayerVehicleID(playerid), Float:a;
				foreach(new i: Player)
				{
					if(GetPlayerVehicleID(i) == tmpcar)
					{
						if(IsPlayerInRangeOfPoint(playerid, 4, 2073.2979,-1831.1228,13.5469))
						{
							GetVehicleZAngle(tmpcar, a);
							GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
							SetPlayerVirtualWorld(i, playerid+1);
							SetVehicleVirtualWorld(tmpcar, playerid+1);
							SetVehiclePos(tmpcar, 2062.1294,-1831.5498,13.5469);
							SetVehicleZAngle(tmpcar, 90);
							GivePlayerCash(playerid, -BizzInfo[28][bEntranceCost]);
							BizzInfo[28][bMoney] += BizzInfo[28][bEntranceCost];
							SaveBusiness(28);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4, 1024.9756,-1030.7930,32.0257))
						{
							GetVehicleZAngle(tmpcar, a);
							GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
							SetPlayerVirtualWorld(i, playerid+1);
							SetVehicleVirtualWorld(tmpcar, playerid+1);
							SetVehiclePos(tmpcar, 1024.9763,-1021.8850,32.1016);
							SetVehicleZAngle(tmpcar, 0);
							GivePlayerCash(playerid, -BizzInfo[29][bEntranceCost]);
							BizzInfo[29][bMoney] += BizzInfo[29][bEntranceCost];
							SaveBusiness(29);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4, 488.3819,-1733.0563,11.1752))
						{
							GetVehicleZAngle(tmpcar, a);
							GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
							SetPlayerVirtualWorld(i, playerid+1);
							SetVehicleVirtualWorld(tmpcar, playerid+1);
							SetVehiclePos(tmpcar, 487.4099,-1741.4585,11.1330);
							SetVehicleZAngle(tmpcar, 180);
							GivePlayerCash(playerid, -BizzInfo[30][bEntranceCost]);
							BizzInfo[30][bMoney] += BizzInfo[30][bEntranceCost];
							SaveBusiness(30);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4, 719.8940,-464.8272,16.3359))
						{
							GetVehicleZAngle(tmpcar, a);
							GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
							SetPlayerVirtualWorld(i, playerid+1);
							SetVehicleVirtualWorld(tmpcar, playerid+1);
							SetVehiclePos(tmpcar, 719.8940,-456.8272,16.3359);
							GivePlayerCash(playerid, -BizzInfo[31][bEntranceCost]);
							BizzInfo[31][bMoney] += BizzInfo[31][bEntranceCost];
							SaveBusiness(31);
						}
						else return 1;
						TogglePlayerControllable(i, false);
						SetTimerEx_("AfterSpray", 5000, 5000, 1, "if", i, a);
					}
				}
			}
			else return SCM(playerid, COLOR_YELLOW2, "Nu ai destui bani ca sa intri in Pay`n Spray.");
		}
		if(PlayerDrunk[playerid] > 0)
		{
			PlayerDrunk[playerid]++;
			if(PlayerDrunk[playerid] > 9) SetPlayerDrunkLevel(playerid, 10000);
		}
	}
	if(IsACBUGWeapon(playerid) && (newkeys & KEY_FIRE) != KEY_FIRE && (oldkeys & KEY_FIRE) == KEY_FIRE && newkeys != KEY_FIRE && newkeys & KEY_CROUCH)
	{
		ApplyAnimation(playerid, "PED", "getup", 4.1, 0, 0, 0, 0, 0);
		SCM(playerid,COLOR_RED,"Pe serverul nostru este interzis c-bug, risti sa primesti warn.");
	}
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	if(newkeys & KEY_SUBMISSION && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vid = GetPlayerVehicleID(playerid);
		if(IsABike(vid)) return 1;
		if(Refueling[playerid] == 1) return SCM(playerid,COLOR_GRAD1,"Nu poti porni motorul cat timp faci plinul.");
		if(IsAPlane(vid) && EngineSTATE[vid] == 1) return SCM(playerid,COLOR_GRAD2,"Foloseste /engine pentru a porni/opri motorul.");
		if(Gas[vid] <= 0) return SCM(playerid,COLOR_GRAD2,"Acest vehicul nu mai are combustibil!");
		if(EngineSTATE[vid] == 0)
		{
			if(Undercover[playerid] == 1)
			{
				SetVehicleEngineState(vid, true);
				EngineSTATE[vid] = 1;
			}
			else
			{
				SetVehicleEngineState(vid, true);
				EngineSTATE[vid] = 1;
				format(string,sizeof(string)," * %s puts the key in contact and starts the engine of %s.",GetName(playerid), GetVehicleName(vid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			if(Undercover[playerid] == 1)
			{
				SetVehicleEngineState(vid, false);
				EngineSTATE[vid] = 0;
			}
			else
			{
				SetVehicleEngineState(vid, false);
				EngineSTATE[vid] = 0;
				format(string,sizeof(string)," * %s pulls out the ignition key and shuts off the engine to %s.",GetName(playerid), GetVehicleName(vid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	}
	if((newkeys == KEY_ANALOG_UP) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(bonnetSTATE[vid] == 0)
		{
			SetVehicleHoodState(vid, true);
			bonnetSTATE[vid] = 1;
		}
		else
		{
			SetVehicleHoodState(vid, false);
			bonnetSTATE[vid] = 0;
		}
	}
	if((newkeys == KEY_ANALOG_DOWN) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(bootSTATE[vid] == 0)
		{
			SetVehicleTrunkState(vid, true);
			bootSTATE[vid] = 1;
		}
		else
		{
			SetVehicleTrunkState(vid, false);
			bootSTATE[vid] = 0;
		}
	}
	if((newkeys & KEY_ACTION) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(LightsSTATE[vid] == 0)
		{
			SetVehicleLightsState(vid, true);
			LightsSTATE[vid] = 1;
		}
		else
		{
			SetVehicleLightsState(vid, false);
			LightsSTATE[vid] = 0;
		}
	}
	if((newkeys & KEY_CTRL_BACK) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		new RString[600];
		strcat(RString, "Nume\tAscultatori\n");
		for(new i = 0; i < sizeof(RadioName); i++)
		{
			format(string, sizeof(string), "{00ff00}Play {ffffff}%s\t%d\n", RadioName[i], ListenThisRadio(i));
			strcat(RString, string);
		}
		strcat(RString, "{FF9900}Opreste Radioul\n");
		SPD(playerid, DIALOG_RADIO, DIALOG_STYLE_TABLIST_HEADERS,"Radio List:",RString,"Alege","Inchide");
	}
	if((newkeys == KEY_YES) && (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT))
	{
		if(PlayerInfo[playerid][pMP3] == 1)
		{
			new RString[600];
			strcat(RString, "Nume\tAscultatori\n");
			for(new i = 0; i < sizeof(RadioName); i++)
			{
				format(string, sizeof(string), "{00ff00}Play {ffffff}%s\t%d\n", RadioName[i], ListenThisRadio(i));
				strcat(RString, string);
			}
			strcat(RString, "{FF9900}Opreste Radioul\n");
			SPD(playerid, DIALOG_RADIO1, DIALOG_STYLE_TABLIST_HEADERS,"Radio List:",RString,"Alege","Inchide");
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu ai un MP3, du-te la un 24/7 si cumpara unul!");
	}
	if(newkeys & KEY_CROUCH)
	{
		if(IsACop(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1542.3541,-1627.5516,13.3828))
			{
				SetDynamicObjectRot(barrierls, 0, 0, 270);
				SetTimer_("GateTime", 4000, 4000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2238.5105,2454.0935,10.8203))
			{
				SetDynamicObjectRot(barrierlv, 0, 0, 90);
				SetTimer_("GateTime1", 4000, 4000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1589.0651,-1636.4768,13.4254))
			{
				MoveDynamicObject(garagels, 1588.3868, -1638.2165, -7, 4);
				SetTimer_("GarageLS", 4000, 4000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2334.4844,2444.3457,5.6337))
			{
				MoveDynamicObject(garagelv, 2335.2814, 2444.1799, -7, 4);
				SetTimer_("GarageLV", 4000 ,4000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2292.9104,2499.2024,3.4907))
			{
				MoveDynamicObject(garagelv1, 2294,2498.5915, -4.5, 4);
				SetTimer_("GarageLV1", 4000, 4000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2719.8208,-2504.4353,13.2405))
			{
				MoveDynamicObject(barmata1,2720.17554, -2493.77197, 13.41270,4);
				SetTimer_("GateArmata1", 4000, 4000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2720.2017,-2405.2766,13.4609))
			{
				MoveDynamicObject(barmata2,2720.20142, -2395.19507, 13.43910,4);
				SetTimer_("GateArmata2", 4000, 4000, 1);
			}
		}
	}
	if(newkeys == KEY_SECONDARY_ATTACK)
	{
		for(new i = 1; i < MAX_HOUSES; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
			{
				if(PlayerInfo[playerid][pHouseKey] == i || HouseInfo[i][hLock] == 0)
				{
					if(GetPVarInt(playerid, "EnteredTime") > 0) return SFM(playerid,COLOR_YELLOW2,"Trebuie sa astepti %d secunde pentru a putea intra din nou.",GetPVarInt(playerid, "EnteredTime"));
					new faction = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
					if(InWar[faction] == 1) return SCM(playerid, COLOR_YELLOW2, "Eroare: Nu poti intra intr-o locuinta in timpul war-ului!");
					if(HouseInfo[i][hRadio] == 1) PlayAudioStreamForPlayer(playerid,HouseInfo[i][hRadioLink]);
					SetPlayerPosEx(playerid,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
					SetPlayerInteriorEx(playerid,HouseInfo[i][hInterior]);
					SetPlayerVirtualWorld(playerid,i);
					GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
					HouseEntered[playerid] = i;
					SetPVarInt(playerid, "EnteredTime", 7);
				}
				else return	GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]))
			{
				if(HouseEntered[playerid] == i)
				{
					SetPlayerInteriorEx(playerid,0);
					SetPlayerPosEx(playerid,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]);
					SetCameraBehindPlayer(playerid);
					SetPlayerVirtualWorld(playerid,0);
					HouseEntered[playerid] = -1;
					StopAudioStreamForPlayer(playerid);
				}
			}
		}
		for(new i = 1; i < MAX_FACTIONS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, FactionInfo[i][fHQExteriorPosX], FactionInfo[i][fHQExteriorPosY], FactionInfo[i][fHQExteriorPosZ]))
			{
				if(FactionInfo[i][fHQLockStatus] == 1)
				{
					if(GetPlayerFaction(playerid) == i)
					{
						if(GetPVarInt(playerid, "EnteredTime") > 0) return SFM(playerid,COLOR_YELLOW2,"You have to wait %d seconds to get back into a building.",GetPVarInt(playerid, "EnteredTime"));
						SetPlayerPosEx(playerid,FactionInfo[i][fHQInteriorPosX],FactionInfo[i][fHQInteriorPosY],FactionInfo[i][fHQInteriorPosZ]);
						SetPlayerInteriorEx(playerid,FactionInfo[i][fHQInteriorID]);
						SetPlayerVirtualWorld(playerid,i);
						FactionEntered[playerid] = i;
						SetPVarInt(playerid, "EnteredTime", 7);
					}
				}
				else if(FactionInfo[i][fHQLockStatus] == 0)
				{
					SetPlayerPosEx(playerid,FactionInfo[i][fHQInteriorPosX],FactionInfo[i][fHQInteriorPosY],FactionInfo[i][fHQInteriorPosZ]);
					SetPlayerInteriorEx(playerid,FactionInfo[i][fHQInteriorID]);
					SetPlayerVirtualWorld(playerid,i);
					FactionEntered[playerid] = i;
					SetPVarInt(playerid, "FactionEntered", 7);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, FactionInfo[i][fHQInteriorPosX], FactionInfo[i][fHQInteriorPosY], FactionInfo[i][fHQInteriorPosZ]))
			{
				if(FactionEntered[playerid] == i)
				{
					SetPlayerInteriorEx(playerid,0);
					SetPlayerPosEx(playerid,FactionInfo[i][fHQExteriorPosX],FactionInfo[i][fHQExteriorPosY],FactionInfo[i][fHQExteriorPosZ]);
					SetPlayerVirtualWorld(playerid,0);
					FactionEntered[playerid] = -1;
					if(i == 7)
					{
						TogglePlayerControllable(playerid, false);
						SetTimerEx_("IncarcaMapa", 100, 100, 1, "i",playerid);
					}
				}
			}
		}
		for(new i = 1; i < MAX_BUSINESS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
			{
				if(PlayerInfo[playerid][pBizzKey] == i || GetPlayerCash(playerid) >= BizzInfo[i][bEntranceCost])
				{
					if(GetPVarInt(playerid, "EnteredTime") > 0) return SFM(playerid,COLOR_YELLOW2,"You have to wait %d seconds to get back into a building.",GetPVarInt(playerid, "EnteredTime"));
					if(InWar[GetPlayerFaction(playerid)] == 1) return SCM(playerid, COLOR_YELLOW2, "Eroare: Nu poti intra intr-o afacere in timpul war-ului!");
					if(BizzInfo[i][bLocked] == 1) return GameTextForPlayer(playerid, "~r~Inchis", 5000, 1);
					if(!IsACop(playerid) && i == 3) return SCM(playerid, COLOR_YELLOW2, PLAYER_COP);
					else if(BizzInfo[i][bType] == 1) SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /bank");
					else if(BizzInfo[i][bType] == 2) SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /buygun");
					else if(BizzInfo[i][bType] == 3) SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /buydrink");
					else if(BizzInfo[i][bType] == 5) SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /dice");
					else if(BizzInfo[i][bType] == 6)
					{
						SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /buy");
						if(PlayerInfo[playerid][pFishPrice] != 0) SPD(playerid, DIALOG_SELL_FISH, DIALOG_STYLE_MSGBOX, "Sell fish:", "Vrei sa vinzi pestele prins in acest business?", "Da", "Nu");
					}
					else if(BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 9 || BizzInfo[i][bType] == 14)
					{
						SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /eat");
						if(AreFaina[playerid] >= 1)
						{
							new money,faina = AreFaina[playerid];
							if(PlayerInfo[playerid][pFarmSkill] == 0) money = faina*700;
							else if(PlayerInfo[playerid][pFarmSkill] == 1) money = 5000 + faina*1000 + random(5000);
							else if(PlayerInfo[playerid][pFarmSkill] == 2) money = 7000 + faina*1000 + random(5000);
							else if(PlayerInfo[playerid][pFarmSkill] == 3) money = 10000 + faina*1000 + random(5000);
							else if(PlayerInfo[playerid][pFarmSkill] == 4) money = 12000 + faina*1000 + random(5000);
							else if(PlayerInfo[playerid][pFarmSkill] == 5) money = 15000 + faina*1000 + random(5000);
							else if(PlayerInfo[playerid][pFarmSkill] >= 6) money = 17500 + faina*1000 + random(5000);
							PlayerInfo[playerid][pFarmTimes]++;
							PlayerInfo[playerid][pFarmRem]--;
							AreFaina[playerid] = 0;
							GivePlayerCash(playerid, money);
							if(PlayerInfo[playerid][pFarmSkill] <= 5)
							{
								if(PlayerInfo[playerid][pFarmRem] <= 0)
								{
									PlayerInfo[playerid][pFarmSkill]++;
									if(PlayerInfo[playerid][pFarmSkill] == 1) PlayerInfo[playerid][pFarmRem] = 16;
									else if(PlayerInfo[playerid][pFarmSkill] == 2) PlayerInfo[playerid][pFarmRem] = 32;
									else if(PlayerInfo[playerid][pFarmSkill] == 3) PlayerInfo[playerid][pFarmRem] = 64;
									else if(PlayerInfo[playerid][pFarmSkill] == 4) PlayerInfo[playerid][pFarmRem] = 128;
									else if(PlayerInfo[playerid][pFarmSkill] == 5) PlayerInfo[playerid][pFarmRem] = 256;
									format(string,sizeof(string),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pFarmSkill]);
									SCM(playerid, COLOR_YELLOW, string);
								}
							}
							PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Ai primit %s$ pentru kilogramele vandute.", FormatNumber(money));
							SCM(playerid,COLOR_GREEN,string);
							pUpdate(playerid,pFarmTimesx);
							pUpdate(playerid,pFarmRemx);
							pUpdate(playerid,pFarmSkillx);
						}
					}
					else if(BizzInfo[i][bType] == 8) SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /buyfightstyle.");
					else if(BizzInfo[i][bType] == 11) SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /buyskin, /buyglasses, /buyhat");
					else if(BizzInfo[i][bType] == 12 || BizzInfo[i][bType] == 13 || BizzInfo[i][bType] == 10 || BizzInfo[i][bType] == 16 || i == 20) return 1;
					else if(BizzInfo[i][bType] == 15)
					{
						new string1[10], string2[10], string3[10], string4[10];
						if(GetPlayerWantedLevelEx(playerid) != 0) return SCM(playerid,COLOR_WHITE,"Nu poti intra cand ai wanted.");
						if(PlayerInfo[playerid][pConnectTime] < 10) return SCM(playerid,COLOR_WHITE,"Nu poti intra in Arena de PaintBall daca nu ai macar 10 ore jucate.");
						if(paintm[1] == 1) format(string1,sizeof(string1),"rc_arena");
						if(paintm[1] == 2) format(string1,sizeof(string1),"tennis");
						if(paintm[1] == 3) format(string1,sizeof(string1),"farm");
						if(paintm[1] == 4) format(string1,sizeof(string1),"beach");
						if(paintm[1] == 5) format(string1,sizeof(string1),"lspd");
						//--------------------------------------------------------------
						if(paintm[2] == 1) format(string2,sizeof(string2),"rc_arena");
						if(paintm[2] == 2) format(string2,sizeof(string2),"tennis");
						if(paintm[2] == 3) format(string2,sizeof(string2),"farm");
						if(paintm[2] == 4) format(string2,sizeof(string2),"beach");
						if(paintm[2] == 5) format(string2,sizeof(string2),"lspd");
						//--------------------------------------------------------------
						if(paintm[3] == 1) format(string3,sizeof(string3),"rc_arena");
						if(paintm[3] == 2) format(string3,sizeof(string3),"tennis");
						if(paintm[3] == 3) format(string3,sizeof(string3),"farm");
						if(paintm[3] == 4) format(string3,sizeof(string3),"beach");
						if(paintm[3] == 5) format(string3,sizeof(string3),"lspd");
						//--------------------------------------------------------------
						if(paintm[4] == 1) format(string4,sizeof(string4),"rc_arena");
						if(paintm[4] == 2) format(string4,sizeof(string4),"tennis");
						if(paintm[4] == 3) format(string4,sizeof(string4),"farm");
						if(paintm[4] == 4) format(string4,sizeof(string4),"beach");
						if(paintm[4] == 5) format(string4,sizeof(string4),"lspd");
						format(string,sizeof(string),"Classic / Free For All [%d/20] [%s]\nClassic + Armour [%d/20] [%s]\nGun Game [%d/20] [%s]\nDeagle Only [%d/20] [%s]",paintp[1],string1,paintp[2],string2,paintp[3],string3,paintp[4],string4);
						SPD(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_LIST, "Arena de PaintBall:", string, "Select", "Close");
						return 1;
					}
					else if(BizzInfo[i][bType] == 17)
					{
						SCM(playerid,COLOR_WHITE,"INFO: Commands available in this business: /dice");
						YoutubeStream(playerid, "https://www.youtube.com/watch?v=FeIXvYGdJ_I");
					}	
					if(PlayerInfo[playerid][pBizzKey] != i && LastBizz[playerid] != i)
					{
						GivePlayerCash(playerid, -BizzInfo[i][bEntranceCost]);
						BizzInfo[i][bMoney] += BizzInfo[i][bEntranceCost];
						SaveBusiness(i);
					}
					else GameTextForPlayer(playerid, "welcome back", 5000, 1);
					SetPlayerInteriorEx(playerid,BizzInfo[i][bInterior]);
					SetPlayerVirtualWorld(playerid,i);
					SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
					BizzEntered[playerid] = i;
					LastBizz[playerid] = i;
					SetPVarInt(playerid, "EnteredTime", 7);
				}
				else return GameTextForPlayer(playerid, "~r~Nu ai suficienti bani", 5000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
			{
				if(BizzEntered[playerid] == i)
				{
					if(RobTime[playerid] == 1) return SCM(playerid,COLOR_LIGHT_BLUE,"Asteapta 10 secunde pentru a putea iesi!");
					if(PlayerInfo[playerid][pJailTime] > 0 && i == 3)
					{
						SCM(playerid,COLOR_LIGHT_BLUE,"Nu poti iesi deoarece esti la inchisoare!");
						new rand = random(sizeof(Inchisoare));
						SetPlayerPosEx(playerid,Inchisoare[rand][0],Inchisoare[rand][1],Inchisoare[rand][2]);
						return 1;
					}
					SetPlayerInteriorEx(playerid,0);
					SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					SetPlayerVirtualWorld(playerid,0);
					BizzEntered[playerid] = -1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,3.0, 1480.6665,-1767.3990,18.7958))
		{
			SetPlayerInteriorEx(playerid,3);
			SetPlayerPosEx(playerid,384.808624,173.804992,1008.382812);
			GameTextForPlayer(playerid, "~w~Welcome to the City Hall", 5000, 1);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0, -2111.5686,-443.9720,38.7344))
		{
			GameTextForPlayer(playerid, "~w~Welcome to the Dirt Track", 5000, 1);
			SetPlayerInteriorEx(playerid,4);
			SetPlayerPosEx(playerid,-1443.0554,-581.1879,1055.0472);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0, -2080.3079,-406.0309,38.7344))
		{
			GameTextForPlayer(playerid, "~w~Welcome to the Stunting Track", 5000, 1);
			SetPlayerInteriorEx(playerid,14);
			SetPlayerPosEx(playerid,-1464.7732,1557.5533,1052.5313);
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0, -1404.5299,-259.0602,1043.6563))
		{
			SetPlayerInteriorEx(playerid,0);
			SetPlayerPosEx(playerid,2695.6235,-1704.6960,11.8438);
		}
		else if(IsPlayerInRangeOfPoint(playerid,8.0, -1443.0554,-581.1879,1055.0472))
		{
			SetPlayerInteriorEx(playerid,0);
			SetPlayerPosEx(playerid,-2111.5686,-443.9720,38.7344);
		}
		else if(IsPlayerInRangeOfPoint(playerid,8.0, -1464.7732,1557.5533,1052.5313))
		{
			SetPlayerInteriorEx(playerid,0);
			SetPlayerPosEx(playerid,-2080.3079,-406.0309,38.7344);
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0, 286.2129,-30.0218,1001.5156))//gunshopin1
		{
			SetPlayerInteriorEx(playerid,1);
			SetPlayerPosEx(playerid,286.0565,-23.4368,1001.5229);
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0, 286.0565,-23.4368,1001.5229))//gunshopex1
		{
			SetPlayerInteriorEx(playerid,1);
			SetPlayerPosEx(playerid,286.2129,-30.0218,1001.5156);
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,306.3999,-159.0712,999.5938))//gunshopin2
		{
			SetPlayerInteriorEx(playerid, 6);
			SetPlayerPosEx(playerid, 297.9745,-169.3398,999.5938);
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,297.9745,-169.3398,999.5938))//gunshopex2
		{
			SetPlayerInteriorEx(playerid, 6);
			SetPlayerPosEx(playerid, 306.3999,-159.0712,999.5938);
		}
		if(IsACop(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid,1.0,246.396865,87.863830,1003.640625))
			{
				SetPlayerPosEx(playerid,1572.044433,-1675.611938,28.395452);
				SetPlayerInteriorEx(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				FactionEntered[playerid] = -1;
				GameTextForPlayer(playerid, "~w~Acoperis Departament Poilitie", 5000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid,1.0, 242.248916,66.478530,1003.640625))
			{
				SetPlayerInteriorEx(playerid,0);
				SetPlayerPosEx(playerid,1524.921142,-1678.078857,5.890625);
				SetPlayerFacingAngle(playerid,84.7536);
				GameTextForPlayer(playerid, "~w~garaj", 5000, 1);
				SetPlayerVirtualWorld(playerid,0);
				FactionEntered[playerid] = -1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,1.0,1572.044433,-1675.611938,28.395452))
			{
				SetPlayerPosEx(playerid,246.396865,87.863830,1003.640625);
				SetPlayerInteriorEx(playerid,6);
				FactionEntered[playerid] = 1;
				GameTextForPlayer(playerid, "~w~ Departament Politie", 5000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid,1.0, 1524.921142,-1678.078857,5.890625))
			{
				SetPlayerInteriorEx(playerid,6);
				SetPlayerPosEx(playerid,242.248916,66.478530,1003.640625);
				SetPlayerFacingAngle(playerid,84.7536);
				GameTextForPlayer(playerid, "~w~politie", 5000, 1);
				FactionEntered[playerid] = 1;
			}
		}
	}
	return 1;
}
//==============================================================================
public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerDrunkLevel(playerid) < 100) SetPlayerDrunkLevel(playerid, 2000);
		else
		{
	        if(pDrunkLevelLast[playerid] != GetPlayerDrunkLevel(playerid))
	 		{
	            new wfps = pDrunkLevelLast[playerid] - GetPlayerDrunkLevel(playerid);
	            if(wfps > 0 && wfps < 999) FPS[playerid] = wfps;
	            pDrunkLevelLast[playerid] = GetPlayerDrunkLevel(playerid);
	        }
	    }
	}
    return 1;
}
//==============================================================================
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(IsAnOwnableCar(vehicleid))
	{
		new vsid = FindSpawnID(vehicleid);
		GetVehicleDamageStatus(vehicleid, CarInfo[vsid][cDamage][0], CarInfo[vsid][cDamage][1], CarInfo[vsid][cDamage][2], CarInfo[vsid][cDamage][3]);
		vUpdate(vsid, cDamagex);
	}
	return 1;
}
//==============================================================================
/*public OnPlayerCarTroll(playerid, vehicleid, trolledid, trolltype)
{
	new string[250];
	format(string, sizeof(string), "AdmWarning: %s (ID: %d, VID: %d) este posibil sa foloseasta Troll-Hack.", GetName(playerid), playerid, vehicleid);
	SendAdminMessage(string,1);
	return 1;
}*/
//==============================================================================
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
    	new skin = GetPlayerSkin(playerid), Float:distance = GetDistanceBetweenPoints(fOffsetX,fOffsetY,fOffsetZ,SkinCaps[skin][0],SkinCaps[skin][1],SkinCaps[skin][2]);
		if(distance > 0.15)
		{
			SCM(playerid,COLOR_YELLOW2,"Obiectul este prea departe de tine.");
			SetPlayerAttachedObject(playerid, 1, PlayerInfo[playerid][pHat], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3], SkinCaps[skin][4], SkinCaps[skin][5], 1.000, 1.000, 1.000);
			return 1;
        }
		/*new string[64];
		format(string,sizeof(string),"objects/EditObjectSkin[%d].ini",PlayerInfo[playerid][pSkin]);
		new INI:File = INI_Open(string);
		INI_SetTag(File, "coordonate");
		INI_WriteInt(File, "playerid", playerid);
		INI_WriteInt(File, "response", response);
		INI_WriteInt(File, "index", index);
		INI_WriteInt(File, "modelid", modelid);
		INI_WriteInt(File, "boneid", boneid);
		INI_WriteFloat(File, "fOffsetX", fOffsetX);
		INI_WriteFloat(File, "fOffsetY", fOffsetY);
		INI_WriteFloat(File, "fOffsetZ", fOffsetZ);
		INI_WriteFloat(File, "fRotX", fRotX);
		INI_WriteFloat(File, "fRotY", fRotY);
		INI_WriteFloat(File, "fRotZ", fRotZ);
		INI_WriteFloat(File, "fScaleX", fScaleX);
		INI_WriteFloat(File, "fScaleY", fScaleY);
		INI_WriteFloat(File, "fScaleZ", fScaleZ);
		INI_Close(File);
		SCM(playerid, COLOR_GREEN, "Attached object edition saved.");*/
    }
    return 1;
}
//==============================================================================
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new string[64];
	for(new i = 0; i < MAX_PICKUPS; i++) 
	{		
		if(pickupid == DropInfo[i][dID] && DropInfo[i][dID] != -1) 
		{	
			format(string, sizeof(string), "Ai gasit pe jos un %s cu %d gloante.", GetWeaponNameEx(DropInfo[i][dWeapon]), DropInfo[i][dAmmo]);
			SCM(playerid, 0xFFC2C2FF, string);
			GivePlayerWeaponEx(playerid, DropInfo[i][dWeapon], DropInfo[i][dAmmo]);		
			DestroyDynamicPickup(DropInfo[i][dID]);
			DropInfo[i][dID] = -1;
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 10.0);	
		}	
	}
	return 1;
}
//==============================================================================
public OnRconLoginAttempt(ip[], password[], success)
{
	new pip[16], string[256];
    if(!success)
    {
        foreach(new i: Player)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(strcmp(ip, pip, true) == 0)
           	{
		        format(string,sizeof(string),"AdmWarning: %s (ID: %d) a incercat sa se logheze ca RCON (IP: %s).",GetName(i),i,ip);
                SendAdminMessage(string,1);
				Logs("RconLogin.log",PlayerInfo[i][pNamePlayer],string);
				return 1;
            }
        }
    }
    else if(success)
    {
        foreach(new i: Player)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(strcmp(ip, pip, true) == 0)
           	{
		        format(string,sizeof(string),"AdmInfo: %s (ID: %d) s-a conectat cu succes ca RCON (IP: %s).",GetName(i),i,ip);
                SendAdminMessage(string,1);
				Logs("RconLogin.log",PlayerInfo[i][pNamePlayer],string);
				return 1;
            }
        }
	}
    return 1;
}
//==============================================================================
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new string[256];
	if(IsWeaponWithAmmo(weaponid) && weaponid != 38)
	{
		new count = 0;
		if(weaponid != CurrentWeapon[playerid]) 
		{
			CurrentWeapon[playerid] = weaponid;
			CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid, weaponid);
			count++;
		}
		if(GetPlayerWeaponAmmo(playerid,weaponid) > CurrentAmmo[playerid] || GetPlayerWeaponAmmo(playerid,weaponid) < CurrentAmmo[playerid])
		{
			CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid);
			NoReloading[playerid] = 0;
			count++;
		}
		if(GetPlayerWeaponAmmo(playerid,weaponid) != 0 && GetPlayerWeaponAmmo(playerid,weaponid) == CurrentAmmo[playerid] && count == 0)
		{
			NoReloading[playerid]++;
			if(NoReloading[playerid] >= 5)
			{
				NoReloading[playerid] = 0;
				CurrentWeapon[playerid] = 0;
				CurrentAmmo[playerid] = 0;
				format(string,sizeof(string),"AdmWarning: %s (ID: %d) este posibil sa foloseasca No-Reload Hack!",GetName(playerid),playerid);
				SendAdminMessage(string,1);
				return 0;
			}
		}
	}
	if(weaponid != 38 && weaponid > 18 && weaponid < 34 && hittype == BULLET_HIT_TYPE_PLAYER)
	{
		new Float:cood[6], Float:DistantaAim;
		GetPlayerPos(hitid,cood[0],cood[1],cood[2]); 
		DistantaAim = GetPlayerDistanceFromPoint(playerid,cood[0],cood[1],cood[2]);
		if(GetPlayerTargetPlayer(playerid) == INVALID_PLAYER_ID && DistantaAim > 1 && DistantaAim < 31)
		{
			SilentAimCount[playerid]++;
			if(SilentAimCount[playerid] >= 10)
			{
				SilentAimCount[playerid] = 0;
				format(string, sizeof(string), "AdmWarning: %s (ID: %d) este posibil sa foloseasca Aimbot-Hack, %s (Distanta: %f metri)",GetName(playerid),playerid,GetWeaponNameEx(weaponid),DistantaAim);
				SendAdminMessage(string, 1);
			}
			return 1;
		}
		GetPlayerLastShotVectors(playerid, cood[0],cood[1],cood[2], cood[3],cood[4],cood[5]);
		if(!IsPlayerInRangeOfPoint(hitid, 3.0, cood[3],cood[4],cood[5])) 
		{
			ProAimCount[playerid]++;
			if(ProAimCount[playerid] >= 5)
			{
				ProAimCount[playerid] = 0;
				format(string, sizeof(string), "AdmWarning: %s (ID: %d) este posibil sa foloseasca Aimbot-Hack, %s (Distanta: %f metri)",GetName(playerid),playerid,GetWeaponNameEx(weaponid),DistantaAim);
				SendAdminMessage(string, 1);
			}
		}
	}
	if(TakingLesson[playerid] == 2)
	{
		if(GetPlayerAmmo(playerid) == 1)
		{
			SCM(playerid,COLOR_LICENSES,"* Ai picat testul pentru ca ai ramas fara gloante!");
			TakingLesson[playerid] = 0;
			Point[playerid] = 0;
			ResetPlayerWeaponsEx(playerid);
			SetPlayerInteriorEx(playerid,3);
			SetPlayerVirtualWorld(playerid,15);
			SetPlayerPosEx(playerid,-2026.8217,-114.3419,1035.1719);
			DestroyPlayerObject(playerid, Glass[0][playerid]);
			DestroyPlayerObject(playerid, Glass[1][playerid]);
			DestroyPlayerObject(playerid, Glass[2][playerid]);
			DestroyPlayerObject(playerid, Glass[3][playerid]);
			DestroyPlayerObject(playerid, Glass[4][playerid]);
			DestroyPlayerObject(playerid, Glass[5][playerid]);
			DestroyPlayerObject(playerid, Glass[6][playerid]);
			return 1;
		}
		if(hittype == BULLET_HIT_TYPE_PLAYER_OBJECT)
		{
			if(hitid == Glass[0][playerid] || hitid == Glass[1][playerid] || hitid == Glass[2][playerid] || hitid == Glass[3][playerid] || hitid == Glass[4][playerid] || hitid == Glass[5][playerid] || hitid == Glass[6][playerid]) {
				Point[playerid]++;
			}
			if(Point[playerid] == 7)
			{
				Point[playerid] = 0;
				TakingLesson[playerid] = 0;
				SCM(playerid, COLOR_LIGHTBLUE, "{ee5555}Felicitari!{a9c4e4} Ai terminat testul si ai fost taxat cu {ee5555}$45,000{a9c4e4}!");
				GivePlayerCash(playerid, -45000);
				PlayerInfo[playerid][pGunLic] = 100;
				BizzInfo[BizzEntered[playerid]][bMoney] += 13500;
				SaveBusiness(BizzEntered[playerid]);
				ResetPlayerWeaponsEx(playerid);
				SetPlayerInteriorEx(playerid,3);
				SetPlayerVirtualWorld(playerid,15);
				SetPlayerPosEx(playerid,-2026.8217,-114.3419,1035.1719);
				OnPlayerUpdateEx(playerid);
				DestroyPlayerObject(playerid, Glass[0][playerid]);
				DestroyPlayerObject(playerid, Glass[1][playerid]);
				DestroyPlayerObject(playerid, Glass[2][playerid]);
				DestroyPlayerObject(playerid, Glass[3][playerid]);
				DestroyPlayerObject(playerid, Glass[4][playerid]);
				DestroyPlayerObject(playerid, Glass[5][playerid]);
				DestroyPlayerObject(playerid, Glass[6][playerid]);
				SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$\n", "Cumpara", "Iesi");
			}
		}
	}
   	return 0;
}
//==============================================================================
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid) 
{
	if(newinteriorid == 0) SetPlayerWeather(playerid, Weather);
	else SetPlayerWeather(playerid, 1);
	//--------------------------------------------------------------
	if(Spectate[playerid] == INVALID_PLAYER_ID) 
	{
		SetPlayerInteriorEx(playerid, newinteriorid);
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}
//==============================================================================
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(response)
	{
		new string[MAX_STRING];
		if(listid == skincivil)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skingrove)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinrusian)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinazt)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinnews)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinhit)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinpd)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinfbi)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinmedic)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skintaxi)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinballas)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == skinvagos)
		{
			SCM(playerid, COLOR_GRAD2, "Ti-ai schimbat skinul pentru 5000$.");
			SetPlayerSkinEx(playerid, modelid);
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
		}
		else if(listid == glasseslist)
		{
			new skin = GetPlayerSkinEx(playerid);
			PlayerInfo[playerid][pGlasses] = modelid;
			SetPlayerAttachedObject(playerid, 2, modelid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5], 1.000, 1.000, 1.000);
			SCM(playerid, COLOR_GRAD2, "Ai cumparat o pereche de ochelari pentru 5000$.");
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Glasses`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGlasses], PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, string);
		}
		else if(listid == carlist)
		{
			SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Info:","Nu vei avea control asupra vehiculului, orice persoana ti-l poate fura.\n{ccffff}Nu te costa nimic dar acest vehicul se va distruge la payday.\n{ff6633}Ai grija de vehicul!","Ok","");
			new rand = random(sizeof(CarSpawn)), car = CreateVehicleEx(modelid, CarSpawn[rand][0], CarSpawn[rand][1], CarSpawn[rand][2], CarSpawn[rand][3], 193, 193, 600);
			SetPlayerCheckpointEx(playerid, CarSpawn[rand][0] ,CarSpawn[rand][1], CarSpawn[rand][2], 5.0);
			SCM(playerid,COLOR_ORANGE,"Ti-am setat un checkpoint cu locatia masinii, grabeste-te pana nu ti-o ia cineva!");
			SetVehicleNumberPlate(car,GetName(playerid));
			SpawnCar[car] = 1;
			Spawner[playerid] = 1;
			GivePlayerCash(playerid, -500);
			BizzInfo[BizzEntered[playerid]][bMoney] += 500;
		}
		else if(listid == hatlist)
		{
			new skin = GetPlayerSkinEx(playerid);
			PlayerInfo[playerid][pHat] = modelid;
			SetPlayerAttachedObject(playerid, 1, modelid, 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5]);
			SCM(playerid, COLOR_GRAD2, "Ai cumparat o palarie pentru 5000$.");
			GivePlayerCash(playerid, -5000);
			BizzInfo[BizzEntered[playerid]][bMoney] += 5000;
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Hat`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHat], PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, string);
		}
	}
	return 1;
}
//==============================================================================
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID)
    {
        if(amount < 0)
		{
			new string[256];
			format(string, sizeof(string), "AdmWarning: %s (ID: %d, Level: %d) can use global kill, damage: %.2f.",GetName(issuerid),issuerid,GetPlayerScoreEx(issuerid),amount);
            SendAdminMessage(string, 1);
		}
		if(weaponid == 54 && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER)
		{
		    if(playerdeath[issuerid] == 0)
		    {
				new Float:HP, Float:AP, Float:remainHP;
			 	GetPlayerHealthEx(issuerid, HP);
			 	GetPlayerArmourEx(issuerid, AP);
				if(AP >= amount)
				{
					SetPlayerArmourEx(issuerid, AP - amount);
					SetPlayerHealthEx(issuerid, HP);
				}
				else if(AP <= 0)
				{
					remainHP = HP - amount;
					SetPlayerHealthEx(issuerid, remainHP);
					if(remainHP <= 0 && playerdeath[issuerid] == 0)
					{
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerdeath[playerid] = 1;
					}
				}
				else
				{
					remainHP = HP + (AP - amount);
					SetPlayerArmourEx(issuerid, 0.0);
					SetPlayerHealthEx(issuerid, remainHP);
					if(remainHP <= 0 && playerdeath[issuerid] == 0)
					{
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerdeath[issuerid] = 1;
					}
				}
			}
		}
		if(weaponid == 49 || weaponid == 50 || weaponid == 51 || weaponid == 52 || weaponid == 53 || weaponid == 54 || GetPlayerState(issuerid) == PLAYER_STATE_DRIVER)
		{
			if(playerdeath[playerid] == 0)
			{
				new Float:HP, Float:AP, Float:remainHP;
				GetPlayerHealthEx(playerid, HP);
				GetPlayerArmourEx(playerid, AP);
				if(AP >= amount)
				{
					SetPlayerArmourEx(playerid, AP - amount);
					SetPlayerHealthEx(playerid, HP);
				}
				else if(AP <= 0)
				{
					remainHP = HP - amount;
					SetPlayerHealthEx(playerid, remainHP);
					if(remainHP <= 0 && playerdeath[playerid] == 0)
					{
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerdeath[playerid] = 1;
					}
				}
				else
				{
					remainHP = HP + (AP - amount);
					SetPlayerArmourEx(playerid, 0.0);
					SetPlayerHealthEx(playerid, remainHP);
					if(remainHP <= 0 && playerdeath[playerid] == 0)
					{
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerdeath[playerid] = 1;
					}
				}
			}
		}
	}
	else
	{
		new Float:HP, Float:AP, Float:remainHP;
		GetPlayerHealthEx(playerid, HP);
		GetPlayerArmourEx(playerid, AP);
		if(AP >= amount)
		{
			SetPlayerArmourEx(playerid, AP - amount);
			SetPlayerHealthEx(playerid, HP);
		}
		else if(AP <= 0)
		{
			remainHP = HP - amount;
			SetPlayerHealthEx(playerid, remainHP);
			if(remainHP <= 0 && playerdeath[playerid] == 0)
			{
				OnPlayerDeath(playerid, INVALID_PLAYER_ID, weaponid);
				playerdeath[playerid] = 1;
			}
		}
		else
		{
			remainHP = HP + (AP - amount);
			SetPlayerArmourEx(playerid, 0.0);
			SetPlayerHealthEx(playerid, remainHP);
			if(remainHP <= 0 && playerdeath[playerid] == 0)
			{
				OnPlayerDeath(playerid, INVALID_PLAYER_ID, weaponid);
				playerdeath[playerid] = 1;
			}
		}
	}
	return 1;
}
//==============================================================================
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(damagedid != INVALID_PLAYER_ID)
    {
		if(playerdeath[damagedid] == 0)
		{
			if(weaponid == 34)
		    {
		        SetPlayerHealthEx(damagedid, 0.0);
		        SetPlayerArmourEx(damagedid, 0.0);
		        OnPlayerDeath(damagedid, playerid, weaponid);
				playerdeath[damagedid] = 1;
				return 1;
		    }
		 	new Float:HP, Float:AP;
			GetPlayerHealthEx(damagedid, HP);
			GetPlayerArmourEx(damagedid, AP);
			if(AP >= amount) {
				SetPlayerArmourEx(damagedid, AP - amount);
			}
			else if(AP <= 0)
			{
				new const Float:remainHP = HP - amount;
				SetPlayerHealthEx(damagedid, remainHP);
				if(remainHP <= 0)
				{
					OnPlayerDeath(damagedid, playerid, weaponid);
					playerdeath[damagedid] = 1;
				}
			}
			else
			{
				new const Float:remainHP = HP + (AP - amount);
				SetPlayerArmourEx(damagedid, 0.0);
				SetPlayerHealthEx(damagedid, remainHP);
				if(remainHP <= 0)
				{
					OnPlayerDeath(damagedid, playerid, weaponid);
					playerdeath[damagedid] = 1;
				}
			}
			if(PlayerPaintballing[damagedid] != 0 && PlayerPaintballing[playerid] != 0) PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
			new fpm = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
			new fkm = PlayerInfo[damagedid][pMember] + PlayerInfo[damagedid][pLeader];
			for(new turf = 1; turf < MAX_TURFS; turf++)
			{
				if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(damagedid, turf))
				{
					if(IsAGangMember(playerid) && IsAGangMember(damagedid))
					{
						if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm) {
							PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
						}
					}
				}
			}
			if(Sleeping[playerid] == 1) SetPlayerHealthEx(damagedid, 100);
			if((BizzEntered[playerid] == 32 || IsPlayerInRangeOfPoint(playerid, 10.0, GiftInfo[gLocationX], GiftInfo[gLocationY], GiftInfo[gLocationZ])) && Wartimeon[fpm] == 0 && !IsACop(playerid))
			{
				SetPlayerArmedWeapon(playerid, 0);
			    SCM(playerid,COLOR_WHITE,"{00ff00}Nu ai voie sa faci DM in SafeZone, ai fost inghetat pentru 5 secunde!");
			    TogglePlayerControllable(playerid, false);
			    SetPlayerHealthEx(damagedid, 100);
				SetTimerEx_("DMZone", 5000, 5000, 1, "i", playerid);
			}
		}
	}
    return 1;
}
//==============================================================================
public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(GetPlayerInteriorEx(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    {
		new string[256];
		format(string,sizeof(string), "AdmWarning: %s (ID: %d, VID: %d) este posibil sa foloseasca Vehicle-Tuning-Hack!",GetName(playerid),playerid,vehicleid);
		SendAdminMessage(string,1);
		RemoveVehicleComponent(vehicleid,componentid);
    }
    if(IsAnOwnableCar(vehicleid) && (GetPlayerInterior(playerid) == 1 || GetPlayerInterior(playerid) == 3)) SaveComponent(vehicleid, componentid);
    return 1;
}
//==============================================================================
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(IsAnOwnableCar(vehicleid))
	{
		CarInfo[FindSpawnID(vehicleid)][cPaintJ] = paintjobid;
		vUpdate(FindSpawnID(vehicleid), cPaintJx);
	}
	for(new m = 0; m < 2; m++) {
		if(PlayerInfo[playerid][pQuest][m] == 13 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 411) CheckQuest(playerid, m);
	}
	return 1;
}
//==============================================================================
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SetVehicleHealth(vehicleid, 999.9);
	for(new m = 0; m < 2; m++) {
		if(PlayerInfo[playerid][pQuest][m] == 13 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 411) CheckQuest(playerid, m);
	}
    return 1;
}
//==============================================================================
public OnVehicleDeath(vehicleid, killerid)
{
    if(IsAnOwnableCar(vehicleid))
 	{
 	    new vsid = FindSpawnID(vehicleid);
        if(CarInfo[vsid][cOwned] == 1)
        {
            CarInfo[vsid][cInscarprice] += 200 + random(150);
     	 	if(CarInfo[vsid][cInsurancecar] != 0) {
				CarInfo[vsid][cInsurancecar]--;
    	 	}
			vUpdate(vsid, cInscarpricex);
			vUpdate(vsid, cInsurancecarx);
		}
		CarInfo[vsid][cHealth] = 999.9;
		CarInfo[vsid][cDamage][0] = 0;
		CarInfo[vsid][cDamage][1] = 0;
		CarInfo[vsid][cDamage][2] = 0;
		CarInfo[vsid][cDamage][3] = 0;
		CarInfo[vsid][cLastX] = 0.0;
		CarInfo[vsid][cLastY] = 0.0;
		CarInfo[vsid][cLastZ] = 0.0;
		CarInfo[vsid][cLastA] = 0.0;
		vUpdate(vsid, cDamagex);
		vUpdate(vsid, cHealthx);
 	}
	else 
	{
		if(CreateCar[vehicleid] == vehicleid && !IsVehicleOccupied(vehicleid))
		{
			DestroyVehicleEx(vehicleid);
			CreateCar[vehicleid] = -1;
		}
		Gas[vehicleid] = 100.5;
		SetVehicleHealth(vehicleid, 999.9);
	}
 	EngineSTATE[vehicleid] = 0;
 	LightsSTATE[vehicleid] = 0;
 	CarRadio[vehicleid] = sizeof(RadioName)+1;
	return 1;
}
//==============================================================================
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit == 0)
    {
		GivePlayerCash(playerid, -BizzInfo[NearToBizz(playerid)][bEntranceCost]);
		BizzInfo[NearToBizz(playerid)][bMoney] += BizzInfo[NearToBizz(playerid)][bEntranceCost];
		SaveBusiness(NearToBizz(playerid));
		RepairVehicle(GetPlayerVehicleID(playerid));
		SetVehicleHealth(GetPlayerVehicleID(playerid), 999.9);
		for(new m = 0; m < 2; m++) {
			if(PlayerInfo[playerid][pQuest][m] == 13 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 411) CheckQuest(playerid, m);
		}
    }
    return 1;
}
//==============================================================================
public OnPlayerStreamIn(playerid, forplayerid)
{
	new iswar = 0, attackers, defenders;
	new playerPlayer = PlayerInfo[playerid][pLeader] + PlayerInfo[playerid][pMember];
	new forPlayer = PlayerInfo[forplayerid][pLeader] + PlayerInfo[forplayerid][pMember];
	for(new i = 1; i < MAX_TURFS && iswar == 0; i++)
	{
		attackers = WarInfo[i][wAttacker];
		defenders = WarInfo[i][wFaction];
		if(WarInfo[i][wTime] > 1 && attackers != 0 && defenders != 0) {
			if((playerPlayer == attackers || playerPlayer == defenders) && (forPlayer == attackers || forPlayer == defenders)) iswar = 1;
		}
	}
	if(iswar == 1)
	{
		if((playerPlayer == attackers || playerPlayer == defenders) && (forPlayer == attackers || forPlayer == defenders))
		{
			SetPlayerMarkerForPlayer(playerid, forplayerid, GetPlayerColor(forplayerid));
			SetPlayerMarkerForPlayer(forplayerid, playerid, GetPlayerColor(playerid));
		}
		else
		{
			SetPlayerMarkerForPlayer(playerid, forplayerid, (GetPlayerColor(forplayerid) & 0xFFFFFF00));
			SetPlayerMarkerForPlayer(forplayerid, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
		}
	}
	else if(PlayerPaintballing[playerid] != 0 && PlayerPaintballing[forplayerid] != 0)
	{
		if(GetPlayerTeam(playerid) == 2) SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_PD);
		else if(GetPlayerTeam(playerid) == 1) SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_ORANGE);
	}
	else
	{
		SetPlayerMarkerForPlayer(playerid, forplayerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
		SetPlayerMarkerForPlayer(forplayerid, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
	}
	return 1;
}
//==============================================================================
public OnPlayerStreamOut(playerid, forplayerid)
{
	SetPlayerMarkerForPlayer(playerid, forplayerid, (GetPlayerColor(forplayerid) & 0xFFFFFF00));
	SetPlayerMarkerForPlayer(forplayerid, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
	return 1;
}
//==============================================================================
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(IsPlayerScripter(playerid))
	{
	    if(GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ+5);
		else SetPlayerPosFindZ(playerid, fX, fY, fZ+5);
	}
    return 1;
}
//==============================================================================
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(PinStep[playerid] >= 1)
		{
			CancelSelectTextDraw(playerid);
			HidePinTextDraws(playerid);
			format(InputtText[playerid], 5, "");
			PinStep[playerid] = 0;
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
		}
		if(Used[playerid] == false) return 1;
		if(Used[playerid] == true)
		{
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			HideTDMenu(playerid);
			Used[playerid] = false;
			CancelSelectTextDraw(playerid);
			PlayerPlaySound(playerid,1084,0.0,0.0,0.0);
		}
	}
	return 1;
}
//==============================================================================
public OnGameModeExit()
{
	mysql_query(SQL, "UPDATE `users` SET `Status` = '0'");
    mysql_close(SQL);
    return 1;
}
//==============================================================================
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new szQuery[256];
	if(playertextid == VehicleInfoTD[5])
	{
		CancelSelectTextDraw(playerid);
		HideTDMenu(playerid);
	}
	if(playertextid == PinNumber[0])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s0", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[1])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s1", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[2])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s2", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[3])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s3", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[4])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s4", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[5])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s5", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[6])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s6", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[7])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s7", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[8])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s8", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == PinNumber[9])
	{
		if(strlen(InputtText[playerid]) < 4) format(InputtText[playerid], 10, "%s9", InputtText[playerid]), UpdatePinResult(playerid), PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == RedButton)
	{
		InputtText[playerid] = "", PlayerTextDrawSetString(playerid, PinResult, "");
		if(strval(InputtText[playerid]) < 4) PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
	}
	if(playertextid == GreenButton)
	{
		if(strlen(InputtText[playerid]) < 4) return 1;
		if(strlen(PlayerInfo[playerid][pPin]) == 1)
		{
			StrmidEx(PlayerInfo[playerid][pPin], InputtText[playerid]);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `Pin`='%s' WHERE `name`='%s'", PlayerInfo[playerid][pPin], PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, szQuery);
			SCM(playerid, COLOR_WHITE, "{FFFF45}Ai setat codul de securitate al contului.");
		}
		else if(PinStep[playerid] == 2)
		{
			if(strval(PlayerInfo[playerid][pPin]) == strval(InputtText[playerid]))
			{
				PinStep[playerid] = 3;
				PlayerInfo[playerid][pPinLogged] = 1;
				SCM(playerid, COLOR_WHITE, "{FFFF45}Te-ai autentificat cu succes. Te rog sa introduci noul cod PIN.");
				PlayerInfo[playerid][pPinLogged] = 1;
				InputtText[playerid] = "", PlayerTextDrawSetString(playerid, PinResult, "");
				return 1;
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "{CC0000}EROARE: Cod de securitate invalid.");
				InputtText[playerid] = "", PlayerTextDrawSetString(playerid, PinResult, "");
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 10.0);
				return 1;
			}
		}
		else if(PinStep[playerid] == 3)
		{
			if(strlen(InputtText[playerid]) < 4) return 1;
			strmid(PlayerInfo[playerid][pPin], InputtText[playerid], 0, strlen(InputtText[playerid]), 255);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `Pin`='%s' WHERE `name`='%s'", PlayerInfo[playerid][pPin], PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, szQuery);
			SCM(playerid, COLOR_WHITE, "{FFFF45}Ai setat codul de securitate al contului.");
			HidePinTextDraws(playerid), CancelSelectTextDraw(playerid);
			PlayerInfo[playerid][pPinLogged] = 1;
		}
		else if(strlen(PlayerInfo[playerid][pPin]) != 0)
		{
			if(strval(PlayerInfo[playerid][pPin]) == strval(InputtText[playerid]))
			{
				PlayerInfo[playerid][pPinLogged] = 1;
				SCM(playerid, COLOR_WHITE, "{FFFF45}Ai validat codul de securitate al contului.");
				PlayerInfo[playerid][pPinLogged] = 1;
			}
			else return SCM(playerid, COLOR_WHITE, "{CC0000}EROARE: Cod de securitate invalid.");
		}
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
		PinStep[playerid] = 0, HidePinTextDraws(playerid), CancelSelectTextDraw(playerid);
	}
	return 1;
}
//==============================================================================
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(IsValidVehicle(vehicleid) && IsPlayerConnected(playerid))
	{
		if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 80)
		{
			WarningsCheat[playerid][vspawner] += 1;
			if(WarningsCheat[playerid][vspawner] >= 5 && gPlayerLogged[playerid] == true)
			{
				new string[256];
				format(string, sizeof(string), "AdmWarning: %s (ID: %d, VID: %d) e posibil sa foloseasca Vehicle-Spawner-Hack!", PlayerInfo[playerid][pNamePlayer], playerid, vehicleid);
				SendAdminMessage(string, 1);
			}
			SetVehiclePos(vehicleid, LastVPos[vehicleid][0], LastVPos[vehicleid][1], LastVPos[vehicleid][2]);
			SetVehicleZAngle(vehicleid, LastVPos[vehicleid][3]);
		}
	}
    return 0;
}
//==============================================================================
public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	if(errorid == 2003)
	{		
		foreach(new i: Player)
		{
			if(gPlayerLogged[i] == true)
			{
				SCM(i, COLOR_SCRIPTER, "SERVER: Ai primit kick deoarece sunt probleme tehnice cu baza de date!");
				SCM(i, COLOR_SCRIPTER, "SERVER: Revenim cat mai repede posibil. Nu exista un termen anume.");
				KickEx(i);
			}	
		}
		return 1;
	}
	print(" ");
	print("--------------------------------------------------------------------");
	printf("  Error ID: %d", errorid);
	printf("  Error: %s", error);
	printf("  Callback: %s", callback);
	printf("  gQuery: %s", query);
	print("--------------------------------------------------------------------");
	print(" ");
	return 1;
}
//==============================================================================
GasesteReclama(const text[])
{
	if(strfind(text, "bzone", true) != -1 || strfind(text, "buged", true) != -1 || strfind(text, "b-zone", true) != -1 || strfind(text, "bugged", true) != -1 || strfind(text, "nephrite", true) != -1) return 1;
	else return 0;
}
//==============================================================================
IsABike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 481, 509, 510: return 1;
	}
	return 0;
}
//==============================================================================
IsAMotorbike(carid) {
	switch(GetVehicleModel(carid)) {
		case 448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 568, 571, 581, 586: return 1;
	}
	return 0;
}
//==============================================================================
IsABoat(carid)
{
	switch(GetVehicleModel(carid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}
//==============================================================================
IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 1;
	}
	return 0;
}
//==============================================================================
stock TicketValue(id)
{
	if(id == 0) return 9500;
	else if(id == 1) return 9000;
	else if(id == 2) return 8000;
	else if(id == 3) return 9700;
	else if(id == 4) return 8200;
	else if(id == 5) return 13000;
	else return 0;
}
//==============================================================================
SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)
{
	WarningsCheat[playerid][teleport]++;
	SetPlayerPos(playerid, x,y,z);
	GetPlayerPos(playerid, LastPosX[playerid], LastPosY[playerid], LastPosZ[playerid]);
	SetCameraBehindPlayer(playerid);
	return 1;
}
//==============================================================================
GetDays(timestamp) return ((gettime() - timestamp) / 86400);
//==============================================================================
FinishQuest(playerid, const questname[])
{
	new string[256], money = random(2500)*GetPlayerScoreEx(playerid)+10000;
	GivePlayerCash(playerid,money);
	PlayerInfo[playerid][pGold] += 5;
	PlayerInfo[playerid][pExp] += 1;
	format(string,sizeof(string),"Ai terminat misiunea [%s], ai primit 5 gold, 1 respect point si %s$.",questname,FormatNumber(money));
	SCM(playerid,COLOR_QUEST,string);
	return 1;
}
//==============================================================================
MesajLicitatie(color, const string[]) 
{
	foreach(new i: Player)
	{
		if(Licitatie == 1) {
			if(TogBid[i] == true) SCM(i, color, string);
		}
	}
	return 1;
}
//==============================================================================
SetPlayerTeamColor(playerid)
{
	switch(GetPlayerFaction(playerid))
	{
		case 0: SetPlayerColor(playerid, TEAM_HIT_COLOR);
		case 1: SetPlayerColor(playerid, COLOR_PD);
		case 2: SetPlayerColor(playerid, COLOR_FBI);
		case 3: SetPlayerColor(playerid, COLOR_NG);
		case 4: SetPlayerColor(playerid, COLOR_MEDIC);
		case 5: SetPlayerColor(playerid, TEAM_AZTECAS_COLOR);
		case 6: SetPlayerColor(playerid, TEAM_RUSSIAN_COLOR);
		case 7: SetPlayerColor(playerid, COLOR_MAYOR);
		case 8: SetPlayerColor(playerid, COLOR_HITMAN);
		case 9: SetPlayerColor(playerid, COLOR_NEWS);
		case 10: SetPlayerColor(playerid, COLOR_YELLOW);
		case 11: SetPlayerColor(playerid, TEAM_GROVE_COLOR);
		case 12: SetPlayerColor(playerid, TEAM_VAGOS_COLOR);
		case 13: SetPlayerColor(playerid, TEAM_BALLAS_COLOR);
		case 14: SetPlayerColor(playerid, COLOR_BLOOD);
	}
	if(GetPlayerTeam(playerid) == 5 && PlayerPaintballing[playerid] != 0) SetPlayerColor(playerid, COLOR_ORANGE);
	return 1;
}
//==============================================================================
SetPlayerToTeam(playerid)
{
	switch(GetPlayerFaction(playerid))
	{
		case 0, 4, 7 .. 10, 14: SetPlayerTeam(playerid, 1);
		case 1, 2, 3: SetPlayerTeam(playerid, 2);
		case 5, 6, 11, 12, 13: SetPlayerTeam(playerid, 3);
	}
	return 1;
}
//==============================================================================
PutPlayerInVehicleEx(playerid, vehicleid, seatid = 0)
{
	WarningsCheat[playerid][teleport]++;
	PlayerEnterTime[playerid] += 221;
	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}
//==============================================================================
RemovePlayerFromVehicleEx(playerid)
{
	PlayerEnterTime[playerid] += 221;
	RemovePlayerFromVehicle(playerid);
	return 1;
}
//==============================================================================
NearTuning(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 25.0, 1041.5073,-1030.9069,31.7923) || IsPlayerInRangeOfPoint(playerid, 25.0, 2645.1272,-2033.8993,13.2808)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, -1935.9835,231.4505,33.8772) || IsPlayerInRangeOfPoint(playerid, 25.0, -2713.1533,216.9000,3.9767)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 617.5360,-1.9900,1000.6378) || IsPlayerInRangeOfPoint(playerid, 25.0, 2386.6309,1037.3684,10.8203)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 615.2858,-124.2390,997.6057) || IsPlayerInRangeOfPoint(playerid, 25.0, 616.7612,-74.8120,997.8828)) return 1;
	else return 0;
}
//==============================================================================
NearSpray(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 25.0, 2389.6, 1483.26, 9.81843) || IsPlayerInRangeOfPoint(playerid, 25.0, -2430.13, 1013.71, 49.3413)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, -1908.93, 292.353, 40.0413) || IsPlayerInRangeOfPoint(playerid, 25.0, 491.103, -1747.55, 9.45516)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 1021.81, -1018.71, 30.9081) || IsPlayerInRangeOfPoint(playerid, 25.0, 2056.6, -1835.9, 12.5443)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 2640.78, -2049.99, 12.543) || IsPlayerInRangeOfPoint(playerid, 25.0, -1941.04, 251.714, 33.4274)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, -2728.53, 212.295, 3.45112) || IsPlayerInRangeOfPoint(playerid, 25.0, -1424.11, 2576.61, 54.8156)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, -103.636, 1112.42, 18.7017) || IsPlayerInRangeOfPoint(playerid, 25.0, 715.806, -462.403, 14.9635)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 1025.0094,-1025.0917,32.1016) || IsPlayerInRangeOfPoint(playerid, 25.0, 1968.23, 2157.88, 9.59696) || IsPlayerInRangeOfPoint(playerid, 25.0, 1851.0931,-1856.4600,13.1099)) return 1;
	else return 0;
}
//==============================================================================
SendAdminMessage(string[], level)
{
	foreach(new i: Admins)
	{
		if(PlayerInfo[i][pAdmin] >= level && TogAdmin[i] == true)
		{
			Cenzura(string);
			if(strfind(string, "AdmCmd:", true) != -1)
			{
				SendSplitMessage(i, 0xf6bc14ff, string);
				Logs("AdmCMD.log", PlayerInfo[i][pNamePlayer], string);
			}
			else if(strfind(string, "AdmBot:", true) != -1) SendSplitMessage(i, 0xF29746ff, string);
			else if(strfind(string, "AdmInfo:", true) != -1) SendSplitMessage(i, COLOR_LIGHT_BLUE, string);
			else SendSplitMessage(i, COLOR_LIGHT_RED, string);
		}
	}
	return 1;
}
//==============================================================================
SendTeamMessage(team, color, string[])
{
	foreach(new i: Player)
	{
		Cenzura(string);
		if(GetPlayerTeam(i) == team) SCM(i, color, string);
		if(FactionSpectate[i] == team && PlayerInfo[i][pAdmin] > 0 && team != 5) SCM(i, color, string);
	}
	return 1;
}
//==============================================================================
SendPremiumMessage(string[])
{
    foreach(new i: Player)
    {
        if(PlayerInfo[i][pPremium] == 1 && TogPremium[i] == true)
		{
			Cenzura(string);
			SendSplitMessage(i, 0x27bf9caa, string);
		}
    }
	return 1;
}
//==============================================================================
SendJobMessage(job, color, const string[])
{
	foreach(new i: Player) {
		if(PlayerInfo[i][pJob] == job) SendSplitMessage(i, color, string);
	}
	return 1;
}
//==============================================================================
SendFactionMessage(faction, color, string[])
{
	foreach(new i: Player)
	{
		Cenzura(string);
		new f = PlayerInfo[i][pMember]+PlayerInfo[i][pLeader];
		if(faction == f && TogFaction[i] == true) SendSplitMessage(i, color, string);
		if(FactionSpectate[i] == f && PlayerInfo[i][pAdmin] > 0) SendSplitMessage(i, color, string);
	}
	return 1;
}
//==============================================================================
SendClanMessage(clan, color, string[])
{
	if(clan > 0)
	{
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pClan] == clan && TogClan[i] == true)
			{
				Cenzura(string);
				SendSplitMessage(i, color, string);
			}
		}
	}
	return 1;
}
//==============================================================================
SendHelperMessage(color, string[])
{
	foreach(new i: Player)
	{
		if(TogHelper[i] == true || PlayerInfo[i][pAdmin] > 0)
		{
			Cenzura(string);
			SendSplitMessage(i, color, string);
		}
	}
	return 1;
}
//==============================================================================
stock WeaponObject(wid) 
{
	switch(wid)
	{
		case 1: return 331; 
		case 2: return 333; 
		case 3: return 334; 
		case 4: return 335; 
		case 5: return 336; 
		case 6: return 337; 
		case 7: return 338; 
		case 9: return 341; 
		case 10: return 321; 
		case 11: return 322; 
		case 12: return 323; 
		case 13: return 324; 
		case 14: return 325; 
		case 15: return 326; 
		case 23: return 347; 
		case 24: return 348; 
		case 25: return 349; 
		case 26: return 350; 
		case 27: return 351; 
		case 28: return 352; 
		case 29: return 353; 
		case 30: return 355; 
		case 31: return 356; 
		case 32: return 372;
		case 33: return 357; 
		case 34: return 358; 
		case 41: return 365; 
		case 42: return 366; 
		case 43: return 367; 
	}
	return 0;
}
//==============================================================================
stock TicketName(id)
{
	new string[128];
	switch(id)
	{
		case 0: string = "~ Condus neregulamentar";
		case 1: string = "~ Folosirea de NOS";
		case 2: string = "~ Farurile oprite peste ora 20:00";
		case 3: string = "~ Detinerea de droguri";
		case 4: string = "~ Condus fara casca sau centura";
		case 5: string = "~ Condus fara permis";
	}
	return string;
}
//==============================================================================
stock ListenThisRadio(id)
{
	new x = 0;
	foreach(new i: Player) {
		if(ListenRadio[i] == id) x++;
	}
	return x;
}
//==============================================================================
stock GetJobWorkers(jid)
{
	new x = 0;
	foreach(new i: Player) {
	    if(PlayerInfo[i][pJob] == jid && JobWorking[i] == 1) x++;
	}
	return x;
}
//==============================================================================
stock GetVehicleSlot(playerid, vehicleid)
{
	if(GetPlayerVehicles(playerid) > 0)
	{
		for(new i = 0; i < 10; i++) {
			if(vehicleid == PlayerInfo[playerid][pCarKey][i]) return i;
		}
	}
	return INVALID_VEHICLE_ID;
}
//==============================================================================
stock GetJobCar(playerid)
{
	new i = 0;
	if(JobCar[playerid][2] != -1) i++;
	if(JobCar[playerid][3] != -1) i++;
	if(JobCar[playerid][4] != -1) i++;
	if(JobCar[playerid][5] != -1) i++;
	if(JobCar[playerid][6] != -1) i++;
	return i;
}
//==============================================================================
stock BizInteriorID(type) 
{
    new x;
    switch(type) 
	{
        case 1: x = 0;
        case 2: x = 7;
        case 3: x = 1;
        case 4: x = 3;
        case 5: x = 10;
        case 6: x = 18;
        case 7: x = 10;
        case 8: x = 5;
        case 9: x = 5;
        case 11: x = 15;
        case 12 .. 13: x = 0;
        case 15 .. 16: x = 0;
        case 14: x = 9;
    }
    return x;
}
//==============================================================================
stock GetPlayerVehicles(playerid)
{
	new i = 0;
	for(new c = 0; c < 10; c++) {
		if(PlayerInfo[playerid][pCarKey][c] > 0) i++;
	}
	return i;
}
//==============================================================================
stock GetSpawnedCar(playerid)
{
	new i = 0;
	for(new c = 0; c < 10; c++) {
		if(PlayerInfo[playerid][pCarKey][c] > 0) {
			if(CarInfo[PlayerInfo[playerid][pCarKey][c]][cTime] > 0 && PlayerInfo[playerid][pCarKey][c] > 0) i++;
		}
	}
	return i;
}
//==============================================================================
stock GetWeekDay(day = 0, month = 0, year = 0) 
{
	if(!day) getdate(year, month, day);
	new weekday_str[10], j, e;
	if(month <= 2) 
	{
		month += 12;
		year--;
	}
	//--------------------------------------------------------------
	j = year % 100;
	e = year / 100;
	//--------------------------------------------------------------
	switch((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7) 
	{
		case 0: weekday_str = "Saturday";
		case 1: weekday_str = "Sunday";
		case 2: weekday_str = "Monday";
		case 3: weekday_str = "Tuesday";
		case 4: weekday_str = "Wednesday";
		case 5: weekday_str = "Thursday";
		case 6: weekday_str = "Friday";
	}
	return weekday_str;
}
//==============================================================================
stock NearToBizz(playerid)
{
	for(new i = 1; i < MAX_BUSINESS; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 15.0, BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ])) return i;
	}
	return 0;
}
//==============================================================================
stock CreateVehicleEx(model, Float:x, Float:y, Float:z, Float:a, color1, color2, respawn_delay, siren = 0)
{
	new carid = CreateVehicle(model, x, y, z, a, color1, color2, respawn_delay, siren);
	SetVehicleHealth(carid, 999.9);
	Vehicle[carid] = 1;
	return carid;
}
//==============================================================================
stock DestroyVehicleEx(vehicleid)
{
	Vehicle[vehicleid] = 0;
	return DestroyVehicle(vehicleid);
}
//==============================================================================
stock FreeHouses() 
{
	new x = 0;
	for(new i = 1; i < MAX_HOUSES; i++) {
		if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0 && HouseInfo[i][hOwned] == 1) x++;
	}
	return x;
}
//==============================================================================
stock FreeBusinesses()
{
	new x = 0;
	for(new i = 1; i < MAX_BUSINESS; i++) {
		if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0 && BizzInfo[i][bOwned] == 1) x++;
	}
	return x;
}
//==============================================================================
stock GetHouseID() 
{
	for(new i = 1; i < MAX_HOUSES; i++) {
		if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0 && HouseInfo[i][hOwned] == 1) return i;
	}
	return 0;
}
//==============================================================================
stock GetBizzID() 
{
	for(new i = 1; i < MAX_BUSINESS; i++) {
		if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0 && BizzInfo[i][bOwned] == 1) return i;
	}
	return 0;
}
//==============================================================================
stock GetPlayerZone(playerid)
{
	new string[4];
	if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60)) string = "SF";
	else if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00)) string = "LS";
	else if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80)) string = "LV";
	return string;
}
//==============================================================================
stock QuestName(playerid, quest, id)
{
	new string[128];
	switch(quest)
	{
		case 1: string = "Urca-te pe muntele Chiliad";
		case 2: format(string,sizeof(string),"Omoara %d jucatori de pe server",PlayerInfo[playerid][pNeedProgress][id]);
		case 3: format(string,sizeof(string),"Cumpara de %d ori artificii",PlayerInfo[playerid][pNeedProgress][id]);
		case 4: format(string,sizeof(string),"Cumpara de %d ori droguri",PlayerInfo[playerid][pNeedProgress][id]);
		case 5: format(string,sizeof(string),"Livreaza %d cutii de pizza la job",PlayerInfo[playerid][pNeedProgress][id]);
		case 6: string = "Urca-te pe cea mai inalta cladire din Los Santos";
		case 7: string = "Atinge o viteza mai mare de 190 km/h cu un vehicul";
		case 8: format(string,sizeof(string),"Foloseste de %d ori artificii",PlayerInfo[playerid][pNeedProgress][id]);
		case 9: string = "Cumpara niste droguri si foloseste-le";
		case 10: string = "Jefuieste o afacere";
		case 11: format(string,sizeof(string),"Du-te sa pescuiesti %d pesti",PlayerInfo[playerid][pNeedProgress][id]);
		case 12: format(string,sizeof(string),"Du-te si bea %d doze de suc de la un dozator",PlayerInfo[playerid][pNeedProgress][id]);
		case 13: string = "Repara un vehicul de tip Infernus";
		case 14: format(string,sizeof(string),"Parcurge o distanta de %d km cu un vehicul",PlayerInfo[playerid][pNeedProgress][id]);
	}
	return string;
}
//==============================================================================
stock GetWeaponNameEx(weapon)
{
	new gunname[32];
	GetWeaponName(weapon, gunname, sizeof(gunname));
	return gunname;
}
//==============================================================================
stock CheckIDEmpty() 
{
	for(new i = 0; i < MAX_PICKUPS; i++) {
		if(DropInfo[i][dID] == -1) return i;
	}
	return 0;
}
//==============================================================================
stock GetPlayer3DZone(playerid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++)
    {
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5]) {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}
//==============================================================================
stock IsPlayerScripter(playerid)
{
	if(strcmp(PlayerInfo[playerid][pNamePlayer], "SherKan", true) == 0 || PlayerInfo[playerid][pAdmin] == 7) return 1;
	else return 0;
}
//==============================================================================
stock IsACop(playerid)
{
	new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(faction == 1 || faction == 2 || faction == 3) return 1;
	return 0;
}
//==============================================================================
stock IsAGangMember(playerid)
{
	new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(faction == 5 || faction == 6 || faction == 11 || faction == 12 || faction == 13) return 1;
	return 0;
}
//==============================================================================
stock GetPlayerWeaponAmmo(playerid, weaponid)
{
	new wd[2][13];
	for(new i; i < 13; i++) {
		GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
	}
	for(new i; i < 13; i++) {
		if(weaponid == wd[0][i]) return wd[1][i];
	}
	return 0;
}
//==============================================================================
stock IsWeaponWithAmmo(weaponid)
{
	switch(weaponid)
	{
		case 16 .. 18, 22 .. 39, 41 .. 42: return 1;
		default: return 0;
	}
	return 0;
}
//==============================================================================
stock GasesteCaractere(const Text[])
{
	if(strfind(Text, "'", true) != -1 || strfind(Text, "&", true) != -1 || strfind(Text, "*", true) != -1 || strfind(Text, "|", true) != -1) return 1;
	else if(strfind(Text, "#", true) != -1 || strfind(Text, "@", true) != -1 || strfind(Text, "!", true) != -1 || strfind(Text, "=", true) != -1) return 1;
	else if(strfind(Text, "+", true) != -1 || strfind(Text, "-", true) != -1 || strfind(Text, "%", true) != -1 || strfind(Text, "$", true) != -1) return 1;
	else return 0;
}
//==============================================================================
stock IsAnRentVeh(carid)
{
	if(strcmp(StaticVeh[carid][svLicense], "Rent", true) == 0) return 1;
	else return 0;
}
//==============================================================================
stock GetWeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 0, 1: return 0;
		case 2 .. 9: return 1;
		case 10 .. 15: return 10;
		case 16 .. 19, 39: return 8;
		case 22 .. 24: return 2;
		case 25 .. 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35 .. 38: return 7;
		case 40: return 12;
		case 41 .. 43: return 9;
		case 44 .. 46: return 11;
	}
	return 0;
}
//==============================================================================
stock GivePlayerWeaponEx(playerid, weapon, ammo)
{
	WeaponData[playerid][GetWeaponSlot(weapon)] = true;
	return GivePlayerWeapon(playerid, weapon, ammo);
}
//==============================================================================
stock ResetPlayerWeaponsEx(playerid)
{
	WeaponData[playerid][0] = false; WeaponData[playerid][1] = false; WeaponData[playerid][2] = false; 
	WeaponData[playerid][3] = false; WeaponData[playerid][4] = false; WeaponData[playerid][5] = false; 
	WeaponData[playerid][6] = false; WeaponData[playerid][7] = false; WeaponData[playerid][8] = false; 
	WeaponData[playerid][9] = false; WeaponData[playerid][10] = false; WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;
	return ResetPlayerWeapons(playerid);
}
//==============================================================================
stock GivePlayerCash(playerid, money, time = 2500)
{
	new string[32];
	ResetPlayerMoney(playerid);
    PlayerInfo[playerid][pMoney] += money;
    GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
	if(money < 0) format(string, sizeof(string), "~r~~h~%s$", FormatNumber(money));
	else format(string, sizeof(string), "~g~~h~+%s$", FormatNumber(money));
	GameTextForPlayer(playerid, string, time, 1);
	pUpdate(playerid, pCashx);
    return PlayerInfo[playerid][pMoney];
}
//==============================================================================
stock SetPlayerCash(playerid, money)
{
    PlayerInfo[playerid][pMoney] = money;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
	pUpdate(playerid, pCashx);
    return PlayerInfo[playerid][pMoney];
}
//==============================================================================
stock GetPlayerScoreEx(playerid) return PlayerInfo[playerid][pLevel];
//==============================================================================
stock GetPlayerWantedLevelEx(playerid) return PlayerInfo[playerid][pWantedLevel];
//==============================================================================
stock GetPlayerCash(playerid) return PlayerInfo[playerid][pMoney];
//==============================================================================
stock GetPlayerInteriorEx(playerid) return PlayerInfo[playerid][pInt];
//==============================================================================
stock GetPlayerSkinEx(playerid) return PlayerInfo[playerid][pSkin];
//==============================================================================
stock GetPlayerFaction(playerid) return (PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember]);
//==============================================================================
stock GetVehicleName(vehicleid)
{
    new string[32];
	format(string, sizeof(string), VehicleName[GetVehicleModel(vehicleid)-400]);
	return string;
}
//==============================================================================
stock LoopingAnim(playerid, animlib[], animname[], Float:speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
	return ApplyAnimation(playerid, animlib, animname, speed, looping, lockx, locky, lockz, lp);
}
//==============================================================================
stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
//==============================================================================
stock ModifyVehicleSpeed(vehicleid, mph)
{
	new Float:Vx, Float:Vy, Float:Vz, Float:DV, Float:multiple;
	GetVehicleVelocity(vehicleid, Vx, Vy, Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100));
		return SetVehicleVelocity(vehicleid, Vx*multiple, Vy*multiple, Vz*multiple);
	}
	return 0;
}
//==============================================================================
stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi) return 1;
	}
	return 0;
}
//==============================================================================
stock IsMonth31(&month)
{
 	switch(month)
	{
	    case 1: return 1;
	    case 3: return 1;
	    case 5: return 1;
	    case 7: return 1;
	    case 8: return 1;
	    case 10: return 1;
	    case 12: return 1;
	    default: return 0;
	}
	return 0;
}
//==============================================================================
stock IsMonth29(year)
{
 	new y = 2000;
 	for(new i = 4; i < 3000; i += 4) {
		if((y+i) == year) return 1;
	}
 	return 0;
}
//==============================================================================
HideTDMenu(playerid)
{
	PlayerTextDrawSetSelectable(playerid, VehicleInfoTD[5], 0);
	PlayerTextDrawHide(playerid, VehicleInfoTD[0]);
	PlayerTextDrawHide(playerid, VehicleInfoTD[1]);
	PlayerTextDrawHide(playerid, VehicleInfoTD[2]);
	PlayerTextDrawHide(playerid, VehicleInfoTD[3]);
	PlayerTextDrawHide(playerid, VehicleInfoTD[4]);
	PlayerTextDrawHide(playerid, VehicleInfoTD[5]);
	PlayerTextDrawHide(playerid, VehicleInfoTD[6]);
	return 1;
}
//==============================================================================
ShowTDMenu(playerid)
{
    PlayerTextDrawSetSelectable(playerid, VehicleInfoTD[5], 1);
	PlayerTextDrawShow(playerid, VehicleInfoTD[0]);
	PlayerTextDrawShow(playerid, VehicleInfoTD[1]);
	PlayerTextDrawShow(playerid, VehicleInfoTD[2]);
	PlayerTextDrawShow(playerid, VehicleInfoTD[3]);
	PlayerTextDrawShow(playerid, VehicleInfoTD[4]);
	PlayerTextDrawShow(playerid, VehicleInfoTD[5]);
	PlayerTextDrawShow(playerid, VehicleInfoTD[6]);
	return 1;
}
//==============================================================================
stock GetClosestVehicle(playerid)
{
    new closestdist = 999999999, closestvehicle = INVALID_VEHICLE_ID;
    new Float:x, Float:y, Float:z, distance;
    for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
    {
		if(IsValidVehicle(i))
		{
			GetVehiclePos(i,x,y,z);
			distance = floatround(GetPlayerDistanceFromPoint(playerid,x,y,z));
			if(distance < closestdist)
			{
				closestdist = distance;
				closestvehicle = i;
			}
		}
    }
    return closestvehicle;
}
//==============================================================================
stock GetClosestVehicle2(playerid, Float:range) 
{ 
    new Float:PosX, Float:PosY, Float:PosZ, Float:CloseDist = range, FetchVeh; 
    new PlayerVeh = GetPlayerVehicleID(playerid); 
	//--------------------------------------------------------------
	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
    {
        if(!IsValidVehicle(i)) continue; 
        if(i == PlayerVeh) continue; 
		//--------------------------------------------------------------
        GetVehiclePos(i, PosX, PosY, PosZ); 
        new Float:Dist = GetPlayerDistanceFromPoint(playerid, PosX, PosY, PosZ); 
		//--------------------------------------------------------------
        if(Dist <= CloseDist) 
        { 
            FetchVeh = i; 
            CloseDist = Dist; 
        } 
    } 
    return FetchVeh; 
} 
//==============================================================================
stock FindSpawnID(car)
{
	for(new i = 1; i <= masini; i++) {
		if(CarInfo[i][cSpawned] == car) return i;
	}
	return 0;
}
//==============================================================================
stock GetVehicleSpeed(vehicleid, get3d = 0)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}
//==============================================================================
stock GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}
//==============================================================================
stock CalculeazaTimp(seconds)
{
	new tmp[10], minutes = floatround(seconds/60);
	seconds -= minutes*60;
	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
	return tmp;
}
//==============================================================================
stock FormatNumber(number)
{
	new string[16], strnumber[24];
	if(number < 0) format(string, sizeof(string), "%d", (number * -1));
	else format(string, sizeof(string), "%d", number);
	for(new iLen = strlen(string) - 3; iLen > 0; iLen -= 3)	{
		strins(string, ".", iLen);
	}
    if(number < 0) format(strnumber, sizeof(strnumber), "-%s", string);
	else format(strnumber, sizeof(strnumber), "%s", string);
	return strnumber;
}
//==============================================================================
stock FindIP(const string[])
{
    new dotCount;
    for(new i; string[i] != EOS; i++)
    {
        if(('0' <= string[i] <= '9') || string[i] == '.' || string[i] == ':')
        {
            if((string[i] == '.') && (string[i + 1] != '.') && ('0' <= string[i - 1] <= '9')) dotCount++;
            continue;
        }
    }
    return (dotCount > 2);
}
//==============================================================================
stock GetPlayerID(const playername[])
{
  	foreach(new i: Player) {
    	if(strcmp(PlayerInfo[i][pNamePlayer], playername, true, strlen(playername)) == 0) return i;
  	}
  	return INVALID_PLAYER_ID;
}
//==============================================================================
stock NumeFactiune(id)
{
	new ftext[64];
	switch(id)
	{
	    case 0: ftext = "Civil";
		case 1: ftext = "Los Santos Police Departament";
		case 2: ftext = "Federal Bureau of Investigation";
		case 3: ftext = "San Andreas Government";
		case 4: ftext = "Los Santos Paramedic";
		case 5: ftext = "Los Aztecas";
		case 6: ftext = "The Russian Mafia";
		case 7: ftext = "Mayor";
		case 8: ftext = "The Hitman Agency";
		case 9: ftext = "News Reporter";
		case 10: ftext = "Los Santos Taxi Company";
		case 11: ftext = "Grove Street";
		case 12: ftext = "Los Vagos";
		case 13: ftext = "The Ballas Family";
		case 14: ftext = "Blood Mafia";
		default: ftext = "";
	}
	return ftext;
}
//==============================================================================
stock NumeJob(id)
{
	new jtext[64];
	switch(id)
	{
	    case 0: jtext = "Fara";
		case 1: jtext = "Detectiv";
		case 2: jtext = "Tractorist";
		case 3: jtext = "Pescar";
		case 4: jtext = "Mecanic";
		case 5: jtext = "Livrator de Pizza";
		case 6: jtext = "Camionagiu";
		case 7: jtext = "Distribuitor de Droguri";
		case 8: jtext = "Hot de Masini";
		case 9: jtext = "Distribuitor de Arme";
		default: jtext = "";
	}
	return jtext;
}
//==============================================================================
stock NumeAdmin(id)
{
	new atext[64];
	switch(id)
	{
	    case 0: atext = "Fara";
		case 1: atext = "Test Admin";
		case 2: atext = "Advanced Admin";
		case 3: atext = "Proffesional Admin";
		case 4: atext = "Manager Admin";
		case 5: atext = "Owner";
		case 6: atext = "Fondator";
		case 7: atext = "Scripter";
		default: atext = "";
	}
	return atext;
}
//==============================================================================
stock Luna(id)
{
	new ltext[32];
	switch(id)
	{
		case 1: ltext = "Ianuarie";
		case 2: ltext = "Februarie";
		case 3: ltext = "Martie";
		case 4: ltext = "Aprilie";
		case 5: ltext = "Mai";
		case 6: ltext = "Iunie";
		case 7: ltext = "Iulie";
		case 8: ltext = "August";
		case 9: ltext = "Septembrie";
		case 10: ltext = "Octombrie";
		case 11: ltext = "Noiembrie";
		case 12: ltext = "Decembrie";
		default: ltext = "";
	}
	return ltext;
}
//==============================================================================
stock IsACBUGWeapon(playerid)
{
	new wID = GetPlayerWeapon(playerid);
	if(wID == 24 || wID == 25 || wID == 27 || wID == 34) return 1;
	else return 0;
}
//==============================================================================
stock Findcar()
{
	for(new i = 1; i <= masini; i++) {
	    if(CarInfo[i][cID] == -2) return i;
	}
	return 0;
}
//==============================================================================
stock Float:GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return a;
}
//==============================================================================
stock IsMail(const email[])
{
  	new len = strlen(email), cstate = 0;
  	for(new i = 0; i < len; i++)
	{
		if((cstate == 0 || cstate == 1) && (email[i] >= 'A' && email[i] <= 'Z') || (email[i] >= '0' && email[i] <= '9') || (email[i] >= 'a' && email[i] <= 'z') || (email[i] == '.') || (email[i] == '-') || (email[i] == '_')) continue;
		else
		{
			if(cstate == 0 && email[i] == '@') cstate = 1;
			else return 0;
		}
	}
  	if(cstate < 1 || len < 6) return 0;
  	if((email[len-3] == '.') || (email[len-4] == '.') || (email[len-5] == '.')) return 1;
  	return 0;
}
//==============================================================================
stock UserPath(playerid)
{
    new string[128];
    format(string, sizeof(string), "/users/%s.ini", GetName(playerid));
    return string;
}
//==============================================================================
function UpdatePlayerStatus(playerid)
{ 
	if(gPlayerLogged[playerid])
	{
		new file4[40];
		format(file4, sizeof(file4), "/users/%s.ini", PlayerInfo[playerid][pNamePlayer]);
		new INI:File = INI_Open(file4);
		INI_SetTag(File, "data");
		INI_WriteString(File, "Password", PlayerInfo[playerid][pPassword]);
		INI_WriteInt(File, "Level", GetPlayerScoreEx(playerid));
		INI_WriteInt(File, "Admin", PlayerInfo[playerid][pAdmin]);
		INI_WriteInt(File, "Helper", PlayerInfo[playerid][pHelper]);
		INI_WriteInt(File, "Premium", PlayerInfo[playerid][pPremium]);
		INI_WriteFloat(File, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
		INI_WriteInt(File, "Gold", PlayerInfo[playerid][pGold]);
		INI_WriteInt(File, "Registered", PlayerInfo[playerid][pReg]);
		INI_WriteInt(File, "Sex", PlayerInfo[playerid][pSex]);
		INI_WriteInt(File, "Respect", PlayerInfo[playerid][pExp]);
		INI_WriteInt(File, "Money", PlayerInfo[playerid][pMoney]);
		INI_WriteInt(File, "Bank", PlayerInfo[playerid][pBank]);
		INI_WriteInt(File, "Wanted", GetPlayerWantedLevelEx(playerid));
		INI_WriteInt(File, "Fishes", PlayerInfo[playerid][pFishes]);
		INI_WriteInt(File, "Job", PlayerInfo[playerid][pJob]);
		INI_WriteInt(File, "HeadValue", PlayerInfo[playerid][pHeadValue]);
		INI_WriteInt(File, "Jailed", PlayerInfo[playerid][pJailed]);
		INI_WriteInt(File, "JailTime", PlayerInfo[playerid][pJailTime]);
		INI_WriteInt(File, "Materials", PlayerInfo[playerid][pMats]);
		INI_WriteInt(File, "Drugs", PlayerInfo[playerid][pDrugs]);
		INI_WriteInt(File, "Leader", PlayerInfo[playerid][pLeader]);
		INI_WriteInt(File, "FactionMember", PlayerInfo[playerid][pMember]);
		INI_WriteInt(File, "FactionRank", PlayerInfo[playerid][pFactionRank]);
		INI_WriteInt(File, "ClanRank", PlayerInfo[playerid][pClanRank]);
		INI_WriteInt(File, "MatsSkill", PlayerInfo[playerid][pMatsSkill]);
		INI_WriteInt(File, "FarmSkill", PlayerInfo[playerid][pFarmSkill]);
		INI_WriteInt(File, "TruckSkill", PlayerInfo[playerid][pTruckSkill]);
		INI_WriteInt(File, "Skin", PlayerInfo[playerid][pSkin]);
		INI_WriteInt(File, "Number", PlayerInfo[playerid][pNumber]);
		INI_WriteInt(File, "House", PlayerInfo[playerid][pHouseKey]);
		INI_WriteInt(File, "Bizz", PlayerInfo[playerid][pBizzKey]);
		INI_WriteInt(File, "Punish", PlayerInfo[playerid][pPunish]);
		INI_WriteInt(File, "RobSkill", PlayerInfo[playerid][pRobSkill]);
		INI_WriteInt(File, "CarLic", PlayerInfo[playerid][pCarLic]);
		INI_WriteInt(File, "FlyLic", PlayerInfo[playerid][pFlyLic]);
		INI_WriteInt(File, "BoatLic", PlayerInfo[playerid][pBoatLic]);
		INI_WriteInt(File, "FishLic", PlayerInfo[playerid][pFishLic]);
		INI_WriteInt(File, "GunLic", PlayerInfo[playerid][pGunLic]);
		INI_WriteInt(File, "Passport", PlayerInfo[playerid][pPassport]);
		INI_WriteInt(File, "Tutorial", PlayerInfo[playerid][pTut]);
		INI_WriteInt(File, "Warnings", PlayerInfo[playerid][pWarns]);
		INI_WriteInt(File, "Fwarn", PlayerInfo[playerid][pFwarn]);
		INI_WriteInt(File, "Fuel", PlayerInfo[playerid][pFuel]);
		INI_WriteInt(File, "Undita", PlayerInfo[playerid][pUndita]);
		new string[64];
		for(new v = 0; v < 10; v++)
		{
			format(string, sizeof(string), "Car%d", v);
			INI_WriteInt(File, string, PlayerInfo[playerid][pCarKey][v]);
		}
		INI_Close(File);
	}
	return 1;
}
//==============================================================================
function UpdateVar(playerid, const varname[], ammount)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new query[256];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `%s` = '%d' WHERE `name` = '%s'", varname, ammount, PlayerInfo[playerid][pNamePlayer]);
	mysql_tquery(SQL, query);
	return 1;
}
//==============================================================================
function ShowTogMenu(playerid)
{
	if(GetPlayerScoreEx(playerid) < 3) return SCM(playerid,COLOR_YELLOW2,"Ai nevoie de level 3 pentru a folosi comanda.");
	new mainstring[310];
	strcat(mainstring, "Optiune\tStatus\n");
	//--------------------------------------------------------------
	if(ShowHealth[playerid] == true) strcat(mainstring, "Show Health\t{00ff00}Activat\n");
	else strcat(mainstring, "Show Health\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(ShowFPS[playerid] == true) strcat(mainstring, "Show FPS\t{00ff00}Activat\n");
	else strcat(mainstring, "Show FPS\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogAdmin[playerid] == true) strcat(mainstring, "Admin Chat\t{00ff00}Activat\n");
	else strcat(mainstring, "Admin Chat\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogHelper[playerid] == true) strcat(mainstring, "Helper Chat\t{00ff00}Activat\n");
	else strcat(mainstring, "Helper Chat\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogPremium[playerid] == true) strcat(mainstring, "Premium Chat\t{00ff00}Activat\n");
	else strcat(mainstring, "Premium Chat\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogFaction[playerid] == true) strcat(mainstring, "Faction Chat\t{00ff00}Activat\n");
	else strcat(mainstring, "Faction Chat\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogClan[playerid] == true) strcat(mainstring, "Clan Chat\t{00ff00}Activat\n");
	else strcat(mainstring, "Clan Chat\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogBid[playerid] == true) strcat(mainstring, "Auction Chat\t{00ff00}Activat\n");
	else strcat(mainstring, "Auction Chat\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	if(TogCheckpoint[playerid] == true) strcat(mainstring, "Checkpoint Distance\t{00ff00}Activat\n");
	else strcat(mainstring, "Checkpoint Distance\t{ff3333}Dezactivat\n");
	//--------------------------------------------------------------
	SPD(playerid,DIALOG_TOG,DIALOG_STYLE_TABLIST_HEADERS,"Tog Help:",mainstring,"Alege","Inchide");
	return 1;
}
//==============================================================================
function CheckTimer()
{
	foreach(new i: Player)
	{
		new string[128];
		if(PlayerInfo[i][pJailed] > 0 && PlayerInfo[i][pJailTime] > 0)
		{
			PlayerInfo[i][pJailTime]--;
			pUpdate(i,pJailTimex);
			if(PlayerInfo[i][pJailTime] == 0)
			{
				PlayerInfo[i][pJailed] = 0;
				PlayerTextDrawHide(i, JailTime);
				GameTextForPlayer(i, "~g~Libertate~n~~w~Inceraca sa fii un cetatean mai bun" ,5000, 1);
				SetPlayerPosEx(i, 245.8962,67.8391,1003.6406);
				SetPlayerInteriorEx(i, 6);
				PlayerInfo[i][pInt] = 6;
				FactionEntered[i] = 1;
				SetPlayerTeamColor(i);
				pUpdate(i,pJailedx);
			}
		}
		if(RobTimer[i] > 0)
		{
			RobTimer[i]--;
			if(RobTimer[i] == 1)
			{
				SetPlayerWantedLevelEx(i, 6);
				PlayerInfo[i][pWantedTime] = 2700;
				SCM(i, COLOR_YELLOW,"Du-te la checkpoint pentru a ascunde banii!");
				new rand = random(sizeof(RobCP));
				SetPlayerCheckpointEx(i,RobCP[rand][0],RobCP[rand][1],RobCP[rand][2],3);
				RobTimer[i] = 0;
				CP[i] = 10;
				format(string, sizeof(string),"ANUNT: Toate unitatile in alerta, %s a jefuit o afacere!",GetName(i));
				SendTeamMessage(2,0xcc0000ff,string);
				SetPlayerAttachedObject(i, 0, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000 );
			}
		}
		if(PlayerInfo[i][pCarTime] > 0)
		{
			PlayerInfo[i][pCarTime]--;
			if(PlayerInfo[i][pCarTime] == 0) SCM(i,COLOR_WHITE," Timpul de asteptare la job sa terminat, poti fura din nou o masina!");
		}
		if(RentTime[i] > 0 && GetPlayerVehicleID(i) != HireCar[i])
		{
			new car = GetPVarInt(i, "RentCar");
			RentTime[i]--;
			if(HireCar[i] == car && CarRented[car] == 1 && RentTime[i] == 0)
			{
				CarRented[car] = 0;
				HireCar[i] = -1;
				DeletePVar(i, "RentCar");
				SCM(i, COLOR_GRAD2, "Nu mai ai in chirie niciun vehicul.");
			}
		}
		if(GetPlayerWantedLevelEx(i) > 0 && PlayerInfo[i][pWantedTime] > 0 && !IsPlayerPaused(i))
		{
			PlayerInfo[i][pWantedTime]--;
			if(PlayerInfo[i][pWantedTime] == 0)
			{
				SetPlayerWantedLevelEx(i,0);
				PlayerTextDrawHide(i, WantedTime);
				SCM(i,COLOR_YELLOW," Politia ti-a pierdut urma. Wanted Level: 0");
			}
		}
		if(PlayerInfo[i][pMuted] > 0 && PlayerInfo[i][pMuteTime] > 0)
		{
			PlayerInfo[i][pMuteTime]--;
			pUpdate(i,pMuteTimex);
			if(PlayerInfo[i][pMuteTime] == 0)
			{
				PlayerInfo[i][pMuted] = 0;
				SCM(i, COLOR_WHITE, "Timpul in care ai fost mut s-a terminat.");
				pUpdate(i,pMutedx);
			}
		}
		if(PlayerInfo[i][pHitT] > 0) PlayerInfo[i][pHitT]--;
		if(!IsPlayerPaused(i) && Sleeping[i] == 0) PlayerInfo[i][pSeconds]++;
		if(GetPVarInt(i, "EnteredTime") > 0) SetPVarInt(i, "EnteredTime", GetPVarInt(i, "EnteredTime")-1);
		if(JucatorCautat[i] >= 0)
		{
			new tinta = JucatorCautat[i], Float:x, Float:y, Float:z, Float:Distance;
			GetPlayerPos(tinta,x,y,z);
			if(HouseEntered[tinta] >= 0)
			{
				new h = HouseEntered[tinta];
				SetPlayerCheckpoint(i,HouseInfo[h][hEntranceX],HouseInfo[h][hEntranceY],HouseInfo[h][hEntranceZ],3);
				Distance = GetPlayerDistanceFromPoint(i,HouseInfo[h][hEntranceX],HouseInfo[h][hEntranceY],HouseInfo[h][hEntranceZ]);
			}
			else if(BizzEntered[tinta] >= 0)
			{
				new b = BizzEntered[tinta];
				SetPlayerCheckpoint(i,BizzInfo[b][bEntranceX],BizzInfo[b][bEntranceY],BizzInfo[b][bEntranceZ],3);
				Distance = GetPlayerDistanceFromPoint(i,BizzInfo[b][bEntranceX],BizzInfo[b][bEntranceY],BizzInfo[b][bEntranceZ]);
			}
			else if(FactionEntered[tinta] >= 0)
			{
				new f = FactionEntered[tinta];
				SetPlayerCheckpoint(i,FactionInfo[f][fHQExteriorPosX],FactionInfo[f][fHQExteriorPosY],FactionInfo[f][fHQExteriorPosZ],3);
				Distance = GetPlayerDistanceFromPoint(i,FactionInfo[f][fHQExteriorPosX],FactionInfo[f][fHQExteriorPosY],FactionInfo[f][fHQExteriorPosZ]);
			}
			else
			{
				SetPlayerCheckpoint(i,x,y,z,2.0);
				Distance = GetPlayerDistanceFromPoint(i,x,y,z);
			}
			format(string, sizeof(string), "%s[ID: %d]: ~y~~h~%.0f metri(%s)",GetName(tinta), tinta, Distance, GetPlayerZone(tinta));
			PlayerTextDrawSetString(i, FindTD, string);
			PlayerTextDrawShow(i, FindTD);
		}
		if(CP[i] > 0 && CPX[i] != 0.00000 && TogCheckpoint[i] == true)
		{
			new Float:x, Float:y, Float:z, Float:Distance;
			GetPlayerCheckpointEx(i,x,y,z);
			Distance = GetPlayerDistanceFromPoint(i,x,y,z);
			if(IsPlayerScripter(i)) format(string, sizeof(string), "~b~~h~Distanta(CP: %d): ~y~~h~%.2f metri", CP[i], Distance);
			else format(string, sizeof(string), "~b~~h~Distanta: ~y~~h~%.2f metri", Distance);
			PlayerTextDrawSetString(i, FindTD, string);
			PlayerTextDrawShow(i, FindTD);
		}
	}
	for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
	{
		if(IsAnOwnableCar(v))
		{
			new vsid = FindSpawnID(v);
			if(CarInfo[vsid][cTime] > 0)
			{
				if(!IsVehicleOccupied(CarInfo[vsid][cSpawned])) CarInfo[vsid][cTime]--;
				if(CarInfo[vsid][cTime] == 1)
				{
					if(CarInfo[vsid][cNeon] >= 1) RemoveNeons(CarInfo[vsid][cSpawned]);
					DestroyVehicleEx(CarInfo[vsid][cSpawned]);
					CarInfo[vsid][cSpawned] = 0;
					CarInfo[vsid][cTime] = 0;
				}
			}
		}
		if(IsValidVehicle(v))
		{
			GetVehicleZAngle(v, LastVPos[v][3]);
			GetVehiclePos(v, LastVPos[v][0], LastVPos[v][1], LastVPos[v][2]);
		}
	}
	return 1;
}
//==============================================================================
function CheckQuest(playerid, id)
{
	if(PlayerInfo[playerid][pQuest][id] > 0)
	{
		PlayerInfo[playerid][pQuestProgress][id]++;	
		if(PlayerInfo[playerid][pQuestProgress][id] == PlayerInfo[playerid][pNeedProgress][id])
		{
			PlayerInfo[playerid][pQuestProgress][id]++;
			FinishQuest(playerid, QuestName(playerid, PlayerInfo[playerid][pQuest][id], id));
		}
		else if(PlayerInfo[playerid][pQuestProgress][id] < PlayerInfo[playerid][pNeedProgress][id])
		{
			SFM(playerid, COLOR_YELLOW, "Progres misiune: [%s] [%d/%d].", QuestName(playerid, PlayerInfo[playerid][pQuest][id], id), PlayerInfo[playerid][pQuestProgress][id], PlayerInfo[playerid][pNeedProgress][id]);
			pUpdate(playerid, pQuestProgressx);
		}
	}
	return 1;
}
//==============================================================================
function QuestProgress(playerid, type, id)
{
	new progress, query[256];
	switch(type)
	{
		case 5, 11: progress = 2 + random(18);
		case 1, 6, 7, 9, 10, 13: progress = 1;
		case 2 .. 4, 8, 12, 14: progress = 2 + random(8);
	}
	PlayerInfo[playerid][pNeedProgress][id] = progress;
	PlayerInfo[playerid][pQuestProgress][id] = 0;
	pUpdate(playerid, pQuestProgressx);
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `NeedProgress`='%d|%d' WHERE `name`='%s'",PlayerInfo[playerid][pNeedProgress][0], PlayerInfo[playerid][pNeedProgress][1], PlayerInfo[playerid][pNamePlayer]);
	mysql_tquery(SQL, query);
	return 1;
}
//==============================================================================
function OnPlayerUseVending(playerid)
{
	new Float:health, string[MAX_STRING];
	GetPlayerHealthEx(playerid, health);
	GivePlayerCash(playerid, -200);
	if(health >= 75) SetPlayerHealthEx(playerid, 99.9);
	else SetPlayerHealthEx(playerid, health+25);
	BizzInfo[5][bMoney] += 200;
	SaveBusiness(5);
	format(string,sizeof(string)," * %s a cumparat o bautura de la dozator.", PlayerInfo[playerid][pNamePlayer]);
	ProxDetector(10, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	for(new m = 0; m < 2; m++) {
		if(PlayerInfo[playerid][pQuest][m] == 12) CheckQuest(playerid, m);
	}
	return 1;
}
//==============================================================================
function TempGiftCheck()
{
	new pday, pmonth, pyear, year, month, day;
	getdate(year, month, day);
	if(cache_num_rows() > 0)
	{
		cache_get_value_int(0, "Days", pday);
		cache_get_value_int(0, "Month", pmonth);
		cache_get_value_int(0, "Year", pyear);
		//--------------------------------------------------------------
		if(year >= pyear && month >= pmonth && day > pday)
		{
			if(GiftInfo[gOpen] == 1)
			{
				DestroyDynamic3DTextLabel(gifttext);
				DestroyDynamicPickup(giftpickup);
				GiftInfo[gLocationX] = 0.0;
				GiftInfo[gLocationY] = 0.0;
				GiftInfo[gLocationZ] = 0.0;
				GiftInfo[gOpen] = 0;
				mysql_query(SQL, "UPDATE `giftbox` SET `Days` = '0', `Month` = '0', `Year` = '0', `Open` = '0' WHERE `id` = '1'");
				mysql_query(SQL, "UPDATE `giftbox` SET `LocationX` = '0.0', `LocationY` = '0.0', `LocationZ` = '0.0' WHERE `id` = '1'");
			}
		}
	}
	return 1;
}
//==============================================================================
function ShowFactionMembers(playerid) 
{
	new szQuery[336], string[256], MemberString[1024], faction = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
	new name[128], lastl[128], rank, fw, TitleString[32], days, tmembers, onmembers;
	if(PlayerInfo[playerid][pLeader] != 0 && PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2, "Eroare: Contul tau este blocat. Scrie /pin pentru a il debloca si pentru a folosi aceasta comanda.");
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`FactionRank` ASC LIMIT 50", faction);
	new Cache:result = mysql_query(SQL, szQuery);
	//--------------------------------------------------------------
	for(new i, j = cache_num_rows(); i != j; i++)
	{
		cache_get_value(i, "name", name, MAX_PLAYER_NAME);
		cache_get_value(i, "lastOn", lastl, 32);
		cache_get_value_int(i, "FactionRank", rank);
		cache_get_value_int(i, "FactionDays", days);
		cache_get_value_int(i, "FWarn", fw);
		format(Selected[playerid][tmembers], MAX_PLAYER_NAME, name);
		new userID = GetPlayerID(name);
        if(userID != INVALID_PLAYER_ID) 
		{
            onmembers++;
            if(tmembers == 0) format(string, sizeof(string), "Rang - Nume\tUltima logare\tFW\tTimp in factiune\n%d - %s (%d)\tonline\t%d/5\t%d zile\n", rank, name, userID, fw, days);
            else format(string, sizeof(string), "%d - %s (%d)\tonline\t%d/5\t%d zile\n", rank, name, userID, fw, days);
			strcat(MemberString, string);
        }
        else 
		{
            if(tmembers == 0) format(string, sizeof(string), "Rang - Nume\tUltima logare\tFW\tTimp in factiune\n%d - %s\t%s\t%d/5\t%d zile\n", rank, name, lastl, fw, days);
			else format(string, sizeof(string), "%d - %s\t%s\t%d/5\t%d zile\n", rank, name, lastl, fw, days);
            strcat(MemberString, string);
        }
		tmembers++;
	}
	cache_delete(result);
	format(TitleString, sizeof(TitleString), "Members: %d online din %d", onmembers, tmembers);
	SPD(playerid, DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, TitleString, MemberString, "Select", "Cancel");
	return 1;
}
//==============================================================================
function FinishEvent(money, eventid, const playername[])
{
	new string[256], playerid = GetPlayerID(playername);
	if(eventid == 1)
	{
	 	foreach(new i: Player)
	 	{
	 	    if(Event[i] == 1)
	 	    {
				Event[i] = 0;
				SpawnPlayer(i);
	 		}
	 	}
		format(string, sizeof(string), " %s a castigat evenimentul {ffffff}Deagle {6EF83C}si a primit %s$.",PlayerInfo[playerid][pNamePlayer],FormatNumber(money));
		SCMAll(COLOR_EVENT, string);
		GivePlayerCash(playerid, money);
	 	EventInfo[EventEnabled] = 0;
		EventInfo[EventMoney] = 0;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventType] = 0;
	}
	else if(eventid == 2)
	{
	    foreach(new i: Player)
	 	{
	 	    if(Event[i] == 1)
	 	    {
	 	        HidePlayerProgressBar(i, FindBar);
	 	        Event[i] = 0;
				KillTimer_(EventTimer[i]);
	 	    }
		}
		format(string, sizeof(string), " %s a castigat evenimentul {ffffff}Detective {6EF83C}si a primit %s$.",PlayerInfo[playerid][pNamePlayer],FormatNumber(money));
		SCMAll(COLOR_EVENT, string);
		Cautat[playerid] = -1;
		GivePlayerCash(playerid, money);
		EventInfo[EventEnabled] = 0;
		EventInfo[EventMoney] = 0;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventType] = 0;
	}
	else if(eventid == 3)
	{
		foreach(new i: Player)
	 	{
	 	    if(Event[i] == 1)
	 	    {
				CP[i] = 0;
				Event[i] = 0;
				DisablePlayerRaceCheckpoint(i);
				SpawnPlayer(i);
				DestroyVehicleEx(gLastCar[i]);
				KillTimer_(EventTimer[i]);
	 		}
	 	}
		format(string, sizeof(string), " %s a castigat evenimentul {ffffff}Race {6EF83C}si a primit %s$.",PlayerInfo[playerid][pNamePlayer],FormatNumber(money));
		SCMAll(COLOR_EVENT, string);
		GivePlayerCash(playerid, money);
	 	EventInfo[EventEnabled] = 0;
		EventInfo[EventMoney] = 0;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventType] = 0;
	}
	else if(eventid == 4)
	{
		foreach(new i: Player)
	 	{
	 	    if(Event[i] == 1)
	 	    {
				Event[i] = 0;
				KillTimer_(EventTimer[i]);
	 		}
	 	}
		format(string, sizeof(string), " %s a castigat evenimentul {ffffff}Custom {6EF83C}si a primit %s$.",PlayerInfo[playerid][pNamePlayer],FormatNumber(money));
		SCMAll(COLOR_EVENT, string);
		GivePlayerCash(playerid, money);
	 	EventInfo[EventEnabled] = 0;
		EventInfo[EventMoney] = 0;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventType] = 0;
		EventInfo[EventPosX] = 0.0;
		EventInfo[EventPosY] = 0.0;
		EventInfo[EventPosZ] = 0.0;
	}
	return 1;
}
//==============================================================================
function ShowStats(playerid, parest)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(parest))
	{
	    new stext[20], rtext[10], prank[4], coordsstring[300], htext[6], btext[6], ctext[64], ntext[10], pIP[16], gtext[32];
		new cash = GetPlayerCash(parest), level = GetPlayerScoreEx(parest);
		new exp = PlayerInfo[parest][pExp], account = PlayerInfo[parest][pBank];
		new expamount = level*4, costlevel = level*levelcost;
		new factiune = PlayerInfo[parest][pLeader]+PlayerInfo[parest][pMember];
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pNumber] == -1) ntext = "Fara";
		else format(ntext,sizeof(ntext),"%d",PlayerInfo[parest][pNumber]);
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pHouseKey] == 255) htext = "Fara";
		else format(htext,sizeof(htext),"%d",PlayerInfo[parest][pHouseKey]);
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pBizzKey] == 255) btext = "Fara";
		else format(btext,sizeof(btext),"%d",PlayerInfo[parest][pBizzKey]);
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pClan] == 0) ctext = "Fara";
		else format(ctext,sizeof(ctext),"%s",ClanInfo[PlayerInfo[parest][pClan]][ClanName]);
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pSex] == 1) stext = "Masculin";
		else if(PlayerInfo[parest][pSex] == 2) stext = "Feminin";
		else stext = "None";
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pPremium] == 1) prank = "Yes";
		else if(PlayerInfo[parest][pPremium] == 0) prank = "No";
		//--------------------------------------------------------------
		if(GiftInfo[gOpen] == 1) format(gtext,sizeof(gtext),"  |  Puncte Gift:[%d]",PlayerInfo[parest][pGpoint]);
		else gtext = "";
		//--------------------------------------------------------------
		if(PlayerInfo[parest][pFactionRank] == 6) rtext = "Lider";
		else format(rtext,sizeof(rtext),"%d",PlayerInfo[parest][pFactionRank]);
		//--------------------------------------------------------------
		GetPlayerIp(parest, pIP, sizeof(pIP));
		SCM(playerid, 0xffa500ff,"|-----------------------------------------------------------------------------------------------------------------------------|");
		format(coordsstring, sizeof(coordsstring),  "|___________***( %s )***___________|",PlayerInfo[parest][pNamePlayer]);
		SCM(playerid, 0xffa500ff, coordsstring);
		format(coordsstring, sizeof(coordsstring), " Nivel:[%d]  |  Sex:[%s]  |  Ore Jucate:[%.2f]  |  In Mana:[%s$]  |  In Banca:[%s$]  |  Telefon:[%s]",level,stext,PlayerInfo[parest][pConnectTime],FormatNumber(cash),FormatNumber(account),ntext);
		SCM(playerid, COLOR_FADE1, coordsstring);
		format(coordsstring, sizeof(coordsstring), " Serviciu:[%s]  |  Respect:[%d/%d]  |  Nivelul Urmator:[%s$]  |  Puncte Jaf:[%d]  |  Gold:[%s]",NumeJob(PlayerInfo[parest][pJob]),exp,expamount,FormatNumber(costlevel),PlayerInfo[parest][pRobPoint],FormatNumber(PlayerInfo[parest][pGold]));
		SCM(playerid, COLOR_FADE1, coordsstring);
		format(coordsstring, sizeof(coordsstring), " Droguri:[%dg]  |  Materiale:[%s]  |  Factiune:[%s]  |  Faction Rank:[%s]  |  Nivel Urmarire:[%d/6]%s",PlayerInfo[parest][pDrugs],FormatNumber(PlayerInfo[parest][pMats]),NumeFactiune(factiune),rtext,GetPlayerWantedLevelEx(parest),gtext);
		SCM(playerid, COLOR_FADE1, coordsstring);
		format(coordsstring,sizeof(coordsstring),  " Warning:[%d/5]  |  Faction Warn:[%d/5]  |  Faction Punish:[%d/20]  |  Premium:[%s]  |  Hidden:[%d]",PlayerInfo[parest][pWarns],PlayerInfo[parest][pFwarn],PlayerInfo[parest][pPunish],prank,PlayerInfo[parest][pHidden]);
		SCM(playerid, COLOR_FADE1, coordsstring);
		if(PlayerInfo[parest][pHouseKey] != 255 || PlayerInfo[parest][pBizzKey] != 255 || PlayerInfo[parest][pClan] != 0)
		{
			format(coordsstring, sizeof(coordsstring), " Casa:[%s]  |  Afacere:[%s]  |  Clan:[%s]  |  Clan Rank:[%d]  |  Clan Warn:[%d]",htext,btext,ctext,PlayerInfo[parest][pClanRank],PlayerInfo[parest][pClanWarn]);
			SCM(playerid, COLOR_FADE1, coordsstring);
		}
		if(PlayerInfo[playerid][pAdmin] > 3)
		{
			format(coordsstring, sizeof(coordsstring), " Vehicul 1: [%d]  |  Vehicul 2: [%d]  |  Vehicul 3: [%d]  |  Vehicul 4: [%d]  |  Vehicul 5: [%d]  |  Vehicul 6: [%d]",PlayerInfo[parest][pCarKey][0],PlayerInfo[parest][pCarKey][1],PlayerInfo[parest][pCarKey][2],PlayerInfo[parest][pCarKey][3],PlayerInfo[parest][pCarKey][4],PlayerInfo[parest][pCarKey][5]);
			SCM(playerid, 0xffa500ff, coordsstring);
			format(coordsstring, sizeof(coordsstring), " Vehicul 7: [%d]  |  Vehicul 8: [%d]  |  Vehicul 9: [%d]  |  Vehicul 10: [%d]  |  Rent Key: [%d]",PlayerInfo[parest][pCarKey][6],PlayerInfo[parest][pCarKey][7],PlayerInfo[parest][pCarKey][8],PlayerInfo[parest][pCarKey][9],HireCar[parest]);
			SCM(playerid, 0xffa500ff, coordsstring);
		}
		if(PlayerInfo[playerid][pAdmin] > 5)
		{
			format(coordsstring, sizeof(coordsstring), " Email: [%s]  |  SQLID: [%d]  |  SQLIP: [%s]  |  IP: [%s]",PlayerInfo[parest][pEmail],PlayerInfo[parest][pSQLID],PlayerInfo[parest][IP],pIP);
			SCM(playerid, 0xffa500ff, coordsstring);
	  	}
		SCM(playerid, 0xffa500ff,"|-----------------------------------------------------------------------------------------------------------------------------|");
	}
	return 1;
}
//==============================================================================
function SavePlayerData(const playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid] == true)
		{
			new saveQuery[700];
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `Admin` = '%d', `Money` = '%d', `Bank` = '%d', `WantedTime` = '%d', `Hidden` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pAdmin],GetPlayerCash(playerid),PlayerInfo[playerid][pBank],PlayerInfo[playerid][pWantedTime],PlayerInfo[playerid][pHidden],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `Drugs` = '%d', `CarLic` = '%d', `FlyLic` = '%d', `BoatLic` = '%d', `FishLic` = '%d', `GunLic` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pCarLic],PlayerInfo[playerid][pFlyLic],PlayerInfo[playerid][pBoatLic],PlayerInfo[playerid][pFishLic],PlayerInfo[playerid][pGunLic],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `Phonebook` = '%d', `Leader` = '%d', `FactionRank` = '%d', `RobPoint` = '%d', `WantedLevel` = '%d', `Respect` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pPhoneBook],PlayerInfo[playerid][pLeader],PlayerInfo[playerid][pFactionRank],PlayerInfo[playerid][pRobPoint],GetPlayerWantedLevelEx(playerid),PlayerInfo[playerid][pExp],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `Helper` = '%d', `Clan` = '%d', `ClanRank` = '%d', `Phone` = '%d', `ClanTagType` = '%d', `Rented` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pHelper],PlayerInfo[playerid][pClan],PlayerInfo[playerid][pClanRank],PlayerInfo[playerid][pPhone],PlayerInfo[playerid][pClanTagType],PlayerInfo[playerid][pRented],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `GiftPoint` = '%d', `Premium` = '%d', `Gold` = '%d', `Level` = '%d', `ConnectedTime` = '%.2f' WHERE `name` = '%s'",
			PlayerInfo[playerid][pGpoint],PlayerInfo[playerid][pPremium],PlayerInfo[playerid][pGold],GetPlayerScoreEx(playerid),PlayerInfo[playerid][pConnectTime],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `RobSkill` = '%d', `RobTimes` = '%d', `RobRem` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pRobSkill],PlayerInfo[playerid][pRobTimes],PlayerInfo[playerid][pRobRem],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `TruckSkill` = '%d', `TruckTimes` = '%d', `TruckRem` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pTruckSkill],PlayerInfo[playerid][pTruckTimes],PlayerInfo[playerid][pTruckRem],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `FarmSkill` = '%d', `FarmTimes` = '%d', `FarmRem` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pFarmSkill],PlayerInfo[playerid][pFarmTimes],PlayerInfo[playerid][pFarmRem],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `PizzaSkill` = '%d', `PizzaTimes` = '%d', `PizzaRem` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pPizzaSkill],PlayerInfo[playerid][pPizzaTimes],PlayerInfo[playerid][pPizzaRem],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `MatsSkill` = '%d', `MatsTimes` = '%d', `MatsRem` = '%d', `NeedProgress` = '0|0' WHERE `name` = '%s'",
			PlayerInfo[playerid][pMatsSkill],PlayerInfo[playerid][pMatsTimes],PlayerInfo[playerid][pMatsRem],PlayerInfo[playerid][pNeedProgress][0],PlayerInfo[playerid][pNeedProgress][1],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `Jailed` = '%d', `JailTime` = '%d', `QuestProgress` = '%d|%d', `Quest` = '%d|%d', `Fuel` = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pJailed],PlayerInfo[playerid][pJailTime],PlayerInfo[playerid][pQuestProgress][0],PlayerInfo[playerid][pQuestProgress][1],PlayerInfo[playerid][pQuest][0],PlayerInfo[playerid][pQuest][1],PlayerInfo[playerid][pFuel],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
			//--------------------------------------------------------------
			mysql_format(SQL, saveQuery, sizeof(saveQuery), "UPDATE `users` SET `Cars` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `name`='%s'",
			PlayerInfo[playerid][pCarKey][0],PlayerInfo[playerid][pCarKey][1],PlayerInfo[playerid][pCarKey][2],PlayerInfo[playerid][pCarKey][3],PlayerInfo[playerid][pCarKey][4],PlayerInfo[playerid][pCarKey][5],
			PlayerInfo[playerid][pCarKey][6],PlayerInfo[playerid][pCarKey][7],PlayerInfo[playerid][pCarKey][8],PlayerInfo[playerid][pCarKey][9],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, saveQuery);
		}
	}
	return 1;
}
//==============================================================================
function AdminLog(const string[])
{
	new saveQuery[256], cleanString[128];
	mysql_escape_string(string, cleanString);
	mysql_format(SQL, saveQuery, sizeof(saveQuery), "INSERT INTO `adminlog` (`value`, `tickcount`) VALUES ('%s', '%d')", cleanString, GetTickCount());
	mysql_tquery(SQL, saveQuery);
	return 1;
}
//==============================================================================
function OnPlayerUpdateEx(playerid)
{
	if(IsPlayerConnected(playerid))
	{	
		if(gPlayerLogged[playerid] == true)
		{
			new var[256];
			mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLic`='%d',`FlyLic`='%d',`BoatLic`='%d',`FishLic`='%d',`GunLic`='%d',`RobPoint`='%d',`HitT`='%d',`PhoneNr`='%d',`Passport`='%d' WHERE `name`='%s'",
			PlayerInfo[playerid][pCarLic],PlayerInfo[playerid][pFlyLic],PlayerInfo[playerid][pBoatLic],PlayerInfo[playerid][pFishLic],PlayerInfo[playerid][pGunLic],PlayerInfo[playerid][pRobPoint],PlayerInfo[playerid][pHitT],PlayerInfo[playerid][pNumber],PlayerInfo[playerid][pPassport],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL, var);
		}
	}
	return 1;
}
//==============================================================================
function ShowVehiclesMenu(playerid)
{
	if(GetPlayerVehicles(playerid) == 0) return SCM(playerid, COLOR_YELLOW2, "{FFB870}Nu ai niciun vehicul personal!");
	new szTitle[64], string[256], szDialog[700], vstatus[MAX_STRING], s = 0;
	for(new i = 0; i < 10; i++)
	{
		sVehicle[i][playerid] = 0;
		if(PlayerInfo[playerid][pCarKey][i] == 0) s++;
	}
	switch(s)
	{
		case 0: format(szTitle, sizeof(szTitle), "Garajul lui %s", PlayerInfo[playerid][pNamePlayer]);
		case 1: format(szTitle, sizeof(szTitle), "Garajul lui %s (1 slot disponibil)", PlayerInfo[playerid][pNamePlayer]);
		case 2 .. 10: format(szTitle, sizeof(szTitle), "Garajul lui %s (%d sloturi disponibile)", PlayerInfo[playerid][pNamePlayer], s);
	}
	strcat(szDialog, "Nume Vehicul\tStatus\tTimp Despawn\tTip Vehicul\n");
	for(new i = 0; i < 10; i++)
	{
		if(PlayerInfo[playerid][pCarKey][i] > 0)
		{
			new car = PlayerInfo[playerid][pCarKey][i];
			if(sVehicle[0][playerid] == 0) sVehicle[0][playerid] = car;
			else if(sVehicle[1][playerid] == 0) sVehicle[1][playerid] = car;
			else if(sVehicle[2][playerid] == 0) sVehicle[2][playerid] = car;
			else if(sVehicle[3][playerid] == 0) sVehicle[3][playerid] = car;
			else if(sVehicle[4][playerid] == 0) sVehicle[4][playerid] = car;
			else if(sVehicle[5][playerid] == 0) sVehicle[5][playerid] = car;
			else if(sVehicle[6][playerid] == 0) sVehicle[6][playerid] = car;
			else if(sVehicle[7][playerid] == 0) sVehicle[7][playerid] = car;
			else if(sVehicle[8][playerid] == 0) sVehicle[8][playerid] = car;
			else if(sVehicle[9][playerid] == 0) sVehicle[9][playerid] = car;
			//--------------------------------------------------------------
			new tip[16];
			switch(CarInfo[car][cType])
			{
				case 0: tip = "Normal";
				case 1: tip = "{FFD857}Premium";
				case 2: tip = "{FFD857}Giftbox";
			}
			//--------------------------------------------------------------
			if(IsVehicleOccupied(CarInfo[car][cSpawned])) format(vstatus, sizeof(vstatus), "{FFFF00}Ocupat\t{ffffff}%s minute\t%s",CalculeazaTimp(CarInfo[car][cTime]),tip);
			else if(CarInfo[car][cSpawned] > 0 && CarInfo[car][cTime] > 0) format(vstatus, sizeof(vstatus), "{2BFF00}Disponibil\t{ffffff}%s minute\t%s",CalculeazaTimp(CarInfo[car][cTime]),tip);
			else format(vstatus, sizeof(vstatus), "Ascuns\t-\t-");
			//--------------------------------------------------------------
			format(string, sizeof(string), "%s\t%s\n", CarInfo[car][cName], vstatus);
			//--------------------------------------------------------------
			strcat(szDialog, string);
		}
	}
	SPD(playerid, DIALOG_GARAGE, DIALOG_STYLE_TABLIST_HEADERS, szTitle, szDialog, "Selecteaza", "Inchide");
	return 1;
}
//==============================================================================
function TempBanCheck(playerid)
{
	new szQuery[128], str[128], ban_day, ban_month, ban_year, year, month, day, BAN;
	getdate(year, month, day);
	format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `name` = '%s'", GetName(playerid));
	new Cache:banuri = mysql_query(SQL, szQuery);
	if(cache_num_rows() > 0)
    {
		cache_get_value_int(0, "TempBanDay", ban_day);
		cache_get_value_int(0, "TempBanMonth", ban_month);
		cache_get_value_int(0, "TempBanYear", ban_year);
		cache_get_value_int(0, "Banned", BAN);
		//--------------------------------------------------------------
		if(BAN == 1)
		{
			if(!(year >= ban_year && month >= ban_month && day >= ban_day))
			{
				format(str, sizeof(str), "* Acest cont este banat pana pe data de %d %s %d", ban_day, Luna(ban_month), ban_year);
				SCM(playerid, COLOR_RED, str);
				GameTextForPlayer(playerid,"~w~You are banned~n~~y~from this server!", 1110, 3);
				KickEx(playerid);
			}
			else
			{
				GameTextForPlayer(playerid,"~w~You are unbanned~n~~y~from this server!", 1110, 3);
				mysql_format(SQL, str, sizeof(str),"UPDATE `users` SET `Banned`='0' WHERE `name`='%s'",GetName(playerid));
				mysql_tquery(SQL, str, "","");
			}
		}
		else
		{
			mysql_format(SQL, szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `name` = '%s'", GetName(playerid));
			new Cache:file = mysql_query(SQL, szQuery);
			if(cache_num_rows() > 0) gPlayerAccount[playerid] = true;
			else gPlayerAccount[playerid] = false;
			cache_delete(file);
		}
	}
	cache_delete(banuri);
	return 1;
}
//==============================================================================
function SaveClans(const id)
{
	if(id > 0 && id < MAX_CLANS)
	{
		new query[700];
	    mysql_format(SQL, query, sizeof(query),"UPDATE `clans` SET `clanName`='%s', `clanOwner`='%s', `clanTag`='%s', `clanColor`='%s', `clanMOTD`='%s', `clanRankName1`='%s', `clanRankName2`='%s', `clanRankName3`='%s', `clanRankName4`='%s', `clanRankName5`='%s', `clanRankName6`='%s', `clanRankName7`='%s', `clanMembers`='%d' WHERE `clanID`='%d'",
		ClanInfo[id][ClanName],ClanInfo[id][ClanOwner],ClanInfo[id][ClanTag],ClanInfo[id][ClanColor],ClanInfo[id][ClanMOTD],ClanInfo[id][ClanRankName1],ClanInfo[id][ClanRankName2],ClanInfo[id][ClanRankName3],ClanInfo[id][ClanRankName4],ClanInfo[id][ClanRankName5],ClanInfo[id][ClanRankName6],ClanInfo[id][ClanRankName7],ClanInfo[id][ClanMembers],id);
		mysql_tquery(SQL, query);
	}
	return 1;
}
//==============================================================================
function SaveFactions(const id)
{
	if(id > 0 && id < MAX_FACTIONS)
	{
		new query[700];
		mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `fHQExteriorPosX` = '%f', `fHQExteriorPosY` = '%f', `fHQExteriorPosZ` = '%f', `fHQInteriorPosX` = '%f', `fHQInteriorPosY` = '%f', `fHQInteriorPosZ` = '%f' WHERE `factionID` = '%d'",
		FactionInfo[id][fHQExteriorPosX],FactionInfo[id][fHQExteriorPosY],FactionInfo[id][fHQExteriorPosZ],FactionInfo[id][fHQInteriorPosX],FactionInfo[id][fHQInteriorPosY],FactionInfo[id][fHQInteriorPosZ],id);
		mysql_tquery(SQL, query);
		//--------------------------------------------------------------
	    mysql_format(SQL, query, sizeof(query),"UPDATE `factions` SET `fMOTD` = '%s', `fMembers` = '%d', `fLeader` = '%s', `fAplication` = '%d', `fSafeMoney` = '%d', `fSafeDrugs` = '%d', `fSafeMats` = '%d', `fHQLockStatus` = '%d' WHERE `factionID` = '%d'",
		FactionInfo[id][fMOTD],FactionInfo[id][fMembers],FactionInfo[id][fLeader],FactionInfo[id][fAplication],FactionInfo[id][fSafeMoney],FactionInfo[id][fSafeDrugs],FactionInfo[id][fSafeMats],FactionInfo[id][fHQLockStatus],id);
		mysql_tquery(SQL, query);
	}
	return 1;
}
//==============================================================================
function SaveHouse(const id)
{
	if(id > 0 && id < MAX_HOUSES)
	{
	    new query[700];
		mysql_format(SQL, query, sizeof(query), "UPDATE `house` SET `hExteriorPosX` = '%f', `hExteriorPosY` = '%f', `hExteriorPosZ` = '%f', `hInteriorPosX` = '%f', `hInteriorPosY` = '%f', `hInteriorPosZ` = '%f', `hPrice` = '%d', `hOwner` = '%s' WHERE `houseID` = '%d'",
		HouseInfo[id][hEntranceX],HouseInfo[id][hEntranceY],HouseInfo[id][hEntranceZ],HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ],HouseInfo[id][hPrice],HouseInfo[id][hOwner],id);
		mysql_tquery(SQL, query);
		//--------------------------------------------------------------
		mysql_format(SQL, query, sizeof(query), "UPDATE `house` SET `hInteriorID` = '%d', `hRadio` = '%d', `hMoney` = '%d', `hRent` = '%d', `hOwned` = '%d', `hRadioLink` = '%s', `hRentabil` = '%d', `hDiscription` = '%s', `hRenters` = '%d', `hHeall` = '%d', `hArmor` = '%d' WHERE `houseID` = '%d'",
		HouseInfo[id][hInterior],HouseInfo[id][hRadio],HouseInfo[id][hMoney],HouseInfo[id][hRent],HouseInfo[id][hOwned],HouseInfo[id][hRadioLink],HouseInfo[id][hRentabil],HouseInfo[id][hDiscription],HouseInfo[id][hRenters],HouseInfo[id][hHeall],HouseInfo[id][hArmor],id);
		mysql_tquery(SQL, query);
	}
	new file4[32];
    format(file4, sizeof(file4), "/house/%i.ini", id);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
	INI_WriteInt(File, "Owned", HouseInfo[id][hOwned]);
    INI_WriteInt(File, "Level", HouseInfo[id][hLevel]);
	INI_WriteInt(File, "Interior", HouseInfo[id][hInterior]);
	INI_WriteInt(File, "Armour", HouseInfo[id][hArmor]);
	INI_WriteInt(File, "Heall", HouseInfo[id][hHeall]);
	INI_WriteString(File, "Money", FormatNumber(HouseInfo[id][hMoney]));
	INI_WriteString(File, "Price", FormatNumber(HouseInfo[id][hPrice]));
	INI_WriteString(File, "Owner", HouseInfo[id][hOwner]);
	INI_WriteString(File, "Name", HouseInfo[id][hDiscription]);
    INI_Close(File);
	return 1;
}
//==============================================================================
function SaveBusiness(const id)
{
	if(id > 0 && id < MAX_BUSINESS)
	{
	    new query[700];
		mysql_format(SQL, query, sizeof(query), "UPDATE `business` SET `bExteriorPosX` = '%f', `bExteriorPosY` = '%f', `bExteriorPosZ` = '%f', `bPrice` = '%d', `bOwner` = '%s', `bLocation` = '%d' WHERE `bizzID` = '%d'",
		BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],BizzInfo[id][bPrice],BizzInfo[id][bOwner],BizzInfo[id][bLocation],id);
		mysql_tquery(SQL, query);
		//--------------------------------------------------------------
		mysql_format(SQL, query, sizeof(query), "UPDATE `business` SET `bInteriorPosX` = '%f', `bInteriorPosY` = '%f', `bInteriorPosZ` = '%f', `bMoney` = '%d', `bOwned` = '%d', `bName` = '%s', `bEntranceCost` = '%d' WHERE `bizzID` = '%d'",
		BizzInfo[id][bExitX],BizzInfo[id][bExitY],BizzInfo[id][bExitZ],BizzInfo[id][bMoney],BizzInfo[id][bOwned],BizzInfo[id][bName],BizzInfo[id][bEntranceCost],id);
		mysql_tquery(SQL, query);
	}
    new file4[32];
    format(file4, sizeof(file4), "/business/%i.ini", id);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
	INI_WriteInt(File, "Owned", BizzInfo[id][bOwned]);
    INI_WriteInt(File, "Type", BizzInfo[id][bType]);
	INI_WriteInt(File, "Interior", BizzInfo[id][bInterior]);
	INI_WriteString(File, "Money", FormatNumber(BizzInfo[id][bMoney]));
	INI_WriteString(File, "Price", FormatNumber(BizzInfo[id][bPrice]));
	switch(BizzInfo[id][bLocation])
	{
		case 1: INI_WriteString(File, "Location", "Los Santos");
		case 2: INI_WriteString(File, "Location", "San Fierro");
		case 3: INI_WriteString(File, "Location", "Las Venturas");
		default: INI_WriteString(File, "Location", "undiscovered");
	}
	INI_WriteString(File, "Owner", BizzInfo[id][bOwner]);
	INI_WriteString(File, "Name", BizzInfo[id][bName]);
    INI_Close(File);
	return 1;
}
//==============================================================================
function FinishVote()
{
	new string[128];
	if(Votare == 1)
	{
		if(VoteInfo[0][Votes] > VoteInfo[1][Votes] && VoteInfo[0][Votes] > VoteInfo[2][Votes] && VoteInfo[0][Votes] > VoteInfo[3][Votes] && VoteInfo[0][Votes] > VoteInfo[4][Votes])
		{
			format(string,sizeof(string),"ANUNT: Votarea s-a terminat, %s a castigat cu %d voturi.",VoteInfo[0][ProposePlayer],VoteInfo[0][Votes]);
			SCMAll(COLOR_LIGHTGREEN,string);
		}
		else if(VoteInfo[1][Votes] > VoteInfo[0][Votes] && VoteInfo[1][Votes] > VoteInfo[2][Votes] && VoteInfo[1][Votes] > VoteInfo[3][Votes] && VoteInfo[1][Votes] > VoteInfo[4][Votes])
		{
			format(string,sizeof(string),"ANUNT: Votarea s-a terminat, %s a castigat cu %d voturi.",VoteInfo[1][ProposePlayer],VoteInfo[1][Votes]);
			SCMAll(COLOR_LIGHTGREEN,string);
		}
		else if(VoteInfo[2][Votes] > VoteInfo[1][Votes] && VoteInfo[2][Votes] > VoteInfo[0][Votes] && VoteInfo[2][Votes] > VoteInfo[3][Votes] && VoteInfo[2][Votes] > VoteInfo[4][Votes])
		{
			format(string,sizeof(string),"ANUNT: Votarea s-a terminat, %s a castigat cu %d voturi.",VoteInfo[2][ProposePlayer],VoteInfo[2][Votes]);
			SCMAll(COLOR_LIGHTGREEN,string);
		}
		else if(VoteInfo[3][Votes] > VoteInfo[1][Votes] && VoteInfo[3][Votes] > VoteInfo[2][Votes] && VoteInfo[3][Votes] > VoteInfo[0][Votes] && VoteInfo[3][Votes] > VoteInfo[4][Votes])
		{
			format(string,sizeof(string),"ANUNT: Votarea s-a terminat, %s a castigat cu %d voturi.",VoteInfo[3][ProposePlayer],VoteInfo[3][Votes]);
			SCMAll(COLOR_LIGHTGREEN,string);
		}
		else if(VoteInfo[4][Votes] > VoteInfo[1][Votes] && VoteInfo[4][Votes] > VoteInfo[2][Votes] && VoteInfo[4][Votes] > VoteInfo[3][Votes] && VoteInfo[4][Votes] > VoteInfo[0][Votes])
		{
			format(string,sizeof(string),"ANUNT: Votarea s-a terminat, %s a castigat cu %d voturi.",VoteInfo[4][ProposePlayer],VoteInfo[4][Votes]);
			SCMAll(COLOR_LIGHTGREEN,string);
		}
		else SCMAll(COLOR_LIGHTGREEN,"ANUNT: Votarea s-a terminat, nu a castigat nimeni deoarece primii 2 au acelasi numar de voturi.");
		foreach(new i: Player)
		{
			PlayerInfo[i][pVoted] = 0;
			PlayerInfo[i][pPropose] = 0;
			mysql_query(SQL, "UPDATE `users` SET `Voted` = '0', `Propose` = '0'");
		}
		for(new i = 0; i < 5; i++)
		{
			StrmidEx(VoteInfo[i][ProposePlayer], "");
			VoteInfo[i][VotedPlayer] = 0;
			VoteInfo[i][Votes] = 0;
			Votare = 0;
		}
	}
	return 1;
}
//==============================================================================
function CheckPlayerClanTag(playerid)
{
	new tag[6], name[MAX_PLAYER_NAME], Cache:file = mysql_query(SQL, "SELECT `clanTag` FROM `clans`");
	for(new i, j = cache_num_rows(); i != j; i++)
	{
		cache_get_value(i, "clanTag", tag, 6);
		if(strfind(GetName(playerid), tag, true) != -1)
		{
			new oldname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, oldname, sizeof(oldname));
			str_replace("", tag, oldname, name);
			SetPlayerName(playerid, name);
			break;
		}
	}
	cache_delete(file);
	return 1;
}
//==============================================================================
function CheckPremium(const playerid)
{
	new pday, pmonth, pyear, year, month, day;
	getdate(year, month, day);
	if(cache_num_rows() > 0)
    {
		cache_get_value_int(0, "TempPremiumDay", pday);
		cache_get_value_int(0, "TempPremiumMonth", pmonth);
		cache_get_value_int(0, "TempPremiumYear", pyear);
		//--------------------------------------------------------------
		if(!(year >= pyear && month >= month && day >= pday)) {
			if(PlayerInfo[playerid][pPremium] == 1)	SFM(playerid, COLOR_WHITE, "SERVER: Contul dumneavoastra inca este Premium pana pe data de %d %s %d.", pday, Luna(pmonth), pyear);
		}
		else
		{
			if(PlayerInfo[playerid][pPremium] == 1)
			{
				PlayerInfo[playerid][pPremium] = 0;
				SFM(playerid, COLOR_YELLOW, "Contul dumneavoastra premium a expirat pe data de %d %s %d.", pday, Luna(pmonth), pyear);
				pUpdate(playerid, pPremiumx);
			}
		}
	}
	return 1;
}
//==============================================================================
function CheckVariables(playerid)
{
	// Normal Variables
	for(new i = 0; i < MAX_JOBS; i++) {
		JobCar[playerid][i] = -1;
	}
	BuyCar[playerid] = -1;						Select[playerid][49] = 0;
	NearPNS[playerid] = 1;						LastBizz[playerid] = -1;
	SilentAimCount[playerid] = 0;				AdvPlayer[playerid] = 0;
	VehHP[playerid] = 0;						ExamCar[playerid] = 0;
	FactionSpectate[playerid] = 0;				RImmunity[playerid] = 0;
	PhoneOnline[playerid] = 0;					gPlayerLogTries[playerid] = 3;
	PlayerPaintballScore[playerid] = 0; 	   	Sleeping[playerid] = 0;
	RobTimer[playerid] = 0; 					FactionOffer[playerid] = -1;
	Trucker2[playerid] = 0;             		Speedlimit[playerid] = 0;
	VamaOn[playerid] = 0;						MoneyMessage[playerid] = 0;
	Event[playerid] = 0; 						Cautat[playerid] = -1;
	RepairOffer[playerid] = -1; 				RepairPrice[playerid] = 0;
	RepairCar[playerid] = 0; 					TakingLesson[playerid] = 0;
	TalkingLive[playerid] = 255; 				LiveOffer[playerid] = -1;
	RefillOffer[playerid] = -1; 				RefillPrice[playerid] = 0;
	DrugOffer[playerid] = -1; 					PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0; 			DrugPrice[playerid] = 0;
	DrugGram[playerid] = 0; 					TotalMoney[playerid] = 0;
	OrderReady[playerid] = 0;					GotHit[playerid] = 0;
	GoChase[playerid] = 999; 					GetChased[playerid] = 999;
	OnDuty[playerid] = 0; 						CP[playerid] = 0;
	TransportDuty[playerid] = 0;				TaxiCallTime[playerid] = 0;
	MedicCallTime[playerid] = 0; 				MechanicCallTime[playerid] = 0;
	MechanicCall[playerid] = -1;				MedicCall[playerid] = -1;
	JobDuty[playerid] = 0; 						Wartimeon[playerid] = 0;
	Mobile[playerid] = -1; 						WantedReason[playerid] = 999;
	Spectate[playerid] = -1; 					PlayerDrunk[playerid] = 0;
	farmerc[playerid] = 0;						
	farmertime[playerid] = 0;					mail[playerid] = 0;
	HireCar[playerid] = -1; 					KeyCar[playerid] = -1;
	Undercover[playerid] = 0;   				RobTime[playerid] = 0;
    gLastCar[playerid] = 0; 					ProAimCount[playerid] = 0;
	SwitchKey[playerid] = 2;					RentTime[playerid] = 0;
	ChooseInt[playerid] = 0; 					decon[playerid] = 0;
	TicketMoney[playerid] = 0;					pizzaprice[playerid] = 0;
	Fishing[playerid] = 0; 						FishTimer[playerid] = 0;
 	TipPeste[playerid] = -1; 					AreFaina[playerid] = 0;
 	TransferOffer[playerid] = 0; 				TransferMoney[playerid] = 0;
	PlayerTazeTime[playerid] = 0; 				LastCheckpoint[playerid] = 0;
	XCheckpoints[playerid] = 0;					NoReloading[playerid] = 0;
	CurrentWeapon[playerid] = 0;				CurrentAmmo[playerid] = 0;
	StartTime[playerid] = 0; 					TicketOffer[playerid] = -1;
	TutTime[playerid] = 0; 						playerdeath[playerid] = 0;
	viddd[playerid] = 0; 						Trucker[playerid] = 0;
	Trucker3[playerid] = 0; 					Trucker4[playerid] = 0;
	TruckID[playerid] = 0;						TaxiAccepted[playerid] = 999;
	SellgunOffer[playerid] = -1;				SellgunPrice[playerid] = 0;
	SellgunMats[playerid] = 0;					SellgunAmmo[playerid] = 0;
	SellgunID[playerid] = 0;					helpmeaccepted[playerid] = -1;
	helpmesend[playerid] = -1; 					adminacceptedhelp[playerid] = -1;
	playerhavehelp[playerid] = -1; 				Radaron[playerid] = 0;
	Radarlimit[playerid] = 0;					reportaccepted[playerid] = -1;
	reportsend[playerid] = -1;					adminacceptedreport[playerid] = -1;
	playerhavereport[playerid] = -1;            TaxiCall[playerid] = -1;
	Pizza[playerid] = 0;						FuelBought[playerid] = 0;
	OwnableCarOffer[playerid] = -1;				OwnableCarID[playerid] = 0;
	OwnableCarPrice[playerid] = 0;				TransportValue[playerid] = 0;
	TransportMoney[playerid] = 0; 				TransportTime[playerid] = 0;
	TransportCost[playerid] = 0; 				TransportDriver[playerid] = 999;
 	PlacedNews[playerid] = 0;					ListenRadio[playerid] = sizeof(RadioName);
	BugRefill[playerid] = 0; 					BugRepair[playerid] = 0;
	BugTicket[playerid] = 0; 					JobWorking[playerid] = 0;
	UsingDrugs[playerid] = 0; 					TimeFish[playerid] = 0;
	invitatiebarbut[playerid] = -1;				sumabarbut[playerid] = 0;
	goldcost[playerid] = 0;						zilegold[playerid] = 0;
	Megaphone[playerid] = 0;					Somatii[playerid] = 0;
	Point[playerid] = 0;						PaintBallVoted[playerid] = 0;
	pDrunkLevelLast[playerid] = 0;				PaintBallVoted2[playerid] = 0;
	gPlayerUsingLoopingAnim[playerid] = 0;		FlyMode[playerid] = 0;
	TowAcc[playerid] = 0;						dicetime[playerid] = 0;
	WTChannel[playerid] = 0.0;					FPS[playerid] = 0;	
	JucatorCautat[playerid] = -1;				HouseEntered[playerid] = -1;
	BizzEntered[playerid] = -1;			   	   	FactionEntered[playerid] = -1;
	Spawner[playerid] = 0;						PlayerPaintballing[playerid] = 0;
	// User Variables
	PlayerInfo[playerid][pLevel] = 1;			PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pHelper] = 0;			PlayerInfo[playerid][pRobPoint] = 0;
	PlayerInfo[playerid][pPremium] = 0;			PlayerInfo[playerid][pGpoint] = 0;
	PlayerInfo[playerid][pConnectTime] = 0.0;	PlayerInfo[playerid][pRobSkill] = 1;
	PlayerInfo[playerid][pRobTimes] = 0;		PlayerInfo[playerid][pRobRem] = 0;
	PlayerInfo[playerid][pReg] = 0;				PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pExp] = 0;				PlayerInfo[playerid][pBank] = 15000;
	PlayerInfo[playerid][pSkin] = 289;			PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pPhone] = 0;			PlayerInfo[playerid][pFactionRank] = 0;
	PlayerInfo[playerid][pClan] = 0;			PlayerInfo[playerid][pClanRank] = 0;
	PlayerInfo[playerid][pFishes] = 0;			PlayerInfo[playerid][pFishPrice] = 0;
	PlayerInfo[playerid][pJob] = 0;				PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;			PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pWantedTime] = 0;		PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pMats] = 0;			PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pLeader] = 0;			PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pTruckSkill] = 1;		PlayerInfo[playerid][pTruckTimes] = 0;
	PlayerInfo[playerid][pTruckRem] = 0;		PlayerInfo[playerid][pFarmSkill] = 1;
	PlayerInfo[playerid][pFarmTimes] = 0;		PlayerInfo[playerid][pFarmRem] = 0;
	PlayerInfo[playerid][pPizzaSkill] = 1;		PlayerInfo[playerid][pPizzaTimes] = 0;
	PlayerInfo[playerid][pPizzaRem] = 0;		PlayerInfo[playerid][pMatsSkill] = 1;
	PlayerInfo[playerid][pMatsTimes] = 0;		PlayerInfo[playerid][pMatsRem] = 0;
	PlayerInfo[playerid][pNumber] = -1;			PlayerInfo[playerid][pHouseKey] = 255;
	PlayerInfo[playerid][pBizzKey] = 255;		PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;			PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;			PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pPassport] = 0;		PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pClanTagType] = 0;		PlayerInfo[playerid][pNeedProgress][1] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;		PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pWarns] = 0;			PlayerInfo[playerid][pFwarn] = 0;
	PlayerInfo[playerid][pFuel] = 0;			PlayerInfo[playerid][pBanned] = 0;
	PlayerInfo[playerid][pPunish] = 0;			PlayerInfo[playerid][pMP3] = 0;
	PlayerInfo[playerid][pCanistra] = 0;		PlayerInfo[playerid][pGold] = 0;
	PlayerInfo[playerid][pGlasses] = -1;		PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pUndita] = 0;			PlayerInfo[playerid][pMomeala] = 0;
	PlayerInfo[playerid][pFireworks] = 0;		PlayerInfo[playerid][pHat] = -1;
	PlayerInfo[playerid][pRented] = -2;			PlayerInfo[playerid][pFreePoint] = 0;
	PlayerInfo[playerid][pPinLogged] = 0;		PlayerInfo[playerid][pSeconds] = 0;
	PlayerInfo[playerid][pSpawn] = 0;			PlayerInfo[playerid][pMoney] = 100000;
	PlayerInfo[playerid][pQuest][0] = 0;		PlayerInfo[playerid][pQuestProgress][0] = 0;
	PlayerInfo[playerid][pQuest][1] = 0;		PlayerInfo[playerid][pQuestProgress][1] = 0;
	PlayerInfo[playerid][pHitT] = 0;			PlayerInfo[playerid][pLastDayLogs] = 0;
	PlayerInfo[playerid][pHidden] = 0;			PlayerInfo[playerid][pVoted] = 0;
	PlayerInfo[playerid][pPropose] = 0;			PlayerInfo[playerid][pNeedProgress][0] = 0;
	for(new i = 0; i < 10; i++)
	{
		if(i < 4) PlayerInfo[playerid][pCarKey][i] = 0;
        if(i > 3) PlayerInfo[playerid][pCarKey][i] = -1;
	}
	// Bool Variables
	Centura[playerid] = false;					ShowHealth[playerid] = false;
	ShowFPS[playerid] = false;					gPlayerAccount[playerid] = false;
	TogFind[playerid] = true;					TogBid[playerid] = true;
	TogAdmin[playerid] = true;					TogHelper[playerid] = true;
	TogFaction[playerid] = true;				TogClan[playerid] = true;
	TogPremium[playerid] = true;				TogCheckpoint[playerid] = true;
	gPlayerLogged[playerid] = false;
	for(new i = 0; i < 13; i++) {
		WeaponData[playerid][i] = false; 	
	}
	return 1;
}
//==============================================================================
function StopWork(playerid, vehicleid, jobid)
{
	switch(jobid)
	{
		case 2:
		{
			SCM(playerid,COLOR_JOB,"Au trecut 2 minute fara sa te urci in vehiculul de la job iar acesta a fost distrus.");
			if(farmerc[playerid] == 1)
			{
				farmerc[playerid] = 0;
				farmertime[playerid] = 0;
				PlayerTextDrawHide(playerid, FarmJob);
				PlayerTextDrawHide(playerid, FarmBox);
				PlayerTextDrawHide(playerid, FarmTime);
				PlayerTextDrawHide(playerid, FarmSpeed);
				PlayerTextDrawHide(playerid, FarmWanted);
				DestroyVehicleEx(vehicleid);
				JobCar[playerid][2] = -1;
				gCarLock[vehicleid] = 0;
				StaticVeh[vehicleid][svJob] = 0;
				JobWorking[playerid] = 0;
			}
		}
		case 3:
		{
			SCM(playerid,COLOR_JOB,"Au trecut 2 minute fara sa te urci in vehiculul de la job iar acesta a fost distrus.");
			DestroyVehicleEx(vehicleid);
			JobCar[playerid][3] = -1;
			gCarLock[vehicleid] = 0;
			StaticVeh[vehicleid][svJob] = 0;
			DisablePlayerCheckpointEx(playerid);
			JobWorking[playerid] = 0;
		}
		case 4:
		{
			SCM(playerid,COLOR_JOB,"Au trecut 2 minute fara sa te urci in vehiculul de la job iar acesta a fost distrus.");
			DestroyVehicleEx(vehicleid);
			JobCar[playerid][4] = -1;
			gCarLock[vehicleid] = 0;
			StaticVeh[vehicleid][svJob] = 0;
			DisablePlayerCheckpointEx(playerid);
			JobWorking[playerid] = 0;
		}
		case 5:
		{
			SCM(playerid,COLOR_JOB,"Au trecut 2 minute fara sa te urci in vehiculul de la job iar acesta a fost distrus.");
			PlayerTextDrawHide(playerid, PizzaText);
			PlayerTextDrawHide(playerid, PizzaSimbol);
			Pizza[playerid] = 0;
			DestroyVehicleEx(vehicleid);
			JobCar[playerid][5] = -1;
			gCarLock[vehicleid] = 0;
			StaticVeh[vehicleid][svJob] = 0;
			DisablePlayerCheckpointEx(playerid);
			JobWorking[playerid] = 0;
		}
		case 6:
		{
			SCM(playerid,COLOR_JOB,"Au trecut 2 minute fara sa te urci in vehiculul de la job iar acesta a fost distrus.");
			DestroyVehicleEx(vehicleid);
			JobCar[playerid][6] = -1;
			gCarLock[vehicleid] = 0;
			Trucker[playerid] = 0;
			Trucker2[playerid] = 0;
			Trucker3[playerid] = 0;
			Trucker4[playerid] = 0;
	        DestroyVehicleEx(viddd[playerid]);
	        viddd[playerid] = 0;
	        TruckID[playerid] = 0;
	        StaticVeh[vehicleid][svJob] = 0;
	        DisablePlayerCheckpointEx(playerid);
			JobWorking[playerid] = 0;
		}
	}
	return 1;
}
//==============================================================================
function PlaceAD(playerid)
{
	new string[500];
	format(string, sizeof(string), "Anunt publicat de %s [{ffffff}Telefon: %d{A1FF26}]: %s",GetName(playerid),PlayerInfo[playerid][pNumber],AdvMSG[playerid]);
	foreach(new i: Player) {
		if(i != playerid) SendSplitMessage(i, 0xA1FF26FF, string);
	}
	SCM(playerid, COLOR_GREEN, "Anuntul tau:");
	format(string, sizeof(string), "Anunt publicat de %s [{ffffff}Telefon: %d{A1FF26}]: %s",GetName(playerid),PlayerInfo[playerid][pNumber],AdvMSG[playerid]);
	SendSplitMessage(playerid, 0xA1FF26FF, string);
	SCM(playerid, COLOR_GREEN, "Acum poti plasa un nou anunt.");
	AdvPlayer[playerid] = 0;
	StrmidEx(AdvMSG[playerid], "");
	return 1;
}
//==============================================================================
function RemoveSomatie(playerid)
{
	if(Somatii[playerid] != 0) Somatii[playerid] = 0;
	return 1;
}
//==============================================================================
function GiveQuest(playerid)
{
	new query[MAX_STRING];
	PlayerInfo[playerid][pQuest][0] = random(MAX_QUEST)+1;
	PlayerInfo[playerid][pQuestProgress][0] = 0;
	//--------------------------------------------------------------
	PlayerInfo[playerid][pQuest][1] = random(MAX_QUEST)+1;
	PlayerInfo[playerid][pQuestProgress][1] = 0;
	//--------------------------------------------------------------
	QuestProgress(playerid, PlayerInfo[playerid][pQuest][0], 0);
	QuestProgress(playerid, PlayerInfo[playerid][pQuest][1], 1);
	//--------------------------------------------------------------
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Quest`='%d|%d', `QuestProgress`='%d|%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuest][0],PlayerInfo[playerid][pQuest][1],PlayerInfo[playerid][pQuestProgress][0],PlayerInfo[playerid][pQuestProgress][1],PlayerInfo[playerid][pNamePlayer]);
	mysql_tquery(SQL, query);
	//--------------------------------------------------------------
	if(PlayerInfo[playerid][pQuest][0] == PlayerInfo[playerid][pQuest][1]) return GiveQuest(playerid);
	return 1;
}
//==============================================================================
function ResetPickups() 
{
	for(new i = 0; i < MAX_PICKUPS; i++) {
		if(DropInfo[i][dID] != -1) DropInfo[i][dID] = -1;
	}
	return 1;
}
//==============================================================================
function DestroyPickups() 
{
	for(new i = 0; i < MAX_PICKUPS; i++) 
	{
		if(DropInfo[i][dID] != -1) 
		{
			DestroyDynamicPickup(DropInfo[i][dID]);
			DropInfo[i][dID] = -1;
		}
	}
	return 1;
}
//==============================================================================
function DropWeapons(playerid) 
{
	new Float:Pos[3], weapon, ammo, idd;
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	weapon = GetPlayerWeapon(playerid);
	ammo = GetPlayerAmmo(playerid);
	if(weapon != 0 && ammo != 0) 
	{
		idd = CheckIDEmpty();
		DropInfo[idd][dID] = CreateDynamicPickup(WeaponObject(weapon), 23, Pos[0]+1, Pos[1]+2, Pos[2], -1);
		DropInfo[idd][dWeapon] = weapon;
		DropInfo[idd][dAmmo] = ammo;
		SetPlayerArmedWeapon(playerid, weapon);
		SetPlayerAmmo(playerid, weapon, 0);
	}
	return 1;
}
//==============================================================================
function OnPropUpdate(const type[], const id)
{
	new string[450];
    if(strcmp(type, "casa", true) == 0)
	{
	    DestroyDynamic3DTextLabel(HouseInfo[id][hTextInfo]);
     	HouseInfo[id][hTextInfo] = CreateDynamic3DTextLabel("",0xFF0000FF,HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		if(HouseInfo[id][hOwned] == 0)
	    {
	        format(string, sizeof(string), "{29CC3F}House %d\nAceasta casa este de vanzare\n{29CC3F}Pret: {FFFFFF}%s$\n{29CC3F}Level: {FFFFFF}%d\n{29CC3F}Pentru a cumpara casa foloseste /buyhouse",id,FormatNumber(HouseInfo[id][hPrice]),HouseInfo[id][hLevel]);
	        UpdateDynamic3DTextLabelText(HouseInfo[id][hTextInfo],0xfffFffFF,string);
			DestroyDynamicMapIcon(HouseInfo[id][hMapIcon]);
	        DestroyDynamicPickup(HouseInfo[id][hPickup]);
	        HouseInfo[id][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ]);
			HouseInfo[id][hMapIcon] = CreateDynamicMapIcon(HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ], 31, 0);
	    }
	   	else if(HouseInfo[id][hOwned] == 1)
	    {
	        if(HouseInfo[id][hRentabil] == 0)
	        {
	        	format(string, sizeof(string), "{003399}House %d\n{FFFFFF}%s\n{003399}Detinator: {ffffff}%s\n{003399}Level: {FFFFFF}%d",id,HouseInfo[id][hDiscription],HouseInfo[id][hOwner],HouseInfo[id][hLevel]);
	        	UpdateDynamic3DTextLabelText(HouseInfo[id][hTextInfo],0xfffFffFF,string);
			}
			else
			{
	        	format(string, sizeof(string), "{003399}House %d\n{FFFFFF}%s\n{003399}Detinator: {FFFFFF}%s\n{003399}Level: {FFFFFF}%d\n{003399}Pret chirie:{FFFFFF} %d$\n{003399}Pentru a sta in chirie foloseste /rentroom",id,HouseInfo[id][hDiscription],HouseInfo[id][hOwner],HouseInfo[id][hLevel],HouseInfo[id][hRent]);
	        	UpdateDynamic3DTextLabelText(HouseInfo[id][hTextInfo],0xfffFffFF,string);
			}
			DestroyDynamicPickup(HouseInfo[id][hPickup]);
			HouseInfo[id][hPickup] = CreateDynamicPickup(1272, 1, HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ]);
		}
    }
    else if(strcmp(type, "bizz", true) == 0)
	{
	    DestroyDynamic3DTextLabel(BizzInfo[id][bTextInfo]);
	    BizzInfo[id][bTextInfo] = CreateDynamic3DTextLabel("",0xFF0000FF,BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		if(BizzInfo[id][bOwned] == 0)
        {
            format(string, sizeof(string), "{E0BC1B}Bizz %d\nAcesta afacere este de vanzare\n{FFFFFF}%s\n{E0BC1B}Pret: {FFFFFF}%s$\n{E0BC1B}Level: {FFFFFF}%d\n{E0BC1B}Pentru a cumpara afacerea foloseste /buybiz",id,BizzInfo[id][bName],FormatNumber(BizzInfo[id][bPrice]),BizzInfo[id][bLevel]);
            UpdateDynamic3DTextLabelText(BizzInfo[id][bTextInfo],0x0F90FAFF,string);
        }
		else if(BizzInfo[id][bOwned] == 1)
		{
			if(BizzInfo[id][bType] == 12 || BizzInfo[id][bType] == 10 || BizzInfo[id][bType] == 16 || id == 20) {
				format(string, sizeof(string), "{E0BC1B}Bizz %d\n{FFFFFF}%s\n{E0BC1B}Detinator: {FFFFFF}%s\n{E0BC1B}Level: {FFFFFF}%d\n{E0BC1B}Pret Intrare: {FFFFFF}%d$",id,BizzInfo[id][bName],BizzInfo[id][bOwner],BizzInfo[id][bLevel],BizzInfo[id][bEntranceCost]);
			}
			else {
			    format(string, sizeof(string), "{E0BC1B}Bizz %d\n{FFFFFF}%s\n{E0BC1B}Detinator: {FFFFFF}%s\n{E0BC1B}Level: {FFFFFF}%d\n{E0BC1B}Pret Intrare: {FFFFFF}%d$\n{E0BC1B}Tasteaza [ENTER] pentru a intra.",id,BizzInfo[id][bName],BizzInfo[id][bOwner],BizzInfo[id][bLevel],BizzInfo[id][bEntranceCost]);
			}
            UpdateDynamic3DTextLabelText(BizzInfo[id][bTextInfo],0xFFFFFFFF,string);
        }
		DestroyDynamicMapIcon(BizzInfo[id][bMapIcon]);
        DestroyDynamicPickup(BizzInfo[id][bPickup]);
		BizzInfo[id][bPickup] = CreateDynamicPickup(1239, 1, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]);
		if(BizzInfo[id][bType] == 1) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],52,0); //Bank
		if(BizzInfo[id][bType] == 2) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],6,0); //GunShop
		if(BizzInfo[id][bType] == 3) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],49,0); //Bars
		if(BizzInfo[id][bType] == 4) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],38,0); //Sex Shop
	 	if(BizzInfo[id][bType] == 5) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],25,0); //Casino
		if(BizzInfo[id][bType] == 6) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],17,0); //24/7
		if(BizzInfo[id][bType] == 7) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],10,0); //Burger Shot
		if(BizzInfo[id][bType] == 8) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],54,0); //Gym
		if(BizzInfo[id][bType] == 9) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],29,0); //Pizza
		if(BizzInfo[id][bType] == 10) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],55,0); //Rent Car
		if(BizzInfo[id][bType] == 11) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],45,0); //Clothes
		if(BizzInfo[id][bType] == 12) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],56,0); //Gas Station
		if(BizzInfo[id][bType] == 13) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],63,0); //PNS
		if(BizzInfo[id][bType] == 14) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],14,0); //Cluckin Bell
		if(BizzInfo[id][bType] == 15) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],19,0); //Paintball
		if(BizzInfo[id][bType] == 16) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],12,0); //CNN
		if(BizzInfo[id][bType] == 17) BizzInfo[id][bMapIcon] = CreateDynamicMapIcon(BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ],35,0); //Spawn
	}
	return 1;
}
//==============================================================================
function AntiCheatTimer()
{
	foreach(new i: Player)
	{
		if(gPlayerLogged[i] == true)
		{
			new vehicleid = GetPlayerVehicleID(i), string[256], Float:armour, Float:pa, Float:health, Float:ph;
			GetPlayerArmourEx(i, armour);
			GetPlayerHealthEx(i, health);
			GetPlayerArmour(i, pa);
			GetPlayerHealth(i, ph);
			if(pa > armour) SetPlayerArmourEx(i, armour);
			if(ph > health) SetPlayerHealthEx(i, health);
			if(!IsPlayerInRangeOfPoint(i, 87.5, LastPosX[i], LastPosY[i], LastPosZ[i]) && FlyMode[i] == 0 && WarningsCheat[i][teleport] == 0 && PlayerInfo[i][pAdmin] == 0 && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID && !IsPlayerPaused(i))
			{
				WarningsCheat[i][airbreak] += 2;
				if(WarningsCheat[i][airbreak] >= 3)
				{
					format(string,sizeof(string),"AdmWarning: %s (ID: %d) este posibil sa foloseasca AirBreak-Teleport-Hack!",GetName(i),i);
					SendAdminMessage(string,1);
				}
			}
			GetPlayerPos(i, LastPosX[i], LastPosY[i], LastPosZ[i]);
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[i][pAdmin] == 0)
			{
				format(string,sizeof(string),"AdmWarning: %s (ID: %d) este posibil sa foloseasca Jetpack-Hack!",GetName(i),i);
				SendAdminMessage(string,1);
			}
			new Float:PosX, Float:PosY, Float:PosZ;
			GetPlayerVelocity(i, PosX, PosY, PosZ);
			if((PosX <= -0.800000 || PosY <= -0.800000 || PosZ <= -0.800000) && (GetPlayerAnimationIndex(i) == 1543 || GetPlayerAnimationIndex(i) == 1538 || GetPlayerAnimationIndex(i) == 1539) && FlyMode[i] == 0)
			{
				format(string,sizeof(string),"AdmWarning: %s (ID: %d) este posibil sa foloseasca Fly-Hack!",GetName(i),i);
				SendAdminMessage(string,1);
			}
			if(GetVehicleSpeed(vehicleid) > 250 && !IsPlayerPaused(i) && !IsAPlane(vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerInfo[i][pAdmin] == 0)
			{
				format(string,sizeof(string),"AdmWarning: %s (ID: %d) a prins %.0d km/h cu vehiculul de tip %s!",GetName(i),i,GetVehicleSpeed(vehicleid),GetVehicleName(vehicleid));
				SendAdminMessage(string,1);
			}
			if(Vehicle[vehicleid] != 1 && IsValidVehicle(vehicleid))
			{
				WarningsCheat[i][vcreate] += 3;
				if(WarningsCheat[i][vcreate] == 9)
				{
					format(string,sizeof(string),"AdmWarning: Vehiculul %d a fost creeat neregulamentar pe server de un hack!",vehicleid);
					SendAdminMessage(string,1);
				}
			}
			new updown, leftright, keys;
			GetPlayerKeys(i, keys, updown, leftright);
			if((updown != 128 && updown != 0 && updown != -128) || (leftright != 128 && leftright != 0 && leftright != -128))
			{
				format(string,sizeof(string),"AdmWarning: %s (ID: %d) este posibil sa foloseasca JoyPad!",GetName(i),i);
				SendAdminMessage(string,1);
				SCM(i,0xEBF224ff,"Warning: Apucate sa folosesti tastatura pentru a nu primi kick.");
			}
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerPing(i) < 350 && GetPlayerInteriorEx(i) == 0)
			{
				new Float:vhp;
				GetVehicleHealth(vehicleid, vhp);
				if(NearTuning(i) || NearSpray(i))
				{
					if(vhp >= 1000.0)
					{
						WarningsCheat[i][vhealth] = 0;
						RImmunity[i] = 1;
						SetVehicleHealth(vehicleid, 999.9);
					}
				}
				if(vhp > 999.9 && RImmunity[i] == 0)
				{
					if(!NearTuning(i) || !NearSpray(i) || !IsPlayerPaused(i))
					{
						WarningsCheat[i][vhealth] += 2;
						{
							if(WarningsCheat[i][vhealth] > 10)
							{
								format(string,sizeof(string),"AdmWarning: %s (ID: %d, VID: %d) este posibil sa foloseasca Vehicle-Repair-Hack!",GetName(i),i,vehicleid);
								SendAdminMessage(string,1);
								SetVehicleHealth(vehicleid, 999.9);
								RemovePlayerFromVehicleEx(i);
							}
						}
					}
				}
				if(!NearTuning(i) && !NearSpray(i) && NearPNS[i] == 1) 
				{ 
					DisableRemoteVehicleCollisions(i, 0);
					NearPNS[i] = 0;
				}
				if(NearTuning(i) || NearSpray(i))
				{
					DisableRemoteVehicleCollisions(i, 1);
					NearPNS[i] = 1;
				}
			}
			if(RImmunity[i] == 1) RImmunity[i] = 0;
			if(WarningsCheat[i][vcreate] > 0) WarningsCheat[i][vcreate]--;
			if(WarningsCheat[i][airbreak] > 0) WarningsCheat[i][airbreak]--;
			if(WarningsCheat[i][vspawner] > 0) WarningsCheat[i][vspawner]--;
			if(WarningsCheat[i][vhealth] > 0) WarningsCheat[i][vhealth]--;
			if(WarningsCheat[i][teleport] > 0) WarningsCheat[i][teleport]--;
		}
	}
	return 1;
}
//==============================================================================
function IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(x > minx && x < maxx && y > miny && y < maxy) return 1;
	else return 0;
}
//==============================================================================
function TowAgain(playerid)
{
	TowAcc[playerid] = 0;
	SCM(playerid,COLOR_GRAD2,"Acum poti tracta din nou un vehicul.");
	return 1;
}
//==============================================================================
function UnfreezeT(playerid)
{
	if(UsingDrugs[playerid] == 1) UsingDrugs[playerid] = 0;
	StopLoopingAnim(playerid);
	ClearAnimations(playerid);
	return 1;
}
//==============================================================================
function OtherTimer()
{
    foreach(new i: Player)
	{
	    new string[256];
		if(CellTime[i] > 0)
		{
			if(CellTime[i] == 60)
			{
				CellTime[i] = 1;
				if(Mobile[Mobile[i]] == i) {
					CallCost[i] = CallCost[i] + callcost;
				}
			}
			CellTime[i] = CellTime[i] + 1;
			if(Mobile[Mobile[i]] == -1 && CellTime[i] == 5)
			{
				if(IsPlayerConnected(Mobile[i]))
				{
					new called[MAX_PLAYER_NAME];
					GetPlayerName(Mobile[i], called, sizeof(called));
					format(string, sizeof(string), "* Telefonul lui %s a inceput sa sune.", called);
					RingTone[Mobile[i]] = 10;
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			GivePlayerCash(i, -CallCost[i]);
			BizzInfo[2][bMoney] += CallCost[i];
			CallCost[i] = 0;
		}
		if(TransportTime[i] > 0)
		{
			if(TransportTime[i] >= 10)
			{
				TransportTime[i] = 1;
				if(TransportDriver[i] < 999)
				{
					if(IsPlayerConnected(TransportDriver[i]))
					{
						TransportCost[i] += TransportValue[TransportDriver[i]];
						TransportCost[TransportDriver[i]] = TransportCost[i];
					}
				}
			}
			TransportTime[i] += 1;
			format(string, sizeof(string), "Money Earned: ~g~+%s$", FormatNumber(TransportCost[i]));
			PlayerTextDrawSetString(i, TaxiTD, string);
			PlayerTextDrawShow(i, TaxiTD);
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new vehicle = GetPlayerVehicleID(i), vsid = FindSpawnID(vehicle), speed = GetVehicleSpeed(vehicle);
			if(IsAnOwnableCar(vehicle))
			{
				if(speed > 10 && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle && !IsPlayerPaused(i))
				{
					new Float:health;
					GetVehicleHealth(vehicle, health);
					CarInfo[vsid][cKM] += (speed*0.1)/1000;
					CarInfo[vsid][cHealth] = health;
				}
			}
			if(!IsABike(vehicle) && EngineSTATE[vehicle] == 1)
			{
				if(Gas[vehicle] > 0)
				{
					new Float:PosV[3], Float:dist = GetVehicleDistanceFromPoint(vehicle, PosV[0], PosV[1], PosV[2]);
					Gas[vehicle] -= (0.222 * ((speed / 60) + 0.015) / 30) * ((dist / 450) + 0.015);
					if(IsAnOwnableCar(vehicle)) CarInfo[vsid][cFuel] = Gas[vehicle];
					GetVehiclePos(vehicle, PosV[0], PosV[1], PosV[2]);
				}
				else
				{
					SCM(i,COLOR_GRAD2,"Acest vehicul a ramas fara combustibil.");
					SetVehicleEngineState(vehicle, false);
					EngineSTATE[vehicle] = 0;
					Gas[vehicle] = 0;
				}
			}
			new a, d, c;
			GetPlayerKeys(i,a,d,c);
			if(a == 8 && speed > Speedlimit[i] && Speedlimit[i])
			{
				new newspeed = speed - Speedlimit[i];
				ModifyVehicleSpeed(vehicle, -newspeed);
			}
			if(speed > 190)
			{
				for(new m = 0; m < 2; m++) {
					if(PlayerInfo[i][pQuest][m] == 7) CheckQuest(i, m);
				}
			}
			if(GetVehicleKM(i) >= 1)
			{
				for(new m = 0; m < 2; m++)
				{
					if(PlayerInfo[i][pQuest][m] == 14)
					{
						CheckQuest(i, m);
						ResetVehicleKM(i);
					}
				}
			}
			if(IsPlayerInRangeOfPoint(i, 3, 1529.0363,-1678.0784,5.8906)) GameTextForPlayer(i, "Foloseste ~b~~h~/arrest", 2000, 3);
			if(GetPlayerVehicleID(i) == JobCar[i][6] && PlayerInfo[i][pJob] == 6 && !IsTrailerAttachedToVehicle(JobCar[i][6]) && JobCar[i][6] != -1 && viddd[i] != 0) AttachTrailerToVehicle(viddd[i], JobCar[i][6]);
			if(Refueling[i] == 1)
			{
				new price = floatround(2.5*(BizzInfo[GetBusinessID(i)][bEntranceCost]/21));
				//--------------------------------------------------------------
				FuelBought[i] += 2.5;
				Gas[vehicle] += 2.5;
				//--------------------------------------------------------------
				format(string, sizeof(string), "~b~~h~Refueling...~n~~n~~w~Price: ~g~~h~%s$ ~y~~h~(%.1f Li)", FormatNumber(floatround(FuelBought[i]*(BizzInfo[GetBusinessID(i)][bEntranceCost]/21))), FuelBought[i]);
				PlayerTextDrawSetString(i, FuelText, string);
				PlayerTextDrawShow(i, FuelText);
				GivePlayerCash(i, -price);
				//--------------------------------------------------------------
				if(Gas[vehicle] > 99 && PlayerInfo[i][pPremium] == 0)
				{
					Gas[vehicle] = 100.5;
					PlayerTextDrawHide(i, FuelText);
					TogglePlayerControllable(i, true);
					Refueling[i] = 0;
					vUpdate(vsid, cFuelx);
					SFM(i, COLOR_LIGHTGREEN, "Peco: Ti-ai facut plinul la vehicul cu %.0f litri pentru %s$.",FuelBought[i],FormatNumber(floatround(FuelBought[i]*(BizzInfo[GetBusinessID(i)][bEntranceCost]/21))));
				}
				else if(Gas[vehicle] > 124 && PlayerInfo[i][pPremium] == 1)
				{
					Gas[vehicle] = 125.5;
					PlayerTextDrawHide(i, FuelText);
					TogglePlayerControllable(i, true);
					Refueling[i] = 0;
					vUpdate(vsid, cFuelx);
					SFM(i, COLOR_LIGHTGREEN, "Peco: Ti-ai facut plinul la vehicul cu %.0f litri pentru %s$.",FuelBought[i],FormatNumber(floatround(FuelBought[i]*(BizzInfo[GetBusinessID(i)][bEntranceCost]/21))));
				}
			}
		}
		if(GetPlayerMoney(i) != GetPlayerCash(i))
		{
			ResetPlayerMoney(i);
			GivePlayerMoney(i, GetPlayerCash(i));
		}
		if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && GetPlayerWeapon(i) != 0)
		{
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(i, slx, sly, slz);
			SetPlayerPosEx(i, slx, sly, slz+3);
			SetPlayerArmedWeapon(i, 0);
			SCM(i, COLOR_RED, "Nu iti poti folosi armele cand stai pe un vehicul!");
		}
		if(CheckPlayerDistanceToVehicle(2, i, JobCar[i][5]))
		{
			if(PlayerInfo[i][pJob] == 5 && Pizza[i] == 5 && IsPlayerAttachedObjectSlotUsed(i, 9))
			{
				RemovePlayerAttachedObject(i, 9);
				ApplyAnimation(i, "INT_HOUSE", "wash_up",4.1,0,0,0,0,0,1);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
			}
		}
		if(Licitatie == 1) 
		{
			new query[256];
			TimpLicitatie--;
			if(TimpLicitatie == 0) 
			{
				Licitatie = 0;
				if(LastPlayer == -1) SCMAll(COLOR_YELLOW, "Licitatia a fost anulata deoarece nu s-a licitat nicio suma.");
				else 
				{
					if(!IsPlayerConnected(LastPlayer) && TotalMoney[LastPlayer] == 0) SCMAll(COLOR_YELLOW, "Licitatia a fost anulata deoarece ultimul jucator care a licitat nu mai este conectat.");
					else 
					{
						MesajLicitatie(0x483d8bFF, "[LICITATIE TERMINATA]");
						GivePlayerCash(LastPlayer, -TotalBani);
						switch(TipLicitatie) 
						{
							case 1: 
							{
								format(string, sizeof(string), "> %s a licitat cea mai mare suma (%s) si a castigat casa (house) %d", GetName(LastPlayer), FormatNumber(TotalMoney[LastPlayer]), IDLicitatie);
								MesajLicitatie(0x483d8bFF, string);						
								format(string, sizeof(string), "Ai primit casa %d cu succes. Felicitari!", IDLicitatie);
								SCM(LastPlayer, COLOR_YELLOW, string);
								mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `House`='255' WHERE `House`='%d'", IDLicitatie);
								mysql_tquery(SQL, query);
								foreach(new j: Player) 
								{
									if(PlayerInfo[j][pHouseKey] == IDLicitatie) 
									{
										SCM(j, COLOR_YELLOW, "Ai ramas fara casa deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv.");
										PlayerInfo[j][pHouseKey] = 255;
										pUpdate(j,pHouseKeyx);
									}
								}
								PlayerInfo[LastPlayer][pHouseKey] = IDLicitatie;
								PlayerInfo[LastPlayer][pRented] = -2;
								HouseInfo[IDLicitatie][hOwned] = 1;
								HouseInfo[IDLicitatie][hPrice] = 0;
								StrmidEx(HouseInfo[IDLicitatie][hOwner], PlayerInfo[LastPlayer][pNamePlayer]);
								pUpdate(LastPlayer,pHouseKeyx);
								mysql_format(SQL,query,sizeof(query),"UPDATE `house` SET `hOwned`='1',`hOwner`='%s',`hPrice`='0' WHERE `houseID`='%d'",PlayerInfo[LastPlayer][pNamePlayer],IDLicitatie);
								mysql_tquery(SQL,query);
								OnPropUpdate("casa",IDLicitatie);
							}
							case 2: 
							{	
								format(string, sizeof(string), "> %s a licitat cea mai mare suma (%s) si a castigat afacerea (bizz) %d", GetName(LastPlayer), FormatNumber(TotalMoney[LastPlayer]), IDLicitatie);
								MesajLicitatie(0x483d8bFF, string);						
								format(string, sizeof(string), "Ai primit afacerea %d cu succes. Felicitari!", IDLicitatie);
								SCM(LastPlayer, COLOR_YELLOW, string);
								mysql_format(SQL,query, sizeof(query), "UPDATE `users` SET `Bizz`='255' WHERE `Bizz`='%d'", IDLicitatie);
								mysql_tquery(SQL, query);
								foreach(new j: Player) 
								{
									if(PlayerInfo[j][pBizzKey] == IDLicitatie) 
									{
										SCM(j, COLOR_YELLOW, "Ai ramas fara afacere deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv.");
										PlayerInfo[j][pBizzKey] = 255;
										pUpdate(j,pBizzKeyx);
									}
								}
								PlayerInfo[LastPlayer][pBizzKey] = IDLicitatie;
								BizzInfo[IDLicitatie][bOwned] = 1;
								BizzInfo[IDLicitatie][bPrice] = 0;
								StrmidEx(BizzInfo[IDLicitatie][bOwner], PlayerInfo[LastPlayer][pNamePlayer]);
								mysql_format(SQL,query,sizeof(query),"UPDATE `users` SET `Money`='%d',`Bizz`='%d' WHERE `PlayerID`='%d'",GetPlayerCash(LastPlayer),PlayerInfo[LastPlayer][pBizzKey],PlayerInfo[LastPlayer][pSQLID]);
								mysql_tquery(SQL,query);
								mysql_format(SQL,query,sizeof(query),"UPDATE `business` SET `bOwned`='1',`bOwner`='%s',`bPrice`='0' WHERE `bizzID`='%d'",BizzInfo[IDLicitatie][bOwner],IDLicitatie);
								mysql_tquery(SQL,query);
								OnPropUpdate("bizz",IDLicitatie);
							}
						}
						MesajLicitatie(0x483d8bFF, "---");
					}
				}	
			}
		}
		if(PlayerTazeTime[i] >= 1)
		{
			PlayerTazeTime[i] += 1;
			if(PlayerTazeTime[i] == 15) {
				PlayerTazeTime[i] = 0;
			}
			else
			{
				new Float:angle;
				GetPlayerFacingAngle(i, angle);
				SetPlayerFacingAngle(i, angle + 90);
			}
		}
		if(TaxiCallTime[i] > 0)
		{
			if(TaxiAccepted[i] < 999)
			{
				if(IsPlayerConnected(TaxiAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(TaxiAccepted[i], X, Y, Z);
					SetPlayerCheckpointEx(i, X, Y, Z, 5);
				}
			}
		}
		if(PlayerDrunk[i] >= 9)
		{
			new Float:angle;
			GetPlayerFacingAngle(i, angle);
			if(IsPlayerInAnyVehicle(i)) {
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
			}
			else ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
		}
		if(MedicCallTime[i] > 0)
		{
			if(MedicCallTime[i] == 300) 
			{ 
				MedicCallTime[i] = 0; 
				DisablePlayerCheckpointEx(i); 
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); 
				GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); 
			}
			else
			{
				format(string, sizeof(string), "%d", 300 - MedicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MedicCallTime[i] += 1;
			}
		}
		if(MechanicCallTime[i] > 0)
		{
			if(MechanicCallTime[i] == 300) 
			{ 
				MechanicCallTime[i] = 0; 
				DisablePlayerCheckpointEx(i); 
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); 
				GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); 
			}
			else
			{
				format(string, sizeof(string), "%d", 300 - MechanicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MechanicCallTime[i] += 1;
			}
		}
		if(PlayerCuffed[i] == 1)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				TogglePlayerControllable(i, true);
				PlayerCuffed[i] = 0;
				PlayerCuffedTime[i] = 0;
				PlayerTazeTime[i] = 1;
			}
			else PlayerCuffedTime[i] -= 1;
		}
		if(PlayerCuffed[i] == 2)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				GameTextForPlayer(i, "~r~You broke the Cuffs, you are free!", 2500, 3);
				TogglePlayerControllable(i, true);
				PlayerCuffed[i] = 0;
				PlayerCuffedTime[i] = 0;
			}
			else PlayerCuffedTime[i] -= 1;
		}
		for(new a = 1; a < MAX_ATMS; a++)
		{
			if(IsPlayerInRangeOfPoint(i, 1.7, AtmInfo[a][fATMPos][0],AtmInfo[a][fATMPos][1],AtmInfo[a][fATMPos][2])) {
				GameTextForPlayer(i, "ATM~n~~w~Foloseste ~g~~h~/atm ~w~pentru mai multe detalii", 2000, 3);
			}
		}
		if(IsPlayerInRangeOfPoint(i, 2.0, 324.7172,1119.0161,1083.8828))
		{
			format(string,sizeof(string),"~y~Foloseste /getdrugs~n~~w~Pret per gram: %d$",BizzInfo[6][bEntranceCost]);
			GameTextForPlayer(i, string, 5000, 3);
		}
		else if(IsPlayerInRangeOfPoint(i, 2.0, 1368.2200,-1280.0271,13.5469)) {
			GameTextForPlayer(i, "~y~Foloseste /getmats", 5000, 3);
		}
		else if(IsPlayerInRangeOfPoint(i,2.0, 1174.9100,-1365.7330,13.9876))
		{
			if(GetPlayerFaction(i) == 4) SetPlayerPosEx(i,1174.9591,-1374.8761,23.9736);
			else GameTextForPlayer(i, "~r~You can not use an elevator", 5000, 3);
		}
		else if(IsPlayerInRangeOfPoint(i,2.0, 1174.9591,-1369.8761,23.9736))
		{
			if(GetPlayerFaction(i) == 4) SetPlayerPosEx(i,1174.9100,-1361.7330,13.9876);
			else GameTextForPlayer(i, "~r~You can not use an elevator", 5000, 3);
		}
		else if(IsPlayerInRangeOfPoint(i,1.0, -2033.4347,-117.6303,1035.1719)) {
			GameTextForPlayer(i, "~w~Foloseste ~b~~h~~h~/spawncar\n~w~pentru a spawna un vehicul pentru 500$", 2000, 3);
		}
		else if(IsPlayerInRangeOfPoint(i,8, 64.3956,-1540.8400,4.6137) || IsPlayerInRangeOfPoint(i,8,72.9694,-1527.2271,4.6103) || IsPlayerInRangeOfPoint(i,8,1742.0980,503.2865,28.9012) || IsPlayerInRangeOfPoint(i,8,1725.6925,516.5693,28.5107))
		{
			format(string,sizeof(string),"~w~Foloseste ~g~~h~/vama ~w~pentru a trece~n~~y~Pret: %d$",BizzInfo[20][bEntranceCost]);
			GameTextForPlayer(i,string, 2000, 3);
		}
		else if(IsPlayerInRangeOfPoint(i, 50, -2315.1897,-1630.1730,483.7019))
		{
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[i][pQuest][m] == 1) CheckQuest(i, m);
			}		
		}
		else if(IsPlayerInRangeOfPoint(i, 25, 1539.8306,-1352.1284,329.6511))
		{
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[i][pQuest][m] == 6) CheckQuest(i, m);
			}
		}
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerPos(i, oldposx, oldposy, oldposz);
		if(Radaron[i] == 1)
		{
			foreach(new o: Player)
			{
				if(IsPlayerInRangeOfPoint(i, 30.0, oldposx, oldposy, oldposz) && GetPlayerState(i) == PLAYER_STATE_DRIVER && OnDuty[i] == 1)
				{
					new viteza = GetVehicleSpeed(GetPlayerVehicleID(i));
					if(viteza > Radarlimit[i])
					{
						new nameradar[25], nameradar1[25];
						GetPlayerName(i,nameradar,sizeof(nameradar));
						GetPlayerName(i,nameradar1,sizeof(nameradar1));
						format(string, sizeof(string), "{f03337}%s[ID:%d] a condus cu %d km/h, Radar Limit: %d km/h!", nameradar,i,viteza,Radarlimit[i]);
						SCM(i,COLOR_WHITE,string);
						format(string, sizeof(string), "{f03337}Ai fost prins de radarul lui %s conducand cu %d km/h, Radar Limit: %d km/h.",nameradar1,viteza,Radarlimit[i]);
						SCM(i,COLOR_WHITE,string);
					}
				}
			}
		}
		new year, month, day, hours, minutes, seconds;
		getdate(year, month, day);
		gettime(hours, minutes, seconds);
		format(string, sizeof(string), "%d.%s%d.%s%d~n~%s%d:%s%d", day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes);
		TextDrawSetString(Time, string);
		TextDrawShowForAll(Time);
		if(farmerc[i] == 1)
		{
			PlayerTextDrawShow(i, FarmBox);
			PlayerTextDrawShow(i, FarmJob);
			PlayerTextDrawShow(i, FarmTime);
			if(IsPlayerInRangeOfPoint(i, 200.0, -96.0838,3.2018,6.1406))
			{
				PlayerTextDrawHide(i, FarmWanted);
				new tmpcar = GetPlayerVehicleID(i), spe = GetVehicleSpeed(tmpcar);
				if(JobCar[i][2] == tmpcar && spe > 24 && !IsPlayerPaused(i))
				{
					PlayerTextDrawHide(i, FarmSpeed);
					if(farmertime[i] >= 1)
					{
						farmertime[i]--;
						format(string,sizeof(string),"Munceste pentru inca ~h~~r~%d ~h~~w~secunde pentru a fi platit.",farmertime[i]);
						PlayerTextDrawSetString(i, FarmTime, string);
						PlayerTextDrawShow(i, FarmTime);
					}
					else if(farmertime[i] == 0)
					{
						farmertime[i] = 1;
						farmerc[i] = 0;
						DestroyVehicleEx(JobCar[i][2]);
						JobCar[i][2] = -1;
						new randomtransport = random(10);
						if(randomtransport > 8)
						{
							new randfarmer = 20000 + random(30000);
							format(string,sizeof(string),"{FFFF00}Detinatorii fermei au fost foarte multumiti de calitatea muncii prestate. Ai primit $%s.",FormatNumber(randfarmer));
							SCM(i,COLOR_WHITE,string);
							GivePlayerCash(i,randfarmer);
						}
						else if(randomtransport >= 0 && randomtransport <= 8)
						{
							new faina = 10 + random(20);
							AreFaina[i] = faina;
							format(string,sizeof(string),"Ai primit un sac ce contine %d kg de faina.", faina);
							SCM(i, COLOR_GREEN, string);
							SCM(i, COLOR_YELLOW, "Poti merge la fast food-urile din zona pentru a vinde faina.");
						}
						PlayerTextDrawHide(i, FarmTime);
						PlayerTextDrawHide(i, FarmJob);
						PlayerTextDrawHide(i, FarmBox);
						PlayerTextDrawHide(i, FarmSpeed);
						PlayerTextDrawHide(i, FarmWanted);
					}
				}
				else PlayerTextDrawShow(i, FarmSpeed);
			}
			else
			{
				PlayerTextDrawHide(i, FarmSpeed);
				PlayerTextDrawShow(i, FarmWanted);
			}
		}
		if(ShowFPS[i] == true)
		{
			format(string, sizeof(string), "%d", FPS[i]);
			PlayerTextDrawSetString(i, FramesTD, string);
			if(FPS[i] < 31) PlayerTextDrawColor(i, FramesTD, COLOR_LIGHT_RED);
			else if(FPS[i] > 30 && FPS[i] < 71) PlayerTextDrawColor(i, FramesTD, 0xFFFF00FF);
			else if(FPS[i] > 70) PlayerTextDrawColor(i, FramesTD, 0x00FF00FF);
			PlayerTextDrawShow(i, FramesTD);
		}
		if(ShowHealth[i] == true)
		{
			new Float:health;
			GetPlayerHealthEx(i, health);
			format(string, sizeof(string), "%.0f", health);
			PlayerTextDrawSetString(i, HealthTD, string);
			PlayerTextDrawShow(i, HealthTD);
		}
		if(PlayerInfo[i][pJailTime] > 0 && PlayerInfo[i][pJailed] > 0)
		{
			format(string, sizeof(string), "Timp ramas la inchisoare %s minute", CalculeazaTimp(PlayerInfo[i][pJailTime]));
			PlayerTextDrawSetString(i, JailTime, string);
			PlayerTextDrawShow(i, JailTime);
		}
		else PlayerTextDrawHide(i, JailTime);
		if(PlayerInfo[i][pAdmin] > 5 && TogAdmin[i] == true)
		{
			format(string, sizeof(string), "~h~~b~~h~tick:%d   ~p~anim:%d   ~h~~g~~h~query:%d", GetServerTickRate(), GetPlayerAnimationIndex(i), mysql_unprocessed_queries());
			PlayerTextDrawSetString(i, InfoTD, string);
			PlayerTextDrawShow(i, InfoTD);
		}
		else PlayerTextDrawHide(i, InfoTD);
		if(GetPlayerWantedLevelEx(i) > 0 && PlayerInfo[i][pWantedTime] > 0)
		{
			format(string, sizeof(string), "Wanted scade in ~h~~r~~h~~h~%s minute", CalculeazaTimp(PlayerInfo[i][pWantedTime]));
			PlayerTextDrawSetString(i, WantedTime, string);
			PlayerTextDrawShow(i, WantedTime);
		}
		else PlayerTextDrawHide(i, WantedTime);
		if(BizzEntered[i] == 32 || BizzEntered[i] == 33 || IsPlayerInRangeOfPoint(i, 10.0, GiftInfo[gLocationX], GiftInfo[gLocationY], GiftInfo[gLocationZ])) PlayerTextDrawShow(i, SafeZone);
		else PlayerTextDrawHide(i, SafeZone);
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(i))
		{
			new car = GetPlayerVehicleID(i), vsid = FindSpawnID(car);
			//--------------------------------------------------------------
			if(Gas[car] <= 20) format(string, sizeof(string), "Combustibil: ~r~~h~~h~%.0f(+%d) ~y~~h~Li", Gas[car], PlayerInfo[i][pFuel]);
			else if(Gas[car] > 20) format(string, sizeof(string), "Combustibil: %.0f(+%d) ~y~~h~Li", Gas[car], PlayerInfo[i][pFuel]);
			PlayerTextDrawSetString(i, CarSpeedoTD[0], string);
			if(!IsABike(car)) PlayerTextDrawShow(i, CarSpeedoTD[0]);
			//--------------------------------------------------------------
			format(string, sizeof(string), "Viteza: %d Km/h", GetVehicleSpeed(car));
			PlayerTextDrawSetString(i, CarSpeedoTD[1], string);
			PlayerTextDrawShow(i, CarSpeedoTD[1]);
			//--------------------------------------------------------------
			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors == 0 || doors == -1) PlayerTextDrawSetString(i, CarSpeedoTD[2], "Status: ~g~~h~Unlocked");
			else if(doors == 1) PlayerTextDrawSetString(i, CarSpeedoTD[2], "Status: ~r~~h~Locked");
			PlayerTextDrawShow(i, CarSpeedoTD[2]);
			//--------------------------------------------------------------
			if(IsAnOwnableCar(car))
			{
				format(string,sizeof(string),"Kilometraj: %.1f Km", CarInfo[vsid][cKM]);
				PlayerTextDrawSetString(i, CarSpeedoTD[3], string);
				PlayerTextDrawShow(i, CarSpeedoTD[3]);
			}
		}
		else
		{
			PlayerTextDrawHide(i, CarSpeedoTD[0]);
			PlayerTextDrawHide(i, CarSpeedoTD[1]);
			PlayerTextDrawHide(i, CarSpeedoTD[2]);
			PlayerTextDrawHide(i, CarSpeedoTD[3]);
		}
	}
	return 1;
}
//==============================================================================
function SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerPaintballing[playerid] != 0)
		{
		    if(PlayerPaintballing[playerid] == 2 && paintt[PlayerPaintballing[playerid]] > 0) SetPlayerArmourEx(playerid, 99.9);
			if(PlayerPaintballing[playerid] == 1 || PlayerPaintballing[playerid] == 2)
			{
		    	if(paintg[PlayerPaintballing[playerid]] == 1 && paintt[PlayerPaintballing[playerid]] > 0)
		    	{
		        	GivePlayerWeaponEx(playerid, 24, 1000);
		        	GivePlayerWeaponEx(playerid, 31, 1000);
		        	GivePlayerWeaponEx(playerid, 16, 1);
		        	GivePlayerWeaponEx(playerid, 41, 1000);
				}
				else if(paintg[PlayerPaintballing[playerid]] == 2 && paintt[PlayerPaintballing[playerid]] > 0) GivePlayerWeaponEx(playerid, 5, 1);
				else if(paintg[PlayerPaintballing[playerid]] == 3 && paintt[PlayerPaintballing[playerid]] > 0) GivePlayerWeaponEx(playerid, 9, 1);
			}
			else if(PlayerPaintballing[playerid] == 3 && paintt[PlayerPaintballing[playerid]] > 0)
			{
				ResetPlayerWeaponsEx(playerid);
				if(KillP[playerid] >= 0 && KillP[playerid] <= 1) GivePlayerWeaponEx(playerid, 24, 1000);
				else if(KillP[playerid] >= 2 && KillP[playerid] <= 3) GivePlayerWeaponEx(playerid, 29, 1000);
				else if(KillP[playerid] >= 4 && KillP[playerid] <= 5) GivePlayerWeaponEx(playerid, 28, 1000);
				else if(KillP[playerid] >= 6 && KillP[playerid] <= 7) GivePlayerWeaponEx(playerid, 33, 1000);
				else if(KillP[playerid] >= 8 && KillP[playerid] <= 9) GivePlayerWeaponEx(playerid, 32, 1000);
				else if(KillP[playerid] >= 10 && KillP[playerid] <= 11) GivePlayerWeaponEx(playerid, 25, 1000);
				else if(KillP[playerid] >= 12 && KillP[playerid] <= 13) GivePlayerWeaponEx(playerid, 26, 1000);
				else if(KillP[playerid] >= 14 && KillP[playerid] <= 15) GivePlayerWeaponEx(playerid, 34, 1000);
				else if(KillP[playerid] >= 16 && KillP[playerid] <= 17) GivePlayerWeaponEx(playerid, 27, 1000);
				else if(KillP[playerid] >= 18 && KillP[playerid] <= 19) GivePlayerWeaponEx(playerid, 31, 1000);
				else if(KillP[playerid] >= 20 && KillP[playerid] <= 21) GivePlayerWeaponEx(playerid, 30, 1000);
				else if(KillP[playerid] >= 22 && KillP[playerid] <= 23) GivePlayerWeaponEx(playerid, 23, 1000);
				else if(KillP[playerid] >= 24 && KillP[playerid] <= 25) GivePlayerWeaponEx(playerid, 22, 1000);
				else if(KillP[playerid] >= 26 && KillP[playerid] <= 27) GivePlayerWeaponEx(playerid, 9, 1);
				else if(KillP[playerid] >= 28) GivePlayerWeaponEx(playerid, 4, 1);
			}
			else if(PlayerPaintballing[playerid] == 4 && paintt[PlayerPaintballing[playerid]] > 0) GivePlayerWeaponEx(playerid, 24, 1000);
			if(paintm[PlayerPaintballing[playerid]] == 1)
			{
   				new rand = random(sizeof(gRandomSpawnRC));
			    SetPlayerPosEx(playerid,gRandomSpawnRC[rand][0],gRandomSpawnRC[rand][1],gRandomSpawnRC[rand][2]);
			    SetPlayerSkin(playerid, 250);
			    SetPlayerInteriorEx(playerid, 10);
			    if(PlayerPaintballing[playerid] == 1) SetPlayerVirtualWorld(playerid,125);
				else if(PlayerPaintballing[playerid] == 2) SetPlayerVirtualWorld(playerid,126);
				else if(PlayerPaintballing[playerid] == 3) SetPlayerVirtualWorld(playerid,127);
				else if(PlayerPaintballing[playerid] == 4) SetPlayerVirtualWorld(playerid,128);
			    SetTimerEx_("IncarcaMapa", 100, 100, 1, "i", playerid);
			}
			else if(paintm[PlayerPaintballing[playerid]] == 2)
			{
   				new rand = random(sizeof(gRandomSpawnTennis));
			    SetPlayerPosEx(playerid,gRandomSpawnTennis[rand][0],gRandomSpawnTennis[rand][1],gRandomSpawnTennis[rand][2]);
			    SetPlayerSkin(playerid, 96);
	     		SetPlayerWorldBounds(playerid, -2712.4683, -2792.2351,-229.3094, -274.6794);
	     		SetPlayerInteriorEx(playerid, 0);
			    if(PlayerPaintballing[playerid] == 1) SetPlayerVirtualWorld(playerid,125);
				else if(PlayerPaintballing[playerid] == 2) SetPlayerVirtualWorld(playerid,126);
				else if(PlayerPaintballing[playerid] == 3) SetPlayerVirtualWorld(playerid,127);
				else if(PlayerPaintballing[playerid] == 4) SetPlayerVirtualWorld(playerid,128);
			    SetTimerEx_("IncarcaMapa", 100, 100, 1, "i", playerid);
			}
			else if(paintm[PlayerPaintballing[playerid]] == 3)
			{
   				new rand = random(sizeof(gRandomSpawnFarm));
			    SetPlayerPosEx(playerid,gRandomSpawnFarm[rand][0],gRandomSpawnFarm[rand][1],gRandomSpawnFarm[rand][2]);
			    SetPlayerSkin(playerid, 158);
			    SetPlayerWorldBounds(playerid, 135.3258, -287.9915, 57.6137 ,-74.2723);
			    SetPlayerInteriorEx(playerid, 0);
			    if(PlayerPaintballing[playerid] == 1) SetPlayerVirtualWorld(playerid,125);
				else if(PlayerPaintballing[playerid] == 2) SetPlayerVirtualWorld(playerid,126);
				else if(PlayerPaintballing[playerid] == 3) SetPlayerVirtualWorld(playerid,127);
				else if(PlayerPaintballing[playerid] == 4) SetPlayerVirtualWorld(playerid,128);
			    SetTimerEx_("IncarcaMapa", 100, 100, 1, "i", playerid);
			}
			else if(paintm[PlayerPaintballing[playerid]] == 4)
			{
   				new rand = random(sizeof(gRandomSpawnBeach));
			    SetPlayerPosEx(playerid,gRandomSpawnBeach[rand][0],gRandomSpawnBeach[rand][1],gRandomSpawnBeach[rand][2]);
			    SetPlayerSkin(playerid, 97);
			    SetPlayerWorldBounds(playerid, 708.0417, 409.4930, -1806.0677, -1907.7119);
			    SetPlayerInteriorEx(playerid, 0);
			    if(PlayerPaintballing[playerid] == 1) SetPlayerVirtualWorld(playerid,125);
				else if(PlayerPaintballing[playerid] == 2) SetPlayerVirtualWorld(playerid,126);
				else if(PlayerPaintballing[playerid] == 3) SetPlayerVirtualWorld(playerid,127);
				else if(PlayerPaintballing[playerid] == 4) SetPlayerVirtualWorld(playerid,128);
			    SetTimerEx_("IncarcaMapa", 100, 100, 1, "i", playerid);
			}
			else if(paintm[PlayerPaintballing[playerid]] == 5)
			{
   				new rand = random(sizeof(gRandomSpawnLSPD));
			    SetPlayerPosEx(playerid,gRandomSpawnLSPD[rand][0],gRandomSpawnLSPD[rand][1],gRandomSpawnLSPD[rand][2]);
			    SetPlayerSkin(playerid, 285);
			    SetPlayerWorldBounds(playerid, 1558.4261, 1387.0891, -1578.9333, -1776.6854);
			    SetPlayerInteriorEx(playerid, 0);
			    if(PlayerPaintballing[playerid] == 1) SetPlayerVirtualWorld(playerid,125);
				else if(PlayerPaintballing[playerid] == 2) SetPlayerVirtualWorld(playerid,126);
				else if(PlayerPaintballing[playerid] == 3) SetPlayerVirtualWorld(playerid,127);
				else if(PlayerPaintballing[playerid] == 4) SetPlayerVirtualWorld(playerid,128);
			    SetTimerEx_("IncarcaMapa", 100, 100, 1, "i", playerid);
			}
			BizzEntered[playerid] = 21;
		}
		else if(PlayerInfo[playerid][pJailed] == 1)
		{
		    SetPlayerInteriorEx(playerid, 10);
			SetPlayerVirtualWorld(playerid, 3);
			new rand = random(sizeof(Inchisoare));
			SetPlayerPosEx(playerid,Inchisoare[rand][0],Inchisoare[rand][1],Inchisoare[rand][2]);
			SCM(playerid, COLOR_LIGHT_RED, "* Sentinta incompleta, te-ai intors la inchisoare.");
			SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
			SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
			SetPlayerToTeam(playerid);
		}
		else if(PlayerInfo[playerid][pJailed] == 2)
		{
		    SetPlayerInteriorEx(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPosEx(playerid, 268.5777,1857.9351,9.8133);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453);
			SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
			SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
			SetPlayerToTeam(playerid);
		}
	    else if(PlayerInfo[playerid][pSpawn] == 0)
		{
		    SetPlayerPosEx(playerid, -2650.0176,1409.8207,906.2734);
			SetPlayerFacingAngle(playerid, 270);
  			SetPlayerInteriorEx(playerid, 3);
  			SetPlayerVirtualWorld(playerid, 32);
			SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
			SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
			SetPlayerToTeam(playerid);
			BizzEntered[playerid] = 32;
		}
	    else if(PlayerInfo[playerid][pSpawn] == 1 && PlayerInfo[playerid][pHouseKey] != 255)
	    {
	        new house = PlayerInfo[playerid][pHouseKey];
			SetPlayerInteriorEx(playerid, HouseInfo[house][hInterior]);
			SetPlayerVirtualWorld(playerid, house);
			SetPlayerPosEx(playerid, HouseInfo[house][hExitX], HouseInfo[house][hExitY], HouseInfo[house][hExitZ]);
			HouseEntered[playerid] = house;
			SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
			SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
			SetPlayerToTeam(playerid);
			if(HouseInfo[house][hRadio] == 1) PlayAudioStreamForPlayer(playerid,HouseInfo[house][hRadioLink]); 
		}
		else if((PlayerInfo[playerid][pSpawn] == 2 && PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader] != 0) || InWar[PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader]] == 1)
		{
			new faction = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
			SetPlayerInteriorEx(playerid, FactionInfo[faction][fHQInteriorID]);
			SetPlayerPosEx(playerid, FactionInfo[faction][fHQInteriorPosX], FactionInfo[faction][fHQInteriorPosY], FactionInfo[faction][fHQInteriorPosZ]);
			FactionEntered[playerid] = faction;
			SetPlayerVirtualWorld(playerid, faction);
			SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
			SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
			SetPlayerToTeam(playerid);
		}
		else
		{
		    SetPlayerPosEx(playerid, -2650.0176,1409.8207,906.2734);
			SetPlayerFacingAngle(playerid, 270);
  			SetPlayerInteriorEx(playerid, 3);
  			SetPlayerVirtualWorld(playerid, 32);
			SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
			SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
			SetPlayerToTeam(playerid);
			BizzEntered[playerid] = 32;
		}
		SetPlayerTeamColor(playerid);
	}
	return 1;
}
//==============================================================================
function SyncTime()
{
	new tmphour, tmpminute, tmpsecond, hour, m, sec, day, month, year, query[500], string[MAX_STRING], days[128];
	getdate(year, month, day);
	gettime(hour, m, sec);
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		mysql_query(SQL, "UPDATE `users` SET `AdminHours` = `AdminHours`+1 WHERE `Admin` >= '1' AND `Status` = '1'");
		mysql_query(SQL, "UPDATE `users` SET `HelperHours` = `HelperHours`+1 WHERE `Helper` >= '1' AND `Status` = '1'");
		mysql_query(SQL, "UPDATE `users` SET `LeaderHours` = `LeaderHours`+1 WHERE `Leader` >= '1' AND `Status` = '1'");
		//--------------------------------------------------------------
		ghour = tmphour;
		//--------------------------------------------------------------
		PayDay();
		//--------------------------------------------------------------
		if(hour == 23)
		{
			SCMAll(COLOR_YELLOW, "INFO: Misiunile au fost resetate, foloseste /missions pentru a vedea ce misiuni ai primit.");
			mysql_query(SQL, "UPDATE `users` SET `Quest` = '0|0', `QuestProgress` = '0|0', `NeedProgress` = '0|0'");
			mysql_query(SQL, "UPDATE `cars` SET `Days` = `Days`+1");
			foreach(new i: Player)
			{
				if(gPlayerLogged[i] == true) GiveQuest(i);
				for(new c = 0; c < 10; c++)
				{
					if(PlayerInfo[i][pCarKey][c] > 0) 
					{ 
						CarInfo[PlayerInfo[i][pCarKey][c]][cDays]++;
						vUpdate(PlayerInfo[i][pCarKey][c], cDaysx);
					}
				}
			}
			for(new f = 1; f < MAX_FACTIONS; f++) 
			{
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `FactionDays` = `FactionDays`+1 WHERE `PlayerFaction` = '%d'", f);
				mysql_tquery(SQL, query, "","");
			}
			for(new c = 1; c < MAX_CLANS; c++)
			{
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `ClanDays` = `ClanDays`+1 WHERE `Clan` = '%d'", c);
				mysql_tquery(SQL, query, "","");
			}
			for(new a = 1; a < 8; a++)
			{
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `AdminDays` = `AdminDays`+1 WHERE `Admin` = '%d'", a);
				mysql_tquery(SQL, query, "","");
			}
			for(new h = 1; h < 5; h++)
			{
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `HelperDays` = `HelperDays`+1 WHERE `Helper` = '%d'", h);
				mysql_tquery(SQL, query, "","");
			}
			mysql_format(SQL, query, sizeof(query), "SELECT * FROM `giftbox` WHERE `id` = '1'");
			mysql_tquery(SQL, query, "TempGiftCheck");
			mysql_format(SQL, query, sizeof(query), "SELECT * FROM `stock` ORDER BY `stock`.`ID` ASC");
			mysql_tquery(SQL, query, "CheckStock");
		}
		if(hour == 21)
		{
			format(days, sizeof(days), GetWeekDay(day, month, year));
			if(strcmp(days, "Sunday", true) == 0)
			{
				mysql_query(SQL, "UPDATE `users` SET `Contracts` = '0'");
				SCMAll(COLOR_YELLOW, "INFO: S-au dat salariile tuturor jucatorilor online ce detin o functie pe server!");
				foreach(new i: Player)
				{
					if(gPlayerLogged[i] == true)
					{
						if(PlayerInfo[i][pFactionRank] >= 1)
						{
							new cash = PlayerInfo[i][pFactionRank]*100000;
							GivePlayerCash(i, cash);
							format(string, sizeof(string), "* Ai primit salariu %s$ (Faction Rank %d).",FormatNumber(cash),PlayerInfo[i][pFactionRank]);
							SCM(i, COLOR_GREEN, string);
							SCM(i, COLOR_GREEN, "Toate rapoartele factiunilor au fost resetate automat.");
						}
						if(PlayerInfo[i][pHelper] >= 1)
						{
							new gold = PlayerInfo[i][pHelper]*20;
							PlayerInfo[i][pGold] += gold;
							format(string, sizeof(string), "* Ai primit salariu %d gold (Helper Grad %d).",gold,PlayerInfo[i][pHelper]);
							SCM(i, COLOR_GREEN, string);
						}
						if(PlayerInfo[i][pAdmin] >= 1)
						{
							new gold = PlayerInfo[i][pAdmin]*40;
							PlayerInfo[i][pGold] += gold;
							format(string, sizeof(string), "* Ai primit salariu %d gold (Admin Grad %d).",gold,PlayerInfo[i][pAdmin]);
							SCM(i, COLOR_GREEN, string);
						}
						PlayerInfo[i][pContracts] = 0;
					}
				}
				if(Licitatie == 0) 
				{
					if(FreeBusinesses() > 0) 
					{
						new id = GetBizzID();
						Licitatie = 1;
						TipLicitatie = 2;
						TimpLicitatie = 5*60;
						TotalBani = 0;
						foreach(new j: Player) {
							if(gPlayerLogged[j] == true) TotalMoney[j] = 0;
						}
						IDLicitatie = id;
						LastPlayer = -1;
						//--------------------------------------------------------------
						switch(TipLicitatie) 
						{
							case 1: format(string, sizeof(string), "[BID] Acum se poate licita pentru casa (house) cu ID-ul %d", id);
							case 2: format(string, sizeof(string), "[BID] Acum se poate licita pentru afacerea (bizz) cu ID-ul %d", id);
						}
						MesajLicitatie(0x483d8bFF, string);
						MesajLicitatie(COLOR_AUCTION, "[BID] Poti folosi /tog pentru a afisa/ascunde sumele licitate de alti playeri.");
						MesajLicitatie(COLOR_AUCTION, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi restrasi banii din cont la sfarsitul licitatiei.");
						MesajLicitatie(COLOR_AUCTION, "[BID] Licitatia este disponibila timp de 5 minute.");
					}
					else if(FreeHouses() > 0) 
					{
						new id = GetHouseID();
						Licitatie = 1;
						TipLicitatie = 1;
						TimpLicitatie = 5*60;
						TotalBani = 0;
						foreach(new j: Player) {
							if(gPlayerLogged[j] == true) TotalMoney[j] = 0;
						}
						IDLicitatie = id;
						LastPlayer = -1;
						//--------------------------------------------------------------
						switch(TipLicitatie) 
						{
							case 1: format(string, sizeof(string), "[BID] Acum se poate licita pentru casa (house) cu ID-ul %d", id);
							case 2: format(string, sizeof(string), "[BID] Acum se poate licita pentru afacerea (bizz) cu ID-ul %d", id);
						}
						MesajLicitatie(0x483d8bFF, string);
						MesajLicitatie(COLOR_AUCTION, "[BID] Poti folosi /tog pentru a afisa/ascunde sumele licitate de alti playeri.");
						MesajLicitatie(COLOR_AUCTION, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi restrasi banii din cont la sfarsitul licitatiei.");
						MesajLicitatie(COLOR_AUCTION, "[BID] Licitatia este disponibila timp de 5 minute.");
					}			
				}
			}
		}
		if(realtime) SetWorldTime(tmphour);
	}
	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
	{
		new vsid = FindSpawnID(i);
		if(IsAnOwnableCar(i) && IsValidVehicle(i))
		{
			vUpdate(vsid, cFuelx);
			vUpdate(vsid, cKMx);
			vUpdate(vsid, cHealthx);
		}
	}
	return 1;
}
//==============================================================================
function CheckStock()
{
	for(new i, j = cache_num_rows(); i != j; i++) {
		if(Stock[i][vStock] < 10) Stock[i][vStock] += random(15);
	}
	return 1;
}
//==============================================================================
function PayDay()
{
	new string[256], interest, rent = 0;
	foreach(new i: Player)
	{
		if(MoneyMessage[i] == 1 && GetPlayerWantedLevelEx(i) == 0)
		{
			SetPlayerCash(i,0);
			SetPlayerWantedLevelEx(i, 2);
			PlayerInfo[i][pWantedTime] = 600;
			format(string, sizeof(string), "Ai primit wanted 2 pentru %d secunde deoarece ai ramas cu datorii.", PlayerInfo[i][pWantedTime]);
			SCM(i, COLOR_RED, string);
		}
		new key = PlayerInfo[i][pRented];
		if(key != -2)
		{
			rent = HouseInfo[key][hRent];
			HouseInfo[key][hMoney] += rent;
			SaveHouse(key);
		}
		new tmpintrate = random(1)+1;
		Tax += TaxValue;
		PlayerInfo[i][pBank] -= TaxValue;
		new checks = PlayerInfo[i][pSeconds]*3*(random(2)+1);
		interest = (PlayerInfo[i][pBank]/1000)*(tmpintrate);
		PlayerInfo[i][pBank] += interest + checks;
		SCM(i, COLOR_WHITE, "|___ BANK STATEMENT ___|");
		format(string, sizeof(string), "Paycheck: $%s", FormatNumber(checks));
		SCM(i, COLOR_GRAD1, string);
		if(PlayerInfo[i][pRented] != -2)
		{
			format(string, sizeof(string), "Tax: -$%s  Rent: -$%d", FormatNumber(TaxValue), HouseInfo[PlayerInfo[i][pRented]][hRent]);
			SCM(i, COLOR_GRAD2, string);
		}
		else
		{
			format(string, sizeof(string), "Tax: -$%s  Rent: -$0", FormatNumber(TaxValue));
			SCM(i, COLOR_GRAD2, string);
		}
		format(string, sizeof(string), "Old Balance: $%s", FormatNumber(PlayerInfo[i][pBank] - checks));
		SCM(i, COLOR_GRAD3, string);
		format(string, sizeof(string), "Interest rate: 0.%d%", tmpintrate);
		SCM(i, COLOR_GRAD4, string);
		if(PlayerInfo[i][pPremium] == 1)
		{
			new bonus = random(10000)+10000;
			format(string, sizeof(string), "Premium bonus: $%s", FormatNumber(bonus));
			SCM(i, COLOR_GRAD4, string);
			PlayerInfo[i][pExp]++;
			if(GiftInfo[gOpen] == 1)
			{
				PlayerInfo[i][pGpoint]++;
				pUpdate(i, pGpointx);
			}
			PlayerInfo[i][pGold]++;
			GivePlayerCash(i, bonus);
		}
		format(string, sizeof(string), "New balance: $%s", FormatNumber(PlayerInfo[i][pBank]));
		SCM(i, COLOR_GRAD5, string);
		SCM(i, COLOR_GRAD6, "|---------------------------------------|");
		GameTextForPlayer(i, "A ajuns salariul!", 5000, 1);
		rent = 0;
		PlayerInfo[i][pExp]++;
		if(PlayerInfo[i][pSeconds] >= 3600)
		{
			new Float:mins, Float:hour;
			mins = PlayerInfo[i][pSeconds]/60;
			hour = mins/60;
			PlayerInfo[i][pConnectTime] += hour;
			if(GiftInfo[gOpen] == 1)
			{
				PlayerInfo[i][pGpoint]++;
				pUpdate(i, pGpointx);
			}
			pUpdate(i, pConnectTimex);
			format(string, sizeof(string), "Ai jucat %.0f minute si ai primit +%.2f ore jucate.",mins,hour);
			SCM(i, COLOR_GRAD2, string);
		}
		else
		{
			new Float:mins, Float:hour;
			mins = PlayerInfo[i][pSeconds]/60;
			hour = mins/60;
			PlayerInfo[i][pConnectTime] += hour;
			format(string, sizeof(string), "Ai jucat %.0f minute si ai primit +%.2f ore jucate.",mins,hour);
			SCM(i, COLOR_GRAD2, string);
			pUpdate(i, pConnectTimex);
		}
		new nxtlevel = GetPlayerScoreEx(i), expamount = nxtlevel*4;
		if(PlayerInfo[i][pExp] == expamount)
		{
			format(string, sizeof(string), "Ai acumulat %d/%d puncte de respect, poti folosi /buylevel.", PlayerInfo[i][pExp], expamount);
			SCM(i,COLOR_LIGHTGREEN,string);
		}
		if(PlayerInfo[i][pRobPoint] < 20) PlayerInfo[i][pRobPoint]++;
		if(PlayerInfo[i][pCarLic] > 0) PlayerInfo[i][pCarLic]--;
		if(PlayerInfo[i][pFlyLic] > 0) PlayerInfo[i][pFlyLic]--;
		if(PlayerInfo[i][pFishLic] > 0) PlayerInfo[i][pFishLic]--;
		if(PlayerInfo[i][pGunLic] > 0) PlayerInfo[i][pGunLic]--;
		if(PlayerInfo[i][pBoatLic] > 0) PlayerInfo[i][pBoatLic]--;
		if(PlayerInfo[i][pPassport] > 0) PlayerInfo[i][pPassport]--;
		if(PlayerInfo[i][pPunish] > 0) PlayerInfo[i][pPunish]--;
		if(PlayerInfo[i][pCarLic] == 0) SCM(i,COLOR_LIGHT_RED,"Licenta dumneavoastra de condus a expirat, foloseste /licenses pentru detalii.");
		new factiune = PlayerInfo[i][pLeader]+PlayerInfo[i][pMember];
		if(factiune == 1 || factiune == 2 || factiune == 3) PlayerInfo[i][pFreePoint] += 5;
		PlayerInfo[i][pSeconds] = 0;
		for(new car = 1, j = GetVehiclePoolSize(); car <= j; car++)
		{
			if(!IsVehicleOccupied(car) && SpawnCar[car] == 1 && IsValidVehicle(car))
			{
				SpawnCar[car] = 0;
				Spawner[i] = 0;
				DestroyVehicleEx(car);
			}
		}
	}
 	return 1;
}
//==============================================================================
function OnPlayerLogin(playerid, password[])
{
	GameTextForPlayer(playerid,"~y~Se incarca contul",3000,4);
	new string[300], query[300], result[MAX_STRING];
    SHA256_PassHash(password, "x_=gez2Q3@-#UnFm", result, 128);
    mysql_format(SQL, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e' AND `password` = '%e' LIMIT 1", GetName(playerid), result);
    new Cache:cont = mysql_query(SQL, query);
    if(cache_num_rows() > 0)
    {
		cache_get_value_int(0, "PlayerID", PlayerInfo[playerid][pSQLID]);
		cache_get_value(0, "name", PlayerInfo[playerid][pNamePlayer], MAX_PLAYER_NAME);
		cache_get_value(0, "Ip", PlayerInfo[playerid][IP], 32);
		cache_get_value(0, "password", PlayerInfo[playerid][pPassword], 128);
		cache_get_value(0, "Pin", PlayerInfo[playerid][pPin], 16);
		cache_get_value_int(0, "Registered", PlayerInfo[playerid][pReg]);
		cache_get_value_int(0, "Level", PlayerInfo[playerid][pLevel]);
		cache_get_value_int(0, "Admin", PlayerInfo[playerid][pAdmin]);
		cache_get_value_int(0, "Helper", PlayerInfo[playerid][pHelper]);
		cache_get_value_int(0, "Premium", PlayerInfo[playerid][pPremium]);
		cache_get_value_float(0, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
		cache_get_value_int(0, "Seconds", PlayerInfo[playerid][pSeconds]);
		cache_get_value_int(0, "Sex", PlayerInfo[playerid][pSex]);
		cache_get_value_int(0, "Muted", PlayerInfo[playerid][pMuted]);
		cache_get_value_int(0, "MuteTime", PlayerInfo[playerid][pMuteTime]);
		cache_get_value_int(0, "Respect", PlayerInfo[playerid][pExp]);
		cache_get_value_int(0, "Money", PlayerInfo[playerid][pMoney]);
		cache_get_value_int(0, "Bank", PlayerInfo[playerid][pBank]);
		cache_get_value_int(0, "Gold", PlayerInfo[playerid][pGold]);
		cache_get_value_int(0, "GiftPoint", PlayerInfo[playerid][pGpoint]);
		cache_get_value_int(0, "Phonebook", PlayerInfo[playerid][pPhoneBook]);
		cache_get_value_int(0, "Job", PlayerInfo[playerid][pJob]); 			
		cache_get_value_int(0, "HeadValue", PlayerInfo[playerid][pHeadValue]); 		
		cache_get_value_int(0, "Jailed", PlayerInfo[playerid][pJailed]); 		
		cache_get_value_int(0, "JailTime", PlayerInfo[playerid][pJailTime]); 	
		cache_get_value_int(0, "Materials", PlayerInfo[playerid][pMats]); 		
		cache_get_value_int(0, "Drugs", PlayerInfo[playerid][pDrugs]); 		
		cache_get_value_int(0, "Leader", PlayerInfo[playerid][pLeader]); 	
		cache_get_value_int(0, "Member", PlayerInfo[playerid][pMember]); 		
		cache_get_value_int(0, "FactionRank", PlayerInfo[playerid][pFactionRank]); 
		cache_get_value_int(0, "Skin", PlayerInfo[playerid][pSkin]); 		
		cache_get_value_int(0, "FWarn", PlayerInfo[playerid][pFwarn]); 		
		cache_get_value_int(0, "FPunish", PlayerInfo[playerid][pPunish]); 	
		cache_get_value_int(0, "Tutorial", PlayerInfo[playerid][pTut]); 	
		cache_get_value_int(0, "FreePoint", PlayerInfo[playerid][pFreePoint]); 	
		cache_get_value_int(0, "RobSkill", PlayerInfo[playerid][pRobSkill]); 	
		cache_get_value_int(0, "FarmSkill", PlayerInfo[playerid][pFarmSkill]); 	
		cache_get_value_int(0, "TruckSkill", PlayerInfo[playerid][pTruckSkill]); 	
		cache_get_value_int(0, "PizzaSkill", PlayerInfo[playerid][pPizzaSkill]); 	
		cache_get_value_int(0, "MatsSkill", PlayerInfo[playerid][pMatsSkill]); 	
		cache_get_value_int(0, "MatsRem", PlayerInfo[playerid][pMatsRem]); 		
		cache_get_value_int(0, "MatsTimes", PlayerInfo[playerid][pMatsTimes]); 	
		cache_get_value_int(0, "RobTimes", PlayerInfo[playerid][pRobTimes]); 	
		cache_get_value_int(0, "RobRem", PlayerInfo[playerid][pRobRem]); 		
		cache_get_value_int(0, "PizzaTimes", PlayerInfo[playerid][pPizzaTimes]); 
		cache_get_value_int(0, "PizzaRem", PlayerInfo[playerid][pPizzaRem]); 		
		cache_get_value_int(0, "TruckTimes", PlayerInfo[playerid][pTruckTimes]); 
		cache_get_value_int(0, "TruckRem", PlayerInfo[playerid][pTruckRem]); 	
		cache_get_value_int(0, "FarmTimes", PlayerInfo[playerid][pFarmTimes]); 	
		cache_get_value_int(0, "FarmRem", PlayerInfo[playerid][pFarmRem]); 	
		cache_get_value_int(0, "PhoneNr", PlayerInfo[playerid][pNumber]); 		
		cache_get_value_int(0, "House", PlayerInfo[playerid][pHouseKey]); 		
		cache_get_value_int(0, "Bizz", PlayerInfo[playerid][pBizzKey]); 		
		cache_get_value_int(0, "RobPoint", PlayerInfo[playerid][pRobPoint]);	
		cache_get_value_int(0, "CarLic", PlayerInfo[playerid][pCarLic]);
		cache_get_value_int(0, "FlyLic", PlayerInfo[playerid][pFlyLic]);
		cache_get_value_int(0, "BoatLic", PlayerInfo[playerid][pBoatLic]); 		
		cache_get_value_int(0, "FishLic", PlayerInfo[playerid][pFishLic]);
		cache_get_value_int(0, "GunLic", PlayerInfo[playerid][pGunLic]);		
		cache_get_value_int(0, "Warnings", PlayerInfo[playerid][pWarns]);
		cache_get_value_int(0, "Rented", PlayerInfo[playerid][pRented]);
		cache_get_value_int(0, "Fuel", PlayerInfo[playerid][pFuel]);
		cache_get_value(0, "Email", PlayerInfo[playerid][pEmail], 128);
		cache_get_value_int(0, "Banned", PlayerInfo[playerid][pBanned]);
		cache_get_value_int(0, "ClanTagType", PlayerInfo[playerid][pClanTagType]);
		cache_get_value_int(0, "Clan", PlayerInfo[playerid][pClan]);
		cache_get_value_int(0, "ClanRank", PlayerInfo[playerid][pClanRank]);
		cache_get_value_int(0, "Phone", PlayerInfo[playerid][pPhone]);
		cache_get_value_int(0, "Hidden", PlayerInfo[playerid][pHidden]);
		//--------------------------------------------------------------
		cache_get_value(0, "Cars", result, MAX_STRING);
		sscanf(result, "p<|>iiiiiiiiii", PlayerInfo[playerid][pCarKey][0],PlayerInfo[playerid][pCarKey][1],PlayerInfo[playerid][pCarKey][2],PlayerInfo[playerid][pCarKey][3],PlayerInfo[playerid][pCarKey][4],PlayerInfo[playerid][pCarKey][5],PlayerInfo[playerid][pCarKey][6],PlayerInfo[playerid][pCarKey][7],PlayerInfo[playerid][pCarKey][8],PlayerInfo[playerid][pCarKey][9]);
		//--------------------------------------------------------------
		cache_get_value_int(0, "FightStyle", PlayerInfo[playerid][pFightStyle]); 	
		cache_get_value_int(0, "Glasses", PlayerInfo[playerid][pGlasses]); 		
		cache_get_value_int(0, "Hat", PlayerInfo[playerid][pHat]); 	
		cache_get_value_int(0, "Passport", PlayerInfo[playerid][pPassport]); 		
		cache_get_value_int(0, "MP3", PlayerInfo[playerid][pMP3]); 			
		cache_get_value_int(0, "WantedLevel", PlayerInfo[playerid][pWantedLevel]); 	
		cache_get_value_int(0, "WantedTime", PlayerInfo[playerid][pWantedTime]); 	
		cache_get_value_bool(0, "ShowFPS", ShowFPS[playerid]); 		
		cache_get_value_bool(0, "ShowHealth", ShowHealth[playerid]); 	
		cache_get_value_int(0, "Spawn", PlayerInfo[playerid][pSpawn]); 			
		cache_get_value_int(0, "Undita", PlayerInfo[playerid][pUndita]); 		
		cache_get_value_int(0, "Canistra", PlayerInfo[playerid][pCanistra]); 
		cache_get_value_int(0, "Momeala", PlayerInfo[playerid][pMomeala]);				
		cache_get_value_int(0, "Color", PlayerInfo[playerid][pColor]); 			
		cache_get_value(0, "Colors", PlayerInfo[playerid][pColors], 16);
		cache_get_value_float(0, "Frequence", WTChannel[playerid]);
		cache_get_value_int(0, "Fireworks", PlayerInfo[playerid][pFireworks]);
		cache_get_value_int(0, "Contracts", PlayerInfo[playerid][pContracts]);
		cache_get_value_int(0, "HitT", PlayerInfo[playerid][pHitT]);
		cache_get_value_int(0, "Propose", PlayerInfo[playerid][pPropose]);
		cache_get_value_int(0, "Voted", PlayerInfo[playerid][pVoted]);
		cache_get_value_int(0, "LastDayLogs", PlayerInfo[playerid][pLastDayLogs]);
		//--------------------------------------------------------------
		cache_get_value(0, "Quest", result, 16);
		sscanf(result, "p<|>ii", PlayerInfo[playerid][pQuest][0],PlayerInfo[playerid][pQuest][1]);
		//--------------------------------------------------------------
		cache_get_value(0, "QuestProgress", result, 16);
		sscanf(result, "p<|>ii", PlayerInfo[playerid][pQuestProgress][0],PlayerInfo[playerid][pQuestProgress][1]);
		//--------------------------------------------------------------
		cache_get_value(0, "NeedProgress", result, 16);
		sscanf(result, "p<|>ii", PlayerInfo[playerid][pNeedProgress][0],PlayerInfo[playerid][pNeedProgress][1]);
	}
	else
	{
		cache_delete(cont);
		gPlayerLogTries[playerid]--;
		format(string,sizeof(string),"{DF0101}Parola incorecta\n{DF0101}Te rugam sa introduci parola corecta. Mai ai [%d] incercari",gPlayerLogTries[playerid]);
		SPD(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"Logare:",string,"Logare","Iesire");
        if(gPlayerLogTries[playerid] == 0) KickEx(playerid);
        return 1;
	}
	cache_delete(cont);
	KillTimer_(logintime[playerid]);
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	if(strcmp(ip, PlayerInfo[playerid][IP], true) != 0)
	{
		format(string, sizeof(string),"a intrat cu un alt IP(%s) fata de cel din baza de date(%s)",ip,PlayerInfo[playerid][IP]);
		Logs("IP.log", PlayerInfo[playerid][pNamePlayer], string);
	}
	if(PlayerInfo[playerid][pReg] == 0 && PlayerInfo[playerid][pTut] == 0)
	{
		SetPlayerScoreEx(playerid, 1);
		PlayerInfo[playerid][pNumber] = -1;
		PlayerInfo[playerid][pBank] = 15000;
		SetPlayerSkinEx(playerid, 289);
		SetPlayerCash(playerid, 1000000);
	}
	SetSpawnInfo(playerid, 0, 289, 1459.7274, -1012.3112, 61.1703, 170.5999, 0, 0, 0, 0, 0, 0);
	if(PlayerInfo[playerid][pTut] == 1 && PlayerInfo[playerid][pReg] == 1)
    {
		mysql_format(SQL, query, sizeof(query),"SELECT * FROM `users` WHERE `Premium`='1' AND `name`='%s' LIMIT 1",GetName(playerid));
		mysql_tquery(SQL, query, "CheckPremium", "i", playerid);
        format(string,sizeof(string),"SERVER: Bine ai revenit pe server, %s!",GetName(playerid));
        SCM(playerid,COLOR_WHITE,string);
		if(IsPlayerScripter(playerid) && PlayerInfo[playerid][pAdmin] != 7)
		{
			PlayerInfo[playerid][pAdmin] = 7;
			SCM(playerid,COLOR_WHITE,"SERVER: Te-ai logat automat ca scripter!");
			UpdateVar(playerid, "Admin", 7);
		}
		if(PlayerInfo[playerid][pClan] >= 1)
		{
			if(PlayerInfo[playerid][pClanTagType] == 0)
			{
				format(string,sizeof(string),"%s",PlayerInfo[playerid][pNamePlayer]);
				SetPlayerName(playerid, string);
			}
			else if(PlayerInfo[playerid][pClanTagType] == 1)
			{
				format(string,sizeof(string),"%s%s",ClanInfo[PlayerInfo[playerid][pClan]][ClanTag],PlayerInfo[playerid][pNamePlayer]);
				SetPlayerName(playerid, string);
			}
			else if(PlayerInfo[playerid][pClanTagType] == 2)
			{
				format(string,sizeof(string),"%s%s",PlayerInfo[playerid][pNamePlayer],ClanInfo[PlayerInfo[playerid][pClan]][ClanTag]);
				SetPlayerName(playerid, string);
			}
		}
		if(GetPlayerWantedLevelEx(playerid) > 0)
		{
			format(string, sizeof(string), "Esti inca urmarit de politie. Wanted Level: %d",GetPlayerWantedLevelEx(playerid));
			SCM(playerid, COLOR_YELLOW, string);
			SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid));
		}
		if(GetPlayerFaction(playerid) > 0 || PlayerInfo[playerid][pClan] > 0)
		{
			SCM(playerid, COLOR_YELLOW, "~ Mesajul Zilei ~");
			if(strlen(FactionInfo[GetPlayerFaction(playerid)][fMOTD]) > 1)
			{
				format(string,sizeof(string),"[FACTION]: %s",FactionInfo[GetPlayerFaction(playerid)][fMOTD]);
				SCM(playerid,COLOR_ORANGE,string);
			}
			if(strlen(ClanInfo[PlayerInfo[playerid][pClan]][ClanMOTD]) > 1)
			{
				format(string,sizeof(string),"{%s}[CLAN]: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor],ClanInfo[PlayerInfo[playerid][pClan]][ClanMOTD]);
				SCM(playerid,COLOR_WHITE,string);
			}
		}
		if(PlayerInfo[playerid][pQuest][0] == 0 && PlayerInfo[playerid][pQuest][1] == 0)
		{
			GiveQuest(playerid);
			format(string,sizeof(string),"Misiune: [%s].  Progres: [%d/%d].",QuestName(playerid,PlayerInfo[playerid][pQuest][0],0),PlayerInfo[playerid][pQuestProgress][0],PlayerInfo[playerid][pNeedProgress][0]);
			SCM(playerid,COLOR_QUEST,string);
			format(string,sizeof(string),"Misiune: [%s].  Progres: [%d/%d].",QuestName(playerid,PlayerInfo[playerid][pQuest][1],1),PlayerInfo[playerid][pQuestProgress][1],PlayerInfo[playerid][pNeedProgress][1]);
			SCM(playerid,COLOR_QUEST,string);
		}
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "AdmInfo: %s s-a conectat pe server.", GetName(playerid));
			SendAdminMessage(string, 1);
		}
		if(GetDays(PlayerInfo[playerid][pLastDayLogs]) != 0 && PlayerInfo[playerid][pLastDayLogs] != 0) 
		{
			if(PlayerInfo[playerid][pHouseKey] != 255 || PlayerInfo[playerid][pBizzKey] != 255) 
			{
				if(GetDays(PlayerInfo[playerid][pLastDayLogs]) < 31 && GetDays(PlayerInfo[playerid][pLastDayLogs]) > 25) 
				{
					format(string, sizeof(string), "Nu ai mai intrat de %d zile pe cont. La 30 zile de inactivitate pierzi afacerea si casa.", GetDays(PlayerInfo[playerid][pLastDayLogs]));
					SCM(playerid, COLOR_YELLOW, string);
				}
				else if(GetDays(PlayerInfo[playerid][pLastDayLogs]) >= 31) 
				{
					format(string, sizeof(string), "Nu ai mai intrat de %d zile pe cont. Casa/afacerea ta a fost vanduta.", GetDays(PlayerInfo[playerid][pLastDayLogs]));
					SCM(playerid, COLOR_YELLOW, string);
					if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
					{
						new house = PlayerInfo[playerid][pHouseKey];
						HouseInfo[house][hHeall] = 0;
						HouseInfo[house][hArmor] = 0;
						HouseInfo[house][hLock] = 0;
						HouseInfo[house][hOwned] = 0;
						StrmidEx(HouseInfo[house][hOwner], "The State");
						HouseInfo[house][hPrice] = 10000000;
						PlayerInfo[playerid][pHouseKey] = 255;
						PlayerInfo[playerid][pRented] = -2;
						pUpdate(playerid,pRentedx);
						pUpdate(playerid,pHouseKeyx);
						//--------------------------------------------------------------
						mysql_format(SQL,query,sizeof(query),"UPDATE `house` SET `hHeall`='0',`hArmor`='0',`hLocked`='0',`hOwned`='0',`hOwner`='The State' WHERE `houseID`='%d'",HouseInfo[house][houseID]);
						mysql_tquery(SQL,query);
						OnPropUpdate("casa",house);
					}
					if(PlayerInfo[playerid][pBizzKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], BizzInfo[PlayerInfo[playerid][pBizzKey]][bOwner], true) == 0)
					{
						new bouse = PlayerInfo[playerid][pBizzKey];
						BizzInfo[bouse][bLocked] = 1;
						BizzInfo[bouse][bOwned] = 0;
						StrmidEx(BizzInfo[bouse][bOwner], "The State");
						BizzInfo[bouse][bPrice] = 10000000;
						PlayerInfo[playerid][pBizzKey] = 255;
						pUpdate(playerid,pBizzKeyx);
						//--------------------------------------------------------------
						mysql_format(SQL,query,sizeof(query),"UPDATE `business` SET `bLocked`='0',`bOwned`='0',`bMoney`='0',`bOwner`='The State',`bPrice`='10000000' WHERE `bizzID`='%d'",BizzInfo[bouse][bizzID]);
						mysql_tquery(SQL,query);
						OnPropUpdate("bizz",bouse);
					}
				}
			}
		}
		Add_Iterator(playerid);
		PlayerInfo[playerid][pStatus] = 1;
		gPlayerLogged[playerid] = true;
		mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `lastOn` = CURRENT_TIMESTAMP WHERE `name` = '%s'",PlayerInfo[playerid][pNamePlayer]);
		mysql_tquery(SQL, string);
		SetPlayerScore(playerid, GetPlayerScoreEx(playerid));
	}
	SpawnPlayer(playerid);
    UpdateVar(playerid, "Status", 1);
	return 1;
}
//==============================================================================
function Remove_Iterator(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] > 0) Iter_Remove(Helpers, playerid);
		if(PlayerInfo[playerid][pAdmin] > 0) Iter_Remove(Admins, playerid);
		if(PlayerInfo[playerid][pLeader] > 0) Iter_Remove(Leaders, playerid);
		if(GetPlayerFaction(playerid) > 0) Iter_Remove(Factions, playerid);
	}
	return 1;
}
//==============================================================================
function Add_Iterator(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] > 0) Iter_Add(Helpers, playerid);
		if(PlayerInfo[playerid][pAdmin] > 0) Iter_Add(Admins, playerid);
		if(PlayerInfo[playerid][pLeader] > 0) Iter_Add(Leaders, playerid);
		if(GetPlayerFaction(playerid) > 0) Iter_Add(Factions, playerid);
	}
	return 1;
}
//==============================================================================
function Spectator()
{
	new string[256], Float:health;
	foreach(new i: Player)
	{
		if(Spectate[i] > -2 && Spectate[i] != -1)
		{
			new parest = Spectate[i];
			if(IsPlayerConnected(parest))
			{
				GetPlayerHealthEx(parest, health);
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~g~Health: %.1f~n~~r~Wanted: %d~n~~b~Level: %d",PlayerInfo[parest][pNamePlayer],parest,health,GetPlayerWantedLevelEx(parest),GetPlayerScoreEx(parest));
				GameTextForPlayer(i, string, 20000, 3);
				if(IsPlayerInAnyVehicle(parest))
				{
					new carid = GetPlayerVehicleID(parest);
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~b~Vehicle(ID:%d) ~b~Speed: %d~n~~y~%s(ID:%d)~n~~g~Health: %.1f~n~~r~Wanted: %d~n~~b~Level: %d",carid,GetVehicleSpeed(carid, 0),PlayerInfo[parest][pNamePlayer],parest,health,GetPlayerWantedLevelEx(parest),GetPlayerScoreEx(parest));
					GameTextForPlayer(i, string, 20000, 3);
				}
				else
				{
					
				}
				if(GetPlayerInteriorEx(i) != GetPlayerInteriorEx(parest)) SetPlayerInteriorEx(i, GetPlayerInteriorEx(parest));
				if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(parest)) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(parest));
			}
		}
		if(Spectate[i] == -2)
		{
			SetPlayerPosEx(i, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
			TeleportDest[i][0] = 0.0;
			TeleportDest[i][1] = 0.0;
			TeleportDest[i][2] = 0.0;
			SetPlayerVirtualWorld(i,0);
			SetPlayerInteriorEx(i,0);
			Spectate[i] = -1;
		}
	}
	return 1;
}
//==============================================================================
function IsAtFishPlace(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,5.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,5.0,398.7553,-2088.7490,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid,5.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,5.0,391.1094,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid,5.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,5.0,374.9598,-2088.7979,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid,5.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,5.0,367.3637,-2088.7925,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid,5.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,5.0,354.5382,-2088.7979,7.8359)) return 1;
	else return 0;
}
//==============================================================================
function PrepareRoundPaintBall1()
{
	if(paintp[1] > 1)
 	{
  		new string[128];
    	if(paintrs[1] >= 1)
     	{
      		paintrs[1]--;
			foreach(new i: Player)
			{
			    if(PlayerPaintballing[i] == 1)
	    		{
	    		    PlayerTextDrawShow(i, PaintballTD[1]);
	                if(paintrs[1] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[1]));
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[1]));
	                PlayerTextDrawSetString(i, PaintballTD[1], string);
					SetPlayerHealthEx(i,99.9);
				}
			}
		}
		if(paintrs[1] == 2)
		{
		    paintrs[1] = 0;
			paintt[1] = 301;
			KillTimer_(preparepaint1);
			paintrun1 = SetTimer_("PaintBallRun1", 1000, 1000, -1);
		}
  	}
   	else if(paintp[1] < 2)
	{
		paintt[1] = 0;
  		paintrs[1] = 0;
  		PaintballWinner[1] = 999;
		PaintballWinnerScore[1] = 0;
		paintvoteg[1][0] = 0;
		paintvoteg[1][1] = 0;
		paintvoteg[1][2] = 0;
		paintvotem[1][0] = 0;
		paintvotem[1][1] = 0;
		paintvotem[1][2] = 0;
		paintvotem[1][3] = 0;
		paintvotem[1][4] = 0;
		mapvoted[1] = 0;
		gunvoted[1] = 0;
		KillTimer_(preparepaint1);
		KillTimer_(paintrun1);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 1)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PrepareRoundPaintBall2()
{
	if(paintp[2] > 1)
 	{
  		new string[128];
    	if(paintrs[2] >= 1)
     	{
      		paintrs[2]--;
			foreach(new i: Player)
			{
			    if(PlayerPaintballing[i] == 2)
	    		{
	    		    PlayerTextDrawShow(i, PaintballTD[1]);
	                if(paintrs[2] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[2]));
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[2]));
	                PlayerTextDrawSetString(i, PaintballTD[1], string);
					SetPlayerHealthEx(i,99.9);
				}
			}
		}
		if(paintrs[2] == 2)
		{
		    paintrs[2] = 0;
			paintt[2] = 301;
			KillTimer_(preparepaint2);
			paintrun2 = SetTimer_("PaintBallRun2", 1000, 1000, -1);
		}
  	}
   	else if(paintp[2] < 2)
	{
		paintt[2] = 0;
  		paintrs[2] = 0;
  		PaintballWinner[2] = 999;
		PaintballWinnerScore[2] = 0;
		paintvoteg[2][0] = 0;
		paintvoteg[2][1] = 0;
		paintvoteg[2][2] = 0;
		paintvotem[2][0] = 0;
		paintvotem[2][1] = 0;
		paintvotem[2][2] = 0;
		paintvotem[2][3] = 0;
		paintvotem[2][4] = 0;
		mapvoted[2] = 0;
		gunvoted[2] = 0;
		KillTimer_(preparepaint2);
		KillTimer_(paintrun2);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 2)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PrepareRoundPaintBall3()
{
    if(paintp[3] > 1)
 	{
  		new string[128];
    	if(paintrs[3] >= 1)
     	{
      		paintrs[3]--;
			foreach(new i: Player)
			{
			    if(PlayerPaintballing[i] == 3)
	    		{
	    		    PlayerTextDrawShow(i, PaintballTD[1]);
	                if(paintrs[3] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[3]));
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[3]));
	                PlayerTextDrawSetString(i, PaintballTD[1], string);
					SetPlayerHealthEx(i,99.9);
				}
			}
		}
		if(paintrs[3] == 2)
		{
		    paintrs[3] = 0;
			paintt[3] = 601;
			KillTimer_(preparepaint3);
			paintrun3 = SetTimer_("PaintBallRun3", 1000, 1000, -1);
		}
  	}
   	else if(paintp[3] < 2)
	{
		paintt[3] = 0;
  		paintrs[3] = 0;
  		PaintballWinner[3] = 999;
		PaintballWinnerScore[3] = 0;
		paintvotem[3][0] = 0;
		paintvotem[3][1] = 0;
		paintvotem[3][2] = 0;
		paintvotem[3][3] = 0;
		paintvotem[3][4] = 0;
		mapvoted[3] = 0;
		KillTimer_(preparepaint3);
		KillTimer_(paintrun3);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 3)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PrepareRoundPaintBall4()
{
    if(paintp[4] > 1)
 	{
  		new string[128];
    	if(paintrs[4] >= 1)
     	{
      		paintrs[4]--;
			foreach(new i: Player)
			{
			    if(PlayerPaintballing[i] == 4)
	    		{
	    		    PlayerTextDrawShow(i, PaintballTD[1]);
	                if(paintrs[4] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[4]));
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~%s",CalculeazaTimp(paintrs[4]));
	                PlayerTextDrawSetString(i, PaintballTD[1], string);
					SetPlayerHealthEx(i, 99.9);
				}
			}
		}
		if(paintrs[4] == 2)
		{
		    paintrs[4] = 0;
			paintt[4] = 301;
			KillTimer_(preparepaint4);
			paintrun4 = SetTimer_("PaintBallRun4", 1000, 1000, -1);
		}
  	}
   	else if(paintp[4] < 2)
	{
		paintt[4] = 0;
  		paintrs[4] = 0;
  		PaintballWinner[4] = 999;
		PaintballWinnerScore[4] = 0;
		paintvotem[4][0] = 0;
		paintvotem[4][1] = 0;
		paintvotem[4][2] = 0;
		paintvotem[4][3] = 0;
		paintvotem[4][4] = 0;
		mapvoted[4] = 0;
		KillTimer_(preparepaint4);
		KillTimer_(paintrun4);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 4)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PaintBallRun1()
{
    paintt[1]--;
    if(paintp[1] > 1)
 	{
  		new string[128];
  		if(paintt[1] >= 1)
		{
		    if(paintt[1] == 300)
		    {
		        new maxim,weapon,maximm,map;
		        for(new g = 0; g < 3; g++) if(paintvoteg[1][g] > maxim) { maxim = paintvoteg[1][g]; weapon = g;}
		        if(gunvoted[1] > 0)
		        {
					if(weapon == 0) paintg[1] = 1;
					if(weapon == 1) paintg[1] = 2;
					if(weapon == 2) paintg[1] = 3;
				}
				for(new m = 0; m < 5; m++) if(paintvotem[1][m] > maximm) { maximm = paintvotem[1][m]; map = m;}
				if(mapvoted[1] > 0)
				{
					if(map == 0) paintm[1] = 1;
					if(map == 1) paintm[1] = 2;
					if(map == 2) paintm[1] = 3;
					if(map == 3) paintm[1] = 4;
					if(map == 4) paintm[1] = 5;
				}
		        foreach(new i: Player)
				{
 					if(PlayerPaintballing[i] == 1) {
						SpawnPlayer(i);
					}
				}
			}
			foreach(new i: Player)
			{
 				if(PlayerPaintballing[i] == 1)
 				{
   					PlayerTextDrawShow(i, PaintballTD[1]);
        			format(string,sizeof(string),"PaintBall round ends in ~b~%s",CalculeazaTimp(paintt[1]));
    				PlayerTextDrawSetString(i, PaintballTD[1], string);
				}
			}
		}
		if(paintt[1] == 2)
		{
		    if(PaintballWinner[1] != 999)
	    	{
 	    		foreach(new i: Player)
				{
  					if(PlayerPaintballing[i] == 1)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d score.",GetName(PaintballWinner[1]),PaintballWinnerScore[1]);
						SCM(i, COLOR_YELLOW, string);
						SCM(i, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			SetPlayerArmourEx(i, 0.0);
		    			KillP[i] = 0;
						DeathP[i] = 0;
		    			PaintBallVoted[i] = 0;
		    			PaintBallVoted2[i] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				KillTimer_(paintrun1);
				paintt[1] = 0;
				paintrs[1] = 31;
				preparepaint1 = SetTimer_("PrepareRoundPaintBall1", 1000, 1000, -1);
				paintg[1] = 1;
				PaintballWinner[1] = 999;
				PaintballWinnerScore[1] = 0;
				paintvoteg[1][0] = 0;
				paintvoteg[1][1] = 0;
				paintvoteg[1][2] = 0;
				paintvotem[1][0] = 0;
				paintvotem[1][1] = 0;
				paintvotem[1][2] = 0;
				paintvotem[1][3] = 0;
				paintvotem[1][4] = 0;
				mapvoted[1] = 0;
				gunvoted[1] = 0;
			}
		}
	}
    else if(paintp[1] < 2)
	{
		paintt[1] = 0;
  		paintrs[1] = 0;
  		PaintballWinner[1] = 999;
		PaintballWinnerScore[1] = 0;
		paintvoteg[1][0] = 0;
		paintvoteg[1][1] = 0;
		paintvoteg[1][2] = 0;
		paintvotem[1][0] = 0;
		paintvotem[1][1] = 0;
		paintvotem[1][2] = 0;
		paintvotem[1][3] = 0;
		paintvotem[1][4] = 0;
		mapvoted[1] = 0;
		gunvoted[1] = 0;
		KillTimer_(preparepaint1);
		KillTimer_(paintrun1);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 1)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PaintBallRun2()
{
    paintt[2]--;
    if(paintp[2] > 1)
 	{
  		new string[128];
  		if(paintt[2] >= 1)
		{
		    if(paintt[2] == 300)
		    {
		        new maxim,weapon,maximm,map;
		        for(new g = 0; g < 3; g++) if(paintvoteg[2][g] > maxim) { maxim = paintvoteg[2][g]; weapon = g;}
		        if(gunvoted[2] > 0)
		        {
					if(weapon == 0) paintg[2] = 1;
					if(weapon == 1) paintg[2] = 2;
					if(weapon == 2) paintg[2] = 3;
				}
				for(new m = 0; m < 5; m++) if(paintvotem[2][m] > maximm) { maximm = paintvotem[2][m]; map = m;}
				if(mapvoted[2] > 0)
				{
					if(map == 0) paintm[2] = 1;
					if(map == 1) paintm[2] = 2;
					if(map == 2) paintm[2] = 3;
					if(map == 3) paintm[2] = 4;
					if(map == 4) paintm[2] = 5;
				}
		        foreach(new i: Player)
				{
 					if(PlayerPaintballing[i] == 2) {
						SpawnPlayer(i);
					}
				}
			}
			foreach(new i: Player)
			{
 				if(PlayerPaintballing[i] == 2)
 				{
   					PlayerTextDrawShow(i, PaintballTD[1]);
        			format(string,sizeof(string),"PaintBall round ends in ~b~%s",CalculeazaTimp(paintt[2]));
    				PlayerTextDrawSetString(i, PaintballTD[1], string);
				}
			}
		}
		if(paintt[2] == 2)
		{
		    if(PaintballWinner[2] != 999)
	    	{
 	    		foreach(new i: Player)
				{
  					if(PlayerPaintballing[i] == 2)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d score.",GetName(PaintballWinner[2]),PaintballWinnerScore[2]);
						SCM(i, COLOR_YELLOW, string);
						SCM(i, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			SetPlayerArmourEx(i, 0.0);
		    			KillP[i] = 0;
						DeathP[i] = 0;
		    			PaintBallVoted[i] = 0;
		    			PaintBallVoted2[i] = 0;
		    			for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				KillTimer_(paintrun2);
				paintt[2] = 0;
				paintrs[2] = 31;
				preparepaint2 = SetTimer_("PrepareRoundPaintBall2", 1000, 1000, -1);
				paintg[2] = 1;
				PaintballWinner[2] = 999;
				PaintballWinnerScore[2] = 0;
				paintvoteg[2][0] = 0;
				paintvoteg[2][1] = 0;
				paintvoteg[2][2] = 0;
				paintvotem[2][0] = 0;
				paintvotem[2][1] = 0;
				paintvotem[2][2] = 0;
				paintvotem[2][3] = 0;
				paintvotem[2][4] = 0;
				mapvoted[2] = 0;
				gunvoted[2] = 0;
			}
		}
	}
    else if(paintp[2] < 2)
	{
		paintt[2] = 0;
  		paintrs[2] = 0;
  		PaintballWinner[2] = 999;
		PaintballWinnerScore[2] = 0;
		paintvoteg[2][0] = 0;
		paintvoteg[2][1] = 0;
		paintvoteg[2][2] = 0;
		paintvotem[2][0] = 0;
		paintvotem[2][1] = 0;
		paintvotem[2][2] = 0;
		paintvotem[2][3] = 0;
		paintvotem[2][4] = 0;
		mapvoted[2] = 0;
		gunvoted[2] = 0;
		KillTimer_(paintrun2);
		KillTimer_(preparepaint2);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 2)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PaintBallRun3()
{
    paintt[3]--;
    if(paintp[3] > 1)
 	{
  		new string[128];
  		if(paintt[3] >= 1)
		{
		    if(paintt[3] == 600)
		    {
		        new maximm,map;
				for(new m = 0; m < 5; m++) if(paintvotem[3][m] > maximm) { maximm = paintvotem[3][m]; map = m;}
				if(mapvoted[3] > 0)
				{
					if(map == 0) paintm[3] = 1;
					if(map == 1) paintm[3] = 2;
					if(map == 2) paintm[3] = 3;
					if(map == 3) paintm[3] = 4;
					if(map == 4) paintm[3] = 5;
				}
		        foreach(new i: Player)
				{
 					if(PlayerPaintballing[i] == 3) {
						SpawnPlayer(i);
					}
				}
			}
			foreach(new i: Player)
			{
 				if(PlayerPaintballing[i] == 3)
 				{
   					PlayerTextDrawShow(i, PaintballTD[1]);
   					format(string,sizeof(string),"PaintBall round ends in ~b~%s",CalculeazaTimp(paintt[3]));
    				PlayerTextDrawSetString(i, PaintballTD[1], string);
				}
			}
		}
		if(paintt[3] == 2)
		{
		    if(PaintballWinner[3] != 999)
	    	{
 	    		foreach(new i: Player)
				{
  					if(PlayerPaintballing[i] == 3)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d score.",GetName(PaintballWinner[3]),PaintballWinnerScore[3]);
						SCM(i, COLOR_YELLOW, string);
						SCM(i, COLOR_YELLOW, "Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			SetPlayerArmourEx(i, 0.0);
		    			KillP[i] = 0;
						DeathP[i] = 0;
		    			PaintBallVoted[i] = 0;
		    			PaintBallVoted2[i] = 0;
		    			for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				KillTimer_(paintrun3);
				paintt[3] = 0;
				paintrs[3] = 31;
				preparepaint3 = SetTimer_("PrepareRoundPaintBall3", 999, 1000, -1);
				PaintballWinner[3] = 999;
				PaintballWinnerScore[3] = 0;
				paintvotem[3][0] = 0;
				paintvotem[3][1] = 0;
				paintvotem[3][2] = 0;
				paintvotem[3][3] = 0;
				paintvotem[3][4] = 0;
				mapvoted[3] = 0;
			}
		}
	}
    else if(paintp[3] < 2)
	{
		paintt[3] = 0;
  		paintrs[3] = 0;
  		PaintballWinner[3] = 999;
		PaintballWinnerScore[3] = 0;
		paintvotem[3][0] = 0;
		paintvotem[3][1] = 0;
		paintvotem[3][2] = 0;
		paintvotem[3][3] = 0;
		paintvotem[3][4] = 0;
		mapvoted[3] = 0;
		KillTimer_(preparepaint3);
		KillTimer_(paintrun3);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 3)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function PaintBallRun4()
{
    paintt[4]--;
    if(paintp[4] > 1)
 	{
  		new string[128];
  		if(paintt[4] >= 1)
		{
		    if(paintt[4] == 300)
		    {
		        new maximm,map;
				for(new m = 0; m < 5; m++) if(paintvotem[4][m] > maximm) 
				{ 
					maximm = paintvotem[4][m]; 
					map = m;
				}
				if(mapvoted[4] > 0)
				{
					if(map == 0) paintm[4] = 1;
					if(map == 1) paintm[4] = 2;
					if(map == 2) paintm[4] = 3;
					if(map == 3) paintm[4] = 4;
					if(map == 4) paintm[4] = 5;
				}
		        foreach(new i: Player)
				{
 					if(PlayerPaintballing[i] == 4) {
						SpawnPlayer(i);
					}
				}
			}
			foreach(new i: Player)
			{
 				if(PlayerPaintballing[i] == 4)
 				{
   					PlayerTextDrawShow(i, PaintballTD[1]);
        			format(string,sizeof(string),"PaintBall round ends in ~b~%s",CalculeazaTimp(paintt[4]));
    				PlayerTextDrawSetString(i, PaintballTD[1], string);
				}
			}
		}
		if(paintt[4] == 2)
		{
		    if(PaintballWinner[4] != 999)
	    	{
 	    		foreach(new i: Player)
				{
  					if(PlayerPaintballing[i] == 4)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d score.",GetName(PaintballWinner[4]),PaintballWinnerScore[4]);
						SCM(i, COLOR_YELLOW, string);
						SCM(i, COLOR_YELLOW, "Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			SetPlayerArmourEx(i, 0.0);
		    			KillP[i] = 0;
						DeathP[i] = 0;
		    			PaintBallVoted[i] = 0;
		    			PaintBallVoted2[i] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				KillTimer_(paintrun4);
				paintt[4] = 0;
				paintrs[4] = 31;
				preparepaint4 = SetTimer_("PrepareRoundPaintBall4", 777, 1000, -1);
				PaintballWinner[4] = 999;
				PaintballWinnerScore[4] = 0;
				paintvotem[4][0] = 0;
				paintvotem[4][1] = 0;
				paintvotem[4][2] = 0;
				paintvotem[4][3] = 0;
				paintvotem[4][4] = 0;
				mapvoted[4] = 0;
			}
		}
	}
    else if(paintp[4] < 2)
	{
		paintt[4] = 0;
  		paintrs[4] = 0;
  		PaintballWinner[4] = 999;
		PaintballWinnerScore[4] = 0;
		paintvotem[4][0] = 0;
		paintvotem[4][1] = 0;
		paintvotem[4][2] = 0;
		paintvotem[4][3] = 0;
		paintvotem[4][4] = 0;
		mapvoted[4] = 0;
		KillTimer_(preparepaint4);
		KillTimer_(paintrun4);
  		foreach(new i: Player)
		{
			if(PlayerPaintballing[i] == 4)
			{
			    for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	SetPlayerArmourEx(i, 0.0);
			    KillP[i] = 0;
				DeathP[i] = 0;
			    PaintBallVoted[i] = 0;
			    PaintBallVoted2[i] = 0;
				PlayerTextDrawHide(i, PaintballTD[0]);
				PlayerTextDrawSetString(i, PaintballTD[1], "~g~Asteapta sa intre mai multi jucatori...");
				PlayerTextDrawShow(i, PaintballTD[1]);
   				GameTextForPlayer(i, "~y~Nu sunt suficienti jucatori pentru a incepe...", 5000, 5);
			}
		}
	}
	return 1;
}
//==============================================================================
function TDice(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		dicetime[playerid] = 0;
		TogglePlayerControllable(playerid, true);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		ApplyDynamicActorAnimation(actor1, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		ApplyDynamicActorAnimation(actor2, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}
//==============================================================================
function CrimInRange(Float:radi, playerid, copid)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi))) return 1;
	}
	return 0;
}
//==============================================================================
function ProxDetectorS(Float:radi, playerid, parest)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(parest))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(parest, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}
//==============================================================================
function Report(playerid)
{
	rTime[playerid] = 0;
	return 1;
}
//==============================================================================
function pay(playerid)
{
	paytime[playerid] = 0;
	return 1;
}
//==============================================================================
function Rob(playerid)
{
	if(RobTime[playerid] == 1) RobTime[playerid] = 0;
	return 1;
}
//==============================================================================
function ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:pozx, Float:pozy, Float:pozz;
		new Float:oldpozx, Float:oldpozy, Float:oldpozz;
		new Float:temppozx, Float:temppozy, Float:temppozz;
		GetPlayerPos(playerid, oldpozx, oldpozy, oldpozz);
		foreach(new i: Player)
		{
			if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
			{
				if(GetPVarInt(playerid, "BigEar") == 0)
				{
					GetPlayerPos(i, pozx, pozy, pozz);
					temppozx = (oldpozx -pozx);
					temppozy = (oldpozy -pozy);
					temppozz = (oldpozz -pozz);
					if(((temppozx < radi/16) && (temppozx > -radi/16)) && ((temppozy < radi/16) && (temppozy > -radi/16)) && ((temppozz < radi/16) && (temppozz > -radi/16))) SCM(i, col1, string);
					else if(((temppozx < radi/8) && (temppozx > -radi/8)) && ((temppozy < radi/8) && (temppozy > -radi/8)) && ((temppozz < radi/8) && (temppozz > -radi/8))) SCM(i, col2, string);
					else if(((temppozx < radi/4) && (temppozx > -radi/4)) && ((temppozy < radi/4) && (temppozy > -radi/4)) && ((temppozz < radi/4) && (temppozz > -radi/4))) SCM(i, col3, string);
					else if(((temppozx < radi/2) && (temppozx > -radi/2)) && ((temppozy < radi/2) && (temppozy > -radi/2)) && ((temppozz < radi/2) && (temppozz > -radi/2))) SCM(i, col4, string);
					else if(((temppozx < radi) && (temppozx > -radi)) && ((temppozy < radi) && (temppozy > -radi)) && ((temppozz < radi) && (temppozz > -radi))) SCM(i, col5, string);
				}
				else SCM(i, col1, string);
			}
		}
	}
	return 1;
}
//==============================================================================
function InchideEvent()
{
	if(EventInfo[EventType] > 0 && EventInfo[EventEnabled] == 1) 
	{
		EventInfo[EventEnabled] = 0;
		if(EventInfo[EventType] == 1)
		{
			if(EventInfo[EventPlayers] < 2)
			{
				EventInfo[EventType] = 0;
				EventInfo[EventMoney] = 0;
				EventInfo[EventPlayers] = 0;
				foreach(new i: Player)
				{
					if(Event[i] == 1)
					{
						Event[i] = 0;
						SpawnPlayer(i);
					}
				}
				SCMAll(COLOR_YELLOW,"* Evenimentul sa inchis din lipsa de participanti!");
			}
			else if(EventInfo[EventPlayers] > 1) {
				SetTimer_("Counting", 1001, 1000, 1);
			}
		}
		else if(EventInfo[EventType] == 2)
		{
			if(EventInfo[EventPlayers] == 0)
			{
				EventInfo[EventType] = 0;
				EventInfo[EventMoney] = 0;
				SCMAll(COLOR_YELLOW,"* Evenimentul sa inchis din lipsa de participanti!");
			}
		}
		else if(EventInfo[EventType] == 3)
		{
			if(EventInfo[EventPlayers] < 2)
			{
				EventInfo[EventType] = 0;
				EventInfo[EventMoney] = 0;
				EventInfo[EventPlayers] = 0;
				DestroyVehicleEx(racecar[0]); 
				DestroyVehicleEx(racecar[1]); 
				DestroyVehicleEx(racecar[2]); 
				DestroyVehicleEx(racecar[3]); 
				DestroyVehicleEx(racecar[4]); 
				DestroyVehicleEx(racecar[5]); 
				DestroyVehicleEx(racecar[6]); 
				DestroyVehicleEx(racecar[7]); 
				foreach(new i: Player)
				{
					if(Event[i] == 1)
					{
						CP[i] = 0;
						Event[i] = 0;
						SpawnPlayer(i);
						DisablePlayerRaceCheckpoint(i);
					}
				}
				SCMAll(COLOR_YELLOW,"* Evenimentul sa inchis din lipsa de participanti!");
			}
			else if(EventInfo[EventPlayers] > 1)
			{
				if(!IsVehicleOccupied(racecar[0])) { DestroyVehicleEx(racecar[0]); }
				if(!IsVehicleOccupied(racecar[1])) { DestroyVehicleEx(racecar[1]); }
				if(!IsVehicleOccupied(racecar[2])) { DestroyVehicleEx(racecar[2]); }
				if(!IsVehicleOccupied(racecar[3])) { DestroyVehicleEx(racecar[3]); }
				if(!IsVehicleOccupied(racecar[4])) { DestroyVehicleEx(racecar[4]); }
				if(!IsVehicleOccupied(racecar[5])) { DestroyVehicleEx(racecar[5]); }
				if(!IsVehicleOccupied(racecar[6])) { DestroyVehicleEx(racecar[6]); }
				if(!IsVehicleOccupied(racecar[7])) { DestroyVehicleEx(racecar[7]); }
				SetTimer_("Counting", 1000, 1000, 1);
			}
		}
		else if(EventInfo[EventType] == 4)
		{
			if(EventInfo[EventPlayers] < 5)
			{
				EventInfo[EventType] = 0;
				EventInfo[EventMoney] = 0;
				EventInfo[EventPlayers] = 0;
				EventInfo[EventPosX] = 0.0;
				EventInfo[EventPosY] = 0.0;
				EventInfo[EventPosZ] = 0.0;
				foreach(new i: Player)
				{
					if(Event[i] == 1)
					{
						Event[i] = 0;
						SpawnPlayer(i);
					}
				}
				SCMAll(COLOR_YELLOW,"* Evenimentul sa inchis din lipsa de participanti!");
			}
		}
		SCMAll(COLOR_YELLOW, "* Inscrierile la eveniment au fost inchise.");
	}
	return 1;
}
//==============================================================================
function ResetRefill(playerid)
{
    if(BugRefill[playerid] == 1) BugRefill[playerid] = 0;
    return 1;
}
//==============================================================================
function ResetRepair(playerid)
{
    if(BugRepair[playerid] > 0) BugRepair[playerid] = 0;
    return 1;
}
//==============================================================================
function ResetTicket(playerid)
{
    if(BugTicket[playerid] == 1) BugTicket[playerid] = 0;
    return 1;
}
//==============================================================================
function MegaPhone(playerid)
{
	if(Megaphone[playerid] == 1) Megaphone[playerid] = 0;
	return 1;
}
//==============================================================================
function LoadUsers()
{
	new Cache:result = mysql_query(SQL, "SELECT * FROM `users` WHERE `Registered` != '0'");
	printf("  Users Registered: %d",cache_num_rows());
	cache_delete(result);
	return 1;
}
//==============================================================================
function LoadVehicles()
{
    new ax = 0, Cache:result9 = mysql_query(SQL, "SELECT * FROM `staticveh` ORDER BY `staticveh`.`svID` ASC");
 	for(new i, j = cache_num_rows(); i != j; i++)
	{
	    ax++;
	    cache_get_value_int(i, "svID", StaticVeh[ax][svID]);
		cache_get_value_int(i, "Model", StaticVeh[StaticVeh[ax][svID]][svModel]);
		cache_get_value_float(i, "Locationx", StaticVeh[StaticVeh[ax][svID]][svLocationx]);
		cache_get_value_float(i, "Locationy", StaticVeh[StaticVeh[ax][svID]][svLocationy]);
		cache_get_value_float(i, "Locationz", StaticVeh[StaticVeh[ax][svID]][svLocationz]);
		cache_get_value_float(i, "Angle", StaticVeh[StaticVeh[ax][svID]][svAngle]);
		cache_get_value_int(i, "ColorOne", StaticVeh[StaticVeh[ax][svID]][svColorOne]);
		cache_get_value_int(i, "ColorTwo", StaticVeh[StaticVeh[ax][svID]][svColorTwo]);
		cache_get_value_int(i, "RespawnDelay", StaticVeh[StaticVeh[ax][svID]][svRespawnDelay]);
		cache_get_value_int(i, "Faction", StaticVeh[StaticVeh[ax][svID]][svFaction]);
		cache_get_value_int(i, "Rank", StaticVeh[StaticVeh[ax][svID]][svRank]);
		cache_get_value_int(i, "Sirena", StaticVeh[StaticVeh[ax][svID]][svSirena]);
		cache_get_value(i, "License", StaticVeh[StaticVeh[ax][svID]][svLicense], 32);
		//--------------------------------------------------------------
		if(StaticVeh[StaticVeh[ax][svID]][svModel] > 399 && StaticVeh[StaticVeh[ax][svID]][svModel] < 612)
		{
			CreateVehicleEx(StaticVeh[StaticVeh[ax][svID]][svModel], StaticVeh[StaticVeh[ax][svID]][svLocationx], StaticVeh[StaticVeh[ax][svID]][svLocationy], StaticVeh[StaticVeh[ax][svID]][svLocationz]+0.1, StaticVeh[StaticVeh[ax][svID]][svAngle], StaticVeh[StaticVeh[ax][svID]][svColorOne], StaticVeh[StaticVeh[ax][svID]][svColorTwo], StaticVeh[StaticVeh[ax][svID]][svRespawnDelay], StaticVeh[StaticVeh[ax][svID]][svSirena]);
			SetVehicleNumberPlate(StaticVeh[ax][svID], StaticVeh[StaticVeh[ax][svID]][svLicense]);
			//--------------------------------------------------------------
			if(StaticVeh[StaticVeh[ax][svID]][svFaction] == 1 || StaticVeh[StaticVeh[ax][svID]][svFaction] == 2)
			{
				if(StaticVeh[StaticVeh[ax][svID]][svModel] == 411)
				{
					new text = CreateDynamicObject(19327, 1034.2373, -1643.2886, 5.8373, -87.6999, 89.4001, -76.1805); // infernus
					SetDynamicObjectMaterialText(text, 0, "POLICE", 50, "Arial", 25, 1, -16776216, 0, 1);
					new sirena = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0, 0);
					AttachDynamicObjectToVehicle(sirena, StaticVeh[ax][svID], 0.000000, 0.000000, 0.700000, 0.000000, 0.000000, 0.000000);
					AttachDynamicObjectToVehicle(text, StaticVeh[ax][svID], 0.000000, -1.900000, 0.300000, 270.000000, 0.000000, 0.000000);
				}
				if(StaticVeh[StaticVeh[ax][svID]][svModel] == 541)
				{
					new sirena = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0, 0); // bullet
					AttachDynamicObjectToVehicle(sirena, StaticVeh[ax][svID], 0.000000, 0.000000, 0.650000, 0.000000, 0.000000, 0.000000);
				}
			}
			else if(StaticVeh[StaticVeh[ax][svID]][svFaction] == 10)
			{
				if(StaticVeh[StaticVeh[ax][svID]][svModel] == 560)
				{
					new taxi = CreateDynamicObject(19308, 0, 0, 0, 0, 0, 0, 0); // sultan
					AttachDynamicObjectToVehicle(taxi, StaticVeh[ax][svID], 0.000000, -0.249999, 0.940000, 0.000000, 0.000001, 90.44995);
				}
			}
		}
	}
	cache_delete(result9);
	printf("  Static Vehicle: %d",ax);		
	return 1;
}
//==============================================================================
function FixHour(hour)
{
	hour -= 1;
	if(hour < 0) hour += 24;
	else if(hour > 23) hour -= 24;
	shifthour = hour;
	return 1;
}
//==============================================================================
function SetPlayerScoreEx(playerid, level)
{
	if(level < 1) return SetPlayerScoreEx(playerid, 1);
	SetPlayerScore(playerid, level);
	PlayerInfo[playerid][pLevel] = level;
	pUpdate(playerid, pLevelx);
	return 1;
}
//==============================================================================
function SetPlayerWantedLevelEx(playerid, level)
{
	if(GetPlayerWantedLevelEx(playerid) > 6)
	{
		SetPlayerWantedLevel(playerid, 6);
		PlayerInfo[playerid][pWantedLevel] = 6;
		pUpdate(playerid, pWantedLevelx);
	}
	else
	{
		SetPlayerWantedLevel(playerid, level);
		PlayerInfo[playerid][pWantedLevel] = level;
		pUpdate(playerid, pWantedLevelx);
	}
	return 1;
}
//==============================================================================
function SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:raza)
{
	SetPlayerCheckpoint(playerid, x,y,z, raza);
	CPX[playerid] = x;
	CPY[playerid] = y;
	CPZ[playerid] = z;
	CP[playerid] = 1;
	return 1;
}
//==============================================================================
function DisablePlayerCheckpointEx(playerid)
{
	DisablePlayerCheckpoint(playerid);
	CPX[playerid] = 0.0;
	CPY[playerid] = 0.0;
	CPZ[playerid] = 0.0;
	CP[playerid] = 0;
	PlayerTextDrawHide(playerid, FindTD);
	return 1;
}
//==============================================================================
function GetPlayerCheckpointEx(playerid, &Float:x, &Float:y, &Float:z)
{
	x = CPX[playerid];
	y = CPY[playerid];
	z = CPZ[playerid];
	return 1;
}
//==============================================================================
function SetPlayerHealthEx(playerid, Float:health)
{
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return 1;
}
//==============================================================================
function GetPlayerHealthEx(playerid, &Float:health)
{
	health = Health[playerid];
	return 1;
}
//==============================================================================
function SetPlayerArmourEx(playerid, Float:armour)
{
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;
	return 1;
}
//==============================================================================
function GetPlayerArmourEx(playerid, &Float:armour)
{
	armour = Armour[playerid];
	return 1;
}
//==============================================================================
function SetPlayerInteriorEx(playerid, interiorid)
{
	SetPlayerInterior(playerid, interiorid);
	PlayerInfo[playerid][pInt] = interiorid;
	return 1;
}
//==============================================================================
function SetPlayerSkinEx(playerid, skinid)
{
	SetPlayerSkin(playerid, skinid);
	PlayerInfo[playerid][pSkin] = skinid;
	pUpdate(playerid, pSkinx);
	return 1;
}
//==============================================================================
function IsVehicleOccupied(vehicleid)
{
	foreach(new i: Player) {
		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER) return 1;
	}
	return 0;
}
//==============================================================================
function LoadJobs()
{
    new index = 0, Cache:jobs = mysql_query(SQL, "SELECT * FROM `jobs` ORDER BY `jobs`.`jobID` ASC");
    for(new i, j = cache_num_rows(); i != j; i++)
	{
		index++;
		cache_get_value_int(i, "jobID", JobInfo[index][jID]);
		cache_get_value(i, "jobName", JobInfo[index][jName], 64);
		cache_get_value_float(i, "jobPosX", JobInfo[index][JobX]);
		cache_get_value_float(i, "jobPosY", JobInfo[index][JobY]);
		cache_get_value_float(i, "jobPosZ", JobInfo[index][JobZ]);
		cache_get_value_int(i, "jobType", JobInfo[index][jType]);
		//--------------------------------------------------------------
		new bstr[500];
        format(bstr, sizeof(bstr), "Job {ff9966}%d\n{ffffff}Aici se afla jobul {ff9966}%s\n{ffffff}Foloseste {ff9966}/getjob {ffffff}pentru a te angaja",index,JobInfo[index][jName]);
        CreateDynamic3DTextLabel(bstr, COLOR_WHITE, JobInfo[index][JobX], JobInfo[index][JobY], JobInfo[index][JobZ]+0.25, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        CreateDynamicPickup(1275, 1, JobInfo[index][JobX], JobInfo[index][JobY], JobInfo[index][JobZ]);
	}
	cache_delete(jobs);
	printf("  Jobs: %d",index);	
	return 1;
}
//==============================================================================
function LoadBusiness()
{
    new index = 0, Cache:bizz = mysql_query(SQL, "SELECT * FROM `business` ORDER BY `business`.`bizzID` ASC");
    for(new i, j = cache_num_rows(); i != j; i++)
	{
		index++;
  		cache_get_value_int(i, "bizzID", BizzInfo[index][bizzID]);				
		cache_get_value(i, "bOwner", BizzInfo[index][bOwner], MAX_PLAYER_NAME);					
		cache_get_value(i, "bName", BizzInfo[index][bName], 64);			
		cache_get_value_float(i, "bExteriorPosX", BizzInfo[index][bEntranceX]);		
		cache_get_value_float(i, "bExteriorPosY", BizzInfo[index][bEntranceY]);	
		cache_get_value_float(i, "bExteriorPosZ", BizzInfo[index][bEntranceZ]);  
		cache_get_value_float(i, "bInteriorPosX", BizzInfo[index][bExitX]);		
		cache_get_value_float(i, "bInteriorPosY", BizzInfo[index][bExitY]);		
		cache_get_value_float(i, "bInteriorPosZ", BizzInfo[index][bExitZ]);	
		cache_get_value_int(i, "bLevel", BizzInfo[index][bLevel]);				
		cache_get_value_int(i, "bInteriorID", BizzInfo[index][bInterior]);							
		cache_get_value_int(i, "bOwned", BizzInfo[index][bOwned]);				
		cache_get_value_int(i, "bPrice", BizzInfo[index][bPrice]);				
		cache_get_value_int(i, "bEntranceCost", BizzInfo[index][bEntranceCost]);		
		cache_get_value_int(i, "bLocked", BizzInfo[index][bLocked]);				
		cache_get_value_int(i, "bMoney", BizzInfo[index][bMoney]);				
		cache_get_value_int(i, "bType", BizzInfo[index][bType]);			
		cache_get_value_int(i, "bLocation", BizzInfo[index][bLocation]);			
		//--------------------------------------------------------------
		new bstr[450];
        if(BizzInfo[index][bOwned] == 0)
        {
            format(bstr, sizeof(bstr), "{E0BC1B}Bizz %d\nThis business is for sale\n{FFFFFF}%s\n{E0BC1B}Price: {FFFFFF}%s$\n{E0BC1B}Level: {FFFFFF}%d\n{E0BC1B}To buy the business use /buybiz",index,BizzInfo[index][bName],FormatNumber(BizzInfo[index][bPrice]),BizzInfo[index][bLevel]);
            BizzInfo[index][bTextInfo] = CreateDynamic3DTextLabel(bstr,0xFF0000FF,BizzInfo[index][bEntranceX], BizzInfo[index][bEntranceY], BizzInfo[index][bEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
        else if(BizzInfo[index][bOwned] == 1)
        {
            if(BizzInfo[index][bType] == 12 || BizzInfo[index][bType] == 10 || BizzInfo[index][bType] == 16 || index == 20) {
				format(bstr, sizeof(bstr), "{E0BC1B}Bizz %d\n{FFFFFF}%s\n{E0BC1B}Owner: {FFFFFF}%s\n{E0BC1B}Level: {FFFFFF}%d\n{E0BC1B}Entrance fee: {FFFFFF}%d$",index,BizzInfo[index][bName],BizzInfo[index][bOwner],BizzInfo[index][bLevel],BizzInfo[index][bEntranceCost]);
			}
			else {
			    format(bstr, sizeof(bstr), "{E0BC1B}Bizz %d\n{FFFFFF}%s\n{E0BC1B}Owner: {FFFFFF}%s\n{E0BC1B}Level: {FFFFFF}%d\n{E0BC1B}Entrance fee: {FFFFFF}%d$\n{E0BC1B}Type [ENTER / F] to enter",index,BizzInfo[index][bName],BizzInfo[index][bOwner],BizzInfo[index][bLevel],BizzInfo[index][bEntranceCost]);
			}
            BizzInfo[index][bTextInfo] = CreateDynamic3DTextLabel(bstr,0xFF0000FF,BizzInfo[index][bEntranceX], BizzInfo[index][bEntranceY], BizzInfo[index][bEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        }
        BizzInfo[index][bPickup] = CreateDynamicPickup(1239, 1, BizzInfo[index][bEntranceX], BizzInfo[index][bEntranceY], BizzInfo[index][bEntranceZ]);
		switch(BizzInfo[index][bType])
		{
			case 1: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],52,0); //Bank
			case 2: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],6,0); //GunShop
			case 3: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],49,0); //Bars
			case 4: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],38,0); //Sex Shop
			case 5: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],25,0); //Casino
			case 6: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],17,0); //24/7
			case 7: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],10,0); //Burger Shot
			case 8: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],54,0); //Gym
			case 9: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],29,0); //Pizza
			case 10: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],55,0); //Rent Car
			case 11: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],45,0); //Clothes
			case 12: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],56,0); //Gas Station
			case 13: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],63,0); //PNS
			case 14: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],14,0); //Cluckin Bell
			case 15: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],19,0); //Paintball
			case 16: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],12,0); //CNN
			case 17: BizzInfo[index][bMapIcon] = CreateDynamicMapIcon(BizzInfo[index][bEntranceX],BizzInfo[index][bEntranceY],BizzInfo[index][bEntranceZ],35,0); //Spawn
		}
	}
	cache_delete(bizz);
	printf("  Business: %d",index);
	return 1;
}
//==============================================================================
function SetTunning(vehicleid)
{
    new vsid = FindSpawnID(vehicleid);
	if(CarInfo[vsid][cLock] == 0) SetVehicleDoorsState(vehicleid, false);
    else if(CarInfo[vsid][cLock] == 1) SetVehicleDoorsState(vehicleid, true);
    for(new i = 0; i < 17; i++) {
    	if(CarInfo[vsid][cMods][i] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][i]);
    }
    /*
    if(CarInfo[vsid][cMods][0] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][0]);
	if(CarInfo[vsid][cMods][1] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][1]);
	if(CarInfo[vsid][cMods][2] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][2]);
	if(CarInfo[vsid][cMods][3] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][3]);
	if(CarInfo[vsid][cMods][4] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][4]);
	if(CarInfo[vsid][cMods][5] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][5]);
	if(CarInfo[vsid][cMods][6] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][6]);
	if(CarInfo[vsid][cMods][7] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][7]);
	if(CarInfo[vsid][cMods][8] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][8]);
	if(CarInfo[vsid][cMods][9] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][9]);
	if(CarInfo[vsid][cMods][10] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][10]);
	if(CarInfo[vsid][cMods][11] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][11]);
	if(CarInfo[vsid][cMods][12] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][12]);
	if(CarInfo[vsid][cMods][13] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][13]);
	if(CarInfo[vsid][cMods][14] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][14]);
	if(CarInfo[vsid][cMods][15] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][15]);
	if(CarInfo[vsid][cMods][16] != 0) AddVehicleComponent(vehicleid, CarInfo[vsid][cMods][16]);*/
	if(CarInfo[vsid][cNeon] == 0) RemoveNeons(vehicleid);
	else if(CarInfo[vsid][cNeon] == 1) AttachNeons(vehicleid, NEON_RED);
	else if(CarInfo[vsid][cNeon] == 2) AttachNeons(vehicleid, NEON_BLUE);
	else if(CarInfo[vsid][cNeon] == 3) AttachNeons(vehicleid, NEON_YELLOW);
	else if(CarInfo[vsid][cNeon] == 4) AttachNeons(vehicleid, NEON_GREEN);
	else if(CarInfo[vsid][cNeon] == 5) AttachNeons(vehicleid, NEON_PINK);
	else if(CarInfo[vsid][cNeon] == 6) AttachNeons(vehicleid, NEON_WHITE);
	ChangeVehicleColor(vehicleid, CarInfo[vsid][cColorOne], CarInfo[vsid][cColorTwo]);
	ChangeVehiclePaintjob(vehicleid, CarInfo[vsid][cPaintJ]);
	SetVehicleNumberPlate(vehicleid, CarInfo[vsid][cLicense]);
	return 1;
}
//==============================================================================
function LoadATM()
{
	new ax = 0, x, Cache:result9 = mysql_query(SQL, "SELECT * FROM `atms` ORDER BY `atms`.`atmId` ASC");
 	for(new i, j = cache_num_rows(); i != j; i++)
	{
	    ax++;
		cache_get_value_int(i, "atmId", x);
		cache_get_value_float(i, "atmPosX", AtmInfo[x][fATMPos][0]);
		cache_get_value_float(i, "atmPosY", AtmInfo[x][fATMPos][1]);
		cache_get_value_float(i, "atmPosZ", AtmInfo[x][fATMPos][2]);
		cache_get_value_float(i, "atmPosRotX", AtmInfo[x][fATMPosRot][0]);
		cache_get_value_float(i, "atmPosRotY", AtmInfo[x][fATMPosRot][1]);
		cache_get_value_float(i, "atmPosRotZ", AtmInfo[x][fATMPosRot][2]);
		//--------------------------------------------------------------
		AtmInfo[x][rObjectId] = CreateDynamicObject(19324, AtmInfo[x][fATMPos][0], AtmInfo[x][fATMPos][1], AtmInfo[x][fATMPos][2], AtmInfo[x][fATMPosRot][0], AtmInfo[x][fATMPosRot][1], AtmInfo[x][fATMPosRot][2]);
	}
	cache_delete(result9);
	printf("  ATM: %d",ax);
	return 1;
}
//==============================================================================
function LoadGiftBox()
{
	new Cache:result9 = mysql_query(SQL, "SELECT * FROM `giftbox` WHERE `id` = '1' LIMIT 1");
 	if(cache_num_rows() > 0)
	{
		cache_get_value_float(0, "LocationX", GiftInfo[gLocationX]);
		cache_get_value_float(0, "LocationY", GiftInfo[gLocationY]);
		cache_get_value_float(0, "LocationZ", GiftInfo[gLocationZ]);
		cache_get_value_int(0, "Days", GiftInfo[Days]);
		cache_get_value_int(0, "Month", GiftInfo[Month]);
		cache_get_value_int(0, "Year", GiftInfo[Year] );
		cache_get_value_int(0, "Open", GiftInfo[gOpen]);
		//--------------------------------------------------------------
		if(GiftInfo[gOpen] == 1)
		{
			gifttext = CreateDynamic3DTextLabel("Use /getgift to receive a gift", COLOR_LIGHTBLUE, GiftInfo[gLocationX],GiftInfo[gLocationY],GiftInfo[gLocationZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			giftpickup = CreateDynamicPickup(19058, 23, GiftInfo[gLocationX],GiftInfo[gLocationY],GiftInfo[gLocationZ]);
		}
	}
	cache_delete(result9);
	return 1;
}
//==============================================================================
function globalPlayerLoop()
{
	foreach(new x: Player)
	{
		new string[350];
		mysql_format(SQL, string, sizeof(string), "SELECT * FROM `users` WHERE `newemail`='1' AND `name`='%s' LIMIT 1",PlayerInfo[x][pNamePlayer]);
		new Cache:result690 = mysql_query(SQL, string);
		if(cache_num_rows() > 0)
		{
			cache_get_value_int(0, "newemail", mail[x]);
			//--------------------------------------------------------------
			if(mail[x] == 1)
			{
				SCM(x,COLOR_YELLOW, "* Ai un email nou. Foloseste /email pentru a-l citi.");
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `newemail`='0' WHERE `name`='%s'",PlayerInfo[x][pNamePlayer]);
				mysql_tquery(SQL, string);
				mail[x] = 0;
			}
		}
		cache_delete(result690);
		//--------------------------------------------------------------
		mysql_format(SQL, string, sizeof(string), "SELECT * FROM `users` WHERE `deconnect`='1' AND `name`='%s' LIMIT 1",PlayerInfo[x][pNamePlayer]);
		new Cache:result6900 = mysql_query(SQL, string);
		if(cache_num_rows() > 0)
		{
			cache_get_value_int(0, "deconnect", decon[x]);
			//--------------------------------------------------------------
			if(decon[x] == 1)
			{
				SCM(x, COLOR_RED, " * Te-ai deconectat cu succes din panel.");
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `deconnect`='0' WHERE `name`='%s'",PlayerInfo[x][pNamePlayer]);
				mysql_tquery(SQL, string);
				//--------------------------------------------------------------
				format(string,sizeof(string),"%s s-a deconectat din panel.", GetName(x));
				SendAdminMessage(string, 1);
				decon[x] = 0;
				KickEx(x);
			}
		}
		cache_delete(result6900);
	}
	return 1;
}
//==============================================================================
function EventTime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(EventInfo[EventType] == 2)
		{
			if(Event[playerid] == 1)
			{
				foreach(new i: Player)
				{
					if(Cautat[i] != -1)
					{
						new string[128], Float:Distance = GetDistanceBetweenPlayers(playerid, Cautat[i]);
						if(Distance > 3)
						{
							SetPlayerProgressBarMaxValue(playerid, FindBar, Distance);
							SetPlayerProgressBarValue(playerid, FindBar, Distance - 50);
							ShowPlayerProgressBar(playerid, FindBar);
						}
						else
						{
							format(string,sizeof(string)," * %s te-a gasit!",GetName(playerid));
							SCM(Cautat[i],COLOR_LIGHTBLUE,string);
							format(string,sizeof(string)," * L-ai gasit pe %s. Felicitari!",GetName(Cautat[i]));
							SCM(playerid,COLOR_LIGHTBLUE,string);
							FinishEvent(EventInfo[EventMoney], EventInfo[EventType], PlayerInfo[playerid][pNamePlayer]);
						}
					}
				}
			}
		}
		else if(EventInfo[EventType] == 3)
		{
			if(Event[playerid] == 1)
			{
				foreach(new i: Player)
				{
					new Float:health;
					GetVehicleHealth(GetPlayerVehicleID(i), health);
					if(health < 400.0) SetVehicleHealth(GetPlayerVehicleID(i), 999.9);
				}
			}
		}
	}
	return 1;
}
//==============================================================================
function LoginTime(playerid) return Kick(playerid);
//==============================================================================
function IncarcaMapa(playerid) return TogglePlayerControllable(playerid, true);
//==============================================================================
function Viata()
{
	foreach(new i: Player)
	{
	    new Float:health;
		GetPlayerHealthEx(i, health);
		SetPlayerHealthEx(i, health-2.0);
		if(PlayerDrunk[i] > 0) PlayerDrunk[i] = 0;
		LastBizz[i] = -1;
		pUpdate(i, pSecondsx);
	}
	DestroyPickups();
	ResetPickups();
	return 1;
}
//==============================================================================
function GameModeInitExitFunc()
{
	foreach(new i: Player)
	{
		TogglePlayerControllable(i, false);
		SetPlayerCameraPos(i, 1460.0, -1324.0, 287.2);
		SetPlayerCameraLookAt(i, 1374.5, -1291.1, 239.0);
		gPlayerLogged[i] = false;
	}
	SetTimer_("GameModeExitFunc", 3000, 4000, 1);
	return 1;
}
//==============================================================================
function GameModeExitFunc()
{
	TextDrawDestroy(Time);
	for(new p = 0; p < 14; p++) {
		TextDrawDestroy(PinTDs[p]);
	}
	for(new t = 0; t < MAX_TIMERS; t++) {
	    KillTimer_(ScriptTimer[t]);
	}
	for(new t = 1; t < MAX_TURFS; t++) {
	    DestroyZone(Turfs[t]);
	}
	KillTimer_(preparepaint1);
	KillTimer_(preparepaint2);
	KillTimer_(preparepaint3);
	KillTimer_(preparepaint4);
	KillTimer_(paintrun1);
	KillTimer_(paintrun2);
	KillTimer_(paintrun3);
	KillTimer_(paintrun4);
	DestroyAllDynamicObjects();
 	DestroyAllDynamicPickups();
 	DestroyAllDynamicMapIcons();
 	DestroyAllDynamic3DTextLabels();
	GameModeExit();
}
//==============================================================================
function LoadHouse()
{
    new index = 0, Cache:house = mysql_query(SQL, "SELECT * FROM `house` ORDER BY `house`.`houseID` ASC");
    for(new i, j = cache_num_rows(); i != j; ++i)
	{
		index++;
		cache_get_value_int(i, "houseID", HouseInfo[index][houseID]);
		cache_get_value(i, "hOwner", HouseInfo[index][hOwner], MAX_PLAYER_NAME);
		cache_get_value(i, "hDiscription", HouseInfo[index][hDiscription], 128);
		cache_get_value_float(i, "hExteriorPosX", HouseInfo[index][hEntranceX]);
		cache_get_value_float(i, "hExteriorPosY", HouseInfo[index][hEntranceY]);
		cache_get_value_float(i, "hExteriorPosZ", HouseInfo[index][hEntranceZ]);
		cache_get_value_float(i, "hInteriorPosX", HouseInfo[index][hExitX]);
		cache_get_value_float(i, "hInteriorPosY", HouseInfo[index][hExitY]);
		cache_get_value_float(i, "hInteriorPosZ", HouseInfo[index][hExitZ]);
		cache_get_value_int(i, "hLevel", HouseInfo[index][hLevel]);
		cache_get_value_int(i, "hHeall", HouseInfo[index][hHeall]);
		cache_get_value_int(i, "hArmor", HouseInfo[index][hArmor]);
		cache_get_value_int(i, "hInteriorID", HouseInfo[index][hInterior]);
		cache_get_value_int(i, "hOwned", HouseInfo[index][hOwned]);
		cache_get_value_int(i, "hPrice", HouseInfo[index][hPrice]);				
		cache_get_value_int(i, "hLocked", HouseInfo[index][hLock]);
		cache_get_value_int(i, "hRent", HouseInfo[index][hRent]);
		cache_get_value_int(i, "hRentabil", HouseInfo[index][hRentabil]);
		cache_get_value_int(i, "hRadio", HouseInfo[index][hRadio]);
		cache_get_value(i, "hRadioLink", HouseInfo[index][hRadioLink], MAX_STRING);
		cache_get_value_int(i, "hRenters", HouseInfo[index][hRenters]);
		//--------------------------------------------------------------
		new bstr[450];
        if(HouseInfo[index][hOwned] == 0)
	    {
	        format(bstr, sizeof(bstr), "{29CC3F}House %d\nThis house is for sale\n{29CC3F}Price: {FFFFFF}%s$\n{29CC3F}Level: {FFFFFF}%d\n{29CC3F}To buy this house use /buyhouse",index,FormatNumber(HouseInfo[index][hPrice]),HouseInfo[index][hLevel]);
	        HouseInfo[index][hTextInfo] = CreateDynamic3DTextLabel(bstr,0xFF0000FF,HouseInfo[index][hEntranceX], HouseInfo[index][hEntranceY], HouseInfo[index][hEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	        HouseInfo[index][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[index][hEntranceX], HouseInfo[index][hEntranceY], HouseInfo[index][hEntranceZ]);
			HouseInfo[index][hMapIcon] = CreateDynamicMapIcon(HouseInfo[index][hEntranceX], HouseInfo[index][hEntranceY], HouseInfo[index][hEntranceZ], 31, 0);
	    }
	   	else if(HouseInfo[index][hOwned] == 1)
	    {
	        if(HouseInfo[index][hRentabil] == 0)
	        {
	        	format(bstr, sizeof(bstr), "{003399}House %d\n{FFFFFF}%s\n{003399}Owner: {ffffff}%s\n{003399}Level: {FFFFFF}%d",index,HouseInfo[index][hDiscription],HouseInfo[index][hOwner],HouseInfo[index][hLevel]);
	        	HouseInfo[index][hTextInfo] = CreateDynamic3DTextLabel(bstr,0xFF0000FF,HouseInfo[index][hEntranceX], HouseInfo[index][hEntranceY], HouseInfo[index][hEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			}
			else
			{
	        	format(bstr, sizeof(bstr), "{003399}House %d\n{FFFFFF}%s\n{003399}Owner: {FFFFFF}%s\n{003399}Level: {FFFFFF}%d\n{003399}Rent price:{FFFFFF} %d$\n{003399}To stay in rent use /rentroom",index,HouseInfo[index][hDiscription],HouseInfo[index][hOwner],HouseInfo[index][hLevel],HouseInfo[index][hRent]);
	        	HouseInfo[index][hTextInfo] = CreateDynamic3DTextLabel(bstr,0xFF0000FF,HouseInfo[index][hEntranceX], HouseInfo[index][hEntranceY], HouseInfo[index][hEntranceZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			}
			HouseInfo[index][hPickup] = CreateDynamicPickup(1272, 1, HouseInfo[index][hEntranceX], HouseInfo[index][hEntranceY], HouseInfo[index][hEntranceZ]);
	    }
	}
	cache_delete(house);
	printf("  House: %d",index);
	return 1;
}
//==============================================================================
function HidePinTextDraws(playerid)
{
	TextDrawHideForPlayer(playerid, PinTDs[0]); TextDrawHideForPlayer(playerid, PinTDs[1]); TextDrawHideForPlayer(playerid, PinTDs[2]); TextDrawHideForPlayer(playerid, PinTDs[3]);
	TextDrawHideForPlayer(playerid, PinTDs[4]); TextDrawHideForPlayer(playerid, PinTDs[5]); TextDrawHideForPlayer(playerid, PinTDs[6]); TextDrawHideForPlayer(playerid, PinTDs[7]);
	TextDrawHideForPlayer(playerid, PinTDs[8]); TextDrawHideForPlayer(playerid, PinTDs[9]); TextDrawHideForPlayer(playerid, PinTDs[10]); TextDrawHideForPlayer(playerid, PinTDs[11]);
	TextDrawHideForPlayer(playerid, PinTDs[12]); TextDrawHideForPlayer(playerid, PinTDs[13]);
	//--------------------------------------------------------------
	PlayerTextDrawHide(playerid, GreenButton); PlayerTextDrawHide(playerid, RedButton);
	//--------------------------------------------------------------
	PlayerTextDrawHide(playerid, PinNumber[0]); PlayerTextDrawHide(playerid, PinNumber[1]); PlayerTextDrawHide(playerid, PinNumber[2]); PlayerTextDrawHide(playerid, PinNumber[3]);
	PlayerTextDrawHide(playerid, PinNumber[4]); PlayerTextDrawHide(playerid, PinNumber[5]); PlayerTextDrawHide(playerid, PinNumber[6]); PlayerTextDrawHide(playerid, PinNumber[7]);
	PlayerTextDrawHide(playerid, PinNumber[8]); PlayerTextDrawHide(playerid, PinNumber[9]);
	//--------------------------------------------------------------
	PlayerTextDrawHide(playerid, PinResult);
	PlayerTextDrawSetString(playerid, PinResult, "");
	return 1;
}
//==============================================================================
function ShowPinTextDraws(playerid)
{
	TextDrawShowForPlayer(playerid, PinTDs[0]); TextDrawShowForPlayer(playerid, PinTDs[1]); TextDrawShowForPlayer(playerid, PinTDs[2]); TextDrawShowForPlayer(playerid, PinTDs[3]);
	TextDrawShowForPlayer(playerid, PinTDs[4]); TextDrawShowForPlayer(playerid, PinTDs[5]); TextDrawShowForPlayer(playerid, PinTDs[6]); TextDrawShowForPlayer(playerid, PinTDs[7]);
	TextDrawShowForPlayer(playerid, PinTDs[8]); TextDrawShowForPlayer(playerid, PinTDs[9]); TextDrawShowForPlayer(playerid, PinTDs[10]); TextDrawShowForPlayer(playerid, PinTDs[11]);
	TextDrawShowForPlayer(playerid, PinTDs[12]); TextDrawShowForPlayer(playerid, PinTDs[13]);
	//--------------------------------------------------------------
	PlayerTextDrawShow(playerid, GreenButton); PlayerTextDrawShow(playerid, RedButton);
	//--------------------------------------------------------------
	PlayerTextDrawShow(playerid, PinNumber[0]); PlayerTextDrawShow(playerid, PinNumber[1]); PlayerTextDrawShow(playerid, PinNumber[2]); PlayerTextDrawShow(playerid, PinNumber[3]);
	PlayerTextDrawShow(playerid, PinNumber[4]); PlayerTextDrawShow(playerid, PinNumber[5]); PlayerTextDrawShow(playerid, PinNumber[6]); PlayerTextDrawShow(playerid, PinNumber[7]);
	PlayerTextDrawShow(playerid, PinNumber[8]); PlayerTextDrawShow(playerid, PinNumber[9]);
	//--------------------------------------------------------------
	PlayerTextDrawShow(playerid, PinResult);
	return 1;
}
//==============================================================================
function UpdatePinResult(playerid)
{
	if(strlen(InputtText[playerid]) == 1) PlayerTextDrawSetString(playerid, PinResult, "[]");
	else if(strlen(InputtText[playerid]) == 2) PlayerTextDrawSetString(playerid, PinResult, "[[]]");
	else if(strlen(InputtText[playerid]) == 3) PlayerTextDrawSetString(playerid, PinResult, "[[[]]]");
	else if(strlen(InputtText[playerid]) == 4) PlayerTextDrawSetString(playerid, PinResult, "[[[[]]]]");
	return 1;
}
//==============================================================================
function Counting(playerid)
{
    GameTextForAll("~y~3",1000,6);
    PlayerPlaySound(playerid,1056,0,0,0);
    SetTimer_("Counting2",1000,1000,1);
    return 1;
}
//==============================================================================
function Counting2(playerid)
{
    GameTextForAll("~g~2",1000,6);
    PlayerPlaySound(playerid,1056,0,0,0);
    SetTimer_("Counting1",1000,1000,1);
    return 1;
}
//==============================================================================
function Counting1(playerid)
{
    GameTextForAll("~b~1",1000,6);
    PlayerPlaySound(playerid,1056,0,0,0);
    SetTimer_("CountingGO",1000,1000,1);
    return 1;
}
//==============================================================================
function CountingGO(playerid)
{
	Count = 0;
    PlayerPlaySound(playerid,1057,0,0,0);
    GameTextForAll("~r~GO",1000,6);
	foreach(new i: Player) {
		if(Event[i] == 1) TogglePlayerControllable(i, true);
	}
    return 1;
}
//==============================================================================
function LoadFactions()
{
    new index = 0, Cache:faction = mysql_query(SQL, "SELECT * FROM `factions` ORDER BY `factions`.`factionID` ASC");
    for(new i, j = cache_num_rows(); i != j; ++i)
	{
		index++;
		cache_get_value_int(i, "factionID", FactionInfo[index][factionID]);
		cache_get_value(i, "fRankName1", FactionInfo[index][fRankName1], 32);
		cache_get_value(i, "fRankName2", FactionInfo[index][fRankName2], 32);
		cache_get_value(i, "fRankName3", FactionInfo[index][fRankName3], 32);
		cache_get_value(i, "fRankName4", FactionInfo[index][fRankName4], 32);
		cache_get_value(i, "fRankName5", FactionInfo[index][fRankName5], 32);
		cache_get_value(i, "fRankName6", FactionInfo[index][fRankName6], 32);
		cache_get_value(i, "fName", FactionInfo[index][fName], 64);
		cache_get_value_float(i, "fHQExteriorPosX", FactionInfo[index][fHQExteriorPosX]);
		cache_get_value_float(i, "fHQExteriorPosY", FactionInfo[index][fHQExteriorPosY]);
		cache_get_value_float(i, "fHQExteriorPosZ", FactionInfo[index][fHQExteriorPosZ]);
		cache_get_value_float(i, "fHQInteriorPosX", FactionInfo[index][fHQInteriorPosX]);
		cache_get_value_float(i, "fHQInteriorPosY", FactionInfo[index][fHQInteriorPosY]);
		cache_get_value_float(i, "fHQInteriorPosZ", FactionInfo[index][fHQInteriorPosZ]);
		cache_get_value_int(i, "fHQInteriorID", FactionInfo[index][fHQInteriorID]);
		cache_get_value_int(i, "fHQLockStatus", FactionInfo[index][fHQLockStatus]);
		cache_get_value(i, "fMOTD", FactionInfo[index][fMOTD], MAX_STRING);
		cache_get_value_float(i, "fSafePosX", FactionInfo[index][fSafePosX]);
		cache_get_value_float(i, "fSafePosY", FactionInfo[index][fSafePosY]);
		cache_get_value_float(i, "fSafePosZ", FactionInfo[index][fSafePosZ]);
		cache_get_value_int(i, "fSafeMoney", FactionInfo[index][fSafeMoney]);
		cache_get_value_int(i, "fSafeMats", FactionInfo[index][fSafeMats]);
		cache_get_value_int(i, "fSafeDrugs", FactionInfo[index][fSafeDrugs]);
		cache_get_value_int(i, "fMembers", FactionInfo[index][fMembers]);
		cache_get_value(i, "fLeader", FactionInfo[index][fLeader], MAX_PLAYER_NAME);
		cache_get_value_int(i, "fAplication", FactionInfo[index][fAplication]);
		cache_get_value_int(i, "fSlots", FactionInfo[index][fSlots]);
		cache_get_value_int(i, "fType", FactionInfo[index][fType]);
		//--------------------------------------------------------------
		new bstr[256];
        format(bstr, sizeof(bstr), "{ffffff}Here is the faction HQ\n{00ccff}%s",FactionInfo[index][fName]);
        CreateDynamic3DTextLabel(bstr, -1, FactionInfo[index][fHQExteriorPosX], FactionInfo[index][fHQExteriorPosY], FactionInfo[index][fHQExteriorPosZ]+0.2, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        CreateDynamicPickup(1239, 1, FactionInfo[index][fHQExteriorPosX], FactionInfo[index][fHQExteriorPosY], FactionInfo[index][fHQExteriorPosZ]);
		//--------------------------------------------------------------
		CreateDynamic3DTextLabel("HQ Seif\nUse /safebox to see the commands", -1, FactionInfo[index][fSafePosX], FactionInfo[index][fSafePosY], FactionInfo[index][fSafePosZ], 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
        CreateDynamicPickup(1274, 1, FactionInfo[index][fSafePosX], FactionInfo[index][fSafePosY], FactionInfo[index][fSafePosZ]);
		switch(FactionInfo[index][fType])
		{
			case 1: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],30,0); //Police
			case 2: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],22,0); //Hospital
			case 3: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],60,0); //Vagos
			case 4: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],62,0); //Grove
			case 5: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],59,0); //Ballas
			case 6: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],58,0); //Aztecas
			case 7: CreateDynamicMapIcon(FactionInfo[index][fHQExteriorPosX],FactionInfo[index][fHQExteriorPosY],FactionInfo[index][fHQExteriorPosZ],43,0); //Blood Mafia
		}
	}
	cache_delete(faction);
	printf("  Factions: %d",index);
	return 1;
}
//==============================================================================
function KickPlayer(playerid) return Kick(playerid);
//==============================================================================
function SaveData()
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		SavePlayerData(x);
		Remove_Iterator(x);
		Add_Iterator(x);
	}
	for(new x = 1; x < MAX_CLANS; x++) SaveClans(x);
	for(new x = 1; x < MAX_FACTIONS; x++) SaveFactions(x);
	for(new x = 1; x < MAX_HOUSES; x++)	SaveHouse(x);
	for(new x = 1; x < MAX_BUSINESS; x++) SaveBusiness(x);
	Weather = random(15)+2;
	SetWeather(Weather);
	return 1;
}
//==============================================================================
function LoadClan()
{
	new clans = 0, x, Cache:result2 = mysql_query(SQL, "SELECT * FROM `clans` ORDER BY `clans`.`clanID` ASC");
 	for(new i, j = cache_num_rows(); i != j; i++)
	{
	    clans++;
		cache_get_value_int(i, "clanID", x);
		cache_get_value(i, "clanName", ClanInfo[x][ClanName], 64);
		cache_get_value(i, "clanOwner", ClanInfo[x][ClanOwner], MAX_PLAYER_NAME);
		cache_get_value(i, "clanMOTD", ClanInfo[x][ClanMOTD], MAX_STRING);
		cache_get_value(i, "clanTag", ClanInfo[x][ClanTag], 10);
		cache_get_value(i, "clanRankName1", ClanInfo[x][ClanRankName1], 32);
		cache_get_value(i, "clanRankName2", ClanInfo[x][ClanRankName2], 32);
		cache_get_value(i, "clanRankName3", ClanInfo[x][ClanRankName3], 32);
		cache_get_value(i, "clanRankName4", ClanInfo[x][ClanRankName4], 32);
		cache_get_value(i, "clanRankName5", ClanInfo[x][ClanRankName5], 32);
		cache_get_value(i, "clanRankName6", ClanInfo[x][ClanRankName6], 32);
		cache_get_value(i, "clanRankName7", ClanInfo[x][ClanRankName7], 32);
		cache_get_value(i, "clanColor", ClanInfo[x][ClanColor], 16);
		cache_get_value_int(i, "clanMembers", ClanInfo[x][ClanMembers]);
	}
	cache_delete(result2);
	printf("  Clans: %d",clans);
	return 1;
}
//==============================================================================
function ConnectMySQL()
{
	//new MySQLOpt:option_id = mysql_init_options();
	//mysql_set_option(option_id, AUTO_RECONNECT, true);
    //SQL = mysql_connect(SQL_HOST, SQL_USER, SQL_PASS, SQL_DB, option_id);
    SQL	= mysql_connect_file();
	if(SQL == MYSQL_INVALID_HANDLE || mysql_errno(SQL) != 0) print("[ERROR]: Connection failed for database.\n");
	else print("[MySQL]: Connection succesful for database.\n");
	return 0;
}
//==============================================================================
function pUpdate(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid] == true)
		{
			new var[700];
			switch(type)
			{
				case pCashx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Money`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",GetPlayerCash(playerid), PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pRPx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Respect`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pExp], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pBankx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bank`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pBank], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPunishx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPunish], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pConnectTimex: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ConnectedTime`='%.2f' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pSecondsx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Seconds`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pSeconds], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pHouseKeyx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `House`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pHouseKey], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pJailTimex: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pWantedLevelx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WantedLevel`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",GetPlayerWantedLevelEx(playerid), PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPhonex: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Phone`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMatsx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Materials`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMats], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pRobSkillx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobSkill`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pLevelx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Level`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",GetPlayerScoreEx(playerid), PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPremiumx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Premium`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPremium], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pBizzKeyx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pBizzKey], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pRegx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Registered`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pReg], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pRentedx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rented`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pRented], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pEmailx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Email`='%s' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pWarnsx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Warnings`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pWarns], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFarmSkillx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmSkill`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pTruckSkillx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckSkill`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPizzaSkillx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaSkill`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMatsSkillx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `MatsSkill`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMatsSkill], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pWantedTimex: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WantedTime`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pWantedTime], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pGoldx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Gold`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pGold], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pRobTimesx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobTimes`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pTruckTimesx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckTimes`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFarmTimesx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmTimes`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPizzaTimesx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaTimes`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pSkinx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Skin`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",GetPlayerSkinEx(playerid), PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pRobRemx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobRem`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pRobRem], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFarmRemx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmRem`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFarmRem], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pTruckRemx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckRem`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pTruckRem], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPizzaRemx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaRem`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPizzaRem], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMomealax: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Momeala`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMomeala], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFuelx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Fuel`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFuel], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pPhoneBookx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Phonebook`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pPhoneBook], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pLeaderx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Leader`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pLeader], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMemberx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Member`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMember], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFactionRankx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FactionRank`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFactionRank], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pDrugsx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Drugs`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pDrugs], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFWarnsx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFwarn], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pGpointx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GiftPoint`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pGpoint], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pJobx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Job`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pJob], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pClanx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Clan`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pClan], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pClanRankx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ClanRank`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pClanRank], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pClanWarnx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ClanWarn`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pClanWarn], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pClanTagTypex: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ClanTagType`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pClanTagType], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pFreePointx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FreePoint`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pFreePoint], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pJailedx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Jailed`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMatsTimesx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `MatsTimes`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMatsTimes], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMatsRemx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `MatsRem`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMatsRem], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMutedx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Muted`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMuted], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pMuteTimex: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `MuteTime`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pCarsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Cars`='%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `name`='%s' AND `PlayerID`='%d'", PlayerInfo[playerid][pCarKey][0], PlayerInfo[playerid][pCarKey][1], PlayerInfo[playerid][pCarKey][2], PlayerInfo[playerid][pCarKey][3], PlayerInfo[playerid][pCarKey][4], PlayerInfo[playerid][pCarKey][5], 
					PlayerInfo[playerid][pCarKey][6], PlayerInfo[playerid][pCarKey][7], PlayerInfo[playerid][pCarKey][8], PlayerInfo[playerid][pCarKey][9], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				}
				case pQuestProgressx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestProgress`='%d|%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pQuestProgress][0], PlayerInfo[playerid][pQuestProgress][1], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
				case pContractsx: mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Contracts`='%d' WHERE `name`='%s' AND `PlayerID`='%d'",PlayerInfo[playerid][pContracts], PlayerInfo[playerid][pNamePlayer], PlayerInfo[playerid][pSQLID]);
			}
			mysql_tquery(SQL, var);
		}
	}
	return 1;
}
//==============================================================================
function MySQLCheckAccount(sqlplayersname[])
{
	new query[256], escstr[MAX_PLAYER_NAME];
	mysql_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT `PlayerID` FROM `users` WHERE `name` = '%s' LIMIT 1", escstr);
	new Cache:cont = mysql_query(SQL, query);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cont);
		return 0;
	}
	else
	{
		new strid[32], intid;
		cache_get_value_index(0, 0, strid);
		intid = strval(strid);
	    cache_delete(cont);
		return intid;
	}
}
//==============================================================================
function FirerocketTime(playerid)
{
	if(firerockettime[playerid] == 2)
	{
		GetDynamicObjectPos(Firerocket[playerid], FRX[playerid], FRY[playerid], FRZ[playerid]);
		explosionrocket[playerid] = CreateExplosion(FRX[playerid], FRY[playerid], FRZ[playerid], 6, 0);
		SetTimerEx_("splittime2", 1000, 100, 1, "i", playerid);
	}
	return 1;
}
//==============================================================================
function splittime2(playerid)
{
	if(firerockettime[playerid] == 2)
	{
		CreateExplosion(FRX[playerid]-(0+(random(10))),FRY[playerid]-(0+(random(10))),FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid]-(0+(random(10))),FRY[playerid]+(0+(random(10))),FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid]-(0+(random(10))),FRY[playerid],FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid]+(0+(random(10))),FRY[playerid]-(0+(random(10))),FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid]+(0+(random(10))),FRY[playerid]+(0+(random(10))),FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid]+(0+(random(10))),FRY[playerid],FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid],FRY[playerid]-(0+(random(10))),FRZ[playerid]-5, 6, 0);
		CreateExplosion(FRX[playerid],FRY[playerid]+(0+(random(10))),FRZ[playerid]-5, 6, 0);
		//--------------------------------------------------------------
		Light[1][playerid] = CreateDynamicObject(354,FRX[playerid]-(0+(random(10))),FRY[playerid]-(0+(random(10))),FRZ[playerid]-5, 0, 0,0);
		Light[2][playerid] = CreateDynamicObject(354,FRX[playerid]-(0+(random(10))),FRY[playerid]+(0+(random(10))),FRZ[playerid]-5, 0, 0,0);
		Light[3][playerid] = CreateDynamicObject(354,FRX[playerid]-(0+(random(10))),FRY[playerid],FRZ[playerid]-5, 0, 0,0);
		Light[4][playerid] = CreateDynamicObject(354,FRX[playerid]+(0+(random(10))),FRY[playerid]-(0+(random(10))),FRZ[playerid]-5, 0, 0,0);
		Light[5][playerid] = CreateDynamicObject(354,FRX[playerid]+(0+(random(10))),FRY[playerid]+(0+(random(10))),FRZ[playerid]-5, 0, 0,0);
		Light[6][playerid] = CreateDynamicObject(354,FRX[playerid]+(0+(random(10))),FRY[playerid],FRZ[playerid]-5, 0, 0,0);
		Light[7][playerid] = CreateDynamicObject(354,FRX[playerid],FRY[playerid]-(0+(random(10))),FRZ[playerid]-5, 0, 0,0);
		Light[8][playerid] = CreateDynamicObject(354,FRX[playerid],FRY[playerid]+(0+(random(10))),FRZ[playerid]-5, 0, 0,0);
		//--------------------------------------------------------------
		new Float:X, Float:Y, Float:Z;
		GetDynamicObjectPos(Light[1][playerid], X, Y, Z);
		MoveDynamicObject(Light[1][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[2][playerid], X, Y, Z);
		MoveDynamicObject(Light[2][playerid], X-6, Y+6, Z-20, 4);
		GetDynamicObjectPos(Light[3][playerid], X, Y, Z);
		MoveDynamicObject(Light[3][playerid], X-6, Y, Z-20, 4);
		GetDynamicObjectPos(Light[4][playerid], X, Y, Z);
		MoveDynamicObject(Light[4][playerid], X+6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[5][playerid], X, Y, Z);
		MoveDynamicObject(Light[5][playerid], X+6, Y+6, Z-20, 4);
		GetDynamicObjectPos(Light[6][playerid], X, Y, Z);
		MoveDynamicObject(Light[6][playerid], X+6, Y, Z-20, 4);
		GetDynamicObjectPos(Light[7][playerid], X, Y, Z);
		MoveDynamicObject(Light[7][playerid], X, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[8][playerid], X, Y, Z);
		MoveDynamicObject(Light[8][playerid], X, Y+6, Z-20, 4);
		SetTimerEx_("splittime3", 3000, 3000, 1, "i", playerid);
		DestroyDynamicObject(Firerocket[playerid]);
		DestroyDynamicObject(rocketsmoke[playerid]);
	}
	return 1;
}
//==============================================================================
function splittime3(playerid)
{
	if(firerockettime[playerid] == 2)
	{
		new Float:X, Float:Y, Float:Z;
		GetDynamicObjectPos(Light[1][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[2][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[3][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[4][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[5][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[6][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[7][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[8][playerid], X, Y, Z);
		CreateExplosion(X, Y, Z, 6, 0);
		GetDynamicObjectPos(Light[9][playerid], X, Y, Z);
		Light[11][playerid] = CreateDynamicObject(1213,X-7,Y+7,Z+8, 0, 0,0);
		Light[12][playerid] = CreateDynamicObject(1213,X-7,Y,Z+5, 0, 0,0);
		Light[13][playerid] = CreateDynamicObject(1213,X,Y+7,Z-5, 0, 0,0);
		Light[14][playerid] = CreateDynamicObject(1213,X,Y-7,Z-5, 0, 0,0);
		GetDynamicObjectPos(Light[2][playerid], X, Y, Z);
		Light[15][playerid] = CreateDynamicObject(1213,X,Y-7,Z+5, 0, 0,0);
		Light[16][playerid] = CreateDynamicObject(1213,X-7,Y,Z-5, 0, 0,0);
		Light[17][playerid] = CreateDynamicObject(1213,X,Y+7,Z-8, 0, 0,0);
		Light[18][playerid] = CreateDynamicObject(1213,X,Y+7,Z-5, 0, 0,0);
		GetDynamicObjectPos(Light[3][playerid], X, Y, Z);
		Light[19][playerid] = CreateDynamicObject(1213,X+7,Y,Z-1, 0, 0,0);
		Light[20][playerid] = CreateDynamicObject(1213,X-7,Y,Z-8, 0, 0,0);
		Light[21][playerid] = CreateDynamicObject(1213,X+7,Y+7,Z-5, 0, 0,0);
		Light[22][playerid] = CreateDynamicObject(1213,X,Y,Z+5, 0, 0,0);
		GetDynamicObjectPos(Light[4][playerid], X, Y, Z);
		Light[23][playerid] = CreateDynamicObject(1213,X+7,Y-7,Z-5, 0, 0,0);
		Light[24][playerid] = CreateDynamicObject(1213,X-7,Y,Z-7, 0, 0,0);
		Light[25][playerid] = CreateDynamicObject(1213,X+7,Y+7,Z+5, 0, 0,0);
		Light[26][playerid] = CreateDynamicObject(1213,X,Y-7,Z, 0, 0,0);
		GetDynamicObjectPos(Light[5][playerid], X, Y, Z);
		Light[27][playerid] = CreateDynamicObject(1213,X,Y-7,Z-5, 0, 0,0);
		Light[28][playerid] = CreateDynamicObject(1213,X-7,Y,Z+8, 0, 0,0);
		Light[29][playerid] = CreateDynamicObject(1213,X+7,Y,Z-8, 0, 0,0);
		Light[30][playerid] = CreateDynamicObject(1213,X,Y+7,Z+5, 0, 0,0);
		GetDynamicObjectPos(Light[6][playerid], X, Y, Z);
		Light[31][playerid] = CreateDynamicObject(1213,X-7,Y-7,Z-7, 0, 0,0);
		Light[32][playerid] = CreateDynamicObject(1213,X,Y,Z-5, 0, 0,0);
		Light[33][playerid] = CreateDynamicObject(1213,X+7,Y+7,Z+5, 0, 0,0);
		Light[34][playerid] = CreateDynamicObject(1213,X+4,Y-7,Z-5, 0, 0,0);
		GetDynamicObjectPos(Light[7][playerid], X, Y, Z);
		Light[35][playerid] = CreateDynamicObject(1213,X-7,Y-7,Z-8, 0, 0,0);
		Light[36][playerid] = CreateDynamicObject(1213,X-7,Y,Z+5, 0, 0,0);
		Light[37][playerid] = CreateDynamicObject(1213,X,Y,Z-5, 0, 0,0);
		Light[38][playerid] = CreateDynamicObject(1213,X,Y-7,Z+8, 0, 0,0);
		GetDynamicObjectPos(Light[8][playerid], X, Y, Z);
		Light[39][playerid] = CreateDynamicObject(1213,X-4,Y-7,Z-8, 0, 0,0);
		Light[40][playerid] = CreateDynamicObject(1213,X+7,Y,Z+8, 0, 0,0);
		Light[41][playerid] = CreateDynamicObject(1213,X+4,Y,Z+5, 0, 0,0);
		Light[42][playerid] = CreateDynamicObject(1213,X,Y-7,Z-5, 0, 0,0);
		GetDynamicObjectPos(Light[1][playerid], X, Y, Z);
		MoveDynamicObject(Light[1][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[2][playerid], X, Y, Z);
		MoveDynamicObject(Light[2][playerid], X-6, Y+6, Z-20, 4);
		GetDynamicObjectPos(Light[3][playerid], X, Y, Z);
		MoveDynamicObject(Light[3][playerid], X-6, Y, Z-20, 4);
		GetDynamicObjectPos(Light[4][playerid], X, Y, Z);
		MoveDynamicObject(Light[4][playerid], X+6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[5][playerid], X, Y, Z);
		MoveDynamicObject(Light[5][playerid], X+6, Y+6, Z-20, 4);
		GetDynamicObjectPos(Light[6][playerid], X, Y, Z);
		MoveDynamicObject(Light[6][playerid], X+6, Y, Z-20, 4);
		GetDynamicObjectPos(Light[7][playerid], X, Y, Z);
		MoveDynamicObject(Light[1][playerid], X, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[8][playerid], X, Y, Z);
		MoveDynamicObject(Light[8][playerid], X, Y+6, Z-20, 4);
		GetDynamicObjectPos(Light[11][playerid], X, Y, Z);
		MoveDynamicObject(Light[11][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[12][playerid], X, Y, Z);
		MoveDynamicObject(Light[12][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[13][playerid], X, Y, Z);
		MoveDynamicObject(Light[13][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[14][playerid], X, Y, Z);
		MoveDynamicObject(Light[14][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[15][playerid], X, Y, Z);
		MoveDynamicObject(Light[15][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[16][playerid], X, Y, Z);
		MoveDynamicObject(Light[16][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[17][playerid], X, Y, Z);
		MoveDynamicObject(Light[17][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[18][playerid], X, Y, Z);
		MoveDynamicObject(Light[18][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[19][playerid], X, Y, Z);
		MoveDynamicObject(Light[19][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[20][playerid], X, Y, Z);
		MoveDynamicObject(Light[20][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[21][playerid], X, Y, Z);
		MoveDynamicObject(Light[21][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[22][playerid], X, Y, Z);
		MoveDynamicObject(Light[22][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[23][playerid], X, Y, Z);
		MoveDynamicObject(Light[23][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[24][playerid], X, Y, Z);
		MoveDynamicObject(Light[24][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[25][playerid], X, Y, Z);
		MoveDynamicObject(Light[25][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[26][playerid], X, Y, Z);
		MoveDynamicObject(Light[26][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[27][playerid], X, Y, Z);
		MoveDynamicObject(Light[27][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[28][playerid], X, Y, Z);
		MoveDynamicObject(Light[28][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[29][playerid], X, Y, Z);
		MoveDynamicObject(Light[29][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[30][playerid], X, Y, Z);
		MoveDynamicObject(Light[30][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[31][playerid], X, Y, Z);
		MoveDynamicObject(Light[31][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[32][playerid], X, Y, Z);
		MoveDynamicObject(Light[32][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[33][playerid], X, Y, Z);
		MoveDynamicObject(Light[33][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[34][playerid], X, Y, Z);
		MoveDynamicObject(Light[34][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[35][playerid], X, Y, Z);
		MoveDynamicObject(Light[35][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[36][playerid], X, Y, Z);
		MoveDynamicObject(Light[36][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[37][playerid], X, Y, Z);
		MoveDynamicObject(Light[37][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[38][playerid], X, Y, Z);
		MoveDynamicObject(Light[38][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[39][playerid], X, Y, Z);
		MoveDynamicObject(Light[39][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[40][playerid], X, Y, Z);
		MoveDynamicObject(Light[40][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[41][playerid], X, Y, Z);
		MoveDynamicObject(Light[41][playerid], X-6, Y-6, Z-20, 4);
		GetDynamicObjectPos(Light[42][playerid], X, Y, Z);
		MoveDynamicObject(Light[42][playerid], X-6, Y-6, Z-20, 4);
		SetTimerEx_("lighttimer2", 4000, 4000, 1, "i", playerid);
		DestroyDynamicObject(Firerocket[playerid]);
		DestroyDynamicObject(rocketsmoke[playerid]);
	}
	return 1;
}
//==============================================================================
function lighttimer2(playerid)
{
	DestroyDynamicObject(Light[1][playerid]);
	DestroyDynamicObject(Light[2][playerid]);
	DestroyDynamicObject(Light[3][playerid]);
	DestroyDynamicObject(Light[4][playerid]);
	DestroyDynamicObject(Light[5][playerid]);
    DestroyDynamicObject(Light[6][playerid]);
    DestroyDynamicObject(Light[7][playerid]);
    DestroyDynamicObject(Light[8][playerid]);
    DestroyDynamicObject(Light[11][playerid]);
	DestroyDynamicObject(Light[12][playerid]);
	DestroyDynamicObject(Light[13][playerid]);
	DestroyDynamicObject(Light[14][playerid]);
	DestroyDynamicObject(Light[15][playerid]);
    DestroyDynamicObject(Light[16][playerid]);
    DestroyDynamicObject(Light[17][playerid]);
    DestroyDynamicObject(Light[18][playerid]);
    DestroyDynamicObject(Light[19][playerid]);
	DestroyDynamicObject(Light[20][playerid]);
	DestroyDynamicObject(Light[21][playerid]);
	DestroyDynamicObject(Light[22][playerid]);
	DestroyDynamicObject(Light[23][playerid]);
    DestroyDynamicObject(Light[24][playerid]);
    DestroyDynamicObject(Light[25][playerid]);
    DestroyDynamicObject(Light[26][playerid]);
    DestroyDynamicObject(Light[27][playerid]);
	DestroyDynamicObject(Light[28][playerid]);
	DestroyDynamicObject(Light[29][playerid]);
	DestroyDynamicObject(Light[30][playerid]);
	DestroyDynamicObject(Light[31][playerid]);
    DestroyDynamicObject(Light[32][playerid]);
    DestroyDynamicObject(Light[33][playerid]);
    DestroyDynamicObject(Light[34][playerid]);
    DestroyDynamicObject(Light[35][playerid]);
	DestroyDynamicObject(Light[36][playerid]);
	DestroyDynamicObject(Light[37][playerid]);
	DestroyDynamicObject(Light[38][playerid]);
	DestroyDynamicObject(Light[39][playerid]);
    DestroyDynamicObject(Light[40][playerid]);
    DestroyDynamicObject(Light[41][playerid]);
    DestroyDynamicObject(Light[42][playerid]);
    firerockettime[playerid] = 0;
	return 1;
}
//==============================================================================
function AttachTrailerrr(playerid)
{
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(viddd[playerid],vX,vY,vZ);
	if((floatabs(pX-vX)<100.0)&&(floatabs(pY-vY)<100.0)&&(floatabs(pZ-vZ)<100.0)&&(viddd[playerid]!=GetPlayerVehicleID(playerid))) {
		AttachTrailerToVehicle(viddd[playerid],GetPlayerVehicleID(playerid));
	}
	return 1;
}
//==============================================================================
function Truckerr1(playerid)
{
	if(JobCar[playerid][6] != GetPlayerVehicleID(playerid) && CP[playerid] == 2) return SCM(playerid, COLOR_WHITE, "Error! You are not the driver!");
    new string1[200],string2[200],string3[200],string4[200],string5[200],string6[200],allstrings[1000];
    new Float:Distance[19];
	Distance[1] = GetPlayerDistanceFromPoint(playerid, CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetPlayerDistanceFromPoint(playerid, CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetPlayerDistanceFromPoint(playerid, CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetPlayerDistanceFromPoint(playerid, CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetPlayerDistanceFromPoint(playerid, CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetPlayerDistanceFromPoint(playerid, CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetPlayerDistanceFromPoint(playerid, CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetPlayerDistanceFromPoint(playerid, CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetPlayerDistanceFromPoint(playerid, CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetPlayerDistanceFromPoint(playerid, CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetPlayerDistanceFromPoint(playerid, CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[12] = GetPlayerDistanceFromPoint(playerid, CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[13] = GetPlayerDistanceFromPoint(playerid, CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[14] = GetPlayerDistanceFromPoint(playerid, CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[15] = GetPlayerDistanceFromPoint(playerid, CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[16] = GetPlayerDistanceFromPoint(playerid, CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal\n{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
  	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
  	format(string4,sizeof(string4),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive",Distance[10],Distance[11],Distance[12]);
   	format(string5,sizeof(string5),"{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal\n{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal",Distance[13],Distance[14],Distance[15]);
    format(string6,sizeof(string6),"{FFFFFF}SF Pier 69 Pizza Place (%.0fm) - {568203}legal",Distance[16]);
    format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6);
    SPD(playerid, DIALOG_TRUCKER1, DIALOG_STYLE_LIST, "Choose destination:", allstrings, "Ok", "Cancel");
    return 1;
}
//==============================================================================
function Truckerr2(playerid)
{
    if(JobCar[playerid][6] != GetPlayerVehicleID(playerid) && CP[playerid] == 2) return SCM(playerid, COLOR_WHITE, "Error! You are not the driver!");
	new string1[200],string2[200],string3[200],string4[200],allstrings[1000];
 	new Float:Distance[19];
	Distance[1] = GetPlayerDistanceFromPoint(playerid, CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[2] = GetPlayerDistanceFromPoint(playerid, CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[3] = GetPlayerDistanceFromPoint(playerid, CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[4] = GetPlayerDistanceFromPoint(playerid, CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[5] = GetPlayerDistanceFromPoint(playerid, CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[6] = GetPlayerDistanceFromPoint(playerid, CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[7] = GetPlayerDistanceFromPoint(playerid, CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[8] = GetPlayerDistanceFromPoint(playerid, CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[9] = GetPlayerDistanceFromPoint(playerid, CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[10] = GetPlayerDistanceFromPoint(playerid, CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[11] = GetPlayerDistanceFromPoint(playerid, CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[12] = GetPlayerDistanceFromPoint(playerid, CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal\n{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal",Distance[10],Distance[11],Distance[12]);
 	format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
 	SPD(playerid, DIALOG_TRUCKER2, DIALOG_STYLE_LIST, "Choose destination:", allstrings, "Ok", "Cancel");
 	return 1;
}
//==============================================================================
function Truckerr3(playerid)
{
    if(JobCar[playerid][6] != GetPlayerVehicleID(playerid) && CP[playerid] == 2) return SCM(playerid, COLOR_WHITE, "Error! You are not the driver!");
    new string1[200],string2[200],string3[200],string4[200],allstrings[1000];
    new Float:Distance[19];
	Distance[1] = GetPlayerDistanceFromPoint(playerid, CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetPlayerDistanceFromPoint(playerid, CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetPlayerDistanceFromPoint(playerid, CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[4] = GetPlayerDistanceFromPoint(playerid, CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[5] = GetPlayerDistanceFromPoint(playerid, CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[6] = GetPlayerDistanceFromPoint(playerid, CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[7] = GetPlayerDistanceFromPoint(playerid, CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[8] = GetPlayerDistanceFromPoint(playerid, CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[9] = GetPlayerDistanceFromPoint(playerid, CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[10] = GetPlayerDistanceFromPoint(playerid, CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[11] = GetPlayerDistanceFromPoint(playerid, CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[12] = GetPlayerDistanceFromPoint(playerid, CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 24/7 Store (%.0fm) - {568203}legal\n{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Pier 69 Pizza Place (%.0fm) - {568203}legal",Distance[10],Distance[11],Distance[12]);
    format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
    SPD(playerid, DIALOG_TRUCKER3, DIALOG_STYLE_LIST, "Choose destination:", allstrings, "Ok", "Cancel");
	return 1;
}
//==============================================================================
function Truckerr4(playerid)
{
    if(JobCar[playerid][6] != GetPlayerVehicleID(playerid) && CP[playerid] == 2) return SCM(playerid, COLOR_WHITE, "Error! You are not the driver!");
    new string1[200],string2[200],string3[200],string4[200],allstrings[1000];
    new Float:Distance[19];
	Distance[1] = GetPlayerDistanceFromPoint(playerid, CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetPlayerDistanceFromPoint(playerid, CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetPlayerDistanceFromPoint(playerid, CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetPlayerDistanceFromPoint(playerid, CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetPlayerDistanceFromPoint(playerid, CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetPlayerDistanceFromPoint(playerid, CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetPlayerDistanceFromPoint(playerid, CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetPlayerDistanceFromPoint(playerid, CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetPlayerDistanceFromPoint(playerid, CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetPlayerDistanceFromPoint(playerid, CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetPlayerDistanceFromPoint(playerid, CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[12] = GetPlayerDistanceFromPoint(playerid, CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal",Distance[1],Distance[2],Distance[3]);
	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal\n{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
	format(string4,sizeof(string4),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 24/7 Store (%.0fm) - {568203}legal\n{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive",Distance[10],Distance[11],Distance[12]);
	format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
	SPD(playerid, DIALOG_TRUCKER4, DIALOG_STYLE_LIST, "Choose destination:", allstrings, "Ok", "Cancel");
	return 1;
}
//==============================================================================
function SendMSG()
{
	foreach(new i: Player)
	{
		if(GetPlayerScoreEx(i) < 10)
		{
		 	new randMSG = random(sizeof(RandomMSG));
			SCM(i, COLOR_WHITE, RandomMSG[randMSG]);
		}
		if(GetPlayerCash(i) < 0)
		{
		    if(MoneyMessage[i] == 0 && GetPlayerWantedLevelEx(i) == 0)
		    {
				SCM(i, COLOR_LIGHTGREEN, "Daca vei ramane cu banii pe minus pana la payday vei primi wanted.");
				MoneyMessage[i] = 1;
			}
		}
		else {
		    MoneyMessage[i] = 0;
		}
	}
	return 1;
}
//==============================================================================
function DMZone(playerid) return TogglePlayerControllable(playerid, true);
//==============================================================================
function WarTimer()
{
    new string[256];
 	for(new t = 1; t < MAX_TURFS; t++)
	{
		if(WarInfo[t][wTime] > 0)
		{
			WarInfo[t][wTime]--;
			new attackers = WarInfo[t][wAttacker];
			new defenders = WarInfo[t][wFaction];
			foreach(new j: Player)
			{
				if(IsPlayerInTurf(j, t) == 1)
				{
					if((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == attackers)
					{
					    if(Wartimeon[attackers] >= 1)
						{
							format(string,sizeof(string),"~w~Turf ~y~time %s min",CalculeazaTimp(WarInfo[t][wTime]));
							PlayerTextDrawSetString(j, WarTime, string);
							PlayerTextDrawShow(j, WarTime);
						}
						if(IsPlayerInAnyVehicle(j)) RemovePlayerFromVehicleEx(j);
					}
					if((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == defenders)
					{
					    if(Wartimeon[defenders] >= 1)
						{
							format(string,sizeof(string),"~w~Turf ~y~time %s min",CalculeazaTimp(WarInfo[t][wTime]));
							PlayerTextDrawSetString(j, WarTime, string);
							PlayerTextDrawShow(j, WarTime);
						}
						if(IsPlayerInAnyVehicle(j)) RemovePlayerFromVehicleEx(j);
					}
					WarScore[j][t] += 0.05;
				}
				else
  				{
  				    if((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == attackers)
					{
					    if(Wartimeon[attackers] >= 1)
						{
						    PlayerTextDrawSetString(j, WarTime, "~h~~r~Nu esti pe turf");
							PlayerTextDrawShow(j, WarTime);
						}
					}
					if((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == defenders)
					{
   						if(Wartimeon[defenders] >= 1)
   						{
						    PlayerTextDrawSetString(j, WarTime, "~h~~r~Nu esti pe turf");
							PlayerTextDrawShow(j, WarTime);
		   				}
					}
					SetPlayerMarkerForPlayer(j, j, (GetPlayerColor(j) & 0xFFFFFF00));
					WarScore[j][t] -= 0.02;
		  		}
			    if(WarInfo[t][wAttacker] == 5) ZoneFlashForPlayer(j, Turfs[t], TEAM_AZTECAS_COLOR);
				else if(WarInfo[t][wAttacker] == 6) ZoneFlashForPlayer(j, Turfs[t], TEAM_RUSSIAN_COLOR);
				else if(WarInfo[t][wAttacker] == 11) ZoneFlashForPlayer(j, Turfs[t], TEAM_GROVE_COLOR);
				else if(WarInfo[t][wAttacker] == 12) ZoneFlashForPlayer(j, Turfs[t], TEAM_VAGOS_COLOR);
				else if(WarInfo[t][wAttacker] == 13) ZoneFlashForPlayer(j, Turfs[t], TEAM_BALLAS_COLOR);
			}
			if(WarInfo[t][wTime] == 1)
			{
				new Float:atscore = 0.0, Float:defscore = 0.0, winner;
				foreach(new j: Player)
				{
					if((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == attackers)
					{
						atscore += WarScore[j][t];
						ZoneStopFlashForPlayer(j, Turfs[t]);
						format(string,sizeof(string),"War-ul dintre %s si %s pentru teritoriul %d s-a terminat. Se calculeaza scorul...",NumeFactiune(attackers),NumeFactiune(defenders),t);
						SCM(j, TEAM_AZTECAS_COLOR,string);
						PlayerTextDrawHide(j, WarTime);
					}
					if((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == defenders)
					{
						defscore += WarScore[j][t];
						ZoneStopFlashForPlayer(j, Turfs[t]);
						format(string,sizeof(string),"War-ul dintre %s si %s pentru teritoriul %d s-a terminat. Se calculeaza scorul...",NumeFactiune(attackers),NumeFactiune(defenders),t);
						SCM(j, TEAM_AZTECAS_COLOR,string);
						PlayerTextDrawHide(j, WarTime);
					}
				}
				InWar[attackers] = 0;
				InWar[defenders] = 0;
				Wartimeon[attackers] = 0;
				Wartimeon[defenders] = 0;
				//--------------------------------------------------------------
				if(defscore >= atscore) winner = 0;
				if(atscore > defscore) winner = 1;
				foreach(new j: Player)
				{
					if(((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == attackers) || ((PlayerInfo[j][pMember] + PlayerInfo[j][pLeader]) == defenders))
					{
						if(winner == 0)
						{
							format(string,sizeof(string),"%s a castigat teritoriul %d. Score: %s [%.2f] | [%.2f] %s",NumeFactiune(WarInfo[t][wFaction]),t,NumeFactiune(WarInfo[t][wFaction]),defscore,atscore,NumeFactiune(WarInfo[t][wAttacker]));
							SCM(j,TEAM_AZTECAS_COLOR,string);
							new Float:score = WarScore[j][t] - WarDeaths[j][t];
							format(string,sizeof(string),"Scorul tau a fost %.2f", score);
							SCM(j,TEAM_AZTECAS_COLOR,string);
						}
						if(winner == 1)
						{
							format(string,sizeof(string),"%s a castigat teritoriul %d. Score: %s [%.2f] | [%.2f] %s",NumeFactiune(WarInfo[t][wAttacker]),t,NumeFactiune(WarInfo[t][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[t][wFaction]));
							SCM(j,TEAM_AZTECAS_COLOR,string);
							new Float:score = WarScore[j][t] - WarDeaths[j][t];
							format(string,sizeof(string),"Scorul tau a fost %.2f", score);
							SCM(j,TEAM_AZTECAS_COLOR,string);
							TurfInfo[t][zOwned] = WarInfo[t][wAttacker];
							mysql_format(SQL, string, sizeof(string),"UPDATE `turfs` SET `Owned`='%d' WHERE `turfID`='%d'",TurfInfo[t][zOwned],t);
							mysql_tquery(SQL, string);
						}
						WarScore[j][t] = 0.0;
						WarDeaths[j][t] = 0.0;
					}
					HideZoneForPlayer(j, t);
					if(TurfInfo[t][zOwned] == 5) ShowZoneForPlayer(j,Turfs[t],TEAM_AZTECAS_COLOR);
					if(TurfInfo[t][zOwned] == 6) ShowZoneForPlayer(j,Turfs[t],TEAM_RUSSIAN_COLOR);
					if(TurfInfo[t][zOwned] == 11) ShowZoneForPlayer(j,Turfs[t],TEAM_GROVE_COLOR);
					if(TurfInfo[t][zOwned] == 12) ShowZoneForPlayer(j,Turfs[t],TEAM_VAGOS_COLOR);
					if(TurfInfo[t][zOwned] == 13) ShowZoneForPlayer(j,Turfs[t],TEAM_BALLAS_COLOR);
				}
				WarInfo[t][wTime] = 0;
				WarInfo[t][wFaction] = 0;
				WarInfo[t][wAttacker] = 0;
			}
		}
	}
	return 1;
}
//==============================================================================
function Fisher(playerid)
{
	TimeFish[playerid]--;
	switch(TimeFish[playerid])
 	{
		case 1:
		{
			new string[MAX_STRING], sendername[MAX_PLAYER_NAME], money;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(TipPeste[playerid] == 0)
			{
				format(string,sizeof(string),"{ff6666}* %s a fost prins de un rechin.", sendername, FormatNumber(money));
				ProxDetector(10.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				KillTimer_(FishTimer[playerid]);
				Fishing[playerid] = 0;
				TimeFish[playerid] = 0;
				SetPlayerHealthEx(playerid,0.0);
				RemovePlayerAttachedObject(playerid,3);
			}
			else if(TipPeste[playerid] == 1)
			{
				money = 5000 + random(random(20000));
				PlayerInfo[playerid][pFishPrice] = money;
				format(string,sizeof(string),"Ai prins un peste in valoare de %s$!",FormatNumber(money));
				SCM(playerid, COLOR_YELLOW, string);
				format(string,sizeof(string),"{ff6666}* %s a prins un peste in valoare de %s$.", sendername, FormatNumber(money));
				ProxDetector(10.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				KillTimer_(FishTimer[playerid]);
				Fishing[playerid] = 0;
				TimeFish[playerid] = 0;
				RemovePlayerAttachedObject(playerid,3);
			}
			else if(TipPeste[playerid] == 2)
			{
				money = 6000 + random(random(20000));
				PlayerInfo[playerid][pFishPrice] = money;
				format(string,sizeof(string),"Ai prins un peste in valoare de %s$!",FormatNumber(money));
				SCM(playerid, COLOR_YELLOW, string);
				format(string,sizeof(string),"{ff6666}* %s a prins un peste in valoare de %s$.", sendername, FormatNumber(money));
				ProxDetector(10.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				KillTimer_(FishTimer[playerid]);
				Fishing[playerid] = 0;
				TimeFish[playerid] = 0;
				RemovePlayerAttachedObject(playerid,3);
			}
			else if(TipPeste[playerid] == 3)
			{
				money = 7000 + random(random(20000));
				PlayerInfo[playerid][pFishPrice] = money;
	            format(string,sizeof(string),"Ai prins un peste in valoare de %s$!",FormatNumber(money));
				SCM(playerid, COLOR_YELLOW, string);
				format(string,sizeof(string),"{ff6666}* %s a prins un peste in valoare de %s$.", sendername, FormatNumber(money));
				ProxDetector(10.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				KillTimer_(FishTimer[playerid]);
				Fishing[playerid] = 0;
				TimeFish[playerid] = 0;
				RemovePlayerAttachedObject(playerid,3);
			}
			else if(TipPeste[playerid] == 4)
			{
				money = 8000 + random(random(20000));
				PlayerInfo[playerid][pFishPrice] = money;
				format(string,sizeof(string),"Ai prins un peste in valoare de %s$!",FormatNumber(money));
				SCM(playerid, COLOR_YELLOW, string);
				format(string,sizeof(string),"{ff6666}* %s a prins un peste in valoare de %s$.", sendername, FormatNumber(money));
				ProxDetector(10.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				KillTimer_(FishTimer[playerid]);
				Fishing[playerid] = 0;
				TimeFish[playerid] = 0;
				RemovePlayerAttachedObject(playerid,3);
			}
			else if(TipPeste[playerid] == 5)
			{
				money = 9000 + random(random(20000));
				PlayerInfo[playerid][pFishPrice] = money;
				format(string,sizeof(string),"Ai prins un peste in valoare de %s$!",FormatNumber(money));
				SCM(playerid, COLOR_YELLOW, string);
				format(string,sizeof(string),"{ff6666}* %s a prins un peste in valoare de %s$.", sendername, FormatNumber(money));
				ProxDetector(10.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				KillTimer_(FishTimer[playerid]);
				Fishing[playerid] = 0;
				TimeFish[playerid] = 0;
				RemovePlayerAttachedObject(playerid,3);
			}
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[playerid][pQuest][m] == 11) CheckQuest(playerid, m);
			}
			TipPeste[playerid] = -1;
		}
		case 7: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
		case 12: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 5110, 5);
		case 19: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 5110, 5);
	}
 	return 1;
}
//==============================================================================
function IsAnOwnableCar(vehicleid)
{
	if(FindSpawnID(vehicleid) != 0) return 1;
	return 0;
}
//==============================================================================
function InsertCar(playerid, model, value, namecar[], stockid)
{
    new string[256], idd = Findcar();
	BuyCar[playerid] = -1;
    if(idd != 0)
    {
		if(Stock[stockid][vType] == 1 && GetPlayerCash(playerid) < value) return SCM(playerid,COLOR_VEHICLE,"You do not have enough money.");
		else if(Stock[stockid][vType] == 2 && PlayerInfo[playerid][pGold] < value) return SCM(playerid,COLOR_VEHICLE,"Nu ai suficient gold.");
		if(PlayerInfo[playerid][pCarKey][0] == 0) PlayerInfo[playerid][pCarKey][0] = idd;
		else if(PlayerInfo[playerid][pCarKey][1] == 0) PlayerInfo[playerid][pCarKey][1] = idd;
		else if(PlayerInfo[playerid][pCarKey][2] == 0)
		{
			if(PlayerInfo[playerid][pPremium] == 1) PlayerInfo[playerid][pCarKey][2] = idd;
			else return SCM(playerid,COLOR_VEHICLE,"Ai nevoie de Cont Premium pentru a debloca acest slot.");
		}
		else if(PlayerInfo[playerid][pCarKey][3] == 0)
		{
		    if(PlayerInfo[playerid][pPremium] == 1) PlayerInfo[playerid][pCarKey][3] = idd;
			else return SCM(playerid,COLOR_VEHICLE,"Ai nevoie de Cont Premium pentru a debloca acest slot.");
		}
		else if(PlayerInfo[playerid][pCarKey][4] == 0) PlayerInfo[playerid][pCarKey][4] = idd;
		else if(PlayerInfo[playerid][pCarKey][5] == 0) PlayerInfo[playerid][pCarKey][5] = idd;
		else if(PlayerInfo[playerid][pCarKey][6] == 0) PlayerInfo[playerid][pCarKey][6] = idd;
		else if(PlayerInfo[playerid][pCarKey][7] == 0) PlayerInfo[playerid][pCarKey][7] = idd;
		else if(PlayerInfo[playerid][pCarKey][8] == 0) PlayerInfo[playerid][pCarKey][8] = idd;
		else if(PlayerInfo[playerid][pCarKey][9] == 0) PlayerInfo[playerid][pCarKey][9] = idd;
		else return SCM(playerid,COLOR_VEHICLE,"Nu mai poti cumpara vehicule personale, ai toate sloturile ocupate!");
		//--------------------------------------------------------------
		new rand = random(sizeof(gDealershipSpawn));
		CarInfo[idd][cLocationx] = gDealershipSpawn[rand][0];
		CarInfo[idd][cLocationy] = gDealershipSpawn[rand][1];
		CarInfo[idd][cLocationz] = gDealershipSpawn[rand][2];
		CarInfo[idd][cAngle] = gDealershipSpawn[rand][3];
		pUpdate(playerid,pCarsx);
		//--------------------------------------------------------------
    	Stock[stockid][vStock]--;
        mysql_format(SQL, string, sizeof(string), "UPDATE `stock` SET `Stock`='%d' WHERE `ID`='%d'", Stock[stockid][vStock], stockid);
		mysql_tquery(SQL, string);
		//--------------------------------------------------------------
		if(Stock[stockid][vType] == 1) GivePlayerCash(playerid,-value);
		else if(Stock[stockid][vType] == 2) PlayerInfo[playerid][pGold] -= value;
		//--------------------------------------------------------------
        CarInfo[idd][cID] = idd;
        CarInfo[idd][cModel] = model;
        CarInfo[idd][cColorOne] = 1;
		CarInfo[idd][cColorTwo] = 1;
        StrmidEx(CarInfo[idd][cOwner], PlayerInfo[playerid][pNamePlayer]);
        StrmidEx(CarInfo[idd][cName], namecar);
        CarInfo[idd][cValue] = value;
        StrmidEx(CarInfo[idd][cLicense], "Dealership");
        CarInfo[idd][cOwned] = 1;
		CarInfo[idd][cLock] = 1;
		CarInfo[idd][cInscarprice] = 5000;
		CarInfo[idd][cInsurancecar] = 10;
		CarInfo[idd][cKM] = 0.0;
		CarInfo[idd][cPaintJ] = 6;
		CarInfo[idd][cFuel] = 200.5;
		CarInfo[idd][cHealth] = 999.9;
		CarInfo[idd][cDays] = 0;
		CarInfo[idd][cType] = 0;
		for(new i = 0; i < 4; i++) {
			CarInfo[idd][cDamage][i] = 0;
		}
		for(new i = 0; i < 17; i++) {
			CarInfo[idd][cMods][i] = 0;
		}
		//--------------------------------------------------------------
		vUpdate(idd, cLocationxx);
		vUpdate(idd, cLocationyx);
		vUpdate(idd, cLocationzx);
		vUpdate(idd, cAnglex);
		vUpdate(idd, cModelx);
		vUpdate(idd, cOwnerx);
		vUpdate(idd, cValuex);
		vUpdate(idd, cNamex);
		vUpdate(idd, cLockx);
		vUpdate(idd, cOwnedx);
		//--------------------------------------------------------------
        new car = CreateVehicleEx(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],1,1,-1);
        SetVehicleNumberPlate(car,CarInfo[idd][cLicense]);
		SetVehicleDoorsState(car, true);
		Gas[car] = CarInfo[idd][cFuel];
		CarInfo[idd][cSpawned] = car;
		CarInfo[idd][cTime] = 900;
        masini++;
		SFM(playerid,COLOR_LIGHTBLUE,"Felicitari, ai cumparat un vehicul de tip %s.",CarInfo[idd][cName]);
    }
    else if(idd == 0)
    {
		if(Stock[stockid][vType] == 1 && GetPlayerCash(playerid) < value) return SCM(playerid,COLOR_VEHICLE,"You do not have enough money.");
		else if(Stock[stockid][vType] == 2 && PlayerInfo[playerid][pGold] < value) return SCM(playerid,COLOR_VEHICLE,"Nu ai suficient gold.");
		//--------------------------------------------------------------
		new Cache:sqlcar = mysql_query(SQL, "SELECT * FROM `cars`");
		idd = cache_num_rows()+1;
		cache_delete(sqlcar);
		//--------------------------------------------------------------
		if(PlayerInfo[playerid][pCarKey][0] == 0) PlayerInfo[playerid][pCarKey][0] = idd;
		else if(PlayerInfo[playerid][pCarKey][1] == 0) PlayerInfo[playerid][pCarKey][1] = idd;
		else if(PlayerInfo[playerid][pCarKey][2] == 0)
		{
			if(PlayerInfo[playerid][pPremium] == 1) PlayerInfo[playerid][pCarKey][2] = idd;
			else return SCM(playerid,COLOR_VEHICLE,"Ai nevoie de Cont Premium pentru a debloca acest slot.");
		}
		else if(PlayerInfo[playerid][pCarKey][3] == 0)
		{
		    if(PlayerInfo[playerid][pPremium] == 1) PlayerInfo[playerid][pCarKey][3] = idd;
			else return SCM(playerid,COLOR_VEHICLE,"Ai nevoie de Cont Premium pentru a debloca acest slot.");
		}
		else if(PlayerInfo[playerid][pCarKey][4] == 0) PlayerInfo[playerid][pCarKey][4] = idd;
		else if(PlayerInfo[playerid][pCarKey][5] == 0) PlayerInfo[playerid][pCarKey][5] = idd;
		else if(PlayerInfo[playerid][pCarKey][6] == 0) PlayerInfo[playerid][pCarKey][6] = idd;
		else if(PlayerInfo[playerid][pCarKey][7] == 0) PlayerInfo[playerid][pCarKey][7] = idd;
		else if(PlayerInfo[playerid][pCarKey][8] == 0) PlayerInfo[playerid][pCarKey][8] = idd;
		else if(PlayerInfo[playerid][pCarKey][9] == 0) PlayerInfo[playerid][pCarKey][9] = idd;
		else return SCM(playerid,COLOR_VEHICLE,"Nu mai poti cumpara vehicule personale, ai toate sloturile ocupate!");
		//--------------------------------------------------------------
		new rand = random(sizeof(gDealershipSpawn));
		CarInfo[idd][cLocationx] = gDealershipSpawn[rand][0];
		CarInfo[idd][cLocationy] = gDealershipSpawn[rand][1];
		CarInfo[idd][cLocationz] = gDealershipSpawn[rand][2];
		CarInfo[idd][cAngle] = gDealershipSpawn[rand][3];
		pUpdate(playerid,pCarsx);
		//--------------------------------------------------------------
    	Stock[stockid][vStock]--;
        mysql_format(SQL, string, sizeof(string), "UPDATE `stock` SET `Stock`='%d' WHERE `ID`='%d'", Stock[stockid][vStock], stockid);
		mysql_tquery(SQL, string, "","");
		//--------------------------------------------------------------
		if(Stock[stockid][vType] == 1) GivePlayerCash(playerid,-value);
		else if(Stock[stockid][vType] == 2) PlayerInfo[playerid][pGold] -= value;
		//--------------------------------------------------------------
        CarInfo[idd][cID] = idd;
        CarInfo[idd][cModel] = model;
        CarInfo[idd][cColorOne] = 1;
		CarInfo[idd][cColorTwo] = 1;
        StrmidEx(CarInfo[idd][cOwner], PlayerInfo[playerid][pNamePlayer]);
        StrmidEx(CarInfo[idd][cName], namecar);
        CarInfo[idd][cValue] = value;
        StrmidEx(CarInfo[idd][cLicense], "Dealership");
        CarInfo[idd][cOwned] = 1;
		CarInfo[idd][cLock] = 1;
		CarInfo[idd][cInscarprice] = 5000;
		CarInfo[idd][cInsurancecar] = 10;
		CarInfo[idd][cKM] = 0.0;
		CarInfo[idd][cFuel] = 200.5;
		CarInfo[idd][cHealth] = 999.9;
		CarInfo[idd][cPaintJ] = 6;
		CarInfo[idd][cDays] = 0;
		CarInfo[idd][cType] = 0;
		for(new i = 0; i < 4; i++) {
			CarInfo[idd][cDamage][i] = 0;
		}
		for(new i = 0; i < 17; i++) {
			CarInfo[idd][cMods][i] = 0;
		}
		//--------------------------------------------------------------
        mysql_format(SQL, string, sizeof(string),"INSERT INTO `cars` (`carID`, `Model`) VALUES ('%d', '%d')", idd, CarInfo[idd][cModel]);
        mysql_tquery(SQL, string);
		//--------------------------------------------------------------
		vUpdate(idd, cLocationxx);
		vUpdate(idd, cLocationyx);
		vUpdate(idd, cLocationzx);
		vUpdate(idd, cAnglex);
		vUpdate(idd, cOwnerx);
		vUpdate(idd, cValuex);
		vUpdate(idd, cNamex);
		vUpdate(idd, cLockx);
		vUpdate(idd, cOwnedx);
		//--------------------------------------------------------------
        new car = CreateVehicleEx(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],1,1,-1);
        SetVehicleNumberPlate(car,CarInfo[idd][cLicense]);
        SetVehicleDoorsState(car, true);
		Gas[car] = CarInfo[idd][cFuel];
		CarInfo[idd][cSpawned] = car;
		CarInfo[idd][cTime] = 900;
        masini++;
		SFM(playerid,COLOR_LIGHTBLUE,"Felicitari, ai cumparat un vehicul de tip %s.",CarInfo[idd][cName]);
    }
    return 1;
}
//==============================================================================
function vUpdate(vehicleid, type)
{
	new gQuery[700];
	if(vehicleid > 0)
	{
		switch(type)
		{
			case cLocationxx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Locationx`='%f' WHERE `carID`='%d'",CarInfo[vehicleid][cLocationx],vehicleid);
			case cLocationyx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Locationy`='%f' WHERE `carID`='%d'",CarInfo[vehicleid][cLocationy],vehicleid);
			case cLocationzx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Locationz`='%f' WHERE `carID`='%d'",CarInfo[vehicleid][cLocationz],vehicleid);
			case cAnglex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Angle`='%f' WHERE `carID`='%d'",CarInfo[vehicleid][cAngle],vehicleid);
			case cModelx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Model`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cModel],vehicleid);
			case cColorOnex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `ColorOne`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cColorOne],vehicleid);
			case cColorTwox: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `ColorTwo`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cColorTwo],vehicleid);
			case cOwnerx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Owner`='%s' WHERE `carID`='%d'",CarInfo[vehicleid][cOwner],vehicleid);
			case cValuex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Value`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cValue],vehicleid);
			case cLicensex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `License`='%s' WHERE `carID`='%d'",CarInfo[vehicleid][cLicense],vehicleid);
			case cNamex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Name`='%s' WHERE `carID`='%d'",CarInfo[vehicleid][cName],vehicleid);
			case cLockx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Lock`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cLock],vehicleid);
			case cInscarpricex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Inscarprice`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cInscarprice],vehicleid);
			case cInsurancecarx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Insurancecar`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cInsurancecar],vehicleid);
			case cKMx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `KM`='%.1f' WHERE `carID`='%d'",CarInfo[vehicleid][cKM],vehicleid);
			case cOwnedx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Owned`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cOwned],vehicleid);
			case cModsx: 
			{
				mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Mods`='%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `carID`='%d'",CarInfo[vehicleid][cMods][0],CarInfo[vehicleid][cMods][1],CarInfo[vehicleid][cMods][2],CarInfo[vehicleid][cMods][3],
				CarInfo[vehicleid][cMods][4],CarInfo[vehicleid][cMods][5],CarInfo[vehicleid][cMods][6],CarInfo[vehicleid][cMods][7],CarInfo[vehicleid][cMods][8],CarInfo[vehicleid][cMods][9],CarInfo[vehicleid][cMods][10],CarInfo[vehicleid][cMods][11],CarInfo[vehicleid][cMods][12],
				CarInfo[vehicleid][cMods][13],CarInfo[vehicleid][cMods][14],CarInfo[vehicleid][cMods][15],CarInfo[vehicleid][cMods][16],vehicleid);
			}
			case cPaintJx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `PaintJ`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cPaintJ],vehicleid);
			case cHealthx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Health`='%.1f' WHERE `carID`='%d'",CarInfo[vehicleid][cHealth],vehicleid);
			case cFuelx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Fuel`='%.1f' WHERE `carID`='%d'",CarInfo[vehicleid][cFuel],vehicleid);
			case cNeonx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Neon`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cNeon],vehicleid);
			case cDamagex: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Damage`='%d|%d|%d|%d' WHERE `carID`='%d'",CarInfo[vehicleid][cDamage][0],CarInfo[vehicleid][cDamage][1],CarInfo[vehicleid][cDamage][2],CarInfo[vehicleid][cDamage][3],vehicleid);
			case cDaysx: mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `cars` SET `Days`='%d' WHERE `carID`='%d'",CarInfo[vehicleid][cDays],vehicleid);
		}
		mysql_tquery(SQL, gQuery);
	}
	return 1;
}
//==============================================================================
function LoadStock()
{
    new index = 0, Cache:stoc = mysql_query(SQL,"SELECT * FROM `stock` ORDER BY `stock`.`ID` ASC");
    for(new i, j = cache_num_rows(); i != j; ++i)
	{
		index++;
		cache_get_value_int(i, "ID", Stock[index][vID]);
		cache_get_value_int(i, "Stock", Stock[index][vStock]);
		cache_get_value(i, "Name", Stock[index][vName], 64);
		cache_get_value_int(i, "Price", Stock[index][vPrice]);
		cache_get_value_int(i, "Model", Stock[index][vModel]);
		cache_get_value_int(i, "Type", Stock[index][vType]);
	}
	cache_delete(stoc);
	printf("  Stock: %d",index);
	return 1;
}
//==============================================================================
function LoadCar()
{
    new index = 0, result[128], Cache:car = mysql_query(SQL,"SELECT * FROM `cars` ORDER BY `cars`.`carID` ASC");
    for(new i, j = cache_num_rows(); i != j; ++i)
	{
        masini++;
		index++;
		cache_get_value_int(i, "carID", CarInfo[index][cID]);
		cache_get_value_int(i, "Model", CarInfo[index][cModel]);
   	    cache_get_value_float(i, "Locationx", CarInfo[index][cLocationx]);
    	cache_get_value_float(i, "Locationy", CarInfo[index][cLocationy]);
        cache_get_value_float(i, "Locationz", CarInfo[index][cLocationz]);
        cache_get_value_float(i, "Angle", CarInfo[index][cAngle]);
        cache_get_value_int(i, "ColorOne", CarInfo[index][cColorOne]);
        cache_get_value_int(i, "ColorTwo", CarInfo[index][cColorTwo]);
        cache_get_value(i, "Owner", CarInfo[index][cOwner], MAX_PLAYER_NAME);
        cache_get_value_int(i, "Value", CarInfo[index][cValue]);
        cache_get_value(i, "License", CarInfo[index][cLicense], 32);
        cache_get_value(i, "Name", CarInfo[index][cName], 64);
        cache_get_value_int(i, "Lock", CarInfo[index][cLock]);
        cache_get_value_int(i, "Inscarprice", CarInfo[index][cInscarprice]);
        cache_get_value_int(i, "Insurancecar", CarInfo[index][cInsurancecar]);
        cache_get_value_float(i, "KM", CarInfo[index][cKM]);
        cache_get_value_int(i, "Owned", CarInfo[index][cOwned]);
        cache_get_value_int(i, "PaintJ", CarInfo[index][cPaintJ]);
        cache_get_value_float(i, "Health", CarInfo[index][cHealth]);
        cache_get_value_float(i, "Fuel", CarInfo[index][cFuel]);
		cache_get_value_int(i, "Neon", CarInfo[index][cNeon]);
		cache_get_value_int(i, "Days", CarInfo[index][cDays]);
		cache_get_value_int(i, "Type", CarInfo[index][cType]);
		//--------------------------------------------------------------
		cache_get_value(i, "Mods", result, 128);
		sscanf(result, "p<|>iiiiiiiiiiiiiiiii", CarInfo[index][cMods][0], CarInfo[index][cMods][1], CarInfo[index][cMods][2], CarInfo[index][cMods][3], CarInfo[index][cMods][4], CarInfo[index][cMods][5], CarInfo[index][cMods][6], 
		CarInfo[index][cMods][7], CarInfo[index][cMods][8], CarInfo[index][cMods][9], CarInfo[index][cMods][10], CarInfo[index][cMods][11], CarInfo[index][cMods][12], CarInfo[index][cMods][13],
		CarInfo[index][cMods][14], CarInfo[index][cMods][15], CarInfo[index][cMods][16]);
		//--------------------------------------------------------------
		cache_get_value(i, "Damage", result, 128); 
		sscanf(result, "p<|>iiii", CarInfo[index][cDamage][0], CarInfo[index][cDamage][1], CarInfo[index][cDamage][2], CarInfo[index][cDamage][3]);
	}
	cache_delete(car);
	printf("  Vehicles: %d",index);
	return 1;
}
//==============================================================================
function SaveComponent(vehicleid, componentid)
{
	new vsid = FindSpawnID(vehicleid);
	for(new s = 0; s < 20; s++) {
		if(componentid == spoiler[s]) CarInfo[vsid][cMods][0] = componentid;
	}
	for(new s = 0; s < 3; s++) {
		if(componentid == nitro[s]) CarInfo[vsid][cMods][1] = componentid;
	}
	for(new s = 0; s < 23; s++) {
		if(componentid == fbumper[s]) CarInfo[vsid][cMods][2] = componentid;
	}
	for(new s = 0; s < 22; s++) {
		if(componentid == rbumper[s]) CarInfo[vsid][cMods][3] = componentid;
	}
	for(new s = 0; s < 28; s++) {
		if(componentid == exhaust[s]) CarInfo[vsid][cMods][4] = componentid;
	}
	for(new s = 0; s < 4; s++)
	{
		if(componentid == bscoop[s]) CarInfo[vsid][cMods][7] = componentid;
		if(componentid == rbbars[s]) CarInfo[vsid][cMods][13] = componentid;
	}
	for(new s = 0; s < 17; s++)
	{
		if(componentid == rscoop[s]) CarInfo[vsid][cMods][8] = componentid;
		if(componentid == wheels[s]) CarInfo[vsid][cMods][15] = componentid;
	}
	for(new s = 0; s < 21; s++)
	{
		if(componentid == rskirt[s]) CarInfo[vsid][cMods][10] = componentid;
		if(componentid == lskirt[s]) CarInfo[vsid][cMods][9] = componentid;
	}
	for(new s = 0; s < 2; s++)
	{
		if(componentid == bventr[s]) CarInfo[vsid][cMods][5] = componentid;
		if(componentid == bventl[s]) CarInfo[vsid][cMods][6] = componentid;
		if(componentid == fbbars[s]) CarInfo[vsid][cMods][14] = componentid;
		if(componentid == vlights[s]) CarInfo[vsid][cMods][16] = componentid;
	}
	if(componentid == 1087) CarInfo[vsid][cMods][11] = componentid;
	if(componentid == 1086) CarInfo[vsid][cMods][12] = componentid;
	vUpdate(vsid, cModsx);
	return 1;
}
//==============================================================================
function MySQLCheckCar(carname[])
{
	new query[256], escstr[64];
	mysql_escape_string(carname, escstr);
	format(query, sizeof(query), "SELECT `ID` FROM `stock` WHERE `Name` = '%s' LIMIT 1", escstr);
	new Cache:car = mysql_query(SQL, query);
	if(cache_num_rows() == 0)
	{
	    cache_delete(car);
		return 0;
	}
	else
	{
		new strid[32], intid;
		cache_get_value_index(0, 0, strid);
		intid = strval(strid);
	    cache_delete(car);
		return intid;
	}
}
//==============================================================================
function GateClose1(playerid)
{
    MoveDynamicObject(vama1,68.328880, -1526.939087, 7.015985, 5);
    VamaOn[playerid] = 0;
    return 1;
}
//==============================================================================
function GateClose2(playerid)
{
    MoveDynamicObject(vama2,67.909485, -1541.125732, 7.076734, 5);
    VamaOn[playerid] = 0;
    return 1;
}
//==============================================================================
function GateClose3(playerid)
{
    MoveDynamicObject(vama3,1743.43616, 506.75204, 30.59650, 5);
    VamaOn[playerid] = 0;
    return 1;
}
//==============================================================================
function GateClose4(playerid)
{
    MoveDynamicObject(vama4,1724.68164, 512.72815, 30.59650, 5);
    VamaOn[playerid] = 0;
    return 1;
}
//==============================================================================
function GateTime()
{
    SetDynamicObjectRot(barrierls, 0.0,90.0,90);
    return 1;
}
//==============================================================================
function GateTime1()
{
    SetDynamicObjectRot(barrierlv, 0.0,89.0,90.0);
    return 1;
}
//==============================================================================
function GarageLS()
{
    MoveDynamicObject(garagels, 1588.3868,-1638.2165,13.7, 5);
    return 1;
}
//==============================================================================
function GarageLV()
{
    MoveDynamicObject(garagelv, 2335.28149414,2444.17993164,6.96999979, 5);
    return 1;
}
//==============================================================================
function GarageLV1()
{
    MoveDynamicObject(garagelv1, 2294.00000000,2498.59155273,4.50000000, 5);
    return 1;
}
//==============================================================================
function GateArmata1()
{
	MoveDynamicObject(barmata1, 2720.21436, -2503.87183, 13.42200,4);
	return 1;
}
//==============================================================================
function GateArmata2()
{
	MoveDynamicObject(barmata2, 2720.23364, -2405.36719, 13.44570,4);
	return 1;
}
//==============================================================================
function IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1) return 0;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY]) return 1;
	}
	return 0;
}
//==============================================================================
function LoadTurfs()
{
	new index = 0, Cache:result1 = mysql_query(SQL, "SELECT * FROM `turfs` ORDER BY `turfs`.`turfID` ASC");
    for(new i, j = cache_num_rows(); i != j; ++i)
    {
       	index++;
       	cache_get_value_int(i, "turfID", TurfInfo[index][zID]);
       	cache_get_value_int(i, "Owned", TurfInfo[index][zOwned]);  
        cache_get_value_float(i, "MinX", TurfInfo[index][zMinX]); 
        cache_get_value_float(i, "MinY", TurfInfo[index][zMinY]);  
        cache_get_value_float(i, "MaxX", TurfInfo[index][zMaxX]);  
        cache_get_value_float(i, "MaxY", TurfInfo[index][zMaxY]);   
		//--------------------------------------------------------------
        Turfs[index] = CreateZone(TurfInfo[index][zMinX], TurfInfo[index][zMinY], TurfInfo[index][zMaxX], TurfInfo[index][zMaxY]);
		WarInfo[index][wAttacker] = 0;
		WarInfo[index][wFaction] = 0;
		WarInfo[index][wTime] = 0;
   	}
   	cache_delete(result1);
	printf("  Turfs: %d", index);
	return 1;
}
//==============================================================================
function RingToner(playerid)
{
	if(IsPlayerConnected(playerid))
    {
		if(RingTone[playerid] != 6 && RingTone[playerid] != 0 && RingTone[playerid] < 11)
		{
			RingTone[playerid] = RingTone[playerid] -1;
			PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
		}
		if(RingTone[playerid] == 6) {
			RingTone[playerid] = RingTone[playerid] -1;
		}
		if(RingTone[playerid] == 20)
		{
			RingTone[playerid] = RingTone[playerid] -1;
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		}
	}
	SetTimerEx_("RingTonerRev", 1000, 1000, 1, "d", playerid);
	return 1;
}
//==============================================================================
function RingTonerRev(playerid)
{
	if(IsPlayerConnected(playerid))
 	{
		if(RingTone[playerid] != 5 && RingTone[playerid] != 0 && RingTone[playerid] < 10)
		{
			RingTone[playerid] = RingTone[playerid] -1;
			PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
		}
		if(RingTone[playerid] == 5) {
			RingTone[playerid] = RingTone[playerid] -1;
		}
		if(RingTone[playerid] == 19)
		{
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
			RingTone[playerid] = 0;
		}
	}
	SetTimerEx_("RingToner", 1000, 1000, 1, "d", playerid);
	return 1;
}
//==============================================================================
function AfterSpray(playerid, Float:a)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
    		foreach(new i: Player)
			{
				if(GetPlayerVehicleID(i) == tmpcar)
				{
					SetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
					SetVehicleZAngle(tmpcar, a);
					SetPlayerVirtualWorld(i, 0);
		 			SetVehicleVirtualWorld(tmpcar, 0);
		 			TogglePlayerControllable(i, true);
					TeleportDest[i][0] = 0.0;
					TeleportDest[i][1] = 0.0;
					TeleportDest[i][2] = 0.0;
					for(new m = 0; m < 2; m++) {
						if(PlayerInfo[playerid][pQuest][m] == 13 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 411) CheckQuest(playerid, m);
					}
				}
			}
		}
	}
	return 1;
}
//==============================================================================
function restartTimer()
{
	iGMXTick--;
	switch(iGMXTick)
	{
	    case 0: 
		{
			KillTimer_(ScriptTimer[15]); 
			SetTimer_("GameModeInitExitFunc", 1000, 1000, 1);
		}
	    case 1: GameTextForAll("~w~Restart server ~b~NOW!", 1510, 5), restartsv = 0;
	    case 2: GameTextForAll("~w~Restart server in ~r~2~w~ secunde", 1510, 5);
	    case 3: 
		{
			GameTextForAll("~w~Restart server in ~r~3~w~ secunde", 1510, 5);
			foreach(new i: Player)
			{
				if(IsPlayerPaused(i))
				{
					SCM(i,COLOR_PURPLE," * Ai primit kick deoarece ai fost AFK cat timp serverul se restarta.");
					KickEx(i);
				}
			}
		}
	    case 4: GameTextForAll("~w~Restart server in ~r~4~w~ secunde", 1510, 5);
	    case 5: GameTextForAll("~w~Restart server in ~r~5~w~ secunde", 1510, 5);
	    case 6: GameTextForAll("~w~Restart server in ~r~6~w~ secunde", 1510, 5);
	    case 7: GameTextForAll("~w~Restart server in ~r~7~w~ secunde", 1510, 5);
	    case 8: GameTextForAll("~w~Restart server in ~r~8~w~ secunde", 1510, 5);
	    case 9: GameTextForAll("~w~Restart server in ~r~9~w~ secunde", 1510, 5);
		case 10: GameTextForAll("~w~Restart server in ~y~10~w~ secunde", 1510, 5);
		case 11: GameTextForAll("~w~Restart server in ~y~11~w~ secunde", 1510, 5);
		case 12: GameTextForAll("~w~Restart server in ~y~12~w~ secunde", 1510, 5);
		case 13: GameTextForAll("~w~Restart server in ~y~13~w~ secunde", 1510, 5);
		case 14: GameTextForAll("~w~Restart server in ~y~14~w~ secunde", 1510, 5);
		case 15: GameTextForAll("~w~Restart server in ~y~15~w~ secunde", 1510, 5);
		case 16: GameTextForAll("~w~Restart server in ~y~16~w~ secunde", 1510, 5);
		case 17: GameTextForAll("~w~Restart server in ~y~17~w~ secunde", 1510, 5);
		case 18: GameTextForAll("~w~Restart server in ~y~18~w~ secunde", 1510, 5);
		case 19: GameTextForAll("~w~Restart server in ~y~19~w~ secunde", 1510, 5);
		case 20: GameTextForAll("~w~Restart server in ~g~20~w~ secunde", 1510, 5);
		case 21: GameTextForAll("~w~Restart server in ~g~21~w~ secunde", 1510, 5);
		case 22: GameTextForAll("~w~Restart server in ~g~22~w~ secunde", 1510, 5);
		case 23: GameTextForAll("~w~Restart server in ~g~23~w~ secunde", 1510, 5), SCMAll(COLOR_GREEN,"Ramaneti pe server, nu este nevoie sa va deconectati din joc.");
		case 24: GameTextForAll("~w~Restart server in ~g~24~w~ secunde", 1510, 5);
		case 25:
		{
		    foreach(new i: Player)
			{
				SetPlayerName(i, PlayerInfo[i][pNamePlayer]);
				SaveData();
			}
			GameTextForAll("~w~Restart server in ~g~25~w~ secunde", 1510, 5);
		}
		case 26: GameTextForAll("~w~Restart server in ~g~26~w~ secunde", 1510, 5);
		case 27: GameTextForAll("~w~Restart server in ~g~27~w~ secunde", 1510, 5), SCMAll(COLOR_GREEN,"Serverul se restarteaza pentru modificari sau rezolvarea unor probleme.");
		case 28: GameTextForAll("~w~Restart server in ~g~28~w~ secunde", 1510, 5);
		case 29: GameTextForAll("~w~Restart server in ~g~29~w~ secunde", 1510, 5);
		case 30: GameTextForAll("~w~Restart server in ~g~30~w~ secunde", 1510, 5);
	}
	return 1;
}
//==============================================================================
function ClearWanted(playerid)
{
	StrmidEx(WantedName[playerid], "None");
	WantedReason[playerid] = 999;
	KillTimer_(WantedTimer[playerid]);
	return 1;
}
//==============================================================================
CMD:pm(playerid, params[])
{
	new UserID, mesaj[128], info[256], info2[64], pName[MAX_PLAYER_NAME], Destinatar[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]",UserID,mesaj)) return SCM(playerid,-1,"{B8DBFF}Folosire: /pm [playerid/PartOfName] [text]");
	if(NOON(UserID));
	GetPlayerName(playerid,pName,sizeof(pName));
	GetPlayerName(UserID,Destinatar,sizeof(Destinatar));
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		format(info,sizeof(info),"PM de la %s: %s",pName,mesaj);
		SCM(UserID,COLOR_LIGHTGREEN,info);
		format(info2,sizeof(info2),"PM trimis cu succes!");
		SCM(playerid,COLOR_YELLOW,info2);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:givegold(playerid, params[])
{
    new sgold, UserID, pName[MAX_PLAYER_NAME], info[128], sendername[MAX_PLAYER_NAME];
 	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
 	if(sscanf(params,"ui",UserID,sgold)) return SCM(playerid,COLOR_COMMAND,"Folosire: /givegold [playerid/PartOfName] [gold]");
	if(!IsPlayerConnected(UserID)) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
	GetPlayerName(UserID,pName,sizeof(pName));
	GetPlayerName(playerid,sendername,sizeof(sendername));
	PlayerInfo[UserID][pGold] += sgold;
	format(info,sizeof(info),"AdmCmd: %s i-a dat lui %s %d gold.",sendername,pName,sgold);
	SendAdminMessage(info,PlayerInfo[playerid][pAdmin]);
	return 1;
}
//==============================================================================
CMD:setmoney(playerid, params[])
{
   	new smoney, UserID, pName[MAX_PLAYER_NAME], info[128], sendername[MAX_PLAYER_NAME];
 	if(sscanf(params,"ui",UserID,smoney)) return SCM(playerid,-1,"{B8DBFF}Folosire: /setmoney [playerid/PartOfName] [money]");
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,"Nu ai rankul administrativ necesar!");
	if(NOON(UserID));
	GetPlayerName(UserID,pName,sizeof(pName));
	GetPlayerName(playerid,sendername,sizeof(sendername));
	SetPlayerCash(UserID, smoney);
	format(info,sizeof(info),"AdmCmd: %s i-a setat banii lui %s la %s$.",sendername,pName,FormatNumber(smoney));
	SendAdminMessage(info,PlayerInfo[playerid][pAdmin]);
	return 1;
}
//==============================================================================
CMD:help(playerid, params[]) return	SPD(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help:","General\nFactiune\nJob\nPremium\nShop\nAdmin\nHelper\nHouse\nBusiness\nClan\nPin\nVehicles\nLeader","Alege","Inchide");
//==============================================================================
CMD:stats(playerid, params[]) return ShowStats(playerid,playerid);
//==============================================================================
CMD:getgift(playerid, params[])
{
	if(GiftInfo[gOpen] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu este niciun giftbox activ.");
	if(PlayerInfo[playerid][pGpoint] >= 5)
    {
        if(!IsPlayerInRangeOfPoint(playerid,5,GiftInfo[gLocationX],GiftInfo[gLocationY],GiftInfo[gLocationZ]))
		{
			SetPlayerCheckpointEx(playerid,GiftInfo[gLocationX],GiftInfo[gLocationY],GiftInfo[gLocationZ],2.5);
			SCM(playerid, COLOR_ORANGE,"Ti-am setat un checkpoint, du-te la el!");
			return 1;
		}
		if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda daca esti intr-un vehicul!");
		new ran = random(76), string[256];
		switch(ran)
		{
			case 0 .. 15:
			{
				new rand = 300000 + random(1200000);
				format(string, sizeof(string),"{00bfff}Ai primit drept cadou %s$!", FormatNumber(rand));
				SCM(playerid, COLOR_YELLOW, string);
				GivePlayerCash(playerid, rand);
				if(rand > 1000000)
				{
					format(string,sizeof(string),"(( Giftbox: %s a castigat %s$ la gift! Felicitari! ))",GetName(playerid),FormatNumber(rand));
					SCMAll(COLOR_OOC,string);
				}
			}
			case 16 .. 22:
			{
				new rand = 1 + random(10);
				format(string, sizeof(string),"{00bfff}Ai primit drept cadou %d puncte de respect!", rand);
				SCM(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pExp] += rand;
				if(rand > 6)
				{
					format(string,sizeof(string),"(( Giftbox: %s a castigat %d puncte de respect la gift! Felicitari! ))",GetName(playerid),rand);
					SCMAll(COLOR_OOC,string);
				}
			}
			case 23 .. 30:
			{
				new rand = 50 + random(50);
				format(string, sizeof(string),"{00bfff}Ai primit drept cadou %d droguri!", rand);
				SCM(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pDrugs] += rand;
				if(rand > 80)
				{
					format(string,sizeof(string),"(( Giftbox: %s a castigat %d droguri la gift! Felicitari! ))",GetName(playerid),rand);
					SCMAll(COLOR_OOC,string);
				}
			}
			case 31 .. 37:
			{
				if(PlayerInfo[playerid][pWarns] > 0)
				{
					SCM(playerid, COLOR_YELLOW, "{00bfff}Ai primit drept cadou -1 warning!");
					PlayerInfo[playerid][pWarns] -= 1;
					pUpdate(playerid, pWarnsx);
					format(string,sizeof(string),"(( Giftbox: %s a castigat -1 warning la gift! Felicitari! ))",GetName(playerid));
					SCMAll(COLOR_OOC,string);
				}
				else return pc_cmd_getgift(playerid, params);
			}
			case 38 .. 47:
			{
				new rand = 10000 + random(40000);
				format(string, sizeof(string),"{00bfff}Ai primit drept cadou %s materiale!", FormatNumber(rand));
				SCM(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pMats] += rand;
				if(rand > 30000)
				{
					format(string,sizeof(string),"(( Giftbox: %s a castigat %s materiale la gift! Felicitari! ))",GetName(playerid),FormatNumber(rand));
					SCMAll(COLOR_OOC,string);
				}
			}
			case 48 .. 53:
			{
				new rand = 50 + random(100);
				format(string, sizeof(string),"{00bfff}Ai primit drept cadou %d gold!", rand);
				SCM(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pGold] += rand;
				format(string,sizeof(string),"(( Giftbox: %s a castigat %d gold la gift! Felicitari! ))",GetName(playerid), rand);
				SCMAll(COLOR_OOC,string);
			}
			case 54 .. 60:
			{
				SCM(playerid, COLOR_YELLOW, "{00bfff}Ai primit drept cadou o culoare hidden!");
				PlayerInfo[playerid][pHidden] += 1;
				UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
				format(string,sizeof(string),"(( Giftbox: %s a castigat o culoare hidden la gift! Felicitari! ))",GetName(playerid));
				SCMAll(COLOR_OOC,string);
			}
			case 61 .. 70:
			{
				new rand = 50 + random(100);
				format(string, sizeof(string),"{00bfff}Ai primit drept cadou +%d de ore pentru licente!",rand);
				SCM(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pCarLic] += rand;
				PlayerInfo[playerid][pGunLic] += rand;
				PlayerInfo[playerid][pFlyLic] += rand;
				PlayerInfo[playerid][pFishLic] += rand;
				PlayerInfo[playerid][pBoatLic] += rand;
				if(rand > 80)
				{
					format(string,sizeof(string),"(( Giftbox: %s a castigat +%d de ore pentru licente la gift! Felicitari! ))",GetName(playerid),rand);
					SCMAll(COLOR_OOC,string);
				}
			}
			case 71 .. 75:
			{
				if(PlayerInfo[playerid][pPremium] == 0)
				{
					new randzile = 1 + random(13);
					format(string,sizeof(string),"{00bfff}Ai primit drept cadou Cont Premium pentru %d zile!",randzile);
					SCM(playerid,COLOR_WHITE,string);
					if(randzile > 0 && randzile < 61)
					{
						new year, month, day;
						getdate(year, month, day);
						day += randzile;
						if(IsMonth31(month))
						{
							if(day > 31)
							{
								month += 1;
								if(month > 12)
								{
									year += 1;
									while(day > 31) day -= 31;
								}
								else while(day > 31) day -= 31;
							}
						}
						else if(!IsMonth31(month))
						{
							if(day > 30)
							{
								month += 1;
								if(month > 12)
								{
									year += 1;
									while(day > 30) day -= 30;
								}
								else while(day > 30) day -= 30;
							}
						}
						else if(!IsMonth31(month) && IsMonth29(year) && month == 2)
						{
							if(day > 29)
							{
								month += 1;
								if(month > 12)
								{
									year += 1;
									while(day > 29) day -= 29;
								}
								else while(day > 29) day -= 29;
							}
						}
						else if(!IsMonth31(month) && !IsMonth29(year) && month == 2)
						{
							if(day > 28)
							{
								month += 1;
								if(month > 12)
								{
									year += 1;
									while(day > 28) day -= 28;
								}
								else while(day > 28) day -= 28;
							}
						}
						mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `TempPremiumDay`='%d', `TempPremiumMonth`='%d', `TempPremiumYear`='%d' WHERE `name`='%s'", day, month, year, PlayerInfo[playerid][pNamePlayer]);
						mysql_tquery(SQL, string, "","");
						//--------------------------------------------------------------
						PlayerInfo[playerid][pPremium] = 1;
						pUpdate(playerid,pPremiumx);
						format(string,sizeof(string),"(( Giftbox: %s a castigat la gift Cont Premium pentru %d zile! Felicitari! ))",randzile,GetName(playerid));
						SCMAll(COLOR_OOC,string);
					}
				}
				else return pc_cmd_getgift(playerid, params);
			}
		}
		PlayerInfo[playerid][pGpoint] -= 5;
		pUpdate(playerid, pGpointx);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu ai suficiente puncte de gift, ai nevoie de 5 pentru a primi un cadou.");
	return 1;
}
//==============================================================================
CMD:buylicense(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,3.0,-2026.8217,-114.3419,1035.1719))
	{
		SCM(playerid, COLOR_ORANGE, "Nu esti la centrul de licente, urmareste checkpointul!");
		SetPlayerCheckpointEx(playerid,862.0390,-1636.1329,14.9297,3);
		return 1;
 	}
 	SPD(playerid, DIALOG_BUYLICENTE, DIALOG_STYLE_LIST, "Lista licente si pasaport:", "Driving\t\t{66FF00}45.000$\nFlying\t\t{66FF00}50.000$\nSailing\t\t{66FF00}35.000$\nFishing\t\t{66FF00}35.000$\nGun\t\t{66FF00}45.000$\nPasaport\t{66FF00}30.000$", "Cumpara", "Iesi" );
	return 1;
}
//==============================================================================
CMD:killcp(playerid, params[])
{
    if(Trucker[playerid] >= 1 && CP[playerid] == 2) return SCM(playerid, COLOR_YELLOW2, "Daca vrei sa te opresti din muncit poti folosi /stopwork.");
	else if(CP[playerid] != 0)
	{
		DisablePlayerCheckpointEx(playerid);
		if(Trucker[playerid] > 0)
		{
			Trucker[playerid] = 0;
			Trucker2[playerid] = 0;
			Trucker3[playerid] = 0;
			Trucker4[playerid] = 0;
	        viddd[playerid] = 0;
	        TruckID[playerid] = 0;
		}
		if(JucatorCautat[playerid] != -1) JucatorCautat[playerid] = -1;
	}
	return 1;
}
//==============================================================================
CMD:report(playerid, params[])
{
	if(reportsend[playerid] == 1) return SCM(playerid,COLOR_WHITE,"{f03337}Ai trimis deja reportul tau la echipa de admin. Asteapta...");
	if(reportaccepted[playerid] == 1) return SCM(playerid,COLOR_WHITE,"{f03337}Ai deja o conversatie de ajutor activata.");
	if(PlayerInfo[playerid][pAdmin] >= 1) return SCM(playerid,0xFFFFFFFF, "{FFB870}Nu poti folosi comanda daca esti admin.");
	new sendername[MAX_PLAYER_NAME],string[300],helptext[250];
	GetPlayerName(playerid, sendername, sizeof(sendername));
    if(sscanf(params,"s[250]",helptext)) return SCM(playerid,-1,"{B8DBFF}Folosire: /report [message]");
	format(string, sizeof(string), "{ED1A72}%s (%d) report: %s. [/accept report %d]", sendername,playerid,helptext,playerid);
	SendAdminMessage(string, 1);
	reportsend[playerid] = 1;
	SCM(playerid, COLOR_WHITE,"{FFFF45}Reportul tau a fost trimis la echipa admini.");
	SetPVarString(playerid, "Report", helptext);
	return 1;
}
//==============================================================================
CMD:reports(playerid, params[])
{
	new iString[712],string[128],count= 0,titlestring[50],name[30];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	foreach(new i: Player)
	{
    	if(GetPVarString(i, "Report", string, 128))
    	{
        	GetPVarString(i, "Report", string, sizeof(string));
        	count++;
        	GetPlayerName(i, name,sizeof(name));
        	format(string, sizeof(string), "Report: %s(%d) - ID(%d)\n",name,i,i);
        	strcat(iString, string);
		}
	}
    format(titlestring, sizeof(titlestring), "Pending Report: %d", count);
	SPD(playerid, DIALOG_NULL, DIALOG_STYLE_LIST, titlestring, iString, "Close", "");
	SCM(playerid, 0xFFFFFFFF, "{FFFF00}Foloseste /checkr pentru a accepta un report din lista de asteptari.");
	if(count == 0) return SCM(playerid,COLOR_WHITE,"{FFFF45}Nu sunt reporturi disponibile.");
	return 1;
}
//==============================================================================
CMD:checkr(playerid, params[])
{
	new id,string[128],name[30];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	if(sscanf(params, "u", id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /checkr [playerid/PartOfName]");
    if(GetPVarString(id, "Report", string, 128))
    {
        GetPVarString(id, "Report", string, sizeof(string));
        GetPlayerName(id, name,sizeof(name));
        format(string, sizeof(string), "{FFFF45}Report from %s(%d): %s.",name,id,string);
        SCM(playerid, COLOR_WHITE, string);
 	}
	return 1;
}
//==============================================================================
CMD:closereport(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	if(playerhavereport[playerid] == -1) return SCM(playerid,COLOR_WHITE,"{FFFFCC}Nu ai deschisa nicio conversatie de ajutor.");
	new helpmeid,sendername[MAX_PLAYER_NAME],giveplayer[30],string[100];
	if(sscanf(params, "u", helpmeid)) return SCM(playerid,-1,"{B8DBFF}Folosire: /closereport [playerid/PartOfName]");
	if(!IsPlayerConnected(helpmeid)) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Acest jucator nu e online.");
	if(reportaccepted[helpmeid] != 1) return SCM(playerid, 0xFFFFFFFF, "{FFB870}Invalid report ID.");
	reportaccepted[helpmeid] = -1;
	reportsend[helpmeid] = -1;
	adminacceptedreport[helpmeid] = -1;
	playerhavereport[playerid] = -1;
	GetPlayerName(playerid, sendername,sizeof(sendername));
	format(string, sizeof(string),"{FFFF45}Adminul %s ti-a inchis reportul.",sendername);
	SCM(helpmeid,COLOR_WHITE,string);
	GetPlayerName(helpmeid,giveplayer,sizeof(giveplayer));
	format(string, sizeof(string),"{FFFF45}I-ai inchis reportul lui %s.",giveplayer);
	SCM(playerid,COLOR_WHITE,string);
	return 1;
}
alias:closereport("cr");
//==============================================================================
CMD:rc(playerid, params[])
{
    if(reportaccepted[playerid] == -1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_WHITE,"{FFFFCC}Nu ai deschisa nicio conversatie de ajutor.");
    if(playerhavereport[playerid] == -1 && PlayerInfo[playerid][pAdmin] >= 1) return SCM(playerid,COLOR_WHITE,"{FFFFCC}Nu ai deschisa nicio conversatie de ajutor.");
    new helpmetext[280],stringhelper[280],stringplayer[280],sendername[MAX_PLAYER_NAME],playeracctext,adminacctext;
    GetPlayerName(playerid,sendername,sizeof(sendername));
	if(playerhavereport[playerid] >= 0) {
    	playeracctext = playerhavereport[playerid];
    }
	if(adminacceptedreport[playerid] >= 0) {
	 	adminacctext = adminacceptedreport[playerid];
 	}
    if(sscanf(params, "s[280]", helpmetext)) return SCM(playerid,-1,"{B8DBFF}Folosire: /rc [text]");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
        format(stringhelper,sizeof(stringhelper),"{FFFF45}Admin %s: %s",sendername,helpmetext);
        SCM(playeracctext,COLOR_WHITE,stringhelper);
        SCM(playerid,COLOR_WHITE,stringhelper);
    }
    else
    {
        format(stringplayer,sizeof(stringplayer),"{FFFF45}Player %s: %s",sendername,helpmetext);
        SCM(adminacctext,COLOR_WHITE,stringplayer);
        SCM(playerid,COLOR_WHITE,stringplayer);
	}
	return 1;
}
//==============================================================================
CMD:helpme(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(helpmesend[playerid] == 1) return SCM(playerid,COLOR_WHITE,"{f03337}Ai trimis deja o cerere de ajutor.");
		if(helpmeaccepted[playerid] == 1) return SCM(playerid,COLOR_WHITE,"{f03337}Ai trimis deja o cerere de ajutor.");
		if(PlayerInfo[playerid][pHelper] == 1) return SCM(playerid,0xFFFFFFFF, "{FFB870}Nu poti folosi comanda daca esti helper.");
		new sendername[MAX_PLAYER_NAME],string[250],helptext[250];
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    if(sscanf(params,"s[250]",helptext)) return SCM(playerid,-1,"{B8DBFF}Folosire: /helpme [Message]");
		format(string, sizeof(string), "{FFFF45}%s (%d) intrebare: %s.", sendername,playerid,helptext);
		SendHelperMessage(COLOR_WHITE,string);
		format(string, sizeof(string), "{FFFF45}Foloseste [/accept help %d] pentru a accepta cererea de ajutor.", playerid);
		SendHelperMessage(COLOR_WHITE,string);
		helpmesend[playerid] = 1;
		SCM(playerid, COLOR_WHITE,"{FFFF45}Cererea de ajutor a fost trimisi echipei de Helperi.");
		SetPVarString(playerid, "Help", helptext);
		helps++;
	}
	return 1;
}
alias:helpme("n");
//==============================================================================
CMD:helps(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new iString[712],string[128],count= 0,titlestring[50],name[30];
		if(PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_WHITE, "{5CAD5C}Nu esti helper.");
		foreach(new i: Player)
		{
	    	if(GetPVarString(i, "Help", string, 128))
	    	{
	        	GetPVarString(i, "Help", string, sizeof(string));
	        	count++;
	        	GetPlayerName(i, name,sizeof(name));
	        	format(string, sizeof(string), "Help: %s(%d) - ID(%d)\n",name,i,i);
	        	strcat(iString,string);
			}
		}
    	format(titlestring, sizeof(titlestring), "Pending Help: %d", count);
		SPD(playerid, DIALOG_NULL, DIALOG_STYLE_LIST, titlestring, iString, "Close", "");
		SCM(playerid, 0xFFFFFFFF, "{FFFF00}Foloseste /checkh pentru a alege o cerere de ajutor din lista de asteptari.");
		if(count == 0) return SCM(playerid,COLOR_WHITE,"{FFFF45}Nicio cerere de ajutor disponibila.");
 	}
	return 1;
}
//==============================================================================
CMD:checkh(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new id,string[128],name[30];
		if(PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_WHITE, "{5CAD5C}Nu esti helper.");
		if(sscanf(params, "u", id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /checkh [playerid/PartOfName]");
	    if(GetPVarString(id, "Help", string, 128))
	    {
	        GetPVarString(id, "Help", string, sizeof(string));
	        GetPlayerName(id, name,sizeof(name));
	        format(string, sizeof(string), "{FFFF45}Help from %s(%d): %s.",name,id, string);
	        SCM(playerid, COLOR_WHITE, string);
		}
 	}
	return 1;
}
//==============================================================================
CMD:closeh(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_WHITE, "{5CAD5C}Nu esti helper.");
		if(playerhavehelp[playerid] == -1) return SCM(playerid,COLOR_WHITE,"{FFFFCC}Nu ai deschisa o cerere de ajutor.");
		new helpmeid,sendername[MAX_PLAYER_NAME],giveplayer[30],string[100];
		if(sscanf(params, "u", helpmeid)) return SCM(playerid,-1,"{B8DBFF}Folosire: /closeh [playerid/PartOfName]");
		if(NOON(helpmeid));
		if(helpmeaccepted[helpmeid] != 1) return SCM(playerid, 0xFFFFFFFF, "{FFB870}Invalid help ID.");
		helpmeaccepted[helpmeid] = -1;
		helpmesend[helpmeid] = -1;
		adminacceptedhelp[helpmeid] = -1;
		playerhavehelp[playerid] = -1;
		GetPlayerName(playerid, sendername,sizeof(sendername));
		format(string, sizeof(string),"{FFFF45}Helper %s ti-a inchis cererea de ajutor.",sendername);
 		SCM(helpmeid,COLOR_WHITE,string);
 		GetPlayerName(helpmeid,giveplayer,sizeof(giveplayer));
 		format(string, sizeof(string),"{FFFF45}I-ai inchis cererea de ajutor lui %s.",giveplayer);
 		SCM(playerid,COLOR_WHITE,string);
  	}
	return 1;
}
//==============================================================================
CMD:hc(playerid, params[])
{
    if(helpmeaccepted[playerid] == -1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid,COLOR_WHITE,"{FFFFCC}Nu ai deschisa o cerere de ajutor.");
    if(playerhavehelp[playerid] == -1 && PlayerInfo[playerid][pHelper] >= 1) return SCM(playerid,COLOR_WHITE,"{FFFFCC}Nu ai deschisa o cerere de ajutor.");
    new helpmetext[280],stringhelper[280],stringplayer[280],sendername[MAX_PLAYER_NAME],playeracctext,adminacctext;
    GetPlayerName(playerid,sendername,sizeof(sendername));
	if(playerhavehelp[playerid] >= 0) {
    	playeracctext = playerhavehelp[playerid];
    }
	if(adminacceptedhelp[playerid] >= 0) {
	 	adminacctext = adminacceptedhelp[playerid];
 	}
    if(sscanf(params, "s[280]", helpmetext)) return SCM(playerid,-1,"{B8DBFF}Folosire: /hc [Message]");
    if(PlayerInfo[playerid][pHelper] >= 1)
    {
        format(stringhelper,sizeof(stringhelper),"{FFFF45}Helper %s: %s",sendername,helpmetext);
        SCM(playeracctext,COLOR_WHITE,stringhelper);
        SCM(playerid,COLOR_WHITE,stringhelper);
    }
    else
    {
        format(stringplayer,sizeof(stringplayer),"{FFFF45}Player %s: %s",sendername,helpmetext);
        SCM(adminacctext,COLOR_WHITE,stringplayer);
        SCM(playerid,COLOR_WHITE,stringplayer);
	}
	return 1;
}
//==============================================================================
CMD:buyglasses(playerid, params[])
{
	if(BizzEntered[playerid] == -1) return 1;
	if(GetPlayerCash(playerid) < 5000) return SCM(playerid,COLOR_YELLOW2,"Ai nevoie de 5000$ pentru a cumpara o pereche de ochelari.");
	if(BizzInfo[BizzEntered[playerid]][bType] != 11) return SCM(playerid,COLOR_YELLOW2,"Nu esti la un magazin de haine!");
	ShowModelSelectionMenu(playerid, glasseslist, "Glasses");
	return 1;
}
//==============================================================================
CMD:fly(playerid, params[])
{
  	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
  	if(FlyMode[playerid] == 0)
	{
		FlyMode[playerid] = 1;
		InitFly(playerid);
		StartFly(playerid);
		SetPlayerHealthEx(playerid, 50000);
		new string[128];
		format(string, sizeof(string), "AdmCmd: %s a folosit comanda /fly.",GetName(playerid));
		SendAdminMessage(string,1);
	}
  	else if(FlyMode[playerid] == 1)
	{
		FlyMode[playerid] = 0;
		StopFly(playerid);
		SetPlayerHealthEx(playerid, 99.9);
 	}
	return 1;
}
//==============================================================================
CMD:setpremium(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	 	new string[256], playa, zile;
	 	if(sscanf(params,"ui",playa,zile)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /setpremium [playerid/PartOfName] [zile(min 1 / max 60)]");
	   	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	   	if(NOON(playa));
		if(playa == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
		if(zile > 0 && zile < 61)
		{
			new year, month, day;
			getdate(year, month, day);
			day += zile;
			if(IsMonth31(month))
			{
				if(day > 31)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 31) day -= 31;
					}
					else while(day > 31) day -= 31;
				}
			}
			else if(!IsMonth31(month))
			{
				if(day > 30)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 30) day -= 30;
					}
					else while(day > 30) day -= 30;
				}
			}
			else if(!IsMonth31(month) && IsMonth29(year) && month == 2)
			{
				if(day > 29)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 29) day -= 29;
					}
					else while(day > 29) day -= 29;
				}
			}
			else if(!IsMonth31(month) && !IsMonth29(year) && month == 2)
			{
				if(day > 28)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 28) day -= 28;
					}
					else while(day > 28) day -= 28;
				}
			}
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `TempPremiumDay`='%d', `TempPremiumMonth`='%d', `TempPremiumYear`='%d' WHERE `name`='%s'", day, month, year, PlayerInfo[playa][pNamePlayer]);
			mysql_tquery(SQL, string, "","");
			//--------------------------------------------------------------
			PlayerInfo[playa][pPremium] = 1;
			pUpdate(playa,pPremiumx);
        }
		else if(zile == 0)
		{
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `TempPremiumDay`='0', `TempPremiumMonth`='0', `TempPremiumYear`='0' WHERE `name`='%s'", PlayerInfo[playa][pNamePlayer]);
			mysql_tquery(SQL, string, "","");
			//--------------------------------------------------------------
			PlayerInfo[playa][pPremium] = 0;
			pUpdate(playa,pPremiumx);
		}
        else return SCM(playerid, COLOR_YELLOW2,"Nu poti pune acest numar de zile!");
		format(string, sizeof(string), "AdmCmd: %s i-a setat lui %s contul premium la %d zile.",GetName(playerid),GetName(playa),zile);
		SendAdminMessage(string, 1);
	}
	return 1;
}
//==============================================================================
CMD:fixveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128];
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-o masina!");
		if(GetPlayerWantedLevelEx(playerid) > 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda daca ai wanted!");
		RepairVehicle(GetPlayerVehicleID(playerid));
		SetVehicleHealth(GetPlayerVehicleID(playerid),999.9);
		format(string,sizeof(string),"AdmCmd: %s si-a reparat vehiculul.",GetName(playerid));
		SendAdminMessage(string, 2);
 	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
alias:fixveh("fv");
//==============================================================================
CMD:setadmin(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	 	new string[128], admin, pName[MAX_PLAYER_NAME], level, sendername[MAX_PLAYER_NAME];
		if(PlayerInfo[playerid][pAdmin] == 6 || IsPlayerAdmin(playerid) || IsPlayerScripter(playerid))
		{
			if(sscanf(params,"ui",admin,level)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /setadmin [playerid/PartOfName] [level]");
			if(NOON(admin));
			if(!IsPlayerAdmin(playerid) && level > 6) return 1;
			GetPlayerName(playerid,sendername,sizeof(sendername));
			GetPlayerName(admin,pName,sizeof(pName));
			PlayerInfo[admin][pAdmin] = level;
			format(string, sizeof(string), "AdmCmd: %s l-a promovat pe %s la admin level %d.", sendername,pName,level);
			SendAdminMessage(string,1);
			format(string, sizeof(string), "Ai fost promovat la Admin Level %d de catre %s.", level,sendername);
			SCM(admin, COLOR_LIGHTBLUE, string);
			UpdateVar(playerid, "Admin", level);
			if(level == 0)
			{
				new query[300];
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Admin`='0', `AdminDays`='0', `AdminHours`='0' WHERE `name`='%s'",PlayerInfo[admin][pNamePlayer]);
				mysql_tquery(SQL, query, "","");
			}
		}
		else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	}
	return 1;
}
//==============================================================================
CMD:sethelper(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	 	new string[128], agent, pName[MAX_PLAYER_NAME], level, sendername[MAX_PLAYER_NAME];
		if(sscanf(params,"ui",agent,level)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /sethelper [playerid/PartOfName] [level]");
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
		if(NOON(agent));
		if(agent == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
		if(level > 4) return 1;
		GetPlayerName(playerid,sendername,sizeof(sendername));
		GetPlayerName(agent,pName,sizeof(pName));
		PlayerInfo[agent][pHelper] = level;
		format(string, sizeof(string), "AdmCmd: %s l-a promovat pe %s la helper level %d.", sendername,pName,level);
		SendAdminMessage(string,1);
		format(string, sizeof(string), "Ai fost promovat la Helper Level %d de catre %s.", level,sendername);
		SCM(agent, COLOR_LIGHTBLUE, string);
		UpdateVar(playerid, "Helper", level);
		if(level == 0)
		{
		    new query[400];
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Helper` = '0', `HelperDays` = '0', `HelperHours` = '0' WHERE `name` = '%s'",PlayerInfo[agent][pNamePlayer]);
			mysql_tquery(SQL, query);
		}
	}
	return 1;
}
//==============================================================================
CMD:gotols(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 1534.3622,-1675.2321,13.3828);
			}
			else {
				SetPlayerPosEx(playerid,1534.3622,-1675.2321,13.3828);
			}
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
			FactionEntered[playerid] = -1;
			HouseEntered[playerid] = -1;
			BizzEntered[playerid] = -1;
		}
		else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	}
	return 1;
}
//==============================================================================
CMD:gotospawn(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 857.6957,-1718.6447,13.5519);
			}
			else { 
				SetPlayerPosEx(playerid,857.6957,-1718.6447,13.5519); 
			}
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			FactionEntered[playerid] = -1;
			HouseEntered[playerid] = -1;
			BizzEntered[playerid] = -1;
		}
		else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	}
	return 1;
}
//==============================================================================
CMD:gotolv(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 1699.2, 1435.1, 10.7);
			}
			else { 
				SetPlayerPosEx(playerid,1699.2,1435.1, 10.7); 
			}
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
			FactionEntered[playerid] = -1;
			HouseEntered[playerid] = -1;
			BizzEntered[playerid] = -1;
		}
		else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT); 
	}
	return 1;
}
//==============================================================================
CMD:gotosf(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), -1417.0,-295.8,14.1);
			}
			else { 
				SetPlayerPosEx(playerid,-1417.0,-295.8,14.1); 
			}
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
			FactionEntered[playerid] = -1;
			HouseEntered[playerid] = -1;
			BizzEntered[playerid] = -1;
		}
		else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT); 
	}
	return 1;
}
//==============================================================================
CMD:mark(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	SCM(playerid,COLOR_GRAD2,"Destinatia teleportarii salvata!");
	format(string,sizeof(string),"AdmCmd: %s a folosit comanda /mark",GetName(playerid));
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:gotomark(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
		if(TeleportDest[playerid][0] == 0.0 && TeleportDest[playerid][1] == 0.0 && TeleportDest[playerid][2] == 0.0) return SCM(playerid,COLOR_YELLOW2,"Nu ai salvat nicio locatie anterioara.");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 4)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			}
			else { 
				SetPlayerPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]); 
			}
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
			new str[128];
			format(str,sizeof(str),"AdmCmd: %s a folosit comanda /gotomark.",GetName(playerid));
			SendAdminMessage(str,5);
		}
		else return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	}
	return 1;
}
//==============================================================================
CMD:gotom(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	    {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), -2317.8091,-1637.5575,483.7031);
			}
			else { 
				SetPlayerPosEx(playerid, -2317.8091,-1637.5575,483.7031); 
			}
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
			FactionEntered[playerid] = -1;
			HouseEntered[playerid] = -1;
			BizzEntered[playerid] = -1;
		}
		else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT); 
	}
	return 1;
}
//==============================================================================
CMD:gotoin(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
	 	if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
	    if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 1398.8822,-27.6516,1000.9069);
			}
			else
			{
				SetPlayerPosEx(playerid, 1398.8822,-27.6516,1000.9069);
				SetPlayerVirtualWorld(playerid,-1);
			}
			GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
			SetPlayerInteriorEx(playerid,1);
		}
		else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
 	}
	return 1;
}
//==============================================================================
CMD:sethp(playerid, params[])
{
	new pprimeste, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128], viata;
	if(sscanf(params,"ui",pprimeste,viata)) return SCM(playerid,-1, "{B8DBFF}Folosire: /sethp [playerid/PartOfName] [viata]");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	if(pprimeste == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
	GetPlayerName(pprimeste, pName, sizeof(pName));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	SetPlayerHealthEx(pprimeste, viata);
	format(string, sizeof(string), "AdmCmd: %s i-a setat viata lui %s la %d.", sendername,pName,viata);
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:healme(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	SetPlayerHealthEx(playerid, 99.9);
	return 1;
}
//==============================================================================
CMD:setarmor(playerid, params[])
{
	new pprimeste, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128], armura;
	if(sscanf(params,"ui",pprimeste,armura)) return SCM(playerid,-1, "{B8DBFF}Folosire: /setarmor [playerid/PartOfName] [armura]");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	if(pprimeste == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
	GetPlayerName(pprimeste, pName, sizeof(pName));
	GetPlayerName(playerid, sendername, sizeof(sendername));
	SetPlayerArmourEx(pprimeste, armura);
	format(string, sizeof(string), "AdmCmd: %s i-a setat armura lui %s la %d.", sendername,pName,armura);
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:takeguns(playerid, params[])
{
    new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(GetPlayerCash(playerid) < 5000) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficienti bani, ai nevoie de 5000$!");
	if(faction == 5 || faction == 6 || faction == 11 || faction == 12 || faction == 13)
	{
		if(FactionEntered[playerid] == 5 || FactionEntered[playerid] == 6 || FactionEntered[playerid] == 11 || FactionEntered[playerid] == 12 || FactionEntered[playerid] == 13)
		{
			new mats = 0, string[MAX_STRING];
			if(PlayerInfo[playerid][pGunLic] <= 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai licenta de arme!");
			if(FactionInfo[faction][fSafeMats] < 10000) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda cat timp seiful nu detine macar 10.000 materiale!");
			if(PlayerInfo[playerid][pFactionRank] == 1)
			{
				GivePlayerWeaponEx(playerid, 24, 50);
				GivePlayerWeaponEx(playerid, 25, 50);
				GivePlayerCash(playerid, -2000);
				FactionInfo[faction][fSafeMoney] += 5000;
				FactionInfo[faction][fSafeMats] -= 700;
				mats = 700;
			}
			else if(PlayerInfo[playerid][pFactionRank] == 2)
			{
				GivePlayerWeaponEx(playerid, 24, 100);
				GivePlayerWeaponEx(playerid, 29, 200);
				GivePlayerCash(playerid, -2500);
				FactionInfo[faction][fSafeMoney] += 5000;
				FactionInfo[faction][fSafeMats] -= 1300;
				mats = 1300;
			}
			else if(PlayerInfo[playerid][pFactionRank] == 3)
			{
				GivePlayerWeaponEx(playerid, 24, 150);
				GivePlayerWeaponEx(playerid, 28, 200);
				GivePlayerWeaponEx(playerid, 25, 100);
				GivePlayerCash(playerid, -3000);
				FactionInfo[faction][fSafeMoney] += 5000;
				FactionInfo[faction][fSafeMats] -= 1900;
				mats = 1900;
			}
			else if(PlayerInfo[playerid][pFactionRank] == 4)
			{
				GivePlayerWeaponEx(playerid, 24, 150);
				GivePlayerWeaponEx(playerid, 28, 100);
				GivePlayerWeaponEx(playerid, 30, 200);
				GivePlayerCash(playerid, -4000);
				FactionInfo[faction][fSafeMoney] += 5000;
				FactionInfo[faction][fSafeMats] -= 2500;
				mats = 2500;
			}
			else if(PlayerInfo[playerid][pFactionRank] == 5)
			{
				GivePlayerWeaponEx(playerid, 24, 150);
				GivePlayerWeaponEx(playerid, 28, 100);
				GivePlayerWeaponEx(playerid, 30, 200);
				GivePlayerWeaponEx(playerid, 25, 50);
				GivePlayerWeaponEx(playerid, 33, 50);
				GivePlayerCash(playerid, -5000);
				FactionInfo[faction][fSafeMoney] += 5000;
				FactionInfo[faction][fSafeMats] -= 3100;
				mats = 3100;
			}
			else if(PlayerInfo[playerid][pFactionRank] == 6)
			{
				GivePlayerWeaponEx(playerid, 24, 200);
				GivePlayerWeaponEx(playerid, 28, 300);
				GivePlayerWeaponEx(playerid, 30, 400);
				GivePlayerWeaponEx(playerid, 25, 100);
				GivePlayerWeaponEx(playerid, 33, 100);
				GivePlayerCash(playerid, -5000);
				FactionInfo[faction][fSafeMoney] += 5000;
				FactionInfo[faction][fSafeMats] -= 3700;
				mats = 3700;
			}
			format(string, sizeof(string), "* %s a luat arme din HQ, s-au folosit %d materiale din seif. (rank %d)",PlayerInfo[playerid][pNamePlayer],mats,PlayerInfo[playerid][pFactionRank]);
			SendFactionMessage(GetPlayerFaction(playerid), TEAM_AZTECAS_COLOR, string);
		}
		else return SCM(playerid, COLOR_YELLOW2, "Nu esti in HQ!");
	}
	else if(faction == 14)
	{
		if(FactionEntered[playerid] == 14)
		{
			if(PlayerInfo[playerid][pGunLic] <= 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai licenta de arme!");
			GivePlayerWeaponEx(playerid, 18, 5);
			GivePlayerWeaponEx(playerid, 24, 100);
			GivePlayerWeaponEx(playerid, 30, 200);
			GivePlayerWeaponEx(playerid, 26, 30);
			GivePlayerWeaponEx(playerid, 39, 5);
			GivePlayerWeaponEx(playerid, 4, 1);
			GivePlayerCash(playerid, -10000);
			FactionInfo[faction][fSafeMoney] += 10000;
		}
		else return SCM(playerid, COLOR_YELLOW2, "Nu esti in HQ!");
	}
	return 1;
}
//==============================================================================
CMD:fill(playerid, params[])
{
    new veh = GetPlayerVehicleID(playerid), Float:Tbenzina = 100 - Gas[veh]; 
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii intr-un vehicul!");
	if(IsABike(veh) || IsABoat(veh) || IsAPlane(veh)) return SCM(playerid,COLOR_YELLOW2,"Acestui vehicul nu-i poti face plinul.");
	if(EngineSTATE[veh] == 1) return SCM(playerid,COLOR_YELLOW2,"Opreste motorul inainte de a face plinul!");
	if(!IsPlayerNearPump(playerid))
	{
		if(Gas[veh] > 80) return SCM(playerid, COLOR_YELLOW2, "Vehiculul tau are suficient combustibil.");
		if(PlayerInfo[playerid][pFuel] == 0) return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu aveti combustibil in canistra.");
		SCM(playerid, COLOR_LIGHTGREEN, "Felicitari, ai alimentat vehiculul cu 20 combustibil.");
		Gas[veh] += 20.5;
		PlayerInfo[playerid][pFuel] = 0;
		pUpdate(playerid,pFuelx);
	}
	else
	{
		if(Gas[veh] > 90) return SCM(playerid, COLOR_YELLOW2, "Vehiculul tau are suficient combustibil.");
		if(Refueling[playerid] == 1) return SCM(playerid,COLOR_GRAD2,"Iti faci deja plinul la vehicul.");
		new price = floatround(Tbenzina * BizzInfo[GetBusinessID(playerid)][bEntranceCost] / 20);
		if(GetPlayerCash(playerid) < price) return SFM(playerid,COLOR_GRAD2,"Ne pare rau, dar nu ai %s$ pentru a alimenta vehiculul.",FormatNumber(price));
		BizzInfo[GetBusinessID(playerid)][bMoney] += price;
		SaveBusiness(GetBusinessID(playerid));
		TogglePlayerControllable(playerid, false);
		PlayerTextDrawShow(playerid, FuelText);
		FuelBought[playerid] = 0;
		Refueling[playerid] = 1;
		
	}
	return 1;
}
//==============================================================================
CMD:fillgascan(playerid, params[])
{
	if(PlayerInfo[playerid][pCanistra] == 0) return SCM(playerid,COLOR_YELLOW2,"Ne pare rau dar nu aveti o canistra!");
	if(!IsPlayerNearPump(playerid)) return SCM(playerid,COLOR_YELLOW2,"Ne pare rau, dar nu te afli intr-o statie de benzina.");
	if(PlayerInfo[playerid][pFuel] != 20)
	{
		PlayerInfo[playerid][pFuel] = 20;
		GivePlayerCash(playerid, -200);
		pUpdate(playerid, pFuelx);
		SCM(playerid,COLOR_LIGHTGREEN,"Peco: Ti-ai umplut canistra cu 20 combustibil pentru 200$.");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Ne pare rau, dar canistra dumneavoastra este deja plina.");
	return 1;
}
//==============================================================================
CMD:buy(playerid, params[])
{
	if(BizzEntered[playerid] == -1) return 1;
	if(BizzInfo[BizzEntered[playerid]][bType] == 6) 
	{
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
		new bstring[500];
		strcat(bstring, "Telefon\t3000$\n");
		strcat(bstring, "Carte de Telefoane\t3000$\n");
		strcat(bstring, "Undita\t2000$\n");
		strcat(bstring, "MP3\t5000$\n");
		strcat(bstring, "Canistra\t5000$\n");
		strcat(bstring, "Momeala\t500$\n");
		strcat(bstring, "Artificii\t2500$\n");
		SPD(playerid,DIALOG_BUY,DIALOG_STYLE_TABLIST,"Catalog:",bstring,"Alege","Inchide");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Nu esti intr-un 24/7!");
	return 1;
}
//==============================================================================
CMD:gps(playerid, params[])
{
	if(CP[playerid] > 0) return SCM(playerid,COLOR_YELLOW2,"Ai deja un checkpoint activ, foloseste /killcp pentru a-l anula.");
	new str[128];
	strcat(str, "San Andreas\n");
	strcat(str, "Locatii joburi\n");
	strcat(str, "Cauta case\n");
	strcat(str, "Cauta afaceri\n");
	if(GiftInfo[gOpen] == 1) strcat(str, "{CCDE0D}Locatie giftbox\n");
	SPD(playerid, DIALOG_GPS1, DIALOG_STYLE_LIST,"GPS:",str,"Alege","Inchide");
	return 1;
}
//==============================================================================
CMD:seatbelt(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME], string[128];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	new vehicles = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(Centura[playerid] == false)
		{
			if(!IsAMotorbike(vehicles) && !IsABike(vehicles))
			{
				Centura[playerid] = true;
				format(string, sizeof(string), " * %s si-a pus centura.", sendername);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				Centura[playerid] = true;
				if(!IsPlayerAttachedObjectSlotUsed(playerid,0)) SetPlayerAttachedObject(playerid, 0, 18645, 2, 0.070890, 0.007468, -0.006614, 94.054161, 79.343078, 355.367126, 1.000000, 1.000000, 1.000000 );
				format(string, sizeof(string), " * %s si-a pus casca.", sendername);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			if(!IsAMotorbike(vehicles) && !IsABike(vehicles))
			{
				Centura[playerid] = false;
				format(string, sizeof(string), " * %s si-a scos centura.", sendername);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				Centura[playerid] = false;
				if(IsPlayerAttachedObjectSlotUsed(playerid,0)) RemovePlayerAttachedObject(playerid,0);
				format(string, sizeof(string), " * %s si-a scos casca.", sendername);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	}
	else return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii intr-un vehicul pentru a folosi aceasta comanda.");
	return 1;
}
alias:seatbelt("helmet");
//==============================================================================
CMD:bigears(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 0) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(GetPVarInt(playerid, "BigEar") == 0)
	{
		SetPVarInt(playerid, "BigEar", 1);
		SCM(playerid, COLOR_GRAD2, "Urechile tale au crescut");
	}
	else if(GetPVarInt(playerid, "BigEar") == 1)
	{
		SetPVarInt(playerid, "BigEar", 0);
		SCM(playerid, COLOR_GRAD2, "Urechile tale s-au micsorat");
	}
	return 1;
}
//==============================================================================
CMD:gpforall(playerid, params[])
{
	new suma, sendername[MAX_PLAYER_NAME], string[128];
	if(sscanf(params,"d",suma)) return SCM(playerid,-1,"{B8DBFF}Folosire: /gpforall [gp]");
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	GetPlayerName(playerid,sendername,sizeof(sendername));
	foreach(new i: Player)
	{
		PlayerInfo[i][pGpoint] += suma;
		format(string, sizeof(string), "Adminul %s a dat la toti playerii online %d GP.", sendername, suma);
		pUpdate(i, pGpointx);
	}
	SCMAll(COLOR_LIGHTBLUE, string);
	return 1;
}
//==============================================================================
CMD:moneyforall(playerid, params[])
{
	new suma, sendername[MAX_PLAYER_NAME], string[128];
	if(sscanf(params,"d",suma)) return SCM(playerid,-1,"{B8DBFF}Folosire: /moneyforall [suma]");
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	GetPlayerName(playerid,sendername,sizeof(sendername));
	foreach(new i: Player)
	{
		GivePlayerCash(i, suma);
		format(string, sizeof(string), "Adminul %s a dat la toti playerii online %s$.", sendername,FormatNumber(suma));
	}
	SCMAll(COLOR_LIGHTBLUE, string);
	return 1;
}
//==============================================================================
CMD:buydrink(playerid, params[])
{
	if(BizzEntered[playerid] == -1) return 1;
	if(BizzInfo[BizzEntered[playerid]][bType] == 3) {
		SPD(playerid,DIALOG_BAR,DIALOG_STYLE_TABLIST,"Bar:","Stock Bar Cigars\t$500\nSprunk\t$500\nBeer\t$600\nWine\t$1000","Select","Exit");
	}
	else return SCM(playerid, COLOR_WHITE, "Nu esti intr-un bar.");
    return 1;
}
//==============================================================================
CMD:respawn(playerid, params[])
{
	new string[128], prespawn;
	if(sscanf(params,"u",prespawn)) return SCM(playerid,-1, "{B8DBFF}Folosire: /respawn [playerid/PartOfName]");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
		if(NOON(prespawn));
		if(prespawn == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
		if(PlayerInfo[playerid][pAdmin] < PlayerInfo[prespawn][pAdmin]) return SCM(playerid,COLOR_YELLOW2,"Nu poti da respawn la un admin cu grad mai mare ca tine!");
		SpawnPlayer(prespawn);
		format(string, sizeof(string), "AdmCmd: %s a fost respawnat de catre %s.",GetName(prespawn),GetName(playerid));
		SendAdminMessage(string,1);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:fvr(playerid, params[])
{
    new string[128], faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(PlayerInfo[playerid][pFactionRank] < 5) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
	{
		if(IsValidVehicle(v))
		{
			if(StaticVeh[v][svFaction] == faction && faction > 0)
			{
				if(!IsVehicleOccupied(v))
				{
					Gas[v] = 100.5;
					SetVehicleToRespawn(v);
				}
			}
		}
	}
	format(string,sizeof(string)," * %s a respawnat toate vehiculele factiunii!",GetName(playerid));
	SendFactionMessage(faction, TEAM_AZTECAS_COLOR, string);
	return 1;
}
//==============================================================================
CMD:rob(playerid, params[])
{
    if(GetPlayerScoreEx(playerid) < 5) return SCM(playerid,COLOR_YELLOW2,"Nu poti da rob daca ai level mai mic ca 5.");
	if(PlayerInfo[playerid][pRobPoint] < 10) return SCM(playerid,COLOR_YELLOW2,"Nu ai suficiente punce de jaf, ai devoie de 10!");
	if(GetPlayerWantedLevelEx(playerid) >= 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti da rob daca esti cautat de politie!");
	if(IsACop(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu poti da rob daca esti politist!");
	for(new b = 1; b < MAX_BUSINESS; b++)
	{
		if(BizzEntered[playerid] == b)
		{
			SCM(playerid,COLOR_GRAD2,"Asteapta 5 secunde pentru a jefui afacerea!");
			RobTime[playerid] = 1;
			if(PlayerInfo[playerid][pPremium] == 1) PlayerInfo[playerid][pRobPoint] -= 8;
			if(PlayerInfo[playerid][pPremium] == 0) PlayerInfo[playerid][pRobPoint] -= 10;
			SetTimerEx_("Rob",10000,10000,1,"i",playerid);
			RobTimer[playerid] = 5;
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[playerid][pQuest][m] == 10) CheckQuest(playerid, m);
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:spawnchange(playerid) return SPD(playerid,DIALOG_SPAWN,DIALOG_STYLE_LIST,"Spawn:","Spawn obisnuit\nCasa detinuta sau la cea care ai rent\nHQ","Alege","Inchide");
//==============================================================================
CMD:fpk(playerid, params[])
{
    new string[256], sendername[MAX_PLAYER_NAME], pafara, pName[MAX_PLAYER_NAME], motiv[32], FP;
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"uds[32]",pafara,FP,motiv)) return SCM(playerid,-1, "{B8DBFF}Folosire: /fpk [playerid/PartOfName] [1 with Fpunish/0 without Fpunish] [motiv]");
	if(NOON(pafara));
	if(pafara == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerName(pafara,pName,sizeof(pName));
	if(PlayerInfo[pafara][pLeader] >= 1)
	{
		format(string, sizeof(string), "AdmCmd: %s a fost dat afara din factiune de catre %s. Motiv: %s.", pName, sendername, motiv);
		SendAdminMessage(string,1);
		format(string, sizeof(string), "Ai fost dat afara din factiune de catre Adminul %s.",sendername);
		SCM(pafara, COLOR_LIGHTBLUE, string);
		PlayerInfo[pafara][pMember] = 0;
		PlayerInfo[pafara][pLeader] = 0;
		PlayerInfo[pafara][pFactionRank] = 0;
		SetPlayerToTeam(pafara);
		if(FP == 1) PlayerInfo[pafara][pPunish] = 60; 
		if(FP == 0) PlayerInfo[pafara][pPunish] = 0; 
		SetPlayerTeamColor(pafara);
		SetPlayerSkinEx(pafara, 289);
		StrmidEx(FactionInfo[PlayerInfo[pafara][pLeader]][fLeader], "None");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este lider intr-o factiune!");
	SaveFactions(PlayerInfo[pafara][pLeader]);
	pUpdate(pafara,pLeaderx);
	pUpdate(pafara,pMemberx);
	//--------------------------------------------------------------
	new query[420];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction`='0', `FactionDays`='0', `LeaderHours`='0', `FactionRank`='0' WHERE `name`='%s'",PlayerInfo[pafara][pNamePlayer]);
	mysql_tquery(SQL, query, "","");
	return 1;
}
//==============================================================================
CMD:mapredau(playerid, params[])
{
	new sendername[MAX_PLAYER_NAME], string[70];
	new rand = random(sizeof(Inchisoare));
	if(GetPlayerWantedLevelEx(playerid) > 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 250.0502,67.6689,1003.6406)) return SCM(playerid, COLOR_YELLOW2, "Nu esti la centrul LSPD.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "ANUNT: %s s-a predat avand wanted level %d.",sendername, GetPlayerWantedLevelEx(playerid));
		SCMAll(COLOR_LIGHT_RED, string);
		if(GetPlayerWantedLevelEx(playerid) == 2)
		{
			GivePlayerCash(playerid, -4000);
			PlayerInfo[playerid][pJailTime] = 8 * 60;
			FactionInfo[1][fSafeMoney] += 4000;
		}
		else if(GetPlayerWantedLevelEx(playerid) == 3)
		{
			GivePlayerCash(playerid, -6500);
			PlayerInfo[playerid][pJailTime] = 11 * 60;
			FactionInfo[1][fSafeMoney] += 6500;
		}
		else if(GetPlayerWantedLevelEx(playerid) == 4)
		{
			GivePlayerCash(playerid, -8000);
			PlayerInfo[playerid][pJailTime] = 13 * 60;
			FactionInfo[1][fSafeMoney] += 8000;
		}
		else if(GetPlayerWantedLevelEx(playerid) == 5)
		{
			GivePlayerCash(playerid, -10000);
			PlayerInfo[playerid][pJailTime] = 14 * 60;
			FactionInfo[1][fSafeMoney] += 10000;
		}
		else if(GetPlayerWantedLevelEx(playerid) == 6)
		{
			GivePlayerCash(playerid, -12000);
			PlayerInfo[playerid][pJailTime] = 15 * 60;
			FactionInfo[1][fSafeMoney] += 12000;
		}
		ResetPlayerWeaponsEx(playerid);
		SetPlayerWantedLevelEx(playerid, 0);
		PlayerInfo[playerid][pWantedTime] = 0;
		TogglePlayerControllable(playerid, true);
		SetPlayerArmourEx(playerid, 0.0);
		PlayerInfo[playerid][pJailed] = 1;
		SetPlayerInteriorEx(playerid, 10);
		SetPlayerPosEx(playerid,Inchisoare[rand][0],Inchisoare[rand][1],Inchisoare[rand][2]);
		SaveFactions(1);
		pUpdate(playerid,pJailedx);
		pUpdate(playerid,pJailTimex);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu te poti preda daca ai wanted level 1.");
	return 1;
}
//==============================================================================
CMD:su(playerid, params[])
{
	new suspect, sendername[MAX_PLAYER_NAME], string[128], pName[MAX_PLAYER_NAME], level, motiv[64];
	if(!IsACop(playerid)) return SCM(playerid, COLOR_YELLOW2, "Nu esti politist!");
	if(sscanf(params,"uds[64]",suspect,level,motiv)) return SCM(playerid,-1,"{B8DBFF}Folosire: (/su)spect [playerid/PartOfName] [wanted level] [motiv]");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerName(suspect,pName,sizeof(pName));
	if(level < 1 || level > 6) return SCM(playerid,COLOR_YELLOW2,"Wanted-ul trebuie sa fie cuprins intre 1 si 6.");
	if(NOON(suspect));
	if(PlayerInfo[suspect][pJailTime] != 0) return SCM(playerid,COLOR_YELLOW2,"Acest jucator este deja la inchisoare!");
	if(IsACop(suspect)) return SCM(playerid,COLOR_YELLOW2,"Nu poti da wanted la un politist!");
	if(GetPlayerWantedLevelEx(suspect) < 6)
	{
		SetPlayerWantedLevelEx(suspect, level);
		PlayerInfo[suspect][pWantedTime] = level*450;
		format(string, sizeof(string), "ANUNT: Suspectul %s a primit Wanted %d de la %s. Motiv: %s.",pName,level,sendername,motiv);
		SendTeamMessage(2,COLOR_BLUE,string);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Acest jucator are wanted-ul maxim.");
	return 1;
}
alias:su("suspect");
//==============================================================================
CMD:disarm(playerid, params[])
{
	new string[64], sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], pdisarm;
	if(sscanf(params,"u",pdisarm)) return SCM(playerid,-1,"{B8DBFF}Folosire: /disarm [playerid]");
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(pdisarm == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerName(pdisarm,pName,sizeof(pName));
	ResetPlayerWeaponsEx(pdisarm);
	format(string, sizeof(string), "AdmCmd: %s l-a dezarmat pe %s.",sendername, pName);
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:unjail(playerid, params[])
{
	new string[256], sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], punprison, motiv[64];
	if(sscanf(params,"us[64]",punprison,motiv)) return SCM(playerid,-1,"{B8DBFF}Folosire: /unjail [playerid/PartOfName] [motiv]");
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(punprison == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerName(punprison,pName,sizeof(pName));
	PlayerInfo[punprison][pJailTime] = 0;
	PlayerInfo[punprison][pJailed] = 0;
	PlayerTextDrawHide(punprison, JailTime);
	SetPlayerWorldBounds(punprison, 20000.0,-20000.0,20000.0,-20000.0);
	SetPlayerPosEx(punprison, 245.8962,67.8391,1003.6406);
	FactionEntered[punprison] = 1;
	SetPlayerInteriorEx(punprison, 6);
	PlayerInfo[punprison][pInt] = 6;
	format(string, sizeof(string), "AdmCmd: %s a primit un-jail de la %s. Motiv: %s.", pName, sendername, motiv);
	SendAdminMessage(string,1);
	pUpdate(punprison,pJailedx);
	pUpdate(punprison,pJailTimex);
	return 1;
}
//==============================================================================
alias:licente("licenses");
CMD:licente(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
	    new text[6][20], string[226], mainstring[700];
	    if(PlayerInfo[playerid][pCarLic]) { text[0] = "{3366FF}Valida"; } else { text[0] = "{ff3300}Expirata"; }
	    if(PlayerInfo[playerid][pFlyLic]) { text[1] = "{3366FF}Valida"; } else { text[1] = "{ff3300}Expirata"; }
		if(PlayerInfo[playerid][pBoatLic]) { text[2] = "{3366FF}Valida"; } else { text[2] = "{ff3300}Expirata"; }
	    if(PlayerInfo[playerid][pFishLic]) { text[3] = "{3366FF}Valida"; } else { text[3] = "{ff3300}Expirata"; }
	    if(PlayerInfo[playerid][pGunLic]) { text[4] = "{3366FF}Valida"; } else { text[4] = "{ff3300}Expirata"; }
	    if(PlayerInfo[playerid][pPassport]) { text[5] = "{3366FF}Valid"; } else { text[5] = "{ff3300}Expirat"; }
	    if(PlayerInfo[playerid][pCarLic]) { format(string, sizeof(string), " {ffffff}Licenta de Condus:  %s{FFCC66} %d de ore\n", text[0], PlayerInfo[playerid][pCarLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Condus:  %s\n", text[0], PlayerInfo[playerid][pCarLic]); }
		strcat(mainstring, string);
		if(PlayerInfo[playerid][pFlyLic]) { format(string, sizeof(string), " {ffffff}Licenta de Pilotaj:  %s{FFCC66} %d de ore\n", text[1], PlayerInfo[playerid][pFlyLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Pilotaj:  %s\n", text[1], PlayerInfo[playerid][pFlyLic]); }
		strcat(mainstring, string);
		if(PlayerInfo[playerid][pBoatLic]) { format(string, sizeof(string), " {ffffff}Licenta de Navigat:  %s{FFCC66} %d de ore\n", text[2], PlayerInfo[playerid][pBoatLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Navigat:  %s\n", text[2], PlayerInfo[playerid][pBoatLic]); }
		strcat(mainstring, string);
		if(PlayerInfo[playerid][pFishLic]) { format(string, sizeof(string), " {ffffff}Licenta de Pescuit:  %s{FFCC66} %d de ore\n", text[3], PlayerInfo[playerid][pFishLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Pescuit:  %s\n", text[3], PlayerInfo[playerid][pFishLic]); }
		strcat(mainstring, string);
		if(PlayerInfo[playerid][pGunLic]) { format(string, sizeof(string), " {ffffff}Licenta de Port Arma:  %s{FFCC66} %d de ore\n", text[4], PlayerInfo[playerid][pGunLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Port Arma:  %s\n", text[4], PlayerInfo[playerid][pGunLic]); }
		strcat(mainstring, string);
		if(PlayerInfo[playerid][pPassport]) { format(string, sizeof(string), " {ffffff}Pasaport:  %s{FFCC66} %d de ore\n", text[5], PlayerInfo[playerid][pPassport]); } else { format(string, sizeof(string), " {ffffff}Pasaport:  %s\n", text[5], PlayerInfo[playerid][pPassport]); }
		strcat(mainstring, string);
		format(string, sizeof(string),"{ffffff}Licentele lui %s",GetName(playerid));
		SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,string,mainstring,"Am inteles","");
	}
	return 1;
}
//==============================================================================
CMD:verifica(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new string[128], sendername[MAX_PLAYER_NAME], pverificat;
		if(sscanf(params,"u",pverificat)) return SCM(playerid,-1,"{B8DBFF}Folosire: /verifica [playerid/PartOfName]");
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		if(IsACop(playerid))
		{
  			if(NOON(pverificat));
    	    if(ProxDetectorS(5.0, playerid, pverificat))
			{
				if(Centura[pverificat] == false) format(string, sizeof(string), "{ff3300}Jucatorul %s nu are centura/casca pusa.",GetName(pverificat));
				else if(Centura[pverificat] == true) format(string, sizeof(string), "{0066ff}Jucatorul %s are centura/casca pusa.",GetName(pverificat));
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), " * %s ii verifica centura/casca lui %s.",sendername,GetName(pverificat));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Esti la o distanta prea mare de acest jucator!");
		}
		else return SCM(playerid, COLOR_YELLOW2, PLAYER_COP);
	}
	return 1;
}
//==============================================================================
CMD:changepass(playerid, params[])
{
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
	SPD(playerid,DIALOG_CHANGE_PASS,DIALOG_STYLE_PASSWORD,"Securitate:","Introdu parola pe care o ai acum","Ok","Cancel");
	return 1;
}
//==============================================================================
CMD:setleader(playerid, params[])
{
	new pleader, string[256], pName[MAX_PLAYER_NAME], nrl;
	if(PlayerInfo[playerid][pAdmin] <= 4) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"ui",pleader,nrl)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /setleader [playerid/PartOfName] [Number(1-14)]");
	if(nrl > 14 || nrl < 1) return SCM(playerid, COLOR_YELLOW2, "Numarul factiunilor este cuprins intre 1 si 14!");
	if(NOON(pleader));
	if(pleader == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	if(PlayerInfo[pleader][pMember] > 0 || PlayerInfo[pleader][pPunish] > 0 || PlayerInfo[pleader][pLeader] > 0) return SCM(playerid, COLOR_GREY, "Acel player este deja in Factiune/Punished!");
	GetPlayerName(pleader, pName, sizeof(pName));
	PlayerInfo[pleader][pLeader] = nrl;
	format(string, sizeof(string), "Ai fost promovat Lider la factiunea numarul %d (%s) de catre adminul %s.",nrl,NumeFactiune(nrl),GetName(playerid));
	SCM(pleader, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Ai dat lui %s lider la factiunea numarul %d (%s).", pName,nrl,NumeFactiune(nrl));
	SCM(playerid, COLOR_LIGHTBLUE, string);
	format(string,sizeof(string),"AdmCmd: %s a fost promovat lider la factiunea %s (ID: %d) de catre %s.",pName,NumeFactiune(nrl),nrl,GetName(playerid));
	SendAdminMessage(string,1);
	if(nrl == 1) { SetPlayerSkinEx(pleader,295); StrmidEx(FactionInfo[1][fLeader],PlayerInfo[pleader][pNamePlayer]); } //LSPD
	else if(nrl == 2) { SetPlayerSkinEx(pleader,165); StrmidEx(FactionInfo[2][fLeader],PlayerInfo[pleader][pNamePlayer]); } //FBI
	else if(nrl == 3) { SetPlayerSkinEx(pleader,287); StrmidEx(FactionInfo[3][fLeader],PlayerInfo[pleader][pNamePlayer]); } //San Andreas Government
	else if(nrl == 4) { SetPlayerSkinEx(pleader,228); StrmidEx(FactionInfo[4][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Fire/Ambulance
	else if(nrl == 5) { SetPlayerSkinEx(pleader,115); StrmidEx(FactionInfo[5][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Aztecas
	else if(nrl == 6) { SetPlayerSkinEx(pleader,113); StrmidEx(FactionInfo[6][fLeader],PlayerInfo[pleader][pNamePlayer]); } //The Russian Mafia
	else if(nrl == 7) { SetPlayerSkinEx(pleader,147); StrmidEx(FactionInfo[7][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Mayor
	else if(nrl == 8) { SetPlayerSkinEx(pleader,294); StrmidEx(FactionInfo[8][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Hitmans
	else if(nrl == 9) { SetPlayerSkinEx(pleader,227); StrmidEx(FactionInfo[9][fLeader],PlayerInfo[pleader][pNamePlayer]); } //News Reporters
	else if(nrl == 10) { SetPlayerSkinEx(pleader,61); StrmidEx(FactionInfo[10][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Taxi Cab Company
	else if(nrl == 11) { SetPlayerSkinEx(pleader,271); StrmidEx(FactionInfo[11][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Grove
	else if(nrl == 12) { SetPlayerSkinEx(pleader,110); StrmidEx(FactionInfo[12][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Vagos
	else if(nrl == 13) { SetPlayerSkinEx(pleader,296); StrmidEx(FactionInfo[13][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Ballas
	else if(nrl == 14) { SetPlayerSkinEx(pleader,3); StrmidEx(FactionInfo[14][fLeader],PlayerInfo[pleader][pNamePlayer]); } //Blood Mafia
	PlayerInfo[pleader][pFactionRank] = 6;
	SaveFactions(nrl);
	pUpdate(pleader,pLeaderx);
	SetPlayerTeamColor(pleader);
	SetPlayerToTeam(pleader);
	//--------------------------------------------------------------
	new query[320];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction` = '%d', `FactionRank` = '6' WHERE `name` = '%s'",nrl, PlayerInfo[pleader][pNamePlayer]);
	mysql_tquery(SQL, query);
	return 1;
}
//==============================================================================
CMD:setskin(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new pskin, skin, sendername[MAX_PLAYER_NAME],pName[MAX_PLAYER_NAME], string[128];
		if(sscanf(params,"ui",pskin,skin)) return SCM(playerid,-1, "{B8DBFF}Folosire: /setskin [playerid/PartOfName] [skin id]");
		if(NOON(pskin));
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
		    if(pskin == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
		    if((skin < 1 && skin > 311) || (skin < 25000 && skin > 30000)) return SCM(playerid,COLOR_YELLOW2,"Invalid skin ID!");
			GetPlayerName(pskin, pName, sizeof(pName));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: Skinul lui %s fost schimbat de catre %s.",pName, sendername);
			SendAdminMessage(string,1);
			format(string, sizeof(string), "I-ai setat lui %s skinul %d.", pName,skin);
			SCM(playerid, COLOR_WHITE, string);
		    SetPlayerSkinEx(pskin, skin);
		}
		else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	}
	return 1;
}
//==============================================================================
CMD:cc(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new string[64];
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] == 4)
		{
			foreach(new i: Player)
			{
				if(PlayerInfo[i][pAdmin] == 0)
				{
					for(new j = 0; j < 51; j++) {
						SCM(i, COLOR_WHITE, "");
					}
				}
			}
			GameTextForAll("Chat Sters!", 1000,1);
			format(string, sizeof(string), "AdmCmd: %s a sters chatul.",GetName(playerid));
			SendAdminMessage(string,1);
		}
		else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	}
	return 1;
}
alias:cc("clearchat");
//==============================================================================
CMD:spec(playerid, params[])
{
    new Giveplayerid, string[256];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(sscanf(params,"d",Giveplayerid)) return SCM(playerid,-1,"{B8DBFF}Folosire: /spec [playerid]");
		else if(NOON(Giveplayerid));
		else if(GetPlayerInteriorEx(playerid) != 0) return SCM(playerid,COLOR_GRAD2,"Nu poti folosi comanda in acest interior!");
		else if(GetPlayerWantedLevelEx(playerid) > 0) return SCM(playerid,COLOR_GRAD2,"Nu poti folosi comanda deoarece ai wanted.");
		else if(playerid == Giveplayerid) return SCM(playerid,COLOR_GRAD2,"Nu poti folosi comanda pe tine.");
		else
		{
			if(Specing[playerid] == 1) return SCM(playerid, COLOR_RED, "Urmaresti deja pe altcineva.");
			else
			{
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				format(string, sizeof(string), "AdmCmd: %s [%i] is now spectating %s [%i].", GetName(playerid), playerid, GetName(Giveplayerid), Giveplayerid);
				SendAdminMessage(string, 1);
				Specing[playerid] = 1;
				Spectate[playerid] = Giveplayerid;
				FactionEntered[playerid] = FactionEntered[Giveplayerid];
				HouseEntered[playerid] = FactionEntered[Giveplayerid];
				BizzEntered[playerid] = FactionEntered[Giveplayerid];
			}
			if(!IsPlayerInAnyVehicle(Giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, Giveplayerid);
				SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(Giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(Giveplayerid));
				SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(Giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
			}
	 	}
	}
	return 1;
}
//==============================================================================
CMD:specoff(playerid, params[])
{
	if(Specing[playerid] == 1)
	{
		TogglePlayerSpectating(playerid,false);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInteriorEx(playerid,0);
		Specing[playerid] = 0;
		Spectate[playerid] = -2;
	}
	else return SCM(playerid,COLOR_GRAD2,"Nu urmaresti pe nimeni!");
	return 1;
}
//==============================================================================
CMD:buylevel(playerid, params[])
{
    if(GetPlayerScoreEx(playerid) > 0)
	{
		new nxtlevel = GetPlayerScoreEx(playerid), costlevel = nxtlevel*levelcost, expamount = nxtlevel*4, infostring[128];
		if(GetPlayerCash(playerid) < costlevel)
		{
			format(infostring, sizeof(infostring), "Ai nevoie de %s$ pentru a trece level-ul!",FormatNumber(costlevel));
			SCM(playerid, COLOR_GRAD1, infostring);
			return 1;
		}
		else if(PlayerInfo[playerid][pExp] < expamount)
		{
			format(infostring, sizeof(infostring), "Tu ai %d RP, ai nevoie de %d pentru a folosi comanda!",PlayerInfo[playerid][pExp],expamount);
			SCM(playerid, COLOR_GRAD1, infostring);
			return 1;
		}
		else
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			if(PlayerInfo[playerid][pPremium] == 1 && PlayerInfo[playerid][pExp] >= expamount)
			{
				GivePlayerCash(playerid, -costlevel);
				SetPlayerScoreEx(playerid, GetPlayerScoreEx(playerid)+1);
				PlayerInfo[playerid][pExp] -= expamount;
				if(PlayerInfo[playerid][pExp] < 0) PlayerInfo[playerid][pExp] = 0;
			}
			else return SPD(playerid,DIALOG_BUY_LEVEL,DIALOG_STYLE_MSGBOX,"Buy Level:","Daca vei cumpara level vei pierde toate RP-urile pe care le ai. Accepti?","Da","Nu");
			if(GiftInfo[gOpen] == 1) PlayerInfo[playerid][pGpoint] += 2;
			PlayerInfo[playerid][pGold] += 5;
			format(infostring, sizeof(infostring), "~w~Felicitari, acum ai ~g~level %d!",GetPlayerScoreEx(playerid));
			GameTextForPlayer(playerid, infostring, 5000, 1);
			pUpdate(playerid, pGpointx);
		}
	}
	return 1;
}
//==============================================================================
CMD:getvw(playerid, params[])
{
	new string[128], vwplayer, sendername[MAX_PLAYER_NAME];
	if(sscanf(params,"u",vwplayer)) return SCM(playerid,-1,"{B8DBFF}Folosire: /getvw [playerid/PartOfName]");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2, "Nu poti folosi aceasta comanda!");
	if(vwplayer == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	new vw = GetPlayerVirtualWorld(vwplayer);
	format(string, sizeof(string), "Jucatorul %s are VirtualWorld setat pe %d.",sendername,vw);
	SCM(playerid,COLOR_GRAD2,string);
	return 1;
}
//==============================================================================
CMD:o(playerid, params[])
{
	new text[128], string[256];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"s[128]",text)) return SCM(playerid,-1, "{B8DBFF}Folosire: (/o)oc [text]");
	if(PlayerInfo[playerid][pMuted] == 1) return SCM(playerid,TEAM_CYAN_COLOR,"Nu poti vorbi deoarece ai mute!");
	format(string, sizeof(string), "(( %s %s: %s ))",NumeAdmin(PlayerInfo[playerid][pAdmin]),GetName(playerid),text);
	SendSplitMessageToAll(COLOR_OOC, string);
	return 1;
}
alias:o("ooc");
//==============================================================================
CMD:fbiup(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,302.3943,-1533.1412,24.92195))
		{
			SetPlayerPosEx(playerid,337.222656,-1495.263183,76.539062);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
		}
	}
	return 1;
}
//==============================================================================
CMD:fbidown(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,337.222656,-1495.263183,76.539062))
		{
			SetPlayerPosEx(playerid,302.3943,-1533.1412,24.9219);
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
		}
	}
	return 1;
}
//==============================================================================
CMD:goto(playerid, params[])
{
	new pgoto, Float:x, Float:y, Float:z;
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(sscanf(params,"u",pgoto)) return SCM(playerid,-1, "{B8DBFF}Folosire: /goto [playerid/PartOfName]");
		if(NOON(pgoto));
		if(pgoto == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
		if(pgoto == playerid) return SCM(playerid,COLOR_YELLOW2,"De ce ai vrea sa te teleportezi la tine?");
		if(PlayerInfo[playerid][pJailed] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda daca esti la inchisoare!");
		if(Spectate[playerid] != -1) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda cand urmaresti pe cineva!");
		GetPlayerPos(pgoto, x, y, z);
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			SetVehiclePos(tmpcar, x, y+4, z);
		}
		else {
			SetPlayerPosEx(playerid,x,y+2, z);
		}
		GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(pgoto));
		SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(pgoto));
		FactionEntered[playerid] = FactionEntered[pgoto];
		HouseEntered[playerid] = HouseEntered[pgoto];
		BizzEntered[playerid] = BizzEntered[pgoto];
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:setteam(playerid, params[])
{
	new pteam, team, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128];
	if(sscanf(params,"ui",pteam,team)) return SCM(playerid,-1,"{B8DBFF}Folosire: /setteam [playerid/PartOfName] [team 1(civ) - 2(cop)]");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(NOON(pteam));
	if(team != 1 || team != 2 || team != 5) return SCM(playerid,-1,"{B8DBFF}Folosire: /setteam [playerid/PartOfName] [team 1(civ) - 2(cop) - 3(paint)]");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(pteam,pName,sizeof(pName));
	SetPlayerTeam(pteam, team);
	SpawnPlayer(pteam);
	format(string, sizeof(string), "Echipa ta a fost schimbata in %d de %s.", team, sendername);
	SCM(pteam, COLOR_WHITE, string);
	format(string, sizeof(string), "Ai schimbat echipa lui %s in %d.", pName,team);
	SCM(playerid, COLOR_WHITE, string);
	return 1;
}
//==============================================================================
CMD:setjob(playerid, params[])
{
	new pjob, string[128], sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], job;
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid,COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"ui",pjob,job)) return SCM(playerid,-1, "{B8DBFF}Folosire: /setjob [playerid/PartOfName] [jobid]");
	if(job >= MAX_JOBS) return SCM(playerid,COLOR_YELLOW2,"Job ID invalid!");
	if(pjob == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(pjob,pName,sizeof(pName));
	PlayerInfo[pjob][pJob] = job;
	format(string, sizeof(string), "AdmCmd: %s i-a setat jobul %s lui %s.", sendername,NumeJob(job),pName);
	SendAdminMessage(string,1);
	SFM(pjob,COLOR_WHITE,"Jobul tau a fost schimbat de %s in %s.",sendername,NumeJob(job));
	return 1;
}
//==============================================================================
CMD:find(playerid, params[])
{
	new pfind, string[256];
	if(PlayerInfo[playerid][pJob] != 1) return SCM(playerid, COLOR_YELLOW2, "Nu esti detectiv!");
	if(sscanf(params,"u",pfind)) return SCM(playerid,-1,"{B8DBFF}Folosire: /find [playerid/PartOfName]");
	if(NOON(pfind));
	if(pfind == playerid) return SCM(playerid,COLOR_YELLOW2,"Nu te poti cauta singur!");
	if(TogFind[pfind] == false) return SCM(playerid,COLOR_YELLOW2,"Momentan nu poti da find pe acest jucator.");
	if(Cautat[pfind] == pfind) return SCM(playerid,COLOR_GRAD2,"Nu poti folosi comanda la acest eveniment!");
	format(string, sizeof(string), "Un checkpoint a fost pus pe %s.", GetName(pfind));
	SCM(playerid, COLOR_YELLOW, string);
	JucatorCautat[playerid] = pfind;
	CP[playerid] = 2;
	return 1;
}
//==============================================================================
CMD:check(playerid, params[])
{
	new pcheck;
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(sscanf(params,"u",pcheck)) return SCM(playerid,-1,"{B8DBFF}Folosire: /check [playerid/PartOfName]");
		if(NOON(pcheck));
		ShowStats(playerid,pcheck);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:number(playerid, params[])
{
	new pnumber, string[64], sendername[MAX_PLAYER_NAME];
	if(sscanf(params,"u",pnumber)) return SCM(playerid,-1,"{B8DBFF}Folosire: /number [playerid/PartOfName]");
	if(NOON(pnumber));
	if(pnumber == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
	GetPlayerName(pnumber, sendername, sizeof(sendername));
	format(string, sizeof(string), " |- Name: %s -|- NR.Tel: %d -|",sendername,PlayerInfo[pnumber][pNumber]);
	SCM(playerid, COLOR_GRAD2, string);
	return 1;
}
//==============================================================================
CMD:freeze(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3)
		{
			new pfreze, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128];
			if(sscanf(params,"u",pfreze)) return SCM(playerid,-1, "{B8DBFF}Folosire: /freeze [playerid/PartOfName]");
			if(NOON(pfreze));
			if(pfreze == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
			GetPlayerName(pfreze, pName, sizeof(pName));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: %s a primit freeze de la %s.",pName,sendername);
			SendAdminMessage(string,1);
            TogglePlayerControllable(pfreze, false);
		}
		else return SCM(playerid,COLOR_YELLOW2, NEAUTORIZAT);
	}
	return 1;
}
//==============================================================================
CMD:unfreeze(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new punfz, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128];
		if(sscanf(params,"u",punfz)) return SCM(playerid,-1, "{B8DBFF}Folosire: /unfreeze [playerid/PartOfName]");
		if(punfz == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
		GetPlayerName(punfz, pName, sizeof(pName));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		TogglePlayerControllable(punfz, true);
		format(string, sizeof(string), "AdmCmd: %s a primit unfreeze de la %s.",pName,sendername);
		SendAdminMessage(string,1);
	}
	else return SCM(playerid,COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:usedrugs(playerid, params[])
{
	new drugs, string[128], Float:health;
	if(PlayerInfo[playerid][pDrugs] == 0) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Nu ai grame de droguri!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda intr-un vehicul!");
	if(UsingDrugs[playerid] == 1) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Te droghezi deja!");
	if(isnull(params))
	{
		SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /usedrugs [drug name]");
		SCM(playerid, COLOR_GRAD2, "Nume disponibile: Marijuana, Cocaine, Extasy, LSD");
	}
	else
	{
		GetPlayerHealthEx(playerid,health);
		if(strcmp(params,"marijuana",true) == 0) drugs = 1;
		else if(strcmp(params,"cocaine",true) == 0) drugs = 3;
		else if(strcmp(params,"extasy",true) == 0) drugs = 4;
		else if(strcmp(params,"lsd",true) == 0) drugs = 5;
		else return SCM(playerid, COLOR_WHITE, "{FFFFCC}Nume invalid!");
		if(drugs > PlayerInfo[playerid][pDrugs]) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Nu ai suficiente grame de droguri!");
		UsingDrugs[playerid] = 1;
		SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + drugs * 700);
		PlayerInfo[playerid][pDrugs] -= drugs;
		if(health < 94) SetPlayerHealthEx(playerid, health + drugs * 1.5);
		else SetPlayerHealthEx(playerid, 99.9);
		LoopingAnim(playerid, "CRACK","crckdeth2",4.1,1,1,1,1,0);
		SetTimerEx_("UnfreezeT", 5000, 5000, 1, "i", playerid);
		format(string, sizeof(string), "* %s has used some drugs (%s).", GetName(playerid), params);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		for(new m = 0; m < 2; m++) {
			if(PlayerInfo[playerid][pQuest][m] == 9) CheckQuest(playerid, m);
		}
	}
	return 1;
}
//==============================================================================
CMD:aopen(playerid, params[])
{
    for(new i = 1; i < MAX_BUSINESS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,3, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
		{
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				if(BizzInfo[i][bLocked] == 1)
				{
					BizzInfo[i][bLocked] = 0;
					GameTextForPlayer(playerid, "~w~Afacere ~g~Deschisa", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else if(BizzInfo[i][bLocked] == 0)
				{
					BizzInfo[i][bLocked] = 1;
					GameTextForPlayer(playerid, "~w~Afacere ~r~Inchisa", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
			}
			else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
		}
	}
	for(new i = 1; i < MAX_HOUSES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]))
		{
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				if(HouseInfo[i][hLock] == 1)
				{
					HouseInfo[i][hLock] = 0;
					GameTextForPlayer(playerid, "~w~Casa ~g~Deschisa", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else if(HouseInfo[i][hLock] == 0)
				{
					HouseInfo[i][hLock] = 1;
					GameTextForPlayer(playerid, "~w~Casa ~r~Inchisa", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
			}
			else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
		}
	}
	return 1;
}
//==============================================================================
CMD:pay(playerid, params[])
{
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
	new ppay, sendername[MAX_PLAYER_NAME], string[128], pName[MAX_PLAYER_NAME], suma;
	if(sscanf(params,"ui",ppay,suma)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /pay [playerid/PartOfName] [suma]");
	if(GetPlayerScoreEx(playerid) < 3) return SCM(playerid, COLOR_YELLOW2, "Ai nevoie de level 3 pentru a folosi aceasta comanda!");
	if(suma < 1 || suma > 100000) return SCM(playerid, COLOR_YELLOW2, "Suma trebuie sa fie cuprinsa intre 1$ si 100.000$.");
	if(NOON(ppay));
	if(ppay != INVALID_PLAYER_ID)
	{
		if(ProxDetectorS(5.0, playerid, ppay))
		{
			if(ppay == playerid) return SCM(playerid, COLOR_YELLOW2, "Chiar vrei sa-ti dai bani singur?!");
			new playermoney = GetPlayerCash(playerid);
			if(suma > 0 && playermoney >= suma)
			{
				GetPlayerName(ppay, pName, sizeof(pName));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(paytime[playerid] == 1) return SCM(playerid, COLOR_YELLOW2, "Poti folosi comanda odata la 30 de secunde!");
				GivePlayerCash(playerid, -suma);
				GivePlayerCash(ppay, suma);
				format(string, sizeof(string), "I-ai oferit lui %s suma de %s$.", pName,FormatNumber(suma));
				SCM(playerid, COLOR_PURPLE, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Ai primit de la %s suma de %s$.",sendername,FormatNumber(suma));
				SCM(ppay, COLOR_PURPLE, string);
				paytime[playerid] = 1;
				SetTimerEx_("pay", 30000, 30000, 1, "%d", playerid);
				PlayerPlaySound(ppay, 1052, 0.0, 0.0, 0.0);
				ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,0,0,0,0);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Tranzactie invalida.");
		}
		else return SCM(playerid, COLOR_YELLOW2, "Esti prea departe de acest jucator.");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Acest jucator nu e online!");
	return 1;
}
//==============================================================================
CMD:buygun(playerid, params[])
{
	if(BizzEntered[playerid] == -1) return 1;
	if(BizzInfo[BizzEntered[playerid]][bType] == 2)
	{
		if(PlayerInfo[playerid][pGunLic] >= 1) {
  			SPD(playerid, DIALOG_BUYGUN, DIALOG_STYLE_TABLIST_HEADERS, "Lista cu Arme:","Arma\tValoare\tMunitie\nDeagle\t{66FF00}3000$\t100\nShotgun\t{66FF00}2000$\t50\nMP5\t{66FF00}4000$\t150\nTec-9\t{66FF00}3500$\t100\nM4\t{66FF00}7000$\t150","Alege", "Inchide");
		}
		else return SCM(playerid, COLOR_YELLOW2,"Nu ai licenta de arme!");
	}
	else return SCM(playerid, COLOR_YELLOW2,"Nu esti la un magazin de arme.");
	return 1;
}
//==============================================================================
CMD:ban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    new playerBanID, days, string[256], playerBanReason[60], szMessage[320];
	    if(sscanf(params, "uds[60]", playerBanID,days,playerBanReason)) return SCM(playerid,-1,"{B8DBFF}Folosire: /ban [playerid/PartOfName] [min 1 day/max 30 days] [reason]");
	    if(IsPlayerConnected(playerBanID))
	    {
		    if(PlayerInfo[playerBanID][pAdmin] >= 1) return SCM(playerid, COLOR_GREY, "Nu poti da ban la un admin.");
			if(days > 0 && days < 31)
			{
				new year, month, day;
				getdate(year, month, day);
				day += days;
				if(IsMonth31(month))
				{
					if(day > 31)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 31) day -= 31;
						}
						else while(day > 31) day -= 31;
					}
				}
				else if(!IsMonth31(month))
				{
					if(day > 30)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 30) day -= 30;
						}
						else while(day > 30) day -= 30;
					}
				}
				else if(!IsMonth31(month) && IsMonth29(year) && month == 2)
				{
					if(day > 29)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 29) day -= 29;
						}
						else while(day > 29) day -= 29;
					}
				}
				else if(!IsMonth31(month) && !IsMonth29(year) && month == 2)
				{
					if(day > 28)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 28) day -= 28;
						}
						else while(day > 28) day -= 28;
					}
				}
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Banned`='1', `TempBanDay`='%d', `TempBanMonth`='%d', `TempBanYear`='%d' WHERE `name`='%s'", day, month, year, PlayerInfo[playerBanID][pNamePlayer]);
				mysql_tquery(SQL, string, "","");
				format(string, sizeof(string), "Ban: %s has been banned by %s for %d days, reason: %s",PlayerInfo[playerBanID][pNamePlayer], PlayerInfo[playerid][pNamePlayer], days, playerBanReason);
				SCMAll(COLOR_LIGHT_RED, string);
				AdminLog(string);
				mysql_format(SQL,szMessage, sizeof(szMessage), "INSERT INTO `lastpunish` (`text`, `playerID`) VALUES ('%s', '%d')", string,PlayerInfo[playerBanID][pSQLID]);
				mysql_tquery(SQL,szMessage);
				SCM(playerBanID,-1,"Ai fost banat temporar de catre un admin!");
				PlayerInfo[playerBanID][pBanned] = 1;
		        KickEx(playerBanID);
			}
			else return SCM(playerid,-1,"Invalid amount of days");
	    }
	}
	else return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:helpers(playerid, params[])
{
	new string[128];
    SCM(playerid, COLOR_WHITE, "{ADFF5C}|____ Helpers online ____|");
	foreach(new i: Helpers)
	{
		if(!IsPlayerPaused(i)) format(string, sizeof(string), "{FF6633}%s {FFFFFF}(%d) - Helper Level %d",GetName(i),i,PlayerInfo[i][pHelper]);
		else format(string, sizeof(string), "{6699ff}%s {FFFFFF}(%d) - Helper Level %d  [AFK]",GetName(i),i,PlayerInfo[i][pHelper]);
		SCM(playerid, COLOR_WHITE, string);
	}
	if(Iter_Count(Helpers) == 1) format(string, sizeof(string), "{ADFF5C}* Acum este %d helper online.", Iter_Count(Helpers));
	else format(string, sizeof(string), "{ADFF5C}* Acum sunt %d helperi online.", Iter_Count(Helpers));
	SCM(playerid, COLOR_WHITE, string);
    SCM(playerid, COLOR_GRAD2, "----------------------------------------------------------------------------");
	return 1;
}
//==============================================================================
CMD:admins(playerid, params[])
{
	new string[128];
    SCM(playerid, COLOR_WHITE, "{ADFF5C}|____ Admins online ____|");
	foreach(new i: Admins)
	{
		if(!IsPlayerPaused(i)) format(string, sizeof(string), "{FF6633}%s {FFFFFF}(%d) - %s",GetName(i),i,NumeAdmin(PlayerInfo[i][pAdmin]));
		else format(string, sizeof(string), "{6699ff}%s {FFFFFF}(%d) - %s  [AFK]",GetName(i),i,NumeAdmin(PlayerInfo[i][pAdmin]));
		SCM(playerid, COLOR_WHITE, string);
	}
	if(Iter_Count(Admins) == 1) format(string, sizeof(string), "{ADFF5C}* Acum este %d admin online.", Iter_Count(Admins));
	else format(string, sizeof(string), "{ADFF5C}* Acum sunt %d admini online.", Iter_Count(Admins));
	SCM(playerid, COLOR_WHITE, string);
    SCM(playerid, COLOR_GRAD2, "----------------------------------------------------------------------------");
	return 1;
}
//==============================================================================
CMD:count(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(Count == 0)
	    {
			Count = 1;
	    	SetTimer_("Counting", 1000, 1000, 1);
	    }
		else return SCM(playerid, COLOR_YELLOW2,"Numaratoarea inversa a inceput deja!");
    }
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
   	return 1;
}
//==============================================================================
CMD:factiuni(playerid, params[])
{
	new members, string[1200];
	for(new xf = 1; xf < MAX_FACTIONS; xf++)
	{
		new color[15];
		color[0] = EOS;
		if(xf == 1) color[1] = COLOR_PD;
		if(xf == 2) color[2] = COLOR_FBI;
		if(xf == 3) color[3] = COLOR_NG;
		if(xf == 4) color[4] = COLOR_MEDIC;
		if(xf == 5) color[5] = TEAM_AZTECAS_COLOR;
		if(xf == 6) color[6] = TEAM_RUSSIAN_COLOR;
		if(xf == 7) color[7] = COLOR_MAYOR;
		if(xf == 8) color[8] = COLOR_HITMAN;
		if(xf == 9) color[9] = COLOR_NEWS;
		if(xf == 10) color[10] = COLOR_YELLOW;
		if(xf == 11) color[11] = TEAM_GROVE_COLOR;
		if(xf == 12) color[12] = TEAM_VAGOS_COLOR;
		if(xf == 13) color[13] = TEAM_BALLAS_COLOR;
		if(xf == 14) color[14] = COLOR_BLOOD;
	    if(strlen(FactionInfo[xf][fName]) >= 1)
	    {
	    	new string2[128];
			format(string2, sizeof(string2), "SELECT * FROM `users` WHERE `Member` = '%d'", xf);
			new Cache:resultx = mysql_query(SQL, string2);
			members = cache_num_rows();
			cache_delete(resultx);
			format(string, sizeof(string),"%s[%d/%d]\t%s%s\n",string,members,FactionInfo[xf][fSlots],GetColorHex(color[xf]),FactionInfo[xf][fName]);
	    }
	}
	SPD(playerid, DIALOG_FACTIUNI, DIALOG_STYLE_TABLIST,"Server Factions:", string, "Selecteaza", "Inchide");
	return 1;
}
alias:factiuni("factions");
//==============================================================================
CMD:lideri(playerid, params[])
{
	new string[128];
    SCM(playerid, COLOR_WHITE, "{ADFF5C}|____ Leaders online ____|");
	foreach(new i: Leaders)
	{
		if(!IsPlayerPaused(i)) {
			format(string, sizeof(string), "{FF6633}%s {FFFFFF}(%d) - %s",GetName(i),i,NumeFactiune(PlayerInfo[i][pLeader]));
		}
		else {
			format(string, sizeof(string), "{6699ff}%s {FFFFFF}(%d) - %s  [AFK]",GetName(i),i,NumeFactiune(PlayerInfo[i][pLeader]));
		}
		SCM(playerid, COLOR_WHITE, string);
	}
	if(Iter_Count(Leaders) == 1) format(string, sizeof(string), "{ADFF5C}* Acum este %d lider online.", Iter_Count(Leaders));
	else format(string, sizeof(string), "{ADFF5C}* Acum sunt %d lideri online.", Iter_Count(Leaders));
	SCM(playerid, COLOR_WHITE, string);
    SCM(playerid, COLOR_GRAD2, "----------------------------------------------------------------------------");
	return 1;
}
alias:lideri("leaders");
//==============================================================================
CMD:tod(playerid, params[])
{
    new time, string[32];
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"d",time)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /tod [timeofday] (0-23)");
	SetWorldTime(time);
	format(string, sizeof(string), "WorldTime a fost setat la %d.", time);
	SCM(playerid,COLOR_GRAD1, string);
	return 1;
}
//==============================================================================
CMD:setint(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1 ||PlayerInfo[playerid][pHelper] >= 1)
	{
		new string[128], pint, interior, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME];
		if(sscanf(params,"ui",pint,interior)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /setint [playerid/PartOfName] [interiorid]");
		if(NOON(pint));
		GetPlayerName(pint, pName, sizeof(pName));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		SetPlayerInteriorEx(pint, interior);
		PlayerInfo[pint][pInt] = interior;
		format(string, sizeof(string), "I-ai setat interiorul lui %s la %d.", pName, interior);
		SCM(playerid, COLOR_YELLOW2, string);
		format(string,sizeof(string),"AdmCmd: %s i-a setat lui %s Interiorul la %d.",sendername,pName,interior);
		SendAdminMessage(string,1);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:setvw(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128], pvw, vw, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME];
		if(sscanf(params,"ui",pvw,vw)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /setvw [playerid/PartOfName] [virtualworld]");
		if(NOON(pvw));
		GetPlayerName(pvw, pName, sizeof(pName));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		SetPlayerVirtualWorld(pvw, vw);
		format(string, sizeof(string), "Virtual World-ul lui %s a fost setat la %d.",pName,vw);
		SCM(playerid, COLOR_YELLOW2, string);
		format(string,sizeof(string),"AdmCmd: %s i-a setat lui %s VirtualWorld-ul la %d.",sendername,pName,vw);
		SendAdminMessage(string,1);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:buyskin(playerid)
{
	if(BizzEntered[playerid] == -1) return 1;
	if(GetPlayerCash(playerid) < 5000) return SCM(playerid,COLOR_YELLOW2,"Ai nevoie de 5.000$ pentru a cumpara un skin nou.");
	if(BizzInfo[BizzEntered[playerid]][bType] != 11) return SCM(playerid,COLOR_YELLOW2,"Nu esti la un magazin de haine!");
	if(GetPlayerFaction(playerid) == 1) ShowModelSelectionMenu(playerid, skinpd, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 2) ShowModelSelectionMenu(playerid, skinfbi, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 4) ShowModelSelectionMenu(playerid, skinmedic, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 5) ShowModelSelectionMenu(playerid, skinazt, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 6) ShowModelSelectionMenu(playerid, skinrusian, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 8) ShowModelSelectionMenu(playerid, skinhit, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 9) ShowModelSelectionMenu(playerid, skinnews, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 10) ShowModelSelectionMenu(playerid, skintaxi, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 11) ShowModelSelectionMenu(playerid, skingrove, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 12) ShowModelSelectionMenu(playerid, skinvagos, "Selecteaza skinul dorit");
	else if(GetPlayerFaction(playerid) == 13) ShowModelSelectionMenu(playerid, skinballas, "Selecteaza skinul dorit");
	else ShowModelSelectionMenu(playerid, skincivil, "Selecteaza skinul dorit");
	return 1;
}
//==============================================================================
CMD:tog(playerid) return ShowTogMenu(playerid);
//==============================================================================
CMD:arrest(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new string[128], pName[MAX_PLAYER_NAME], suspect, veh = GetPlayerVehicleID(playerid), rand = random(sizeof(Inchisoare));
		if(!IsACop(playerid)) return SCM(playerid, COLOR_YELLOW2, "Nu esti politist!");
		if(OnDuty[playerid] != 1)  SCM(playerid, COLOR_YELLOW2, "Nu esti on Duty!");
		if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1528.7307,-1677.9663,5.8906)) return SCM(playerid, COLOR_YELLOW2, "Nu poti aresta in aceasta locatie!");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || StaticVeh[veh][svFaction] != 1 || StaticVeh[veh][svFaction] != 2 || StaticVeh[veh][svFaction] != 3) return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii intr-un vehicul de politie!");
		if(sscanf(params,"u",suspect)) return SCM(playerid,-1,"{B8DBFF}Folosire: /arrest [playerid/PartOfName]");
		if(GetDistanceBetweenPlayers(playerid, suspect) < 5)
		{
			GetPlayerName(suspect, pName, sizeof(pName));
			if(GetPlayerWantedLevelEx(suspect) == 1)
			{
				GivePlayerCash(suspect, -2000);
				GivePlayerCash(playerid, 2000);
				PlayerInfo[suspect][pJailTime] = 4 * 60;
			}
			else if(GetPlayerWantedLevelEx(suspect) == 2)
			{
				GivePlayerCash(suspect, -4000);
				GivePlayerCash(playerid, 4000);
				PlayerInfo[suspect][pJailTime] = 8 * 60;
			}
			else if(GetPlayerWantedLevelEx(suspect) == 3)
			{
				GivePlayerCash(suspect, -6500);
				GivePlayerCash(playerid, 6500);
				PlayerInfo[suspect][pJailTime] = 11 * 60;
			}
			else if(GetPlayerWantedLevelEx(suspect) == 4)
			{
				GivePlayerCash(suspect, -8000);
				GivePlayerCash(playerid, 8000);
				PlayerInfo[suspect][pJailTime] = 14 * 60;
			}
			else if(GetPlayerWantedLevelEx(suspect) == 5)
			{
				GivePlayerCash(suspect, -12000);
				GivePlayerCash(playerid, 12000);
				PlayerInfo[suspect][pJailTime] = 17 * 60;
			}
			else if(GetPlayerWantedLevelEx(suspect) == 6)
			{
				GivePlayerCash(suspect, -15000);
				GivePlayerCash(playerid, 15000);
				PlayerInfo[suspect][pJailTime] = 20 * 60;
			}
			ResetPlayerWeaponsEx(suspect);
			SetPlayerWantedLevelEx(suspect, 0);
			PlayerInfo[suspect][pWantedTime] = 0;
			SetPlayerArmourEx(suspect, 0.0);
			TogglePlayerControllable(suspect, true);
			PlayerInfo[suspect][pJailed] = 1;
			SetPlayerInteriorEx(suspect, 10);
			SetPlayerPosEx(suspect,Inchisoare[rand][0],Inchisoare[rand][1],Inchisoare[rand][2]);
			format(string, sizeof(string),"ANUNT: %s la arestat pe %s pentru %d secunde.", GetName(playerid), pName,PlayerInfo[suspect][pJailTime]);
			SendTeamMessage(2,COLOR_BLUE,string);
			pUpdate(suspect,pJailedx);
			pUpdate(suspect,pJailTimex);
		}
	}
	return 1;
}
//==============================================================================
CMD:flip(playerid, params[])
{
	new vehicle, Float:zangle, pflip, string[128];
	if(PlayerInfo[playerid][pAdmin] <= 3) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"u",pflip)) return SCM(playerid,-1,"{B8DBFF}Folosire: /flip [playerid/PartOfName]");
	if(NOON(pflip));
	if(!IsPlayerInAnyVehicle(pflip)) return SCM(playerid, COLOR_YELLOW2, "Acel jucator nu este intr-un vehicul.");
	vehicle = GetPlayerVehicleID(pflip);
	GetVehicleZAngle(vehicle,zangle);
	SetVehicleZAngle(vehicle,zangle);
	format(string,sizeof(string),"AdmCmd: Vehiculul lui %s a fost redresat de %s.",GetName(pflip),GetName(playerid));
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:showlicense(playerid, params[])
{
	new pvede, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[228];
	if(sscanf(params,"u",pvede)) return SCM(playerid,-1,"{B8DBFF}Folosire: /showlicense [playerid/PartOfName]");
	if(pvede == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
	if(ProxDetectorS(8.0, playerid, pvede))
	{
		if(pvede == playerid) return SCM(playerid,COLOR_YELLOW2,"Foloseste /licente daca vrei sa-ti vezi licentele!");
		GetPlayerName(pvede, pName, sizeof(pName));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new text[6][32];
		if(PlayerInfo[playerid][pCarLic] > 0) { text[0] = "{3366FF}Valida"; } else { text[0] = "{ff3300}Expirata"; }
		if(PlayerInfo[playerid][pFlyLic] > 0) { text[1] = "{3366FF}Valida"; } else { text[1] = "{ff3300}Expirata"; }
		if(PlayerInfo[playerid][pBoatLic] > 0) { text[2] = "{3366FF}Valida"; } else { text[2] = "{ff3300}Expirata"; }
		if(PlayerInfo[playerid][pFishLic] > 0) { text[3] = "{3366FF}Valida"; } else { text[3] = "{ff3300}Expirata"; }
		if(PlayerInfo[playerid][pGunLic] > 0) { text[4] = "{3366FF}Valida"; } else { text[4] = "{ff3300}Expirata"; }
		if(PlayerInfo[playerid][pPassport] > 0) { text[5] = "{3366FF}Valid"; } else { text[5] = "{ff3300}Expirat"; }
		format(string, sizeof(string), "__________ Licentele lui %s _________", sendername);
		SCM(pvede, COLOR_LIGHTGREEN, string);
		if(PlayerInfo[playerid][pCarLic] > 0) { format(string, sizeof(string), " {ffffff}Licenta de Condus:  %s, {FFCC66} %d de ore\n", text[0], PlayerInfo[playerid][pCarLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Condus:  %s\n", text[0], PlayerInfo[playerid][pCarLic]); }
		SCM(pvede, COLOR_LIGHTBLUE, string);
		if(PlayerInfo[playerid][pFlyLic] > 0) { format(string, sizeof(string), " {ffffff}Licenta de Pilotaj:  %s, {FFCC66} %d de ore\n", text[1], PlayerInfo[playerid][pFlyLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Pilotaj:  %s\n", text[1], PlayerInfo[playerid][pFlyLic]); }
		SCM(pvede, COLOR_LIGHTBLUE, string);
		if(PlayerInfo[playerid][pBoatLic] > 0) { format(string, sizeof(string), " {ffffff}Licenta de Navigat:  %s, {FFCC66} %d de ore\n", text[2], PlayerInfo[playerid][pBoatLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Navigat:  %s\n", text[2], PlayerInfo[playerid][pBoatLic]); }
		SCM(pvede, COLOR_LIGHTBLUE, string);
		if(PlayerInfo[playerid][pFishLic] > 0) { format(string, sizeof(string), " {ffffff}Licenta de Pescuit:  %s, {FFCC66} %d de ore\n", text[3], PlayerInfo[playerid][pFishLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Pescuit:  %s\n", text[3], PlayerInfo[playerid][pFishLic]); }
		SCM(pvede, COLOR_LIGHTBLUE, string);
		if(PlayerInfo[playerid][pGunLic] > 0) { format(string, sizeof(string), " {ffffff}Licenta de Port Arma:  %s, {FFCC66} %d de ore\n", text[4], PlayerInfo[playerid][pGunLic]); } else { format(string, sizeof(string), " {ffffff}Licenta de Port Arma:  %s\n", text[4], PlayerInfo[playerid][pGunLic]); }
		SCM(pvede, COLOR_LIGHTBLUE, string);
		if(PlayerInfo[playerid][pPassport] > 0) { format(string, sizeof(string), " {ffffff}Pasaport:  %s, {FFCC66} %d de ore\n", text[5], PlayerInfo[playerid][pPassport]); } else { format(string, sizeof(string), " {ffffff}Pasaport:  %s\n", text[5], PlayerInfo[playerid][pPassport]); }
		SCM(pvede, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " {ccff66}%s {ffffff}ti-a aratat Licentele sale.", sendername);
		SCM(pvede, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " {ffffff}I-ai aratat licentele lui {ccff66}%s.", pName);
		SCM(playerid, COLOR_LIGHTBLUE, string);
	}
	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar acest jucator nu este langa tine.");
	return 1;
}
alias:showlicense("sl");
//==============================================================================
CMD:restart(playerid, params[])
{
	if(!IsPlayerScripter(playerid)) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(restartsv == 1) return SCM(playerid,COLOR_YELLOW2,"Serverul deja se restarteaza!");
	SPD(playerid, DIALOG_GMX, DIALOG_STYLE_MSGBOX, "Server Restart:", "Daca doresti ca serverul sa se restarteze, te rog sa confirmi!", "Da", "Nu");
	return 1;
}
//==============================================================================
CMD:car(playerid, params[])
{
    new car, string[128];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"d",car)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /car [carid]");
	if(car < 400 || car > 611) return SCM(playerid, COLOR_YELLOW2, "ID-ul vehiculelor este cuprins intre 400 si 611.");
	new Float:X,Float:Y,Float:Z,Float:A;
	GetPlayerPos(playerid, X,Y,Z);
	GetPlayerFacingAngle(playerid,A);
	new carid = CreateVehicleEx(car, X,Y,Z+1, A, 1, 1, -1);
	SetVehicleNumberPlate(carid,"SpawnedCar");
	CreateCar[carid] = carid;
	LinkVehicleToInterior(carid, GetPlayerInteriorEx(playerid));
	SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid,carid,0);
	new c = 0;
	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) {
		if(CreateCar[i] == i && IsValidVehicle(i)) c++;
	}
	format(string, sizeof(string), "AdmCmd: %s a spawnat un vehicul de tip %s (ID: %d) (%d vehicule spawnate).",GetName(playerid),GetVehicleName(carid),carid,c);
	SendAdminMessage(string, 1);
	return 1;
}
//==============================================================================
CMD:rv(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(IsPlayerInAnyVehicle(playerid))
	{
		new car = GetPlayerVehicleID(playerid);
		if(CreateCar[car] == car)
		{
			format(string, sizeof(string), "AdmCmd: %s a distrus vehiculul (ID: %d) (%s).",GetName(playerid),car,GetVehicleName(car));
			SendAdminMessage(string, 1);
			DestroyVehicleEx(car);
			CreateCar[car] = -1;
		}
		else
		{
			format(string, sizeof(string), "AdmCmd: %s a respawnat vehiculul (ID: %d) (%s).",GetName(playerid),car,GetVehicleName(car));
			SendAdminMessage(string, 1);
			SetVehicleToRespawn(car);
		}
	}
	else
	{
		new car;
		if(sscanf(params,"d",car)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /respawnveh [carid]");
		if(!IsValidVehicle(car)) return SCM(playerid,COLOR_YELLOW2,"Vehicul invalid!");
		if(CreateCar[car] == car)
		{
			format(string, sizeof(string), "AdmCmd: %s a distrus vehiculul (ID: %d) (%s).",GetName(playerid),car,GetVehicleName(car));
			SendAdminMessage(string, 1);
			DestroyVehicleEx(car);
			CreateCar[car] = -1;
		}
		else
		{
			format(string, sizeof(string), "AdmCmd: %s a respawnat vehiculul (ID: %d) (%s).",GetName(playerid),car,GetVehicleName(car));
			SendAdminMessage(string, 1);
			SetVehicleToRespawn(car);
		}
	}
	return 1;
}
alias:rv("respawnveh");
//==============================================================================
CMD:confisca(playerid, params[])
{
	new pconf, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], conf[64], string[128];
	if(IsACop(playerid) || IsPlayerScripter(playerid))
	{
		if(PlayerInfo[playerid][pFactionRank] < 2 ) return SCM(playerid, COLOR_YELLOW2, "Ai nevoie de rank 2 sau mai mare!");
		if(sscanf(params,"s[64]u",conf,pconf))
		{
			SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /confisca [nume] [playerid/PartOfName]");
			SCM(playerid, COLOR_GRAD2, "Nume disponibile: permis, arme(licenta)");
			SCM(playerid, COLOR_GRAD2, "Nume disponibile: armele, droguri");
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(pconf, pName, sizeof(pName));
		if(strcmp(conf,"permis", true) == 0)
		{
			if(ProxDetectorS(10.0, playerid, pconf))
			{
				format(string, sizeof(string), "Ofiterul %s ti-a confiscat permisul.", sendername);
				SCM(pconf, COLOR_LIGHT_BLUE, string);
				format(string, sizeof(string), " * %s i-a confiscat permisul lui %s.",sendername, pName);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[pconf][pCarLic] = 0;
			}
			else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e langa tine."); 
		}
		else if(strcmp(conf,"droguri", true) == 0)
		{
			if(ProxDetectorS(10.0, playerid, pconf))
			{
				format(string, sizeof(string), "Ofiterul %s ti-a confiscat drogurile.", sendername);
				SCM(pconf, COLOR_LIGHT_BLUE, string);
				format(string, sizeof(string), " * %s i-a confiscat drogurile lui %s.",sendername, pName);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[pconf][pDrugs] = 0;
			}
			else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e langa tine."); 
		}
		else if(strcmp(conf,"arme",true) == 0)
		{
			if(ProxDetectorS(10.0, playerid, pconf))
			{
				format(string, sizeof(string), "Ofiterul %s ti-a confiscat licenta de arme.", sendername);
				SCM(pconf, COLOR_LIGHT_BLUE, string);
				format(string, sizeof(string), " * %s i-a confiscat licenta de arme lui %s.",sendername, pName);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[pconf][pGunLic] = 0;
			}
			else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e langa tine."); 
		}
		else if(strcmp(conf,"armele",true) == 0)
		{
			if(ProxDetectorS(10.0, playerid, pconf))
			{
				format(string, sizeof(string), "Ofiterul %s ti-a confiscat armele.", sendername);
				SCM(pconf, COLOR_LIGHT_BLUE, string);
				format(string, sizeof(string), " * %s i-a confiscat armele lui %s.",sendername, pName);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ResetPlayerWeaponsEx(playerid);
			}
			else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e langa tine."); 
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!"); 
	}
	else return SCM(playerid,COLOR_YELLOW2,PLAYER_COP); 
	return 1;
}
//==============================================================================
CMD:ad(playerid, params[])
{
	new text[MAX_STRING], string[400];
	if(IsPlayerInRangeOfPoint(playerid,3,BizzInfo[22][bEntranceX],BizzInfo[22][bEntranceY],BizzInfo[22][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,3,BizzInfo[23][bEntranceX],BizzInfo[23][bEntranceY],BizzInfo[23][bEntranceZ]))
	{
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
		if(GetPlayerScoreEx(playerid) < 5) return  SCM(playerid,COLOR_YELLOW2,"Poti publica un anunt de la level 5.");
		if(AdvPlayer[playerid] != 0)
		{
			format(string, sizeof(string), "Anuntul tau: {ffff00}%s",AdvMSG[playerid]);
			SCM(playerid, COLOR_GREEN, string);
			SCM(playerid, COLOR_GREEN, "Pentru ati sterge anuntul, foloseste /deletemyad.");
			return 1;
		}
		if(PlayerInfo[playerid][pMuted] == 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti plasa un anunt cat timp ai mute.");
		if(sscanf(params,"s[256]",text)) return SCM(playerid,COLOR_WHITE,"{B8DBFF}Folosire: /ad [text]");
		new time, adss, idx, length = strlen(params);
		while((idx < length) && (params[idx] <= ' ')) {
			idx++;
		}
		new offset = idx, result[264];
		while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = params[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		new money = idx * 150;
		if(GetPlayerCash(playerid) < money) return SCM(playerid, COLOR_WHITE, "You do not have enough money.");
		foreach(new i: Player) {
			if(AdvPlayer[i] != 0) adss++;
		}
		if(adss >= 20) return SCM(playerid, COLOR_WHITE, "Sunt deja 20 de anunturi in asteptare, vino mai tarziu.");
		if(adss > 0) { 
			time = (adss+1)*30*1000; 
		}
		else if(adss == 0) { 
			time = 30000; 
		}
		StrmidEx(AdvMSG[playerid], text);
		format(string, sizeof(string), "Urmeaza anuntul lui {0FDED0}%s {A1FF26}[{ffffff}Telefon: %d{A1FF26}]: %s",GetName(playerid),PlayerInfo[playerid][pNumber],AdvMSG[playerid]);
		foreach(new i: Admins) {
			SendSplitMessage(i, 0xA1FF26FF, string);
		}
		AdvPlayer[playerid] = 1;
		AdvTimer[playerid] = SetTimerEx_("PlaceAD", time, time, 1, "i", playerid);
		format(string, sizeof(string), "Ai platit %s$ pentru anunt. Anuntul tau va fi afisat in %d secunde.", FormatNumber(money), time/1000);
		SCM(playerid, COLOR_GREEN, string);
		GivePlayerCash(playerid, -money);
		if(IsPlayerInRangeOfPoint(playerid,3,BizzInfo[22][bEntranceX],BizzInfo[22][bEntranceY],BizzInfo[22][bEntranceZ]))
		{
			BizzInfo[22][bMoney] += money; 
			SaveBusiness(22);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3,BizzInfo[23][bEntranceX],BizzInfo[23][bEntranceY],BizzInfo[23][bEntranceZ]))
		{
			BizzInfo[23][bMoney] += money; 
			SaveBusiness(23);
		}
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu poti pune un anunti in aceasta locatie!");
	return 1;
}
//==============================================================================
CMD:id(playerid, params[])
{
	new string[256], pName[64], factiune, id[MAX_PLAYER_NAME], find = 0, name[64], faction[64];
	if(sscanf(params,"s[25]",id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /id [playerid/PartOfName]");
	if(IsNumber(id))
	{
		new pid = strval(id);
		if(NOON(pid));
		factiune = PlayerInfo[pid][pMember] + PlayerInfo[pid][pLeader];
		if(PlayerInfo[pid][pClanTagType] == 0) {
			format(pName, sizeof(pName), "%s",PlayerInfo[pid][pNamePlayer]);
		}
		else if(PlayerInfo[pid][pClanTagType] == 1) {
			format(pName, sizeof(pName), "{%s}%s{ffffff}%s",ClanInfo[PlayerInfo[pid][pClan]][ClanColor],ClanInfo[PlayerInfo[pid][pClan]][ClanTag],PlayerInfo[pid][pNamePlayer]);
		}
		else if(PlayerInfo[pid][pClanTagType] == 2) {
			format(pName, sizeof(pName), "%s{%s}%s",PlayerInfo[pid][pNamePlayer],ClanInfo[PlayerInfo[pid][pClan]][ClanColor],ClanInfo[PlayerInfo[pid][pClan]][ClanTag]);
		}
		switch(factiune)
		{
			case 0:	format(faction, sizeof(faction), "%s",NumeFactiune(factiune));
			case 1:	format(faction, sizeof(faction), "{2641FE}%s{ffffff}",NumeFactiune(factiune));
			case 2: format(faction, sizeof(faction), "{0615C6}%s{ffffff}",NumeFactiune(factiune));
			case 3: format(faction, sizeof(faction), "{1E519D}%s{ffffff}",NumeFactiune(factiune));
			case 4: format(faction, sizeof(faction), "{FF6347}%s{ffffff}",NumeFactiune(factiune));
			case 5: format(faction, sizeof(faction), "{01FCFF}%s{ffffff}",NumeFactiune(factiune));
			case 6: format(faction, sizeof(faction), "{885724}%s{ffffff}",NumeFactiune(factiune));
			case 7: format(faction, sizeof(faction), "{B3F856}%s{ffffff}",NumeFactiune(factiune));
			case 8: format(faction, sizeof(faction), "{A5443B}%s{ffffff}",NumeFactiune(factiune));
			case 9: format(faction, sizeof(faction), "{EFC6FF}%s{ffffff}",NumeFactiune(factiune));
			case 10: format(faction, sizeof(faction), "{FFFF00}%s{ffffff}",NumeFactiune(factiune));
			case 11: format(faction, sizeof(faction), "{00D900}%s{ffffff}",NumeFactiune(factiune));
			case 12: format(faction, sizeof(faction), "{FFC801}%s{ffffff}",NumeFactiune(factiune));
			case 13: format(faction, sizeof(faction), "{D900D9}%s{ffffff}",NumeFactiune(factiune));
			case 14: format(faction, sizeof(faction), "{FF0000}%s{ffffff}",NumeFactiune(factiune));
		}
		format(string, sizeof(string)," (%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d",pid,pName,GetPlayerScoreEx(pid),faction,PlayerInfo[pid][pFactionRank],GetPlayerPing(pid),FPS[pid]);
		SCM(playerid, COLOR_WHITE, string);
	}
	else
	{
		foreach(new i: Player)
		{
			if(strlen(id) < 4) return SCM(playerid,COLOR_YELLOW2,"Foloseste mai multe caractere.");
			if(find < 10)
			{
				GetPlayerName(i, name, sizeof(name));
				factiune = PlayerInfo[i][pMember] + PlayerInfo[i][pLeader];
				if(strfind(name, id, true) != -1)
				{
					if(PlayerInfo[i][pClanTagType] == 0) {
						format(pName, sizeof(pName), "%s",PlayerInfo[i][pNamePlayer]);
					}
					else if(PlayerInfo[i][pClanTagType] == 1) {
						format(pName, sizeof(pName), "{%s}%s{ffffff}%s",ClanInfo[PlayerInfo[i][pClan]][ClanColor],ClanInfo[PlayerInfo[i][pClan]][ClanTag],PlayerInfo[i][pNamePlayer]);
					}
					else if(PlayerInfo[i][pClanTagType] == 2) {
						format(pName, sizeof(pName), "%s{%s}%s",PlayerInfo[i][pNamePlayer],ClanInfo[PlayerInfo[i][pClan]][ClanColor],ClanInfo[PlayerInfo[i][pClan]][ClanTag]);
					}
					switch(factiune)
					{
						case 0:	format(faction, sizeof(faction), "%s",NumeFactiune(factiune));
						case 1:	format(faction, sizeof(faction), "{2641FE}%s{ffffff}",NumeFactiune(factiune));
						case 2: format(faction, sizeof(faction), "{0615C6}%s{ffffff}",NumeFactiune(factiune));
						case 3: format(faction, sizeof(faction), "{1E519D}%s{ffffff}",NumeFactiune(factiune));
						case 4: format(faction, sizeof(faction), "{FF6347}%s{ffffff}",NumeFactiune(factiune));
						case 5: format(faction, sizeof(faction), "{01FCFF}%s{ffffff}",NumeFactiune(factiune));
						case 6: format(faction, sizeof(faction), "{885724}%s{ffffff}",NumeFactiune(factiune));
						case 7: format(faction, sizeof(faction), "{B3F856}%s{ffffff}",NumeFactiune(factiune));
						case 8: format(faction, sizeof(faction), "{A5443B}%s{ffffff}",NumeFactiune(factiune));
						case 9: format(faction, sizeof(faction), "{EFC6FF}%s{ffffff}",NumeFactiune(factiune));
						case 10: format(faction, sizeof(faction), "{FFFF00}%s{ffffff}",NumeFactiune(factiune));
						case 11: format(faction, sizeof(faction), "{00D900}%s{ffffff}",NumeFactiune(factiune));
						case 12: format(faction, sizeof(faction), "{FFC801}%s{ffffff}",NumeFactiune(factiune));
						case 13: format(faction, sizeof(faction), "{D900D9}%s{ffffff}",NumeFactiune(factiune));
						case 14: format(faction, sizeof(faction), "{FF0000}%s{ffffff}",NumeFactiune(factiune));
					}
					format(string, sizeof(string)," (%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d",i,pName,GetPlayerScoreEx(i),faction,PlayerInfo[i][pFactionRank],GetPlayerPing(i),FPS[i]);
					SCM(playerid, COLOR_WHITE, string);
					find++;
				}
			}
		}
		if(find == 0) return SCM(playerid, COLOR_YELLOW2, "Acest jucator nu este online!");
	}
	return 1;
}
//==============================================================================
CMD:atm(playerid)
{
    for(new a = 1; a < MAX_ATMS; a++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, AtmInfo[a][fATMPos][0],AtmInfo[a][fATMPos][1],AtmInfo[a][fATMPos][2]))
		{
			if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
			SPD(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"ATM:","Depoziteaza\nExtrage\n","Alege","Inchide");
		}
	}
	return 1;
}
//==============================================================================
CMD:bank(playerid)
{
	if(BizzEntered[playerid] == -1) return 1;
    if(BizzInfo[BizzEntered[playerid]][bType] == 1)
	{
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
		SPD(playerid,DIALOG_BANK,DIALOG_STYLE_LIST,"Bank:","Interogare sold\nDepoziteaza\nExtrage\nTransfera\n","Alege","Inchide");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-o banca!");
	return 1;
}
//==============================================================================
CMD:safebox(playerid)
{
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
	new string[128], faction = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
	if(faction > 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,FactionInfo[faction][fSafePosX],FactionInfo[faction][fSafePosY],FactionInfo[faction][fSafePosZ]))
		{
			format(string,sizeof(string),"Name\tValoare\nMoney\t%s$\nDrugs\t%sg\nMaterials\t%s",FormatNumber(FactionInfo[faction][fSafeMoney]),FormatNumber(FactionInfo[faction][fSafeDrugs]),FormatNumber(FactionInfo[faction][fSafeMats]));
			SPD(playerid,DIALOG_SEIF,DIALOG_STYLE_TABLIST_HEADERS,"Safe-box:",string,"Select","Cancel");
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu te afli la seiful factiunii tale!");
	}
	return 1;
}
//==============================================================================
CMD:salariile(playerid)
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
    format(string, sizeof(string), "ANUNT: %s a dat salariile tuturor jucatorilor online ce detin un grad pe server!", GetName(playerid));
    SCMAll(0x00ff99ff, string);
    foreach(new i: Player)
    {
	    if(PlayerInfo[i][pFactionRank] >= 1)
		{
			new cash = PlayerInfo[i][pFactionRank]*100000;
			GivePlayerCash(i, cash);
			format(string, sizeof(string), "* Ai primit salariu %s$ (Faction Rank %d).",FormatNumber(cash),PlayerInfo[i][pFactionRank]);
			SCM(i, COLOR_GREEN, string);
		}
		if(PlayerInfo[i][pHelper] >= 1)
		{
			new gold = PlayerInfo[i][pHelper]*20;
			PlayerInfo[i][pGold] += gold;
			format(string, sizeof(string), "* Ai primit salariu %d gold (Helper Grad %d).",gold,PlayerInfo[i][pHelper]);
			SCM(i, COLOR_GREEN, string);
		}
		if(PlayerInfo[i][pAdmin] >= 1)
		{
			new gold = PlayerInfo[i][pAdmin]*40;
			PlayerInfo[i][pGold] += gold;
			format(string, sizeof(string), "* Ai primit salariu %d gold (Admin Grad %d).",gold,PlayerInfo[i][pAdmin]);
			SCM(i, COLOR_GREEN, string);
		}
    }
	return 1;
}
//==============================================================================
CMD:warn(playerid, params[])
{
	new pwarn, motiv[64], sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(sscanf(params,"us[64]",pwarn,motiv)) return SCM(playerid,-1,"{B8DBFF}Folosire: /warn [playerid/PartOfName] [motiv]");
		if(NOON(pwarn));
		if(pwarn == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(pwarn,pName,sizeof(pName));
		PlayerInfo[pwarn][pWarns] += 1;
		pUpdate(pwarn,pWarnsx);
		if(PlayerInfo[pwarn][pWarns] >= 5)
		{
		    new year, month,day;
			getdate(year, month, day);
			format(string, sizeof(string), "Ban: %s a fost banat de %s (5 Warnings), Motiv: %s (%d-%d-%d)", pName, sendername, motiv,month,day,year);
			AdminLog(string);
			format(string, sizeof(string), "AdmCmd: %s a fost banat de %s (5 Warnings), Motiv: %s", pName, sendername, motiv);
			SCMAll(COLOR_LIGHT_RED, string);
			PlayerInfo[pwarn][pWarns] = 0;
			pUpdate(pwarn,pWarnsx);
			new playersip[256];
		    GetPlayerIp(pwarn,playersip, sizeof(playersip));
		    SCM(pwarn,COLOR_LIGHTGREEN,"|___________[BAN INFO]___________|");
		    format(string, sizeof(string), "Numele tau este: %s.",pName);
		    SCM(pwarn, COLOR_LIGHT_RED, string);
		    format(string, sizeof(string), "IP-ul tau este: %s.",playersip);
		    SCM(pwarn, COLOR_LIGHT_RED, string);
		    format(string, sizeof(string), "Ai fost banat de: %s.",sendername);
		    SCM(pwarn, COLOR_LIGHT_RED, string);
		    format(string, sizeof(string), "Motiv: %s(5 warnuri).",motiv);
		    SCM(pwarn, COLOR_LIGHT_RED, string);
		    format(string, sizeof(string), "Data: %d.%d.%d",day,month,year);
		    SCM(pwarn, COLOR_LIGHT_RED, string);
		    SCM(pwarn,COLOR_LIGHTGREEN,"|___________[BAN INFO]___________|");
		    PlayerInfo[pwarn][pBanned] = 1;
			//--------------------------------------------------------------
			day += 3;
			if(IsMonth31(month))
			{
				if(day > 31)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 31) day -= 31;
					}
					else while(day > 31) day -= 31;
				}
			}
			else if(!IsMonth31(month))
			{
				if(day > 30)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 30) day -= 30;
					}
					else while(day > 30) day -= 30;
				}
			}
			else if(!IsMonth31(month) && IsMonth29(year) && month == 2)
			{
				if(day > 29)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 29) day -= 29;
					}
					else while(day > 29) day -= 29;
				}
			}
			else if(!IsMonth31(month) && !IsMonth29(year) && month == 2)
			{
				if(day > 28)
				{
					month += 1;
					if(month > 12)
					{
						year += 1;
						while(day > 28) day -= 28;
					}
					else while(day > 28) day -= 28;
				}
			}
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Banned`='1', `TempBanDay`='%d', `TempBanMonth`='%d', `TempBanYear`='%d' WHERE `name`='%s'", day, month, year, PlayerInfo[pwarn][pNamePlayer]);
			mysql_tquery(SQL, string, "","");
			KickEx(pwarn);
			return 1;
		}
		format(string,sizeof(string),"Ai primit warn de la %s. Motiv: %s.",sendername,motiv);
		SCM(pwarn,COLOR_LIGHT_BLUE,string);
		format(string, sizeof(string), "AdmCmd: Adminul %s i-a dat warn lui %s.  Motiv: %s.", sendername,pName,motiv);
		SendAdminMessage(string,1);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:unwarn(playerid, params[])
{
	new punw, motiv[64], sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[128];
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"us[64]",punw,motiv)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /unwarn [playerid/PartOfName] [motiv]");
    if(punw == INVALID_PLAYER_ID) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e online!");
    GetPlayerName(playerid, sendername, sizeof(sendername));
    GetPlayerName(punw, pName, sizeof(pName));
    PlayerInfo[punw][pWarns] -= 1;
	pUpdate(punw,pWarnsx);
	if(PlayerInfo[punw][pWarns] >= 0)
	{
        format(string, sizeof(string), "Ai primit unwarn de la %s. Motiv: %s.", sendername, motiv);
        SCM(punw, COLOR_LIGHT_BLUE, string);
		return 1;
	}
	format(string,sizeof(string),"AdmCmd: %s a primit unwarn de la %s. Motiv: %s.",pName,sendername,motiv);
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:dice(playerid, params[])
{
	if(BizzEntered[playerid] == -1) SCM(playerid,COLOR_GRAD2,"Nu poti folosi aceasta comanda aici.");
	if(IsPlayerInRangeOfPoint(playerid,1,-2654.5740,1426.0248,906.4609) || IsPlayerInRangeOfPoint(playerid,1,-2660.7439,1426.0248,906.4609))
	{
		new bet, string[256], slevel = GetPlayerScoreEx(playerid)*150000;
		if(dicetime[playerid] == 1) return SCM(playerid,COLOR_GRAD2," Asteapta cateva secunde inainte sa folosesti iar aceasta comanda.");
		if(sscanf(params,"i",bet)) return SCM(playerid,-1, "{B8DBFF}Folosire: /dice [suma]");
		if(bet < 1) SCM(playerid,COLOR_YELLOW2, "Nu poti juca pe mai putin de 1$.");
		else if(bet > slevel) {
			SFM(playerid,COLOR_YELLOW2,"Limita banilor experientei tale de joc este de %s$.",FormatNumber(slevel));
		}
		else
		{
			new money = GetPlayerCash(playerid);
			if(money < bet)
			{
				format(string,sizeof(string),"Miza pusa ( %s$ ) nu corespunde cu suma pe care o detineti ( %s$ ).",FormatNumber(bet),FormatNumber(money));
				SCM(playerid,COLOR_YELLOW2,string);
			}
			else
			{
				new NumberDrawn11,NumberDrawn12,NumberDouble1,NumberDrawn21,NumberDrawn22,NumberDouble2,Winner;
				NumberDrawn11 = random(6)+1;
				NumberDrawn12 = random(6)+1;
				if(NumberDrawn11 == NumberDrawn12) NumberDouble1 = NumberDrawn11;
				NumberDrawn21 = random(6)+1;
				NumberDrawn22 = random(6)+1;
				if(NumberDrawn21 == NumberDrawn22) NumberDouble2 = NumberDrawn21;
				if(NumberDrawn11 + NumberDrawn12 > NumberDrawn21 + NumberDrawn22) {
					Winner = 1;
				}
				else if(NumberDrawn11 + NumberDrawn12 < NumberDrawn21 + NumberDrawn22) {
					Winner = 2;
				}
				else
				{
					if(NumberDouble1 > NumberDouble2) Winner = 1;
					else if(NumberDouble1 < NumberDouble2) Winner = 2;
				}
				format(string,sizeof(string)," * SCOR: %s: %d  [--]  Adversar: %d",GetName(playerid),(NumberDrawn11+NumberDrawn12),(NumberDrawn21+NumberDrawn22));
				SCM(playerid,COLOR_PURPLE,string);
				dicetime[playerid] = 1;
				TogglePlayerControllable(playerid, false);
				ApplyDynamicActorAnimation(actor1,"DEALER","DEALER_DEAL",4.0,0,0,0,0,0);
				ApplyDynamicActorAnimation(actor2,"DEALER","DEALER_DEAL",4.0,0,0,0,0,0);
				ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.0,0,0,0,0,0);
				SetTimerEx_("TDice", 3000, 3100, 1, "i", playerid);
				if(Winner == 1)
				{
					if(NumberDouble1 > 0)
					{
					    format(string,sizeof(string)," * %s a castigat suma de %s$.",GetName(playerid),FormatNumber(bet*2));
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string,sizeof(string),"   (x) Ai castigat %s$, cu o dubla!",FormatNumber(bet*2));
						SCM(playerid,0x00CC00FF,string);
						GivePlayerCash(playerid,bet*2);
					}
					else
					{
						format(string,sizeof(string)," * %s a castigat suma de %s$.",GetName(playerid),FormatNumber(bet));
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string,sizeof(string),"   (+) Ai castigat suma de %s$.",FormatNumber(bet));
						SCM(playerid,0x00CC00FF,string);
						GivePlayerCash(playerid,bet);
					}
				}
				else if(Winner == 2)
				{
					format(string,sizeof(string)," * %s a pierdut suma de %s$.",GetName(playerid),FormatNumber(bet));
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string,sizeof(string),"   (-) Ai pierdut suma de %s$.",FormatNumber(bet));
					SCM(playerid,0xFF0000FF,string);
					GivePlayerCash(playerid,-bet);
					BizzInfo[BizzEntered[playerid]][bMoney] += floatround(floatmul(bet,0.05));
					SaveBusiness(BizzEntered[playerid]);
				}
				else if(Winner == 0) SCM(playerid, 0x0099FFFF,"   (=) Egalitate.");
			}
		}
	}
	else if(BizzInfo[BizzEntered[playerid]][bType] == 5)
	{	
		new id, string[256], suma;
		if(sscanf(params,"ud",id,suma)) return SCM(playerid,-1,"{B8DBFF}Folosire: /dice [playerid/PartOfName] [suma]");
		if(NOON(id));
		if(id == playerid) return SCM(playerid, COLOR_GRAD2, "Nu poti juca cu tine insuti.");
		if(invitatiebarbut[playerid] == id) return SCM(playerid,COLOR_GRAD2,"Deja i-ai trimis o invitatie acestui jucator!");
		if(suma > GetPlayerCash(id)) return SCM(playerid,COLOR_YELLOW2,"Acel player nu are atatia bani la el.");
		if(suma > 10000000) return SCM(playerid,COLOR_YELLOW2,"Nu poti juca pe mai mult de 10.000.000$");
		if(GetDistanceBetweenPlayers(playerid, id) > 3) return SCM(playerid, COLOR_GRAD1, "Acel jucator nu este langa tine.");
		format(string, sizeof(string), "{79BDD4}%s te-a invitat sa joci barbut cu el pentru %s$. Pentru a accepta foloseste [/accept dice %d].",GetName(playerid),FormatNumber(suma),playerid);
		SCM(id, COLOR_WHITE, string);
		format(string, sizeof(string), "{79BDD4}L-ai invitat pe %s sa joace barbut cu tine.",GetName(id));
		SCM(playerid, COLOR_WHITE, string);
		invitatiebarbut[playerid] = id;
		invitatiebarbut[id] = playerid;
		sumabarbut[id] = suma;
	}
	return 1;
}
//==============================================================================
CMD:mute(playerid, params[])
{
	new pmute, minute, sendername[MAX_PLAYER_NAME], pName[MAX_PLAYER_NAME], string[256], motiv[32];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(sscanf(params,"uds[32]",pmute,minute,motiv)) return SCM(playerid,-1,"{B8DBFF}Folosire: /mute [playerid/PartOfName] [time(minutes)] [motiv]");
	    if(NOON(pmute));
	    GetPlayerName(pmute, pName, sizeof(pName));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(minute > 0) PlayerInfo[pmute][pMuted] = 1;
		else PlayerInfo[pmute][pMuted] = 0;
		PlayerInfo[pmute][pMuteTime] = minute*60;
		pUpdate(pmute,pMutedx);
		pUpdate(pmute,pMuteTimex);
		format(string, sizeof(string), "Ai primit mute de la %s pentru %d minute.", sendername,minute);
		SCM(pmute, COLOR_LIGHT_RED, string);
		format(string, sizeof(string), "AdmCmd: %s a primit mute de la %s pentru %d minute. Motiv: %s.", pName,sendername,minute,motiv);
		SendAdminMessage(string,1);
		format(string, sizeof(string), "%s a primit mute de la %s pentru %d minute. Motiv: %s.", pName,sendername,minute,motiv);
		AdminLog(string);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT); 
	return 1;
}
//==============================================================================
CMD:desync(playerid, params[])
{
	new str[128];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		SCM(playerid, COLOR_WHITE, "Playeri cu posibilitatea de a avea desync:");
		foreach(new i: Player)
		{
			if(GetPlayerPing(i) >= 250)
			{
				format(str,sizeof(str),"Nume: %s(ID: %d) - Ping: %d",GetName(i),i,GetPlayerPing(i));
				SCM(playerid,COLOR_FRED,str);
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:clearwanted(playerid, params[])
{
	new str[256], pclear, sendername[MAX_PLAYER_NAME], motiv[64];
	if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pAdmin] > 2)
	{
		if(sscanf(params,"us[64]",pclear,motiv)) return SCM(playerid,-1,"{B8DBFF}Folosire: /clearwanted [playerid/PartOfName] [motiv]");
		if(NOON(pclear));
		if(GetPlayerWantedLevelEx(pclear) == 0) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu are wanted.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(str, sizeof(str), " Liderul Politiei %s ti-a sters Wanted-ul, Motiv: %s",sendername,motiv);
		SCM(pclear, COLOR_LIGHTBLUE, str);
		format(str, sizeof(str), " Liderul %s i-a sters Wanted-ul lui %s, Motiv: %s",sendername,GetName(pclear),motiv);
		SendFactionMessage(1, TEAM_BLUE_COLOR, str);
		SendFactionMessage(2, TEAM_BLUE_COLOR, str);
		SendFactionMessage(3, TEAM_BLUE_COLOR, str);
		SetPlayerWantedLevelEx(pclear, 0);
		PlayerInfo[pclear][pWantedTime] = 0;
		PlayerTextDrawHide(pclear, WantedTime);
	}
	else return SCM(playerid,COLOR_YELLOW2,PLAYER_COP);
	return 1;
}
//==============================================================================
CMD:dropcar(playerid, params[])
{
    new string[228];
	if(PlayerInfo[playerid][pJob] == 8)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii intr-un vehicul!");
		if(IsAnOwnableCar(GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii intr-un vehicul nepersonal!");
		if(PlayerInfo[playerid][pCarTime] == 0)
		{
			format(string,sizeof(string),"Du-te cu vehiculul de tip %s la checkpoint pentru a primi banii.",GetVehicleName(GetPlayerVehicleID(playerid)));
			SCM(playerid,-1,string);
			SetPlayerCheckpointEx(playerid, -1548.3618,123.6438,3.2966,8.0);
			CP[playerid] = 11;
		}
		else return SCM(playerid, COLOR_YELLOW2, "Asteapta cateva minute inainte sa folosesti inca odata comanda!");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Nu esti hot de masini!");
	return 1;
}
//==============================================================================
CMD:weatherall(playerid, params[])
{
    new vreme;
    if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
    if(sscanf(params,"d",vreme)) return SCM(playerid,-1,"{B8DBFF}Folosire: /weatherall [weatherid]");
	if(vreme < 0 || vreme > 45) return SCM(playerid, COLOR_YELLOW2, "Id-ul la vreme poate fi cuprins intre 0 si 45!");
	SetWeather(vreme);
	Weather = vreme;
	return 1;
}
//==============================================================================
CMD:spawncar(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 1, -2033.4347,-117.6303,1035.1719)) return SCM(playerid,COLOR_GRAD2,"Nu te afli la centru de licente!");
	if(GetPlayerScoreEx(playerid) > 4) return SCM(playerid,COLOR_YELLOW2,"Aceasta comanda poate fi folosita doar de incepatori.");
	if(Spawner[playerid] == 1) return SCM(playerid,COLOR_WHITE,"Ai spawnat deja un vehicul, asteapta pana la urmatorul payday.");
	ShowModelSelectionMenu(playerid, carlist, "Alege vehiculul dorit");
	return 1;
} 
//==============================================================================
CMD:enter(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerCash(playerid) > BizzInfo[NearToBizz(playerid)][bEntranceCost])
		{
			new tmpcar = GetPlayerVehicleID(playerid), Float:a;
			foreach(new i: Player)
			{
				if(GetPlayerVehicleID(i) == tmpcar)
				{
					if(IsPlayerInRangeOfPoint(playerid, 4, 2073.2979,-1831.1228,13.5469))
					{
						GetVehicleZAngle(tmpcar, a);
						GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
						SetPlayerVirtualWorld(i, playerid+1);
						SetVehicleVirtualWorld(tmpcar, playerid+1);
						SetVehiclePos(tmpcar, 2062.1294,-1831.5498,13.5469);
						SetVehicleZAngle(tmpcar, 90);
						GivePlayerCash(playerid, -BizzInfo[28][bEntranceCost]);
						BizzInfo[28][bMoney] += BizzInfo[28][bEntranceCost];
						SaveBusiness(28);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 4, 1024.9756,-1030.7930,32.0257))
					{
						GetVehicleZAngle(tmpcar, a);
						GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
						SetPlayerVirtualWorld(i, playerid+1);
						SetVehicleVirtualWorld(tmpcar, playerid+1);
						SetVehiclePos(tmpcar, 1024.9763,-1021.8850,32.1016);
		        		SetVehicleZAngle(tmpcar, 0);
						GivePlayerCash(playerid, -BizzInfo[29][bEntranceCost]);
						BizzInfo[29][bMoney] += BizzInfo[29][bEntranceCost];
						SaveBusiness(29);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 4, 488.3819,-1733.0563,11.1752))
					{
						GetVehicleZAngle(tmpcar, a);
						GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
						SetPlayerVirtualWorld(i, playerid+1);
						SetVehicleVirtualWorld(tmpcar, playerid+1);
						SetVehiclePos(tmpcar, 487.4099,-1741.4585,11.1330);
		        		SetVehicleZAngle(tmpcar, 180);
						GivePlayerCash(playerid, -BizzInfo[30][bEntranceCost]);
						BizzInfo[30][bMoney] += BizzInfo[30][bEntranceCost];
						SaveBusiness(30);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 4, 719.8940,-464.8272,16.3359))
					{
						GetVehicleZAngle(tmpcar, a);
						GetVehiclePos(tmpcar, TeleportDest[i][0],TeleportDest[i][1],TeleportDest[i][2]);
						SetPlayerVirtualWorld(i, playerid+1);
						SetVehicleVirtualWorld(tmpcar, playerid+1);
						SetVehiclePos(tmpcar, 719.8940,-456.8272,16.3359);
						GivePlayerCash(playerid, -BizzInfo[31][bEntranceCost]);
						BizzInfo[31][bMoney] += BizzInfo[31][bEntranceCost];
						SaveBusiness(31);
					}
					else return SCM(playerid,COLOR_YELLOW2,"Nu te afli la un Pay`n Spray");
					TogglePlayerControllable(i, false);
					SetTimerEx_("AfterSpray", 5000, 5000, 1, "if", i, a);
				}
			}
		}
		else return SCM(playerid, COLOR_YELLOW2, "Nu ai bani destui ca sa intri Pay`n Spray.");
	}
	return 1;
}
//==============================================================================
CMD:speedlimit(playerid, params[])
{
	new string[128], speed;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(sscanf(params,"d",speed)) return SCM(playerid, -1, "{B8DBFF}Folosire: /speedlimit [speed]");
		{
			if(speed == 0)
			{
				Speedlimit[playerid] = 0;
				format(string, sizeof(string), "Ti-ai oprit limita de viteza.", speed);
				SCM(playerid, COLOR_WHITE, string);
				return 1;
			}
			if(!(speed > 222 || speed < 90))
			{
				Speedlimit[playerid] = speed - 10;
				format(string, sizeof(string), "Ti-ai setat limita de viteza la {F81414}%d {FFFFFF}km/h.", speed);
				SCM(playerid, COLOR_WHITE, string);
			}
			else return SCM(playerid, COLOR_YELLOW2,"Limita poate fi cuprinsa intre 90 si 222 km/h!");
		}
	}
	return 1;
}
//==============================================================================
CMD:gotohouse(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new casa, string[128];
		if(sscanf(params,"d",casa)) return SCM(playerid,-1,"{B8DBFF}Folosire: /gotohouse [housenumber]");
		if(casa >= MAX_HOUSES || casa < 1) return SCM(playerid,COLOR_YELLOW2,"Number invalid.");
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			SetVehiclePos(tmpcar, HouseInfo[casa][hEntranceX],HouseInfo[casa][hEntranceY],HouseInfo[casa][hEntranceZ]);
		}
		else {
			SetPlayerPosEx(playerid, HouseInfo[casa][hEntranceX],HouseInfo[casa][hEntranceY],HouseInfo[casa][hEntranceZ]);
		}
		GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
		SetPlayerInteriorEx(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		FactionEntered[playerid] = -1;
		HouseEntered[playerid] = -1;
		BizzEntered[playerid] = -1;
		format(string, sizeof(string),"AdmCmd: %s s-a teleportat la casa %d.",GetName(playerid),casa);
		SendAdminMessage(string, 1);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:gotocheckpoint(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new string[128];
	    if(CPX[playerid] == 0.0) return SCM(playerid,COLOR_YELLOW2,"Nu ai un checkpoint activ sau nu te poti teleporta la acesta!");
		SetPlayerPosEx(playerid,CPX[playerid],CPY[playerid],CPZ[playerid]);
		GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
		SetPlayerInteriorEx(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		FactionEntered[playerid] = -1;
		HouseEntered[playerid] = -1;
		BizzEntered[playerid] = -1;
		format(string,sizeof(string),"AdmCmd: %s a folosit comanda /gotocheckpoint.",GetName(playerid));
		SendAdminMessage(string,2);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
alias:gotocheckpoint("gotocp");
//==============================================================================
CMD:gotobizz(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
	    new biz, string[128];
	    if(sscanf(params,"d",biz)) return SCM(playerid,-1,"{B8DBFF}Folosire: /gotobizz [biznumber]");
	    if(biz >= MAX_BUSINESS || biz < 1) return SCM(playerid,COLOR_YELLOW2,"Number invalid.");
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			SetVehiclePos(tmpcar, BizzInfo[biz][bEntranceX],BizzInfo[biz][bEntranceY],BizzInfo[biz][bEntranceZ]);
		}
		else {
			SetPlayerPosEx(playerid, BizzInfo[biz][bEntranceX],BizzInfo[biz][bEntranceY],BizzInfo[biz][bEntranceZ]);
		}
		GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
		SetPlayerInteriorEx(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		FactionEntered[playerid] = -1;
		HouseEntered[playerid] = -1;
		BizzEntered[playerid] = -1;
		format(string, sizeof(string),"AdmCmd: %s s-a teleportat la bizz %d.",GetName(playerid),biz);
		SendAdminMessage(string, 1);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:gotohq(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
	    new hq, string[128];
	    if(sscanf(params,"d",hq)) return SCM(playerid,-1,"{B8DBFF}Folosire: /gotohq [hqnumber]");
	    if(hq >= MAX_FACTIONS || hq < 1) return SCM(playerid,COLOR_YELLOW2,"Number invalid.");
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			SetVehiclePos(tmpcar, FactionInfo[hq][fHQExteriorPosX],FactionInfo[hq][fHQExteriorPosY],FactionInfo[hq][fHQExteriorPosZ]);
		}
		else {
			SetPlayerPosEx(playerid, FactionInfo[hq][fHQExteriorPosX],FactionInfo[hq][fHQExteriorPosY],FactionInfo[hq][fHQExteriorPosZ]);
		}
		GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
		SetPlayerInteriorEx(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		FactionEntered[playerid] = -1;
		HouseEntered[playerid] = -1;
		BizzEntered[playerid] = -1;
		format(string, sizeof(string),"AdmCmd: %s s-a teleportat la HQ %d.",GetName(playerid),hq);
		SendAdminMessage(string, 1);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:m(playerid, params[])
{
	new pm, pName[MAX_PLAYER_NAME], str[256];
	if(sscanf(params,"u",pm)) return SCM(playerid,-1,"{B8DBFF}Folosire: (/m)egaphone [playerid/PartOfName]");
	GetPlayerName(pm,pName,sizeof(pName));
	if(NOON(pm));
	if(IsACop(playerid))
	{
		if(OnDuty[playerid] == 1)
		{
			if(IsACop(pm)) return SCM(playerid,COLOR_YELLOW2,"Nu poti soma un politist.");
		    if(GetDistanceBetweenPlayers(playerid, pm) < 20)
			{
			    if(Megaphone[playerid] == 1) return SCM(playerid,COLOR_GRAD2,"Asteapta 3 secunde!");
				format(str, sizeof(str), "{ffff00}[Ofiter %s]: {ff0000}%s{ffff00} esti urmarit de politie! Preda-te sau risti wanted!", GetName(playerid), pName);
				ProxDetector(20.0, playerid, str, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Megaphone[playerid] = 1;
				Somatii[pm]++;
				SetTimerEx_("MegaPhone", 3000, 3000, 1, "i", playerid);
				SetTimerEx_("RemoveSomatie", 60000, 60000, 1, "i", pm);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Esti prea departe de acest jucator!");
		}
		else return SCM(playerid, COLOR_YELLOW2, "Nu esti on duty.");
	}
	else return SCM(playerid, COLOR_GRAD4, PLAYER_COP);
	return 1;
}
alias:m("megaphone");
//==============================================================================
CMD:buyhouse(playerid, params[])
{
	new string[128];
    for(new h = 1; h < MAX_HOUSES; h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]) && HouseInfo[h][hOwned] == 0)
		{
			if(GetPlayerScoreEx(playerid) < HouseInfo[h][hLevel])
			{
				format(string, sizeof(string), "Trebuie sa ai level %d ca sa cumperi aceasta casa!", HouseInfo[h][hLevel]);
				SCM(playerid, COLOR_YELLOW2, string);
				return 1;
			}
			if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
			if(PlayerInfo[playerid][pHouseKey] != 255) return SCM(playerid, COLOR_YELLOW2, "Ai deja o casa!");
			if(GetPlayerCash(playerid) > HouseInfo[h][hPrice])
			{
				PlayerInfo[playerid][pHouseKey] = h;
				HouseInfo[h][hOwned] = 1;
				HouseInfo[h][hRentabil] = 1;
				strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNamePlayer], 0, strlen(PlayerInfo[playerid][pNamePlayer]), 255);
				GivePlayerCash(playerid,-HouseInfo[h][hPrice]);
				SCM(playerid, COLOR_GRAD2, "Felicitari pentru noua achizitie!");
				SCM(playerid, COLOR_GRAD2, "Foloseste /help pentru mai multe informatii!");
				SaveHouse(PlayerInfo[playerid][pHouseKey]);
				pUpdate(playerid,pHouseKeyx);
				OnPropUpdate("casa", h);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Nu ai destui bani!");
		}
	}
	return 1;
}
//==============================================================================
CMD:housewithdraw(playerid, params[])
{
	new string[128],suma,house;
	house = PlayerInfo[playerid][pHouseKey];
    if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[house][hExitX], HouseInfo[house][hExitY], HouseInfo[house][hExitZ]))
		{
		    if(sscanf(params,"d",suma)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /housewithdraw [suma]");
		    if(suma > HouseInfo[house][hMoney] || suma < 1) return SCM(playerid, COLOR_GRAD2, " Nu ai atat de mult in casa!");
			HouseInfo[house][hMoney] -= suma;
			GivePlayerCash(playerid, suma);
			format(string,sizeof(string),"Ai extras din casa ta %s$.",FormatNumber(suma));
			SCM(playerid,COLOR_GRAD2,string);
			SaveHouse(house);
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu te aflii in casa!");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio casa!");
	return 1;
}
//==============================================================================
CMD:houseinfo(playerid, params[])
{
	new house = PlayerInfo[playerid][pHouseKey], coordsstring[128], lock[5];
    if(house != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[house][hOwner], true) == 0)
	{
		if(HouseInfo[house][hLock] == 0) lock = "Nu"; 
		else lock = "Da";
		SCM(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"Descriere: {ffffff}*** %s ***",HouseInfo[house][hDiscription]);
		SCM(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Inchisa: [%s] Pret intrare: [%d$] In cont: [%s$] Renters: [%d]",lock, HouseInfo[house][hRent], FormatNumber(HouseInfo[house][hMoney]),HouseInfo[house][hRenters]);
		SCM(playerid, COLOR_GRAD1,coordsstring);
		SCM(playerid, COLOR_GREEN,"_______________________________________");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio casa!");
	return 1;
}
//==============================================================================
CMD:hdeposit(playerid, params[])
{
	new string[128], suma, house;
	house = PlayerInfo[playerid][pHouseKey];
    if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3, HouseInfo[house][hExitX], HouseInfo[house][hExitY], HouseInfo[house][hExitZ]))
		{
		    if(sscanf(params,"d",suma)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /hdeposit [suma]");
		    if(suma > GetPlayerCash(playerid)) return SCM(playerid, COLOR_GRAD2, " Nu ai atat de mult!");
		    GivePlayerCash(playerid, -suma);
			HouseInfo[house][hMoney] += suma;
			format(string,sizeof(string),"Ai pus in casa ta %s$.",FormatNumber(suma));
			SCM(playerid,COLOR_GRAD2,string);
			SaveHouse(house);
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu te aflii in casa!");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio casa!");
	return 1;
}
//==============================================================================
CMD:housename(playerid, params[])
{
    new info[64], string[200];
    if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		new house = PlayerInfo[playerid][pHouseKey];
	    if(sscanf(params,"s[64]",info)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /housename [text]");
    	if(IsPlayerInRangeOfPoint(playerid,3, HouseInfo[house][hEntranceX], HouseInfo[house][hEntranceY], HouseInfo[house][hEntranceZ]))
		{
			StrmidEx(HouseInfo[house][hDiscription], info);
			format(string,sizeof(string),"Ai schimbat descrierea casei tale in ''%s''.",info);
			SCM(playerid,COLOR_GRAD2,string);
			SaveHouse(house);
			OnPropUpdate("casa", house);
		}
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu detii o casa!");
	return 1;
}
//==============================================================================
CMD:home(playerid)
{
	if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		SetPlayerCheckpointEx(playerid,HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceX], HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceY], HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceZ], 4.0);
		SCM(playerid,COLOR_ORANGE,"Ti-am setat un checkpoint, acolo e casa ta.");
	}
	else return GameTextForPlayer(playerid, "~w~Nu ai casa", 5000, 1);
	return 1;
}
//==============================================================================
CMD:setrent(playerid, params[])
{
    new rent, string[64];
	if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(sscanf(params,"d",rent)) return SCM(playerid,-1,"{B8DBFF}Folosire: /setrent [suma]");
		if(rent < 1 || rent > 5000) return SCM(playerid, COLOR_YELLOW2, "Chiria minima este 1$, iar maxima 5000$.");
		HouseInfo[PlayerInfo[playerid][pHouseKey]][hRent] = rent;
		SaveHouse(PlayerInfo[playerid][pHouseKey]);
		format(string, sizeof(string), "Chiria setata la %d$", HouseInfo[PlayerInfo[playerid][pHouseKey]][hRent]);
		SCM(playerid, COLOR_GRAD2, string);
		OnPropUpdate("casa", PlayerInfo[playerid][pHouseKey]);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Tu nu detii o casa!");
	return 1;
}
//==============================================================================
CMD:sellhousetostate(playerid)
{
	if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
	    new house = PlayerInfo[playerid][pHouseKey], str[228];
		new bani = floatround(floatmul(HouseInfo[house][hPrice],0.60),floatround_ceil);
		format(str,sizeof(str),"{ffffff}Daca doriti sa va vindeti casa la stat veti primi {66ff00}%s$ {ffffff}pe ea, acceptati?",FormatNumber(bani));
		SPD(playerid,DIALOG_SELL_HOUSE,DIALOG_STYLE_MSGBOX,"Informatii:",str,"Accept","Iesi");
  	}
  	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o casa.");
	return 1;
}
//==============================================================================
CMD:houseupgrade(playerid, params[])
{
    if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{ 
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
		if(HouseEntered[playerid] != PlayerInfo[playerid][pHouseKey]) return SCM(playerid,COLOR_YELLOW2,"Nu te afli in casa ta!");
		SPD(playerid,DIALOG_HOUSE1,DIALOG_STYLE_LIST,"House Upgrade:","1. Health Upgrade\t50.000$\n2. Armour Upgrade\t50.000$\n3. Interior Upgrade\n4. Radio Upgrade\n","Alege","Inchide");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o casa.");
	return 1;
}
alias:houseupgrade("hu");
//==============================================================================
CMD:rentroom(playerid)
{
    for(new h = 1; h < MAX_HOUSES; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
		{
			if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
			{
				SCM(playerid, COLOR_YELLOW2, "Nu poti sta in rent la aceasta casa deoarece detii deja una sau stai deja in rent.");
				return 1;
			}
			if(GetPlayerCash(playerid) > HouseInfo[h][hRent])
			{
				PlayerInfo[playerid][pRented] = h;
				PlayerInfo[playerid][pHouseKey] = h;
				GivePlayerCash(playerid,-HouseInfo[h][hRent]);
				HouseInfo[h][hMoney] += HouseInfo[h][hRent];
				HouseInfo[h][hRenters] += 1;
				SCM(playerid, COLOR_LIGHTGREEN, "Felicitari, acum ai rent la aceasta casa, foloseste /spawnchange pentru ati schimba spawnul.");
				pUpdate(playerid,pRentedx);
				SaveHouse(h);
			}
			else
			{
				SCM(playerid, COLOR_YELLOW2, "Nu ai destui bani.");
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:unrentroom(playerid)
{
    new h = PlayerInfo[playerid][pHouseKey];
	if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		SCM(playerid, COLOR_YELLOW2, "Nu poti folosi comanda daca ai o casa!");
		return 1;
	}
	PlayerInfo[playerid][pRented] = -2;
	PlayerInfo[playerid][pHouseKey] = 255;
	HouseInfo[h][hRenters] -= 1;
	SCM(playerid, COLOR_LIGHTGREEN, "Acum nu mai stai in chirie la nicio casa.");
	pUpdate(playerid,pRentedx);
	SaveHouse(h);
	return 1;
}
//==============================================================================
CMD:setrentable(playerid, params[])
{
    new rent, house = PlayerInfo[playerid][pHouseKey];
	if(house != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params,"d",rent)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /setrentable [0/1]");
		if(rent == 0)
		{
		    HouseInfo[house][hRentabil] = 0;
		    SCM(playerid,COLOR_GRAD2,"Acum casa ta nu mai este de inchiriat!");
		}
		else if(rent == 1)
		{
		    HouseInfo[house][hRentabil] = 1;
		    HouseInfo[house][hRent] = rent;
		    SCM(playerid,COLOR_GRAD2,"Acum casa ta poate fi inchiriata!");
		}
		SaveHouse(house);
		OnPropUpdate("casa", house);
	}
	else return SCM(playerid, COLOR_YELLOW2, "Tu nu ai casa!");
	return 1;
}
//==============================================================================
CMD:buybiz(playerid, params[])
{
    new string[128];
	for(new b = 1; b < MAX_BUSINESS; b++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
		{
			if(GetPlayerScoreEx(playerid) < BizzInfo[b][bLevel])
			{
				format(string, sizeof(string), "Trebuie sa ai level %d ca sa cumperi acest business.",BizzInfo[b][bLevel]);
				SCM(playerid, COLOR_GRAD2, string);
				return 1;
			}
			if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
            if(PlayerInfo[playerid][pBizzKey] != 255) return SCM(playerid, COLOR_YELLOW2, "Ai deja un business.");
			if(GetPlayerCash(playerid) > BizzInfo[b][bPrice])
			{
				PlayerInfo[playerid][pBizzKey] = b;
				BizzInfo[b][bOwned] = 1;
				strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pNamePlayer], 0, strlen(PlayerInfo[playerid][pNamePlayer]), 255);
				GivePlayerCash(playerid,-BizzInfo[b][bPrice]);
				SCM(playerid, COLOR_GRAD2, "Felicitari pentru noua achizitie!");
				SCM(playerid, COLOR_GRAD2, "Foloseste /help pentru mai multe informatii!");
				SaveBusiness(PlayerInfo[playerid][pBizzKey]);
				pUpdate(playerid,pBizzKeyx);
				OnPropUpdate("bizz", b);
			}
			else return SCM(playerid, COLOR_YELLOW2, "Nu ai destui bani!");
		}
	}
	return 1;
}
//==============================================================================
CMD:sellbizztostate(playerid, params[])
{
    if(PlayerInfo[playerid][pBizzKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], BizzInfo[PlayerInfo[playerid][pBizzKey]][bOwner], true) == 0)
	{
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
	    new bouse = PlayerInfo[playerid][pBizzKey], str[228];
		new bani = floatround(floatmul(BizzInfo[bouse][bPrice],0.60),floatround_ceil);
		format(str,sizeof(str),"{ffffff}Daca doriti sa va vindeti afacerea la stat veti primi {66ff00}%s$ {ffffff}pe ea, acceptati?",FormatNumber(bani));
		SPD(playerid,DIALOG_SELL_BIZZ,DIALOG_STYLE_MSGBOX,"Informatii:",str,"Accept","Iesi");
  	}
  	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o afacere.");
	return 1;
}
//==============================================================================
CMD:bizzinfo(playerid)
{
	new bouse = PlayerInfo[playerid][pBizzKey], coordsstring[128], lock[5];
    if(bouse != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], BizzInfo[bouse][bOwner], true) == 0)
	{
		if(BizzInfo[bouse][bLocked] == 0) lock = "Nu";
		else lock = "Da";
		SCM(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[bouse][bName]);
		SCM(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Inchisa: [%s] Pret intrare: [%d$] In cont: [%s$]",lock, BizzInfo[bouse][bEntranceCost], FormatNumber(BizzInfo[bouse][bMoney]));
		SCM(playerid, COLOR_GRAD1,coordsstring);
		SCM(playerid, COLOR_GREEN,"_______________________________________");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o afacere.");
	return 1;
}
//==============================================================================
CMD:bizzwithdraw(playerid, params[])
{
	new money, bizz, string[128];
    bizz = PlayerInfo[playerid][pBizzKey];
	if(bizz == 255) return SCM(playerid, COLOR_GRAD2, " Nu detii un business");
	if(sscanf(params,"d",money)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /bizwithdraw [amount]");
	if(money > BizzInfo[bizz][bMoney] || money < 1) return SCM(playerid, COLOR_GRAD2, " Nu ai atat de mult");
	if(BizzEntered[playerid] != bizz) return SCM(playerid, COLOR_GRAD2, " Nu te afli in afacerea ta!");
	GivePlayerCash(playerid, money);
	BizzInfo[bizz][bMoney] -= money;
	format(string, sizeof(string), "  You Have Withdrawn %s$ from your till Total: %s$ ", FormatNumber(money),FormatNumber(BizzInfo[bizz][bMoney]));
	SaveBusiness(bizz);
	SCM(playerid, COLOR_YELLOW, string);
	return 1;
}
//==============================================================================
CMD:bizzfee(playerid, params[])
{
    new pret, string[128], bouse = PlayerInfo[playerid][pBizzKey];
	if(bouse == 255)
	{
		SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu detineti o Afacere.");
		return 1;
	}
	if(sscanf(params,"d",pret)) return SCM(playerid, -1, "{B8DBFF}Folosire: /bizfee [pret intrare]");
	if(!IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ])) return SCM(playerid, COLOR_GRAD2, " Esti prea departe de bizz!");
	if(pret < 1 || pret > 2000) return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar suma este intre 1$ si 500$.");
	BizzInfo[bouse][bEntranceCost] = pret;
	format(string, sizeof(string), "Pret intrare setat la %s$.", FormatNumber(BizzInfo[bouse][bEntranceCost]));
	SaveBusiness(bouse);
	OnPropUpdate("bizz", bouse);
	SCM(playerid, COLOR_GRAD2, string);
	return 1;
}
//==============================================================================
CMD:info(playerid, params[])
{
	new nr, nume[10], coordsstring[128], lock[5];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"s[10]d",nume,nr)) return SCM(playerid,-1,"{B8DBFF}Folosire: /info [bizz/house] [id]");
	if(nr < 0) return SCM(playerid,COLOR_YELLOW2,"Afacerile incep de la 0.");
	if(strcmp(nume,"bizz",true) == 0)
	{
		if(BizzInfo[nr][bLocked] == 0) lock = "Nu";
		else lock = "Da";
		SCM(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[nr][bName]);
		SCM(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Inchisa: [%s] Pret intrare: [%d$] In cont: [%s$]",lock, BizzInfo[nr][bEntranceCost], FormatNumber(BizzInfo[nr][bMoney]));
		SCM(playerid, COLOR_GRAD1,coordsstring);
		SCM(playerid, COLOR_GREEN,"_______________________________________");
	}
	else if(strcmp(nume,"house",true) == 0)
	{
		if(HouseInfo[nr][hLock] == 0) lock="Nu"; 
		else lock="Da";
		SCM(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"Descriere: {ffffff}*** %s ***",HouseInfo[nr][hDiscription]);
		SCM(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Inchisa: [%s] Pret intrare: [%d$] In cont: [%s$] Renters: [%d]",lock, HouseInfo[nr][hRent], FormatNumber(HouseInfo[nr][hMoney]),HouseInfo[nr][hRenters]);
		SCM(playerid, COLOR_GRAD1,coordsstring);
		SCM(playerid, COLOR_GREEN,"_______________________________________");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nume indisponibil.");
	return 1;
}
//==============================================================================
CMD:pizza(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 5)
	{
		if(JobCar[playerid][PlayerInfo[playerid][pJob]] == GetPlayerVehicleID(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(Pizza[playerid] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio pizza la tine, du-te si reinnoieste-ti stocul.");
			if(CP[playerid] != 0) return SCM(playerid,COLOR_YELLOW2,"Ai deja un checkpoint activ, foloseste /killcp pentru a-l anula.");
			new string[64], rand = random(MAX_HOUSES)+1;
			SetPlayerCheckpointEx(playerid,HouseInfo[rand][hEntranceX],HouseInfo[rand][hEntranceY],HouseInfo[rand][hEntranceZ],4.0);
			new distance = floatround(GetPlayerDistanceFromPoint(playerid, HouseInfo[rand][hEntranceX], HouseInfo[rand][hEntranceY], HouseInfo[rand][hEntranceZ]), floatround_ceil);
			if(PlayerInfo[playerid][pPizzaSkill] == 1) pizzaprice[playerid] = distance*8*(15/50)+distance*8;
			else if(PlayerInfo[playerid][pPizzaSkill] == 2) pizzaprice[playerid] = distance*8*(25/49)+distance*8;
			else if(PlayerInfo[playerid][pPizzaSkill] == 3) pizzaprice[playerid] = distance*8*(35/48)+distance*8;
			else if(PlayerInfo[playerid][pPizzaSkill] == 4) pizzaprice[playerid] = distance*8*(45/47)+distance*8;
			else if(PlayerInfo[playerid][pPizzaSkill] == 5) pizzaprice[playerid] = distance*8*(55/46)+distance*8;
			else if(PlayerInfo[playerid][pPizzaSkill] == 6) pizzaprice[playerid] = distance*8*(60/45)+distance*8;
			CP[playerid] = 32;
			PlayerTextDrawHide(playerid,PizzaText);
			format(string,sizeof(string),"Pizza: ~r~%d~w~ /~g~ 5",Pizza[playerid]);
			PlayerTextDrawSetString(playerid,PizzaText,string);
			PlayerTextDrawShow(playerid,PizzaText);
			SCM(playerid,COLOR_GRAD2,"Du-te la checkpoint pentru a livra pizza.");
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-un scuter de la job.");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu ai jobul Pizza Boy.");
	return 1;
}
//==============================================================================
CMD:setstat(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	new stat, val, jucator, string[128];
    if(sscanf(params,"udd",jucator,stat,val))
    {
        SCM(playerid, COLOR_GRAD1, "{B8DBFF}Folosire: /setstat [playerid/PartOfName] [number] [valoare]");
		SCM(playerid, COLOR_GRAD2, "Coduri disponibile: | 1 = Level | 2 = Bank | 3 = Number | 4 = RP | 5 = FPunish | 6 = Rob");
		SCM(playerid, COLOR_GRAD2, "Coduri disponibile: | 7 = Car1 | 8 = Car2 | 9 = Car3 | 10 = Car4 | 11 = House | 12 = Bizz | 13 = Clan");
		SCM(playerid, COLOR_GRAD2, "Coduri disponibile: | 14 = Faction | 15 = FRank | 16 = Leader | 17 = Car5 | 18 = Car6 | 19 = Car7 | 20 = Car8");
		SCM(playerid, COLOR_GRAD2, "Coduri disponibile: | 21 = Car9 | 22 = Car10 | 23 = Hour");
		return 1;
    }
    if(NOON(jucator));
	if(val < 0) return SCM(playerid,COLOR_YELLOW2,"Valoare invalida!");
    switch(stat)
	{
		case 1:
		{
			SetPlayerScoreEx(jucator, val);
			format(string, sizeof(string), "Levelul lui %s i-a fost setat la %d.", GetName(jucator), val);
		}
		case 2:
		{
			PlayerInfo[jucator][pBank] = val;
			pUpdate(jucator,pBankx);
			format(string, sizeof(string), "Banii din banca lui %s i-au fost setati la %d$.", GetName(jucator), val);
		}
		case 3:
		{
			PlayerInfo[jucator][pNumber] = val;
			format(string, sizeof(string), "NR de telefon lui %s i-a fost setat la %d.", GetName(jucator), val);
		}
		case 4:
		{
			PlayerInfo[jucator][pExp] = val;
			format(string, sizeof(string), "RP-ul lui %s i-a fost setat la %d.", GetName(jucator), val);
		}
		case 5:
		{
			PlayerInfo[jucator][pPunish] = val;
			pUpdate(jucator,pPunishx);
			format(string, sizeof(string), "FPunish-ul lui %s i-a fost setat la %d.", GetName(jucator), val);
		}
		case 6:
 		{
    		PlayerInfo[jucator][pRobPoint] = val;
    		format(string, sizeof(string), "Punctele de rob lui %s i-au fost setate la %d.", GetName(jucator), val);
 		}
 		case 7:
 		{
    		PlayerInfo[jucator][pCarKey][0] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 1 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
 		case 8:
 		{
    		PlayerInfo[jucator][pCarKey][1] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 2 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
 		case 9:
 		{
    		PlayerInfo[jucator][pCarKey][2] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 3 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
 		case 10:
 		{
    		PlayerInfo[jucator][pCarKey][3] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 4 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
 		case 11:
 		{
    		PlayerInfo[jucator][pHouseKey] = val;
			pUpdate(jucator,pHouseKeyx);
    		format(string, sizeof(string), "Casa lui %s i-a fost setata la %d.", GetName(jucator), val);
 		}
 		case 12:
 		{
    		PlayerInfo[jucator][pBizzKey] = val;
			pUpdate(jucator,pBizzKeyx);
    		format(string, sizeof(string), "Bizz-ul lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 13:
 		{
    		PlayerInfo[jucator][pClan] = val;
			pUpdate(jucator,pClanx);
    		format(string, sizeof(string), "Clan-ul lui %s i-a fost setat la %d.", GetName(jucator), val);
			if(val > 0) PlayerInfo[jucator][pClanRank] = 7;
			else PlayerInfo[jucator][pClanRank] = 0;
			pUpdate(jucator,pClanRankx);
 		}
		case 14:
 		{
    		PlayerInfo[jucator][pMember] = val;
			pUpdate(jucator,pMemberx);
    		format(string, sizeof(string), "Factiunea lui %s i-a fost setata la %d.", GetName(jucator), val);
			if(val > 0) PlayerInfo[jucator][pFactionRank] = 1;
			else PlayerInfo[jucator][pFactionRank] = 0;
			pUpdate(jucator,pFactionRankx);
 		}
		case 15:
 		{
    		PlayerInfo[jucator][pFactionRank] = val;
			pUpdate(jucator,pFactionRankx);
    		format(string, sizeof(string), "Rank-ul lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 16:
 		{
    		PlayerInfo[jucator][pLeader] = val;
			pUpdate(jucator,pLeaderx);
    		format(string, sizeof(string), "Leader lui %s i-a fost setat la %d.", GetName(jucator), val);
			if(val > 0) PlayerInfo[jucator][pFactionRank] = 7;
			else PlayerInfo[jucator][pFactionRank] = 0;
			pUpdate(jucator,pFactionRankx);
 		}
		case 17:
 		{
    		PlayerInfo[jucator][pCarKey][4] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 5 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 18:
 		{
    		PlayerInfo[jucator][pCarKey][5] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 6 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 19:
 		{
    		PlayerInfo[jucator][pCarKey][6] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 7 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 20:
 		{
    		PlayerInfo[jucator][pCarKey][7] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 8 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 21:
 		{
    		PlayerInfo[jucator][pCarKey][8] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 9 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
		case 22:
 		{
    		PlayerInfo[jucator][pCarKey][9] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Vehiculul 10 lui %s i-a fost setat la %d.", GetName(jucator), val);
 		}
 		case 23:
 		{
    		PlayerInfo[jucator][pConnectTime] = val;
			pUpdate(jucator,pCarsx);
    		format(string, sizeof(string), "Orele lui %s i-au fost setate la %d.", GetName(jucator), val);
 		}
 		default: format(string, sizeof(string),"Cod invalid.");
	}
	SCM(playerid, COLOR_GRAD2, string);
	return 1;
}
//==============================================================================
alias:s("shout");
CMD:s(playerid, params[])
{
    new mesaj[64], string[128];
	if(PlayerInfo[playerid][pMuted] >= 1) return SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
	if(sscanf(params,"s[64]",mesaj)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: (/s)hout [local chat]");
	format(string, sizeof(string), "%s striga: %s!!!", GetName(playerid), mesaj);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	return 1;
}
//==============================================================================
CMD:sms(playerid, params[])
{
    new text[128], numar, sendername[MAX_PLAYER_NAME], string[256], jucator;
    if(PlayerInfo[playerid][pNumber] == -1) return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu deti un Telefon Mobil (Puteti cumpara din 24/7).");
	if(sscanf(params,"ds[128]",numar,text)) return SCM(playerid,-1,"{B8DBFF}Folosire: /sms [phonenumber] [mesaj]");
    foreach(new i: Player)
	{
		if(PlayerInfo[i][pNumber] == numar && numar != -1)
		{
			jucator = i;
			Mobile[playerid] = jucator;
			if(IsPlayerConnected(jucator))
			{
				if(jucator != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[playerid][pNumber] == numar) return SCM(playerid,COLOR_YELLOW2,"Nu iti poti trimite singur mesaje!");
					if(PhoneOnline[jucator] > 0) return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar acest jucator are telefonul inchis.");
					GetPlayerName(jucator, sendername, sizeof(sendername));
					new money = strlen(text)*7;
					format(string, sizeof(string), "SMS de la %s [%d]: %s", GetName(playerid), PlayerInfo[playerid][pNumber], text);
					SCM(jucator, COLOR_YELLOW, string);
					format(string, sizeof(string), "{99ffcc}SMS trimis lui %s [%d]: %s", sendername, PlayerInfo[jucator][pNumber], text);
					SCM(playerid, COLOR_WHITE, string);
					RingTone[jucator] = 20;
					GivePlayerCash(playerid, money);
					BizzInfo[2][bMoney] += money;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					Mobile[playerid] = -1;
					format(string, sizeof(string), " * %s scoate telefonul, si scrie un mesaj.", GetName(playerid));
					ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:cnnn(playerid, params[])
{
	new text[64], string[64];
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(sscanf(params,"s[64]",text)) return SCM(playerid, -1, "{B8DBFF}Folosire: /cnnn [cnn textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
	    format(string, sizeof(string), "~w~%s",text);
		foreach(new i: Player)
		{
			GameTextForPlayer(i, string, 5000, 4);
			Logs("CNNN.log", PlayerInfo[playerid][pNamePlayer], text);
		}
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:wanted(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[2000], online[64], count = 0, x = -1;
		foreach(new i: Player)
		{
			if(GetPlayerWantedLevelEx(i) >= 1)
			{
				x++;
				Selected[playerid][x] = i;
				format(string, sizeof(string), "%sID: [%d] ~ Nume: [%s] ~ Wanted Level: [%d] ~ Timp: [%s min] ~ Distanta: [%.0f metri]\n",string,i,GetName(i),GetPlayerWantedLevelEx(i),CalculeazaTimp(PlayerInfo[i][pWantedTime]),GetDistanceBetweenPlayers(playerid, i));
				count++;
			}
		}
		if(count == 1) format(online, sizeof(online),"Este 1 suspect online:");
		else format(online, sizeof(online),"Sunt %d suspecti online",count);
		SPD(playerid,DIALOG_WANTED,DIALOG_STYLE_LIST,online,string,"Alege","Inchide");
		if(count == 0) return SCM(playerid, COLOR_GRAD2, "Nu sunt jucatori cu wanted.");
	}
	else return SCM(playerid,COLOR_YELLOW2,PLAYER_COP);
	return 1;
}
//==============================================================================
CMD:givegun(playerid, params[])
{
	new gunid, jucator, sendername[MAX_PLAYER_NAME], string[128];
	if(PlayerInfo[playerid][pAdmin] <= 0) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"ud",jucator,gunid))
	{
	    SCM(playerid,-1, "{B8DBFF}Folosire: /givegun [playerid/PartOfName] [weaponid]");
		SCM(playerid, COLOR_GRAD2, "ID-uri disponibile: [31 = M4], [32 = Tec9], [33 = Country Rifle], [34 = Sniper Rifle], [35 = Rocket Launcher]");
		SCM(playerid, COLOR_GRAD2, "ID-uri disponibile: [16 = Grenazi], [17 = Smoke Grenade], [18 = Molotov], [24 = Desert Eagle], [25 = Shotgun]");
		SCM(playerid, COLOR_GRAD2, "ID-uri disponibile: [27 = Combat Shotgun], [28 = Micro SMG], [29 = SMG], [30 = AK47], [38 = Mini Gun]");
		SCM(playerid, COLOR_GRAD2, "ID-uri disponibile: [41 = Spray can], [46 = Parachute]");
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GivePlayerWeaponEx(jucator, gunid, 1000);
	format(string, sizeof(string), "AdmCmd: %s i-a dat lui %s un %s.", sendername,GetName(jucator),GetWeaponNameEx(gunid));
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:buyfightstyle(playerid)
{
	if(BizzEntered[playerid] == -1) return 1;
	if(BizzInfo[BizzEntered[playerid]][bType] != 8) return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-o sala de gimnastica.");
	SPD(playerid,DIALOG_FIGHT,DIALOG_STYLE_TABLIST,"Stiluri de lupta:","ELBOW\t{33cc00}5000$\nBOXING\t{33cc00}5000$\nGRABKICK\t{33cc00}5000$\nKNEEHEAD\t{33cc00}5000$\nKUNGFU\t{33cc00}5000$\n","Alege","Inchide");
	return 1;
}
//==============================================================================
CMD:buyhat(playerid)
{
	if(BizzEntered[playerid] == -1) return 1;
    if(GetPlayerCash(playerid) < 5000) return SCM(playerid,COLOR_YELLOW2,"Ai nevoie de 5000$ pentru a cumpara o pereche de ochelari.");
	if(BizzInfo[BizzEntered[playerid]][bType] != 11) return SCM(playerid,COLOR_YELLOW2,"Nu esti la un magazin de haine!");
    ShowModelSelectionMenu(playerid, hatlist, "Hats");
	return 1;
}
//==============================================================================
CMD:heal(playerid, params[])
{
	new string[128], pheal, price, faction = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
	if(BizzEntered[playerid] == 4)
	{
		if(IsACop(playerid))
		{
			SetPlayerHealthEx(playerid,99.9);
		    format(string, sizeof(string), " * %s s-a vindecat.",GetName(playerid));
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(faction == FactionEntered[playerid])
	{
		SetPlayerHealthEx(playerid, 99.9);
		format(string, sizeof(string), " * %s s-a vindecat.",GetName(playerid));
		ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(HouseEntered[playerid] != -1)
	{
		if(HouseInfo[HouseEntered[playerid]][hHeall] == 1)
		{
			SetPlayerHealthEx(playerid,99.9);
			format(string, sizeof(string), " * %s s-a vindecat.", GetName(playerid));
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(faction == 4)
	{
		if(sscanf(params,"ui",pheal,price)) return SCM(playerid, -1, "{B8DBFF}Folosire: /heal [playerid/PartOfName] [price]");
		if(price < 1 || price > 3000) return SCM(playerid, COLOR_YELLOW2, "Pretul trebuie sa fie cuprins intre 1$ si 3000$!");
		if(pheal == playerid) return SCM(playerid, COLOR_YELLOW2, "Nu te poti vindeca singur!");
		if(NOON(pheal));
		new car = GetPlayerVehicleID(playerid), hcar = GetPlayerVehicleID(pheal);
		if(StaticVeh[car][svFaction] == 4 && (car == hcar))
		{
			new Float:tempheal;
			GetPlayerHealthEx(pheal,tempheal);
			if(tempheal >= 100) return SCM(playerid, COLOR_GRAD2,"Aceasta persoana are viata full.");
			GivePlayerCash(playerid,price);
			GivePlayerCash(pheal,-price);
			SetPlayerHealthEx(pheal, 99.9);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			PlayerPlaySound(pheal, 1150, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* Ai fost vindecat de %s pentru %d$.",GetName(playerid),price);
			SCM(pheal, TEAM_GROVE_COLOR,string);
		}
		else return	SCM(playerid, COLOR_YELLOW2, "Nu esti intr-o amublanta!");
	}
	return 1;
}
//==============================================================================
CMD:turfs(playerid, params[])
{
	if(GetPVarInt(playerid, "TurfsDisp") == 0)
	{
        SetPVarInt(playerid, "TurfsDisp", 1);
		for(new i = 1; i < MAX_TURFS; i++)
		{
			if(TurfInfo[i][zOwned] == 5) ShowZoneForPlayer(playerid, Turfs[i], TEAM_AZTECAS_COLOR);
			if(TurfInfo[i][zOwned] == 6) ShowZoneForPlayer(playerid, Turfs[i], TEAM_RUSSIAN_COLOR);
			if(TurfInfo[i][zOwned] == 11) ShowZoneForPlayer(playerid, Turfs[i], TEAM_GROVE_COLOR);
			if(TurfInfo[i][zOwned] == 12) ShowZoneForPlayer(playerid, Turfs[i], TEAM_VAGOS_COLOR);
			if(TurfInfo[i][zOwned] == 13) ShowZoneForPlayer(playerid, Turfs[i], TEAM_BALLAS_COLOR);
		}
	}
	else
	{
		SetPVarInt(playerid, "TurfsDisp", 0);
		for(new i = 1; i < MAX_TURFS; i++) HideZoneForPlayer(playerid, Turfs[i]);
	}
	return 1;
}
//==============================================================================
CMD:attack(playerid, params[])
{
	new turf, faction, string[128], year, month, day, sendername[MAX_PLAYER_NAME], leadersss, hour, minute, second;
	if(!IsAGangMember(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu faci parte dintr-un gang de mafii.");
	if(PlayerInfo[playerid][pFactionRank] < 5) return SCM(playerid,TEAM_CYAN_COLOR,"Poti da /attack de la rank 5.");
	gettime(hour,minute,second);
	getdate(year, month, day);
	new days[180];
	format(days, sizeof(days), GetWeekDay(day, month, year));
	if(strcmp(days,"Saturday",true) == 0 || strcmp(days,"Sunday",true) == 0) return SCM(playerid, COLOR_YELLOW2, "Nu se dau war-uri in weekend!");	
	if(hour > 18 && hour < 22)
	{
		for(new i = 1; i < MAX_TURFS; i++)
		{
			if(IsPlayerInTurf(playerid, i) == 1)
			{
				turf = i;
				break;
			}
	    }
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    if(turf == 0) return SCM(playerid, TEAM_CYAN_COLOR, "Nu esti pe un turf.");
	    faction = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
	    if(TurfInfo[turf][zOwned] == faction) return SCM(playerid, TEAM_CYAN_COLOR, "Nu poti sa-ti ataci propriul teriotoriu.");
		if(WarInfo[turf][wAttacker] != 0) return SCM(playerid, TEAM_CYAN_COLOR, "Acest turf este deja atacat.");
		if(InWar[faction] == 1) return SCM(playerid, TEAM_CYAN_COLOR, "Ai deja un war activ.");
		if(InWar[TurfInfo[turf][zOwned]] == 1) return SCM(playerid, COLOR_YELLOW2, "Aceasta mafie este deja intr-un war.");
		foreach(new p: Player) {
		    if(PlayerInfo[p][pLeader] == TurfInfo[turf][zOwned]) leadersss++;
		}
		if(leadersss < 1) return SCM(playerid, TEAM_CYAN_COLOR, "Detinatorii acestui turf nu au liderul online.");
		WarInfo[turf][wTime] = 1200;
		WarInfo[turf][wAttacker] = faction;
		WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
		format(string,sizeof(string),"Mafia %s a atacat turful %d care este detinut de voi.",NumeFactiune(faction),turf);
		SendFactionMessage(TurfInfo[turf][zOwned],TEAM_AZTECAS_COLOR,string);
		format(string,sizeof(string),"Ai pornit un war pe turful %d detinut de %s.",turf,NumeFactiune(TurfInfo[turf][zOwned]));
		SCM(playerid,TEAM_AZTECAS_COLOR,string);
		format(string,sizeof(string),"War-ul a inceput mult noroc tuturor!	Timp: 20:00 minute");
		SendFactionMessage(TurfInfo[turf][zOwned],TEAM_AZTECAS_COLOR,string);
		SendFactionMessage(faction,TEAM_AZTECAS_COLOR,string);
		InWar[TurfInfo[turf][zOwned]] = 1;
		InWar[faction] = 1;
		Wartimeon[faction] = 1;
		Wartimeon[TurfInfo[turf][zOwned]] = 1;
	}
	else return SCM(playerid,COLOR_GRAD2,"Poti porni un war doar intre orele 19:00 - 21:00.");
	return 1;
}
//==============================================================================
CMD:put(playerid, params[])
{
	new string[64], skin = GetPlayerSkinEx(playerid);
	if(isnull(params)) return SCM(playerid, -1, "{B8DBFF}Folosire: /put [hat/glasses]");
	if(strcmp(params,"hat",true) == 0 && PlayerInfo[playerid][pHat] != -1)
	{
		SetPlayerAttachedObject(playerid, 1, PlayerInfo[playerid][pHat], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3], SkinCaps[skin][4], SkinCaps[skin][5], 1.000, 1.000, 1.000);
		format(string,sizeof(string)," * %s si-a pus palaria.",GetName(playerid));
		ProxDetector(5, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(params,"glasses",true) == 0 && PlayerInfo[playerid][pGlasses] != -1)
	{
		SetPlayerAttachedObject(playerid, 2, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5], 1.000, 1.000, 1.000);
		format(string,sizeof(string)," * %s si-a pus ochelarii.",GetName(playerid));
		ProxDetector(5, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}
//==============================================================================
CMD:edithat(playerid, params[])
{
	if(PlayerInfo[playerid][pHat] == 0) return SCM(playerid,COLOR_GRAD2,"Nu ai nicio palarie in cap!");
	EditAttachedObject(playerid, 1);
	return 1;
}
//==============================================================================
CMD:remove(playerid, params[])
{
    new string[64];
	if(isnull(params))
	{
	    SCM(playerid, -1, "{B8DBFF}Folosire: /remove [nume]");
		SCM(playerid,COLOR_GRAD2,"Nume disponibile: hat, glasses");
	    return 1;
	}
	if(strcmp(params,"hat",true) == 0)
	{
		RemovePlayerAttachedObject(playerid, 1);
		format(string,sizeof(string)," * %s si-a scos palaria.",GetName(playerid));
		ProxDetector(5, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(params,"glasses",true) == 0)
	{
		format(string, sizeof(string), " * %s si-a scos ochelarii.", GetName(playerid));
		ProxDetector(5, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		RemovePlayerAttachedObject(playerid, 2);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!");
	return 1;
}
//==============================================================================
CMD:cuff(playerid, params[])
{
	new pcuff, sendername[MAX_PLAYER_NAME], string[128];
	if(!IsACop(playerid)) return SCM(playerid,COLOR_YELLOW2,PLAYER_COP);
	if(sscanf(params,"u",pcuff)) return SCM(playerid,-1,"{B8DBFF}Folosire: /cuff [Playerid/PartOfName]");
	if(IsACop(pcuff)) return SCM(playerid,COLOR_YELLOW2,"Nu poti incatusa un politist.");
	if(PlayerCuffed[pcuff] > 0) return SCM(playerid, COLOR_YELLOW2, "Acest jucator este deja incatusat!");
    if(ProxDetectorS(8.0, playerid, pcuff))
	{
	    new car = GetPlayerVehicleID(playerid);
	    if(pcuff == playerid) return SCM(playerid, COLOR_YELLOW2, "Nu te poti incatusa singur!");
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInVehicle(pcuff, car))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " * %s l-a incatusat pe %s.", sendername ,GetName(pcuff));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GameTextForPlayer(pcuff, "~r~INCATUSAT", 2500, 3);
			TogglePlayerControllable(pcuff, false);
			PlayerCuffed[pcuff] = 2;
			PlayerCuffedTime[pcuff] = 99999;
	    }
	    else return SCM(playerid, COLOR_YELLOW2, "Acest jucator nu e in masina sau tu nu conduci!");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Acel player nu este langa tine!");
	return 1;
}
//==============================================================================
CMD:uncuff(playerid, params[])
{
    new pcuff, sendername[MAX_PLAYER_NAME], string[128];
	if(!IsACop(playerid)) return SCM(playerid,COLOR_YELLOW2,PLAYER_COP);
	if(sscanf(params,"u",pcuff)) return SCM(playerid,-1,"{B8DBFF}Folosire: /uncuff [Playerid/PartOfName]");
	if(IsACop(pcuff)) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda pe un politist.");
	if(ProxDetectorS(8.0, playerid, pcuff))
	{
	    if(pcuff == playerid) return SCM(playerid, COLOR_YELLOW2, "Nu te poti elibera singur!");
	    if(PlayerCuffed[pcuff] <= 0) return SCM(playerid, COLOR_YELLOW2, "Acest jucator nu este incatusat!");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), " * %s l-a eliberat pe %s.", sendername ,GetName(pcuff));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		GameTextForPlayer(pcuff, "~g~ELIBERAT", 2500, 3);
		TogglePlayerControllable(pcuff, true);
		PlayerCuffed[pcuff] = 0;
	}
	else return SCM(playerid, COLOR_YELLOW2, "Acel player nu este langa tine!");
	return 1;
}
//==============================================================================
CMD:eat(playerid)
{
	if(BizzEntered[playerid] == -1) return 1;
	if(BizzInfo[BizzEntered[playerid]][bType] == 7 || BizzInfo[BizzEntered[playerid]][bType] == 9 || BizzInfo[BizzEntered[playerid]][bType] == 14)
	{
		new Float:health;
		GetPlayerHealthEx(playerid,health);
		if(health >= 75)
		{
	        ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    SetPlayerHealthEx(playerid,99.9);
		    GivePlayerCash(playerid,-200);
		    BizzInfo[BizzEntered[playerid]][bMoney] += 200;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else
		{
			SetPlayerHealthEx(playerid, health+25);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerCash(playerid,-200);
		    BizzInfo[BizzEntered[playerid]][bMoney] += 200;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		SaveBusiness(BizzEntered[playerid]);
    }
	else return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda in aceasta locatie!");
	return 1;
}
//==============================================================================
CMD:intrarebiz(playerid, params[])
{
    new bizz, string[256];
	if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"d",bizz)) return SCM(playerid,-1, "{B8DBFF}Folosire: /intrarebiz [bizid] => Muti intrarea bizz-ul la tine");
    if(bizz >= MAX_BUSINESS || bizz < 1)
	{
	    format(string,sizeof(string),"ID-ul bizz-ului trebuie sa fie cuprins intre 1 si %d.",MAX_BUSINESS);
	    SCM(playerid,COLOR_YELLOW2,string);
	    return 1;
	}
	else
	{
	    new Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,X,Y,Z);
	    format(string,sizeof(string),"Intrarea la Bizz-ul %d a fost mutata la coordonatele [ %f | %f | %f ]",bizz,X,Y,Z);
	    SendAdminMessage(string,1);
		BizzInfo[bizz][bEntranceX] = X;
		BizzInfo[bizz][bEntranceY] = Y;
		BizzInfo[bizz][bEntranceZ] = Z;
		SaveBusiness(bizz);
		OnPropUpdate("bizz", bizz);
	}
	return 1;
}
//==============================================================================
CMD:iesirebiz(playerid, params[])
{
    new bizz, string[256];
	if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"d",bizz)) return SCM(playerid,-1, "{B8DBFF}Folosire: /iesirebiz [bizid] => Muti iesirea bizz-ul la tine");
    if(bizz >= MAX_BUSINESS || bizz < 1)
	{
	    format(string,sizeof(string),"ID-ul bizz-ului trebuie sa fie cuprins intre 1 si %d.",MAX_BUSINESS);
	    SCM(playerid,COLOR_YELLOW2,string);
	    return 1;
	}
	else
	{
	    new Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,X,Y,Z);
	    format(string,sizeof(string),"Iesirea la Bizz-ul %d a fost mutata la coordonatele [ %f | %f | %f ]",bizz,X,Y,Z);
	    SendAdminMessage(string,1);
		BizzInfo[bizz][bExitX] = X;
		BizzInfo[bizz][bExitY] = Y;
		BizzInfo[bizz][bExitZ] = Z;
		SaveBusiness(bizz);
	}
	return 1;
}
//==============================================================================
CMD:vama(playerid)
{
    if(PlayerInfo[playerid][pPassport] == 0) return SCM(playerid,COLOR_YELLOW2,"Ai nevoie de pasaport pentru a trece.");
    if(VamaOn[playerid] != 0) return SCM(playerid,COLOR_YELLOW2,"Ai deschis deja poarta. Asteapta...");
	if(IsPlayerInRangeOfPoint(playerid,8,64.3956,-1540.8400,4.6137))
	{
	    MoveDynamicObject(vama2,67.32196,-1541.43079,-0.5, 5);
	    VamaOn[playerid] = 1;
	    SetTimerEx_("GateClose2",5000,5000,1,"i",playerid);
	    GivePlayerCash(playerid,-BizzInfo[20][bEntranceCost]);
	    BizzInfo[20][bMoney] += BizzInfo[20][bEntranceCost];
	    SaveBusiness(20);
    }
    else if(IsPlayerInRangeOfPoint(playerid,8,72.9694,-1527.2271,4.6103))
    {
	    MoveDynamicObject(vama1,67.61866,-1526.49878,-0.6, 5);
	    VamaOn[playerid] = 1;
	    SetTimerEx_("GateClose1",5000,5000,1,"i",playerid);
	    GivePlayerCash(playerid,-BizzInfo[20][bEntranceCost]);
	    BizzInfo[20][bMoney] += BizzInfo[20][bEntranceCost];
	    SaveBusiness(20);
    }
    else if(IsPlayerInRangeOfPoint(playerid,8,1742.0980,503.2865,28.9012))
    {
	    MoveDynamicObject(vama3,1743.43616, 506.75204, 20.59650, 5);
	    VamaOn[playerid] = 1;
	    SetTimerEx_("GateClose3",5000,5000,1,"i",playerid);
	    GivePlayerCash(playerid,-BizzInfo[20][bEntranceCost]);
	    BizzInfo[20][bMoney] += BizzInfo[20][bEntranceCost];
	    SaveBusiness(20);
    }
    else if(IsPlayerInRangeOfPoint(playerid,8,1725.6925,516.5693,28.5107))
    {
	    MoveDynamicObject(vama4,1724.68164, 512.72815, 20.59650, 5);
	    VamaOn[playerid] = 1;
	    SetTimerEx_("GateClose4",5000,5000,1,"i",playerid);
	    GivePlayerCash(playerid,-BizzInfo[20][bEntranceCost]);
	    BizzInfo[20][bMoney] += BizzInfo[20][bEntranceCost];
	    SaveBusiness(20);
    }
    else return SCM(playerid,COLOR_YELLOW2,"Nu te afli langa o vama!");
    return 1;
}
//==============================================================================
CMD:edit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	new name[16], valoare[20], string[128];
	if(sscanf(params,"s[16]s[20]",name,valoare))
	{
		SCM(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
		SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /edit [name] [ammount] (doar pentru case si afaceri)");
		SCM(playerid, COLOR_GREY, "Nume disponibile: Level, Price, Name, Location");
		SCM(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}
	for(new i = 1; i < MAX_HOUSES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			format(string, sizeof(string), "House: %d", i);
			SCM(playerid, COLOR_GRAD2, string);
			if(strcmp(name,"level",true) == 0)
			{
				if(IsNumber(valoare))
				{
					HouseInfo[i][hLevel] = strval(valoare);
					SaveHouse(i);
				}
			}
			else if(strcmp(name,"price",true) == 0)
			{
				if(IsNumber(valoare))
				{
					HouseInfo[i][hPrice] = strval(valoare);
					SaveHouse(i);
				}
			}
			else if(strcmp(name,"name",true) == 0)
			{
				StrmidEx(HouseInfo[i][hDiscription], valoare);
				SaveHouse(i);
			}
			OnPropUpdate("casa", i);
		}
	}
	for(new i = 1; i < MAX_BUSINESS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			format(string, sizeof(string), "Biz: %d", i);
			SCM(playerid, COLOR_GRAD2, string);
			if(strcmp(name,"level",true) == 0)
			{
				if(IsNumber(valoare))
				{
					BizzInfo[i][bLevel] = strval(valoare);
					SaveBusiness(i);
				}
			}
			else if(strcmp(name,"price",true) == 0)
			{
				if(IsNumber(valoare))
				{
					BizzInfo[i][bPrice] = strval(valoare);
					SaveBusiness(i);
				}
			}
			else if(strcmp(name,"name",true) == 0)
			{
				StrmidEx(BizzInfo[i][bName], valoare);
				SaveBusiness(i);
			}
			else if(strcmp(name,"location",true) == 0)
			{
				if(IsNumber(valoare))
				{
					BizzInfo[i][bLocation] = strval(valoare);
					SaveBusiness(i);
				}
			}
			OnPropUpdate("bizz", i);
		}
	}
	format(string, sizeof(string), "Ai modificat %s in %s.",name,valoare);
	SCM(playerid, COLOR_WHITE, string);
	return 1;
}
//==============================================================================
CMD:editint(playerid, params[])
{
	new interior;
	if(!IsPlayerScripter(playerid)) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"d",interior)) return SCM(playerid,-1,"{B8DBFF}Folosire: /editint [interiorid]");
	for(new i = 1; i < MAX_HOUSES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]))
		{
		    switch(interior)
			{
		  		case 2: { HouseInfo[i][hExitX] = 140.17; HouseInfo[i][hExitY] = 1366.07; HouseInfo[i][hExitZ] = 1083.65; HouseInfo[i][hInterior] = 5; }
				case 3: { HouseInfo[i][hExitX] = 2324.53; HouseInfo[i][hExitY] = -1149.54; HouseInfo[i][hExitZ] = 1050.71; HouseInfo[i][hInterior] = 12; }
				case 4: { HouseInfo[i][hExitX] = 225.68; HouseInfo[i][hExitY] = 1021.45; HouseInfo[i][hExitZ] = 1084.02; HouseInfo[i][hInterior] = 7; }
				case 5: { HouseInfo[i][hExitX] = 234.19; HouseInfo[i][hExitY] = 1063.73; HouseInfo[i][hExitZ] = 1084.21; HouseInfo[i][hInterior] = 6; }
				case 6: { HouseInfo[i][hExitX] = 226.3; HouseInfo[i][hExitY] = 1114.24; HouseInfo[i][hExitZ] = 1080.99; HouseInfo[i][hInterior] = 5; }
				case 7: { HouseInfo[i][hExitX] = 235.34; HouseInfo[i][hExitY] = 1186.68; HouseInfo[i][hExitZ] = 1080.26; HouseInfo[i][hInterior] = 3; }
				case 8: { HouseInfo[i][hExitX] = 491.07; HouseInfo[i][hExitY] = 1398.5; HouseInfo[i][hExitZ] = 1080.26; HouseInfo[i][hInterior] = 2; }
				case 9: { HouseInfo[i][hExitX] = 24.04; HouseInfo[i][hExitY] = 1340.17; HouseInfo[i][hExitZ] = 1084.38; HouseInfo[i][hInterior] = 10; }
				case 10: { HouseInfo[i][hExitX] = -283.44; HouseInfo[i][hExitY] = 1470.93; HouseInfo[i][hExitZ] = 1084.38; HouseInfo[i][hInterior] = 15; }
				case 11: { HouseInfo[i][hExitX] = -260.49; HouseInfo[i][hExitY] = 1456.75; HouseInfo[i][hExitZ] = 1084.37; HouseInfo[i][hInterior] = 4; }
				case 12: { HouseInfo[i][hExitX] = 83.03; HouseInfo[i][hExitY] = 1322.28; HouseInfo[i][hExitZ] = 1083.87; HouseInfo[i][hInterior] = 9; }
				case 13: { HouseInfo[i][hExitX] = 2317.89; HouseInfo[i][hExitY] = -1026.76; HouseInfo[i][hExitZ] = 1050.22; HouseInfo[i][hInterior] = 9; }
				case 14: { HouseInfo[i][hExitX] = 2495.98; HouseInfo[i][hExitY] = -1692.08; HouseInfo[i][hExitZ] = 1014.74; HouseInfo[i][hInterior] = 3; }
				case 15: { HouseInfo[i][hExitX] = 2807.48; HouseInfo[i][hExitY] = -1174.76; HouseInfo[i][hExitZ] = 1025.57; HouseInfo[i][hInterior] = 8; }
				case 16: { HouseInfo[i][hExitX] = 2196.85; HouseInfo[i][hExitY] = -1204.25; HouseInfo[i][hExitZ] = 1049.02; HouseInfo[i][hInterior] = 6; }
				case 17: { HouseInfo[i][hExitX] = 377.15; HouseInfo[i][hExitY] = 1417.41; HouseInfo[i][hExitZ] = 1081.33; HouseInfo[i][hInterior] = 15; }
				case 18: { HouseInfo[i][hExitX] = 2270.38; HouseInfo[i][hExitY] = -1210.35; HouseInfo[i][hExitZ] = 1047.56; HouseInfo[i][hInterior] = 10; }
				case 19: { HouseInfo[i][hExitX] = 446.99; HouseInfo[i][hExitY] = 1397.07; HouseInfo[i][hExitZ] = 1084.3; HouseInfo[i][hInterior] = 2; }
				case 20: { HouseInfo[i][hExitX] = 387.22; HouseInfo[i][hExitY] = 1471.7; HouseInfo[i][hExitZ] = 1080.19; HouseInfo[i][hInterior] = 15; }
				case 21: { HouseInfo[i][hExitX] = 22.88; HouseInfo[i][hExitY] = 1403.33; HouseInfo[i][hExitZ] = 1084.44; HouseInfo[i][hInterior] = 5; }
				case 22: { HouseInfo[i][hExitX] = 2365.31; HouseInfo[i][hExitY] = -1135.6; HouseInfo[i][hExitZ] = 1050.88; HouseInfo[i][hInterior] = 8; }
				case 23: { HouseInfo[i][hExitX] = 2237.59; HouseInfo[i][hExitY] = -1081.64; HouseInfo[i][hExitZ] = 1049.02; HouseInfo[i][hInterior] = 2; }
				case 24: { HouseInfo[i][hExitX] = 295.04; HouseInfo[i][hExitY] = 1472.26; HouseInfo[i][hExitZ] = 1080.26; HouseInfo[i][hInterior] = 15; }
				case 25: { HouseInfo[i][hExitX] = 261.12; HouseInfo[i][hExitY] = 1284.3; HouseInfo[i][hExitZ] = 1080.26; HouseInfo[i][hInterior] = 4; }
				case 26: { HouseInfo[i][hExitX] = 221.92; HouseInfo[i][hExitY] = 1140.2; HouseInfo[i][hExitZ] = 1082.61; HouseInfo[i][hInterior] = 4; }
				case 27: { HouseInfo[i][hExitX] = -68.81; HouseInfo[i][hExitY] = 1351.21; HouseInfo[i][hExitZ] = 1080.21; HouseInfo[i][hInterior] = 6; }
				case 28: { HouseInfo[i][hExitX] = 260.85; HouseInfo[i][hExitY] = 1237.24; HouseInfo[i][hExitZ] = 1084.26; HouseInfo[i][hInterior] = 9; }
				case 29: { HouseInfo[i][hExitX] = 2468.84; HouseInfo[i][hExitY] = -1698.24; HouseInfo[i][hExitZ] = 1013.51; HouseInfo[i][hInterior] = 2; }
				case 30: { HouseInfo[i][hExitX] = 223.2; HouseInfo[i][hExitY] = 1287.08; HouseInfo[i][hExitZ] = 1082.14; HouseInfo[i][hInterior] = 1; }
				case 31: { HouseInfo[i][hExitX] = 2283.04; HouseInfo[i][hExitY] = -1140.28; HouseInfo[i][hExitZ] = 1050.9; HouseInfo[i][hInterior] = 11; }
				case 32: { HouseInfo[i][hExitX] = 328.05; HouseInfo[i][hExitY] = 1477.73; HouseInfo[i][hExitZ] = 1084.44; HouseInfo[i][hInterior] = 15; }
				case 33: { HouseInfo[i][hExitX] = 223.2; HouseInfo[i][hExitY] = 1287.08; HouseInfo[i][hExitZ] = 1082.14; HouseInfo[i][hInterior] = 1; }
				case 34: { HouseInfo[i][hExitX] = -42.59; HouseInfo[i][hExitY] = 1405.47; HouseInfo[i][hExitZ] = 1084.43; HouseInfo[i][hInterior] = 8; }
				case 35: { HouseInfo[i][hExitX] = 446.9; HouseInfo[i][hExitY] = 506.35; HouseInfo[i][hExitZ] = 1001.42; HouseInfo[i][hInterior] = 12; }
				case 36: { HouseInfo[i][hExitX] = 299.78; HouseInfo[i][hExitY] = 309.89; HouseInfo[i][hExitZ] = 1003.3; HouseInfo[i][hInterior] = 4; }
				case 37: { HouseInfo[i][hExitX] = 2308.77; HouseInfo[i][hExitY] = -1212.94; HouseInfo[i][hExitZ] = 1049.02; HouseInfo[i][hInterior] = 6; }
				case 38: { HouseInfo[i][hExitX] = 2233.64; HouseInfo[i][hExitY] = -1115.26; HouseInfo[i][hExitZ] = 1050.88; HouseInfo[i][hInterior] = 5; }
				case 39: { HouseInfo[i][hExitX] = 2218.4; HouseInfo[i][hExitY] = -1076.18; HouseInfo[i][hExitZ] = 1050.48; HouseInfo[i][hInterior] = 1; }
				case 40: { HouseInfo[i][hExitX] = 266.5; HouseInfo[i][hExitY] = 304.9; HouseInfo[i][hExitZ] = 999.15; HouseInfo[i][hInterior] = 2; }
				case 41: { HouseInfo[i][hExitX] = 243.72; HouseInfo[i][hExitY] = 304.91; HouseInfo[i][hExitZ] = 999.15; HouseInfo[i][hInterior] = 1; }
				case 42: { HouseInfo[i][hExitX] = 343.81; HouseInfo[i][hExitY] = 304.86; HouseInfo[i][hExitZ] = 999.15; HouseInfo[i][hInterior] = 6; }
				case 43: { HouseInfo[i][hExitX] = 2259.38; HouseInfo[i][hExitY] = -1135.77; HouseInfo[i][hExitZ] = 1050.64; HouseInfo[i][hInterior] = 10; }
				default: SCM(playerid,COLOR_YELLOW2,"ID interior indisponibil.");
			}
			SaveHouse(i);
			OnPropUpdate("casa", i);
		}
	}
	return 1;
}
//==============================================================================
CMD:unrentveh(playerid)
{
	if(HireCar[playerid] == -1) return SCM(playerid,COLOR_YELLOW2,"Nu ai in chirie niciun vehicul.");
    new carid = HireCar[playerid];
    CarRented[carid] = 0;
    gCarLock[carid] = 0;
	HireCar[playerid] = -1;
	DeletePVar(playerid, "RentCar");
	SCM(playerid,COLOR_GRAD2,"Nu mai ai in chirie niciun vehicul!");
	return 1;
}
//==============================================================================
CMD:rentfind(playerid)
{
	if(HireCar[playerid] == -1) return SCM(playerid,COLOR_YELLOW2,"Nu ai in chirie niciun vehicul.");
	new carid = HireCar[playerid];
	new Float:xv,Float:yv,Float:zv;
	GetVehiclePos(carid,xv,yv,zv);
	SetPlayerCheckpointEx(playerid,xv,yv,zv,4.5);
	SCM(playerid,COLOR_ORANGE,"Ti-am setat un checkpoint cu locatia vehiculului inchiriat.");
	return 1;
}
//==============================================================================
CMD:sleep(playerid, params[])
{
	if(HouseEntered[playerid] == PlayerInfo[playerid][pHouseKey])
    {
        if(GetPlayerWantedLevelEx(playerid) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[HouseEntered[playerid]][hExitX],HouseInfo[HouseEntered[playerid]][hExitY],HouseInfo[HouseEntered[playerid]][hExitZ])) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi comanda daca esti prea aproape de usa.");
            if(Sleeping[playerid] == 0)
			{
   				Sleeping[playerid] = 1;
				TogglePlayerControllable(playerid, false);
     			SCM(playerid, COLOR_WHITE, "INFO: Acum caracterul tau este AFK, foloseste /sleep pentru a reveni iar in joc.");
                ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, -1);
				SetPlayerColor(playerid,COLOR_GRAD2);
				UpdateVar(playerid, "Status", 2);
			}
			else if(Sleeping[playerid] == 1)
			{
				Sleeping[playerid] = 0;
				TogglePlayerControllable(playerid, true);
				StopLoopingAnim(playerid);
				ClearAnimations(playerid);
                SCM(playerid, COLOR_WHITE, "INFO: Bine ai revenit in joc. Distractie placuta!");
				SetPlayerTeamColor(playerid);
				UpdateVar(playerid, "Status", 1);
		    }
        }
        else return SCM(playerid, COLOR_YELLOW2, "Nu poti folosi comanda daca ai wanted.");
    }
    else return SCM(playerid, COLOR_YELLOW2, "Trebuie sa ai o casa sau rent la una pentru a folosi comanda.");
	return 1;
}
//==============================================================================
CMD:buyvehicle(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_VEHICLE,"Nu poti folosi comanda daca esti intr-un vehicul.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 2131.4885,-1150.5781,24.1383))
	{
		if(GetPlayerScoreEx(playerid) < 3) return SCM(playerid, COLOR_VEHICLE,"Ai nevoie de level 3 pentru a putea cumpara un vehicul personal.");
		BuyCar[playerid] = -1;
		SPD(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Vehicles:", "Vehicule ieftine\nVehicule normale\nVehicule scumpe\nVehicule premium", "Selecteaza", "Inchide");
	}
	else return SCM(playerid,COLOR_VEHICLE,"Nu te afli la dealership pentru a cumpara un vehicul personal.");
  	return 1;
}
//==============================================================================
CMD:sellvehto(playerid, params[])
{
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
	if(GetPlayerVehicles(playerid) == 0) return SCM(playerid,COLOR_VEHICLE,"Nu ai niciun vehicul personal.");
	new vsid = FindSpawnID(GetPlayerVehicleID(playerid));
	if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
	{
 		new string[256], id, price;
	    if(strcmp(PlayerInfo[playerid][pNamePlayer], CarInfo[vsid][cOwner], true) == 0)
	    {
			if(sscanf(params,"ui",id,price)) return SCM(playerid,COLOR_WHITE,"{B8DBFF}Folosire: /sellvehto [playerid/PartOfName] [price]");
			if(price < 1 || price > 1000000000) return SCM(playerid, COLOR_GREY, "{FFB870}Prietul trebuie sa fie cuprins intr 1$ si 1.000.000.000$.");
			if(GetPlayerCash(id) < price) return SCM(playerid,COLOR_VEHICLE,"Acest jucator nu are suficienti bani la el.");
			if(NOON(id));
			if(GetPlayerScoreEx(id) < 3 || GetPlayerScoreEx(playerid) < 3) return SCM(playerid,COLOR_WHITE,"{FFF8C6}Tu sau acest jucator nu aveti level 3+.");
			if(ProxDetectorS(8.0, playerid, id))
			{
				new v = 0;
				for(new i = 0; i < 10; i++)
				{
					if(PlayerInfo[id][pCarKey][i] == 0)
					{
						v++;
						if((i == 2 || i == 3) && PlayerInfo[id][pPremium] == 0) return SCM(playerid, COLOR_VEHICLE,"Acest jucator nu are cont premium pentru a debloca celelalte doua sloturi.");
						format(string, sizeof(string), "{B8FFDB} * I-ai oferit lui %s vehiculul de tip %s pentru suma de %s$.", GetName(id), GetVehicleName(GetPlayerVehicleID(playerid)), FormatNumber(price));
						SCM(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{B8FFDB} * %s ti-a oferit vehiculul de tip %s pentru suma de %s$. Foloseste [/accept vehicle %d] pentru al cumpara.", PlayerInfo[playerid][pNamePlayer], GetVehicleName(GetPlayerVehicleID(playerid)), FormatNumber(price), playerid);
						SCM(id, COLOR_WHITE, string);
						OwnableCarOffer[id] = playerid;
						OwnableCarID[id] = vsid;
						OwnableCarPrice[id] = price;
						break;
					}
				}
				if(v == 0) return SCM(playerid, COLOR_VEHICLE,"Acest jucator nu are niciun slot liber.");
			}
			else return SCM(playerid, COLOR_VEHICLE,"Acest jucator nu e aproape de tine.");
		}
		else return SCM(playerid, COLOR_VEHICLE,"Acesta nu este vehiculul tau.");
	}
	else return SCM(playerid, COLOR_VEHICLE,"Trebuie sa te afli in vehiculul tau pentru al putea vinde.");
	return 1;
}
//==============================================================================
CMD:park(playerid, parmas[])
{
	if(GetPlayerVehicles(playerid) == 0) return SCM(playerid, COLOR_VEHICLE, "Nu ai nici un vehicul personal.");
	new vsid = FindSpawnID(GetPlayerVehicleID(playerid));
	if(CarInfo[vsid][cSpawned] == 0) return SCM(playerid, COLOR_VEHICLE, "Acest vehicul personal nu este spawnat.");
	new Float:x,Float:y,Float:z,Float:a, getcarid = GetPlayerVehicleID(playerid);
	GetVehiclePos(getcarid, x, y, z);
	GetVehicleZAngle(getcarid, a);
	if(getcarid == CarInfo[vsid][cSpawned])
	{
		if(IsPlayerInVehicle(playerid,CarInfo[vsid][cSpawned]))
		{
			new Float:health2;
			GetVehicleHealth(getcarid, health2);
			if(IsPlayerInRangeOfPoint(playerid, 40, 879.7794,-1663.9092,13.5469)) return SCM(playerid,COLOR_YELLOW2,"{FFB870}Nu iti poti parca vehiculul la spawn civil.");
			if(health2 < 500.0) return SCM(playerid,COLOR_VEHICLE,"Vehiculul este prea distrus pentru a putea fi parcat.");
			if(getcarid == CarInfo[vsid][cSpawned])
			{
				CarInfo[vsid][cLocationx] = x;
				CarInfo[vsid][cLocationy] = y;
				CarInfo[vsid][cLocationz] = z;
				CarInfo[vsid][cAngle] = a;
				DestroyVehicleEx(CarInfo[vsid][cSpawned]);
				new car = CreateVehicleEx(CarInfo[vsid][cModel],CarInfo[vsid][cLocationx],CarInfo[vsid][cLocationy],CarInfo[vsid][cLocationz]+1.0,CarInfo[vsid][cAngle],CarInfo[vsid][cColorOne],CarInfo[vsid][cColorTwo],-1);
				UpdateVehicleDamageStatus(car, CarInfo[vsid][cDamage][0], CarInfo[vsid][cDamage][1], CarInfo[vsid][cDamage][2], CarInfo[vsid][cDamage][3]);
				SetVehicleHealth(car,CarInfo[vsid][cHealth]);
				EngineSTATE[car] = 0;
				CarInfo[vsid][cSpawned] = car;
				vUpdate(vsid,cLocationxx);
				vUpdate(vsid,cLocationyx);
				vUpdate(vsid,cLocationzx);
				vUpdate(vsid,cAnglex);
				SetTunning(CarInfo[vsid][cSpawned]);
				PutPlayerInVehicleEx(playerid, car, 0);
				SCM(playerid, COLOR_VEHICLE,"Vehiculul a fost parcat cu succes.");
			}
		}
	}
	else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
	return 1;
}
//==============================================================================
CMD:carcolor(playerid, params[])
{
	if(GetPlayerVehicles(playerid) == 0) return SCM(playerid,COLOR_VEHICLE,"Nu detii un vehicul personal.");
	if(GetPlayerCash(playerid) < 1000) return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani pentru ati vopsi masina.");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu te afli intr-un vehicul.");
	new colorpart, colorid, car = GetPlayerVehicleID(playerid), vsid = FindSpawnID(car);
	if(GetPlayerVehicleID(playerid) == CarInfo[vsid][cSpawned])
	{
		if(sscanf(params,"ii",colorpart,colorid)) return SCM(playerid,COLOR_WHITE,"{B8DBFF}Folosire: /carcolor [1 or 2] [color id(0-255)]");
		if(colorpart == 1)
		{
			if(PlayerInfo[playerid][pPremium] == 0)
			{
				if(colorid < 0 || colorid > 127) return SCM(playerid, COLOR_VEHICLE,"Nu poti pune aceasta culoare deoarece nu ai cont premium.");
				if(GetPlayerCash(playerid) < 1500) return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani pentru a schimba culoarea vehiculului.");
				SCM(playerid,COLOR_VEHICLE,"Culoarea a fost schimbata cu succes!");
				GivePlayerCash(playerid, -1500);
			}
			else if(PlayerInfo[playerid][pPremium] == 1)
			{
			    if(colorid < 0 || colorid > 255) return SCM(playerid, -1, "{FFB870}Culoare invalida!");
				if(0 < colorid < 128)
			    {
			    	if(GetPlayerCash(playerid) < 1500) return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani pentru a schimba culoarea vehiculului.");
			        SCM(playerid,COLOR_VEHICLE,"Culoarea a fost schimbata cu succes!");
					GivePlayerCash(playerid, -1500);
			    }
                else if(127 < colorid < 256)
				{
					if(PlayerInfo[playerid][pGold] < 200 && PlayerInfo[playerid][pHidden] == 0) return SCM(playerid, -1, "{FFB870}Nu ai 200 gold sau pentru hidden pentru a pune o culoare speciala.");
					if(PlayerInfo[playerid][pHidden] > 0)
					{
						PlayerInfo[playerid][pHidden] -= 1;
						UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
					}
					else
					{
						PlayerInfo[playerid][pGold] -= 200;
						GameTextForPlayer(playerid,"~y~-200",2000,1);
					}
					SCM(playerid,COLOR_VEHICLE,"Culoarea a fost schimbata cu succes!");
				}
			}
         	CarInfo[vsid][cColorOne] = colorid;
       		ChangeVehicleColor(CarInfo[vsid][cSpawned], colorid, CarInfo[vsid][cColorTwo]);
			vUpdate(vsid, cColorOnex);
		}
		if(colorpart == 2)
		{
			if(PlayerInfo[playerid][pPremium] == 0)
			{
				if(colorid < 0 || colorid > 127) return SCM(playerid, COLOR_VEHICLE,"Nu poti pune aceasta culoare deoarece nu ai cont premium.");
				if(GetPlayerCash(playerid) < 1500) return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani pentru a schimba culoarea vehiculului.");
				SCM(playerid,COLOR_VEHICLE,"Culoarea a fost schimbata cu succes!");
				GivePlayerCash(playerid, -1500);
			}
			else if(PlayerInfo[playerid][pPremium] == 1)
			{
				if(colorid < 0 || colorid > 255) return SCM(playerid, -1, "{FFB870}Culoare invalida!");
				if(0 < colorid < 128)
			    {
			    	if(GetPlayerCash(playerid) < 1500) return SCM(playerid, COLOR_VEHICLE,"Nu ai suficienti bani pentru a schimba culoarea vehiculului.");
			        SCM(playerid,COLOR_VEHICLE,"Culoarea a fost schimbata cu succes!");
					GivePlayerCash(playerid, -1500);
			    }
                else if(127 < colorid < 256)
				{
					if(PlayerInfo[playerid][pGold] < 200 && PlayerInfo[playerid][pHidden] == 0) return SCM(playerid, -1, "{FFB870}Nu ai 200 gold sau pentru hidden pentru a pune o culoare speciala.");
					if(PlayerInfo[playerid][pHidden] > 0)
					{
						PlayerInfo[playerid][pHidden] -= 1;
						UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
					}
					else
					{
						PlayerInfo[playerid][pGold] -= 200;
						GameTextForPlayer(playerid,"~y~-200",2000,1);
					}
					SCM(playerid,COLOR_VEHICLE,"Culoarea a fost schimbata cu succes!");
				}
			}
         	CarInfo[vsid][cColorTwo] = colorid;
       		ChangeVehicleColor(CarInfo[vsid][cSpawned], CarInfo[vsid][cColorOne], colorid);
			vUpdate(vsid, cColorTwox);
		}
	}
	else return SCM(playerid,COLOR_VEHICLE,"Nu te afli in vehiculul tau personal.");
	return 1;
}
//==============================================================================
CMD:despawnallcars(playerid, params[])
{
	if(GetSpawnedCar(playerid) < 3) return SCM(playerid, COLOR_VEHICLE, "Trebuie sa ai macar trei vehicule spawnate pentru a putea folosi comanda!");
	new spawn = 0;
	for(new i = 0; i < 10; i++)
	{
		if(PlayerInfo[playerid][pCarKey][i] > 0 && CarInfo[PlayerInfo[playerid][pCarKey][i]][cSpawned] > 0 && !IsVehicleOccupied(CarInfo[PlayerInfo[playerid][pCarKey][i]][cSpawned]))
		{
			new vsid = PlayerInfo[playerid][pCarKey][i];
			if(CarInfo[vsid][cNeon] > 0) RemoveNeons(CarInfo[vsid][cSpawned]);
			DestroyVehicleEx(CarInfo[vsid][cSpawned]);
			CarInfo[vsid][cSpawned] = 0;
			CarInfo[vsid][cTime] = 0;
			spawn++;
		}
	}
	if(spawn != 0) SCM(playerid,COLOR_VEHICLE,"Ti-ai ascuns toate vehiculele personale.");
	return 1;
}
//==============================================================================
CMD:spawnallcars(playerid, params[])
{
	if(GetSpawnedCar(playerid) == GetPlayerVehicles(playerid)) return SCM(playerid, COLOR_VEHICLE, "Ti-ai spawnat deja toate vehiculele personale!");
	if(GetPlayerVehicles(playerid) < 3) return SCM(playerid, COLOR_VEHICLE, "Trebuie sa ai macar trei vehicule pentru a putea folosi comanda!");
	new spawn = 0;
	for(new i = 0; i < 10; i++)
	{
		if(PlayerInfo[playerid][pCarKey][i] > 0 && CarInfo[PlayerInfo[playerid][pCarKey][i]][cSpawned] == 0)
		{
			new vsid = PlayerInfo[playerid][pCarKey][i];
			new carid = CreateVehicleEx(CarInfo[vsid][cModel],CarInfo[vsid][cLocationx],CarInfo[vsid][cLocationy],CarInfo[vsid][cLocationz],CarInfo[vsid][cAngle],CarInfo[vsid][cColorOne],CarInfo[vsid][cColorTwo],-1);
			UpdateVehicleDamageStatus(carid, CarInfo[vsid][cDamage][0], CarInfo[vsid][cDamage][1], CarInfo[vsid][cDamage][2], CarInfo[vsid][cDamage][3]);
			SwitchKey[playerid] = 1;
			Gas[carid] = CarInfo[vsid][cFuel];
			SetVehicleHealth(carid, CarInfo[vsid][cHealth]);
			CarInfo[vsid][cSpawned] = carid;
			CarInfo[vsid][cTime] = 900;
			SetTunning(CarInfo[vsid][cSpawned]);
			EngineSTATE[carid] = 0;
			spawn++;
		}
	}
	if(spawn != 0) SCM(playerid,COLOR_VEHICLE,"Ti-ai spawnat toate vehiculele personale.");
	return 1;
}
//==============================================================================
CMD:v(playerid, params[]) return ShowVehiclesMenu(playerid);
alias:v("vehicles");
//==============================================================================
CMD:setcar(playerid, params[])
{
	if(!IsPlayerScripter(playerid)) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	new model[10], test, string[64], car[32];
	if(sscanf(params, "s[10]is[32]",model,test,car)) return SCM(playerid, -1, "{B8DBFF}Folosire: /setcar [Stock/Price] [Ammount] [Car Name]");
	new tableid = MySQLCheckCar(car);
	if(tableid == 0) return SCM(playerid,COLOR_VEHICLE,"Invalid car name.");
	if(strcmp(model,"stock",true) == 0)
 	{
		Stock[tableid][vStock] = test;
		format(string,sizeof(string),"You set the stock to %d.",test);
		SCM(playerid,COLOR_WHITE,string);
        mysql_format(SQL, string, sizeof(string), "UPDATE `stock` SET `Stock`='%d' WHERE `ID`='%d'", Stock[tableid][vStock], tableid);
        mysql_tquery(SQL, string);
    }
    else if(strcmp(model,"price",true) == 0)
    {
		Stock[tableid][vPrice] = test;
		format(string,sizeof(string),"You set the price to %s.",FormatNumber(test));
		SCM(playerid,COLOR_WHITE,string);
        mysql_format(SQL, string, sizeof(string), "UPDATE `stock` SET `Price`='%d' WHERE `ID`='%d'", Stock[tableid][vPrice], tableid);
        mysql_tquery(SQL, string);
 	}
 	return 1;
}
//==============================================================================
CMD:invite(playerid, params[])
{
    new pinvite, sendername[MAX_PLAYER_NAME], string[256];
    if(PlayerInfo[playerid][pLeader] >= 1)
	{
	    if(sscanf(params,"u",pinvite)) return SCM(playerid, -1, "{B8DBFF}Folosire: /invite [playerid/PartOfName]");
	    if(FactionInfo[PlayerInfo[playerid][pLeader]][fMembers] >= 7) return SCM(playerid,COLOR_YELLOW2,"Nu mai sunt locuri libere in aceasta factiune pentru a invita pe cineva!");
	    if(PlayerInfo[pinvite][pMember] == 0 && PlayerInfo[pinvite][pLeader] == 0)
	    {
		    if(ProxDetectorS(8.0, playerid, pinvite))
		    {
				if(GetPlayerScoreEx(pinvite) < 5) return SCM(playerid, COLOR_YELLOW2, "Acest jucator trebuie sa aiba level 5 pentru a intra intr-o factiune!");
			    if(PlayerInfo[pinvite][pPunish] > 0) return SCM(playerid, COLOR_YELLOW2, "Acest jucator are Faction Punish!");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Faction: %s vrea sa te invite in factiunea lui. Scrie [/acccept invite %d] pentru a accepta.", sendername,playerid);
				SCM(pinvite, COLOR_BLUE, string);
				format(string, sizeof(string), "Faction: I-ai trimis lui %s o cerere de intrare in factiune.", GetName(pinvite));
				SCM(playerid, COLOR_BLUE, string);
				FactionOffer[pinvite] = playerid;
			}
			else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu e langa tine!");
		}
		else return SCM(playerid, COLOR_YELLOW2, "Acest jucator este deja intr-o factiune!");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu esti lider pentru a folosi aceasta comanda!");
	return 1;
}
//==============================================================================
CMD:undercover(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		if(Undercover[playerid] == 0)
		{
	    	SCM(playerid, COLOR_YELLOW, "Acum esti undercover, nimeni nu-ti vede numele.");
			PlayerTextDrawShow(playerid, UndercoverText);
	    	Undercover[playerid] = 1;
	    	foreach(new i: Player) {
  				ShowPlayerNameTagForPlayer(i, playerid, 0);
       		}
		}
		else
		{
	    	SCM(playerid, COLOR_YELLOW, "Acum nu mai esti undercover.");
			PlayerTextDrawHide(playerid, UndercoverText);
	    	Undercover[playerid] = 0;
			foreach(new i: Player) {
  				ShowPlayerNameTagForPlayer(i, playerid, 1);
       		}
		}
	}
	else return SCM(playerid, COLOR_YELLOW2, "Nu faci parte din factiunea The Hitman Agency.");
	return 1;
}
//==============================================================================
CMD:fish(playerid,params[])
{
	if(IsAtFishPlace(playerid) && !IsPlayerInAnyVehicle(playerid))
	{
	    if(PlayerInfo[playerid][pFishLic] <= 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai licenta de pescuit valida!");
        if(PlayerInfo[playerid][pFishes] > 0) return SCM(playerid,COLOR_WHITE,"Mergi la un magazin 24/7 pentru a vinde pestele prins inainte de a pescui din nou.");
		if(Fishing[playerid] == 1) return 1;
		if(PlayerInfo[playerid][pUndita] == 0) return SCM(playerid,COLOR_WHITE,"Nu ai o undita, mergi la un magazin 24/7 pentru a cumpara una!");
        if(PlayerInfo[playerid][pMomeala] == 0) return SCM(playerid,COLOR_WHITE,"Ai ramas fara momeala, mergi la un magazin 24/7 pentru a cumpara!");
		TogglePlayerControllable(playerid, false);
		SetPlayerAttachedObject(playerid, 3, 18632, 1, -0.091109, 0.255484, 0.018155, 94.362060, 312.328125, 190.418655, 1.000000, 1.000000, 1.000000);
		ApplyAnimation(playerid, "SAMP", "FishingIdle", 3.0,1,1,0,0,0);
		Fishing[playerid] = 1;
		PlayerInfo[playerid][pMomeala] -= 1;
		TipPeste[playerid] = random(5);
		TimeFish[playerid] = 25;
		SCM(playerid, COLOR_GRAD2, "Asteapta cateva secunde pana cand o sa prinzi ceva.");
		FishTimer[playerid] = SetTimerEx_("Fisher", 1000, 1000, -1, "i", playerid);
		pUpdate(playerid,pMomealax);
	}
	else return SCM(playerid, COLOR_YELLOW2, "Nu esti intr-o zona de pescuit.");
	return 1;
}
//==============================================================================
CMD:frisk(playerid, params[])
{
    new pfrisk, string[128], sendername[MAX_PLAYER_NAME];
    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
    {
	    if(sscanf(params,"u",pfrisk)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /frisk [playerid/PartOfName]");
	    if(NOON(pfrisk));
	    if(ProxDetectorS(8.0, playerid, pfrisk))
		{
		    if(pfrisk == playerid) { SCM(playerid, COLOR_YELLOW2, "You cannot Frisk yourself!"); return 1; }
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    new text1[20], text2[20], text6[20];
		    if(PlayerInfo[pfrisk][pDrugs] > 0) { text1 = "| Drugs."; } else { text1 = "| Empty Pocket."; }
		    if(PlayerInfo[pfrisk][pMats] > 0) { text2 = "| Materials."; } else { text2 = "| Empty Pocket."; }
		    new sweapon, sammo;
		    text6 = "| Empty Pocket.";
		    for(new i = 0; i < 9; i++)
		    {
		        GetPlayerWeaponData(pfrisk, i, sweapon, sammo);
		        if(sweapon != 0 && sammo != 0) {
		            text6 = "| Weapon.";
		        }
		    }
		    format(string, sizeof(string), "|__________ Items with %s __________|", GetName(pfrisk));
	        SCM(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "%s.", text1);
			SCM(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "%s.", text2);
			SCM(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "%s.", text6);
			SCM(playerid, COLOR_GREY, string);
			if(PlayerInfo[pfrisk][pSex] == 1) { format(string, sizeof(string), " * %s taps %s all over his body and searches for some items.", sendername ,GetName(pfrisk)); }
			else if(PlayerInfo[pfrisk][pSex] == 2) { format(string, sizeof(string), " * %s taps %s all over her body and searches for some items.", sendername ,GetName(pfrisk)); }
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
		else return SCM(playerid, COLOR_YELLOW2, " Acel player nu este langa tine!");
    }
	else return SCM(playerid,COLOR_YELLOW2,"Nu esti politist!");
	return 1;
}
//==============================================================================
CMD:uninvite(playerid, params[])
{
	new puninv, string[128], sendername[MAX_PLAYER_NAME], FP, motiv[32];
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new f = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
		if(sscanf(params,"uds[32]",puninv,FP,motiv)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /uninvite [playerid/PartOfName] [1 with Fpunish/0 without Fpunish] [motiv]");
		if(PlayerInfo[puninv][pMember] == PlayerInfo[playerid][pLeader])
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* Ai fost dat afara din %s, de liderul %s. Motiv: %s.",NumeFactiune(PlayerInfo[playerid][pLeader]),sendername,motiv);
			SCM(puninv, COLOR_LIGHTBLUE, string);
			SetPlayerTeam(puninv, 1);
			PlayerInfo[puninv][pMember] = 0;
			PlayerInfo[puninv][pFactionRank] = 0;
			PlayerInfo[puninv][pFwarn] = 0;
			FactionInfo[PlayerInfo[playerid][pLeader]][fMembers] -= 1;
			if(FP == 1) PlayerInfo[puninv][pPunish] = 20;
			if(FP == 0) PlayerInfo[puninv][pPunish] = 0;
			pUpdate(puninv,pMemberx);
			format(string, sizeof(string), " L-ai dat afara din factiunea ta pe %s.",GetName(puninv));
			SCM(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s l-a dat afara din factiune pe %s. Motiv: %s.",sendername,GetName(puninv),motiv);
			SendFactionMessage(f,COLOR_LIGHTBLUE,string);
			format(string, sizeof(string), "AdmCmd: %s l-a dat afara din factiunea sa pe %s. Motiv: %s.",sendername,GetName(puninv),motiv);
			SendAdminMessage(string,1);
			SaveFactions(f);
			SetPlayerTeamColor(puninv);
			SetPlayerToTeam(puninv);
			//--------------------------------------------------------------
			new query[420];
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction` = '0', `FactionDays` = '0', `FactionRank` = '0' WHERE `name` = '%s'",PlayerInfo[puninv][pNamePlayer]);
			mysql_tquery(SQL, query);
		}
		else
		{
		    format(string, sizeof(string), "%s nu face parte din factiunea ta.", GetName(puninv));
			SCM(playerid, COLOR_YELLOW2, string);
		}
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu esti lider la o factiune!");
	return 1;
}
//==============================================================================
CMD:getjob(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] > 0) return SCM(playerid,COLOR_YELLOW2,"Esti inca angajat la un job, foloseste /quitjob.");
	new job = 0;
	for(new j = 1; j < MAX_JOBS; j++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3, JobInfo[j][JobX], JobInfo[j][JobY], JobInfo[j][JobZ]))
		{
		    new string[128];
	        format(string, sizeof(string), "Felicitari, acum ai jobul %s.", JobInfo[j][jName]);
	        SCM(playerid, COLOR_JOB, string);
	        PlayerInfo[playerid][pJob] = j;
	        pUpdate(playerid,pJobx);
			job = 1;
        }
	}
	if(job == 0) return SCM(playerid, COLOR_YELLOW2, "Nu te afli la un punct de angajare!");
	return 1;
}
//==============================================================================
CMD:fmotd(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128];
		if(isnull(params)) return SCM(playerid,-1,"{B8DBFF}Folosire: /fmotd [text]");
		StrmidEx(FactionInfo[PlayerInfo[playerid][pLeader]][fMOTD], params);
		format(string,sizeof(string),"MOTD: %s",params);
		SCM(playerid,COLOR_ORANGE,string);
		SaveFactions(PlayerInfo[playerid][pLeader]);
	}
	return 1;
}
//==============================================================================
CMD:faplicatii(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new nr[5];
		if(sscanf(params,"s[5]",nr)) return SCM(playerid,-1,"{B8DBFF}Folosire: /faplicatii [ON/OFF]");
		if(strcmp(nr,"on",true) == 0)
		{
			FactionInfo[PlayerInfo[playerid][pLeader]][fAplication] = 1;
			SCM(playerid,COLOR_ORANGE,"Acum aplicatii sunt deschise.");
		}
		else if(strcmp(nr,"off",true) == 0)
		{
		    FactionInfo[PlayerInfo[playerid][pLeader]][fAplication] = 0;
			SCM(playerid,COLOR_ORANGE,"Acum aplicatii sunt inchise.");
		}
		SaveFactions(PlayerInfo[playerid][pLeader]);
	}
	return 1;
}
//==============================================================================
alias:skill("skills");
CMD:skill(playerid,params[]) return SPD(playerid,DIALOG_SKILL,DIALOG_STYLE_LIST,"Skills:","Rob Skill\nTrucker Skill\nFarmer Skill\nPizza Skill\nMaterials Skill\n","Alege","Inchide");
//==============================================================================
CMD:quitjob(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 0)
    {
  		if(GetJobCar(playerid) != 0) return SCM(playerid,COLOR_YELLOW2,"Asteapta 1 minut sau foloseste /stopwork pentru a elimina vehiculul de la jobul anterior.");
	    SCM(playerid, COLOR_JOB, " Ai demisionat cu succes de la locul de munca!");
	    PlayerInfo[playerid][pJob] = 0;
	    pUpdate(playerid,pJobx);
	    SetPlayerSkinEx(playerid, GetPlayerSkinEx(playerid));
		DisablePlayerCheckpointEx(playerid);
	}
	else return SCM(playerid, COLOR_GRAD2, "Nu poti folosi comanda daca nu ai niciun job!");
	return 1;
}
//==============================================================================
CMD:fireworks(playerid, params[])
{
    if(PlayerInfo[playerid][pFireworks] > 0)
    {
        if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi artificiile cand esti intr-un vehicul.");
		if(GetPlayerInteriorEx(playerid) != 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi artificiile in aceasta locatie.");
        if(firerockettime[playerid] == 0)
		{
	    	new Float:X, Float:Y, Float:Z, Float:distance, string[200], sendername[MAX_PLAYER_NAME];
	    	PlayerInfo[playerid][pFireworks] -= 1;
	    	firerockettime[playerid] = 2;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " * %s takes some fireworks out of his pocket and places them on the ground.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GetPlayerPos(playerid,X,Y,Z);
			GetXYInFrontOfPlayer(playerid, X,Y, distance);
			Firerocket[playerid] = CreateDynamicObject(354, X,Y,(Z), 0, 0, 0);
			rocketsmoke[playerid] = CreateDynamicObject(2780, X,Y,(Z), 0, 0, 0);
			MoveDynamicObject(Firerocket[playerid], X, Y, Z+50, 15);
			MoveDynamicObject(rocketsmoke[playerid], X, Y, Z+50, 15);
			SetTimerEx_("FirerocketTime", 3000, 3000, 1, "i", playerid);
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[playerid][pQuest][m] == 8) CheckQuest(playerid, m);
			}
		}
		else return SCM(playerid,COLOR_YELLOW2,"Ai plasat deja niste artificii. Asteapta...");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Nu ai artificii.");
	return 1;
}
//==============================================================================
CMD:changemail(playerid, params[])
{
	new email[200], string[228];
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
	if(sscanf(params, "s[200]",email)) return SCM(playerid,-1,"{B8DBFF}Folosire: /changemail [Email]");
	if(IsMail(email))
	{
		StrmidEx(PlayerInfo[playerid][pEmail], email);
		SCM(playerid, COLOR_YELLOW, "Ai primit un mail, foloseste /email pentru a-l vedea!");
		new query[300];
		format(string, sizeof(string), "Adresa ta de email a fost schimbata cu succes, noua adresa este [%s].",PlayerInfo[playerid][pEmail]);
		mysql_format(SQL,query, sizeof(query), "INSERT INTO `email` (`text`, `playerid`) VALUES ('%s', '%d')",string,PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,query);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Adresa invalida!");
	pUpdate(playerid, pEmailx);
	return 1;
}
//==============================================================================
CMD:email(playerid, params[])
{
	new query[64], szDialog[1500], textt[256];
	format(query,sizeof(query),"SELECT * FROM `email` WHERE `playerid` = '%d'", PlayerInfo[playerid][pSQLID]);
	new Cache:resoolt = mysql_query(SQL, query);
	if(cache_num_rows() > 0)
	{
		for(new i, j = cache_num_rows(); i != j; ++i)
		{
			cache_get_value(i, "text", textt, MAX_STRING);
			format(szDialog, sizeof(szDialog), "%s%s\n", szDialog, textt);
		}
		cache_delete(resoolt);
		SPD(playerid, DIALOG_MAIL, DIALOG_STYLE_LIST, "Email-urile tale:", szDialog, "Inchide","");
	}
	else return	SCM(playerid, COLOR_WHITE, "Nu ai niciun email.");
	return 1;
}
//==============================================================================
CMD:top(playerid, params[])
{
	new string[64], turf[5];
	SCM(playerid, COLOR_WHITE, " ");
	SCM(playerid, COLOR_WHITE, " ----TOP GANGS----");
	for(new t = 1; t < MAX_TURFS; t++)
	{
		if(TurfInfo[t][zOwned] == 5) turf[0]++;
		if(TurfInfo[t][zOwned] == 6) turf[1]++;
		if(TurfInfo[t][zOwned] == 11) turf[2]++;
		if(TurfInfo[t][zOwned] == 12) turf[3]++;
		if(TurfInfo[t][zOwned] == 13) turf[4]++;
	}
	format(string, sizeof(string), " %s - %d turfs",NumeFactiune(5), turf[0]);
	SCM(playerid, TEAM_AZTECAS_COLOR, string);
	format(string, sizeof(string), " %s - %d turfs",NumeFactiune(6), turf[1]);
	SCM(playerid, TEAM_RUSSIAN_COLOR, string);
	format(string, sizeof(string), " %s - %d turfs",NumeFactiune(11), turf[2]);
	SCM(playerid, TEAM_GROVE_COLOR, string);
	format(string, sizeof(string), " %s - %d turfs",NumeFactiune(12), turf[3]);
	SCM(playerid, TEAM_VAGOS_COLOR, string);
	format(string, sizeof(string), " %s - %d turfs",NumeFactiune(13), turf[4]);
	SCM(playerid, TEAM_BALLAS_COLOR, string);
	return 1;
}
//==============================================================================
CMD:fwarn(playerid, params[])
{
	new pfw, string[128], sendername[MAX_PLAYER_NAME], motiv[32];
	if(PlayerInfo[playerid][pLeader] <= 0) return SCM(playerid,COLOR_YELLOW2,"Nu esti lider!");
	if(sscanf(params,"us[32]",pfw,motiv)) return SCM(playerid,-1,"{B8DBFF}Folosire: /fwarn [playerid/PartOfName] [motiv]");
	if(PlayerInfo[pfw][pLeader] >= 1) return SCM(playerid,COLOR_YELLOW2,"Nu poti da FW la lider!");
	if(PlayerInfo[pfw][pMember] >= 1 && (PlayerInfo[playerid][pLeader] == PlayerInfo[pfw][pMember]))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		PlayerInfo[pfw][pFwarn] += 1;
		format(string, sizeof(string), "Ai primit FactionWarn de la Lider %s. Motiv: %s.", sendername,motiv);
		SCM(pfw, COLOR_RED, string);
		format(string, sizeof(string), "I-ai dat lui %s FactonWarn. Motiv: %s.", GetName(pfw),motiv);
		SCM(playerid, COLOR_RED, string);
		if(PlayerInfo[pfw][pFwarn] >= 5)
		{
		    new hour, minute, second, year, month, day;
			gettime(hour, minute, second);
			getdate(year, month, day);
			SCM(pfw, COLOR_LIGHTBLUE, "* Ai fost scos din factiune pentru ca ai avut 5 Faction Warn.");
			SetPlayerTeam(pfw, 1);
			PlayerInfo[pfw][pMember] = 0;
			PlayerInfo[pfw][pFactionRank] = 0;
			PlayerInfo[pfw][pFwarn] = 0;
			PlayerInfo[pfw][pPunish] = 20;
			SetPlayerSkinEx(pfw, 289);
			SpawnPlayer(pfw);
			pUpdate(pfw,pMemberx);
			FactionInfo[PlayerInfo[playerid][pLeader]][fMembers] -= 1;
			SaveFactions(PlayerInfo[playerid][pLeader]);
			UpdateVar(pfw, "FactionRank", 0);
			//--------------------------------------------------------------
			format(string,sizeof(string),"%s a fost dat afara din %s. Motiv: 5/5 FactionWarn.",GetName(pfw),NumeFactiune(PlayerInfo[playerid][pLeader]),day,month,year);
			new query[600];
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`playerID`, `Text`) VALUES ('%d', '%s')", PlayerInfo[pfw][pSQLID], string);
			mysql_tquery(SQL, query);
			//--------------------------------------------------------------
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction` = '0', `FactionDays` = '0' WHERE `name` = '%s'",PlayerInfo[pfw][pNamePlayer]);
			mysql_tquery(SQL, query);
		}
	}
	else return SCM(playerid, COLOR_GRAD2, "Acel player nu este in factiunea ta.");
	return 1;
}
//==============================================================================
CMD:ticket(playerid, params[])
{
    if(!IsACop(playerid)) return SCM(playerid, COLOR_YELLOW2, PLAYER_COP);
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
	new pticket, string[128];
	if(BugTicket[playerid] == 1) return SCM(playerid,COLOR_YELLOW2,"Ne pare rau, dar ai utilizat odata aceasta comanda, asteapta 2 minute.");
    if(OnDuty[playerid] != 1) return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu esti ON-Duty.");
	if(sscanf(params,"u",pticket)) return SCM(playerid,-1,"{B8DBFF}Folosire: /ticket [playerid/PartOfName]");
	if(IsACop(pticket)) return SCM(playerid, COLOR_GREY, "Nu poti da amenda unui politist!");
	if(NOON(pticket));
	if(ProxDetectorS(8.0, playerid, pticket))
	{
		new szDialog[1000], title[64];
		format(title, sizeof(title), "Amenda catre  >>  %s", GetName(pticket));
		strcat(szDialog, "Nume\tPret\n");
		for(new i = 0; i < 6; i++)
		{
			format(string, sizeof(string), "%s\t%s$\n", TicketName(i), FormatNumber(TicketValue(i))); 
			strcat(szDialog, string);
		}
		SPD(playerid, DIALOG_TICKET, DIALOG_STYLE_TABLIST_HEADERS, title, szDialog, "Ok", "Cancel");
		TicketOffer[playerid] = pticket;				
	}
	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar acest jucator nu este langa tine.");
	return 1;
}
//==============================================================================
CMD:ram(playerid, params[])
{
    new faction = PlayerInfo[playerid][pLeader] + PlayerInfo[playerid][pMember];
    if(faction == 1 || faction == 2 || faction == 3 || PlayerInfo[playerid][pAdmin] > 5)
    {
        for(new i = 1; i < MAX_HOUSES; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
			{
			    SetPlayerInteriorEx(playerid,HouseInfo[i][hInterior]);
				SetPlayerVirtualWorld(playerid,i);
				SetPlayerPosEx(playerid,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
				GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
				HouseEntered[playerid] = i;
			}
		}
		for(new f = 1; f < MAX_FACTIONS; f++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3, FactionInfo[f][fHQExteriorPosX], FactionInfo[f][fHQExteriorPosY], FactionInfo[f][fHQExteriorPosZ]))
			{
			    SetPlayerInteriorEx(playerid,FactionInfo[f][fHQInteriorID]);
				SetPlayerVirtualWorld(playerid,f);
				SetPlayerPosEx(playerid,FactionInfo[f][fHQInteriorPosX],FactionInfo[f][fHQInteriorPosY],FactionInfo[f][fHQInteriorPosZ]);
				GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
				FactionEntered[playerid] = f;
			}
		}
    }
	else return SCM(playerid, COLOR_YELLOW2, PLAYER_COP);
	return 1;
}
//==============================================================================
CMD:unban(playerid, params[])
{
	new punlock[MAX_PLAYER_NAME], query[256], motiv[32];
    if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
    if(sscanf(params,"s[MAX_PLAYER_NAME]s[32]",punlock,motiv)) return SCM(playerid, -1, "{B8DBFF}Folosire: /unban [NameOfPlayer] [motiv]");
    new nume = MySQLCheckAccount(punlock);
    if(nume == 0) return SCM(playerid,COLOR_YELLOW2,"Acest nume nu exista in baza de date!");
    mysql_format(SQL, query, sizeof(query),"UPDATE `users` SET `Banned`='0', `TempBanDay`='0', `TempBanMonth`='0', `TempBanYear`='0' WHERE `name`='%s'",punlock);
    mysql_tquery(SQL, query, "","");
	format(query,sizeof(query),"AdmCmd: %s l-a debanat pe %s. Motiv: %s.",GetName(playerid),punlock,motiv);
	SendAdminMessage(query,3);
	return 1;
}
//==============================================================================
CMD:clan(playerid, params[])
{
	if(PlayerInfo[playerid][pClan] >= 1 && PlayerInfo[playerid][pClanRank] >= 1) {
		SPD(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan Info:", "Clan Tag\nClan Members\nClan Options", "Select", "Cancel");
	}
	return 1;
}
//==============================================================================
CMD:c(playerid, params[])
{
    new mesaj[128], string[256];
	if(PlayerInfo[playerid][pClan] < 1) return SCM(playerid, COLOR_YELLOW2, "Nu faci parte dintr-un clan.");
	if(sscanf(params,"s[128]",mesaj))return SCM(playerid,-1,"{B8DBFF}Folosire: /c [message]");
	if(TogClan[playerid] == false) return SCM(playerid,COLOR_GRAD2,"Nu poti scrie nimic in chat cat timp il ai dezactivat.");
	switch(PlayerInfo[playerid][pClanRank])
	{
		case 1:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName1], PlayerInfo[playerid][pNamePlayer], mesaj);
		case 2:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName2], PlayerInfo[playerid][pNamePlayer], mesaj);
		case 3:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName3], PlayerInfo[playerid][pNamePlayer], mesaj);
		case 4:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName4], PlayerInfo[playerid][pNamePlayer], mesaj);
		case 5:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName5], PlayerInfo[playerid][pNamePlayer], mesaj);
		case 6:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName6], PlayerInfo[playerid][pNamePlayer], mesaj);
		case 7:	format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName7], PlayerInfo[playerid][pNamePlayer], mesaj);
		default: format(string, sizeof(string), "{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName1], PlayerInfo[playerid][pNamePlayer], mesaj);
	}
    SendClanMessage(PlayerInfo[playerid][pClan], -1, string);
	return 1;
}
//==============================================================================
CMD:quitclan(playerid, params[])
{
	if(PlayerInfo[playerid][pClan] != 0)
	{
	    new string[128];
		if(PlayerInfo[playerid][pClanRank] != 7)
		{
			format(string, sizeof(string), "{%s}%s has left the clan (quitclan).",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor],GetName(playerid));
			SendClanMessage(PlayerInfo[playerid][pClan], -1, string);
			format(string,sizeof(string), "{%s}You have left the %s.",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor],ClanInfo[PlayerInfo[playerid][pClan]][ClanName]);
			SCM(playerid,COLOR_WHITE,string);
			SetPlayerName(playerid,PlayerInfo[playerid][pNamePlayer]);
			PlayerInfo[playerid][pClan] = 0;
			PlayerInfo[playerid][pClanRank] = 0;
			pUpdate(playerid,pClanx);
			pUpdate(playerid,pClanRankx);
		}
		else return SCM(playerid, COLOR_WHITE, "Nu poti iesi din clan daca esti lider.");
   	}
   	else return SCM(playerid, COLOR_WHITE, "Nu ai niciun clan.");
	return 1;
}
//==============================================================================
CMD:gethere(playerid, params[])
{
	new pget, string[128], sendername[MAX_PLAYER_NAME];
    new Float:plocx,Float:plocy,Float:plocz;
    if(sscanf(params,"u",pget)) return SCM(playerid, -1, "{B8DBFF}Folosire: /gethere [playerid/PartOfName]");
	if(NOON(pget));
    GetPlayerPos(playerid, plocx, plocy, plocz);
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(pget == playerid) return SCM(playerid,COLOR_GRAD2,"Nu poti folosi comanda pe tine.");
    if(PlayerInfo[pget][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, COLOR_GRAD2, "Nu poti trage la tine un admin cu level mai mare.");
	if(PlayerInfo[pget][pJailed] == 1) return SCM(playerid, 0x0000D2FF, "Playerul acela este in jail!");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3)
	{
		SetPlayerVirtualWorld(pget, GetPlayerVirtualWorld(playerid));
		SetPlayerInteriorEx(pget, GetPlayerInteriorEx(playerid));
		FactionEntered[pget] = FactionEntered[playerid];
		BizzEntered[pget] = BizzEntered[playerid];
		HouseEntered[pget] = HouseEntered[playerid];
		if(GetPlayerState(pget) == PLAYER_STATE_DRIVER) {
			SetVehiclePos(GetPlayerVehicleID(pget), plocx, plocy+4, plocz);
		}
		else {
			SetPlayerPosEx(pget, plocx, plocy+2, plocz);
		}
		SCM(pget, COLOR_GRAD1, "You have been teleported");
		format(string,sizeof(string),"AdmCmd: %s la tras pe %s la el.",sendername,GetName(pget));
		SendAdminMessage(string,1);
	}
	else return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:free(playerid, params[])
{
	new id, amount, szDialogString[250], string[128];
	if(!IsACop(playerid)) return SCM(playerid, COLOR_YELLOW2, PLAYER_COP);
	if(sscanf(params, "ui", id, amount)) return SCM(playerid, -1, "{B8DBFF}Folosire: /free [playerid/PartOfName] [price]");
	if(ProxDetectorS(10.0, playerid, id))
	{
		if(PlayerInfo[playerid][pFreePoint] < 5) return SFM(playerid,COLOR_GRAD2,"Nu ai suficiente puncte de free, ai nevoie de 5, tu ai doar %d",PlayerInfo[playerid][pFreePoint]);
		if(PlayerInfo[id][pJailed] >= 1 && PlayerInfo[id][pJailTime] >= 1)
		{
			if(amount > 100000 || amount < 10000) return SCM(playerid,COLOR_YELLOW2,"Suma trebuie sa fie cuprinsa intre 10.000$ si 100.000$!");
			format(string, sizeof(string), "I-ai oferit free lui %s pentru doar %s$.", GetName(id), FormatNumber(amount));
			SCM(playerid, COLOR_LIGHTGREEN, string);
			//--------------------------------------------------------------
			SetPVarInt(id, "fID", playerid);
			SetPVarInt(id, "fPrice", amount);
			//--------------------------------------------------------------
			format(szDialogString, sizeof(szDialogString), "%s vrea sa te elibereze din jail pentru %s$. Vrei sa accepti?", GetName(playerid), FormatNumber(amount));
			SPD(id, DIALOG_FREE, DIALOG_STYLE_MSGBOX, "Free:", szDialogString, "Accept", "Nu");
		}
		else return SCM(playerid, COLOR_YELLOW2,"Acest jucator nu e la jail.");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Nu esti in apropierea acestui jucator!");
	return 1;
}
//==============================================================================
CMD:cinvite(playerid, params[])
{
    if(PlayerInfo[playerid][pClan] >= 1 && PlayerInfo[playerid][pClanRank] >= 5)
	{
        new userID, szPlayerName[MAX_PLAYER_NAME], string[128];
        if(sscanf(params, "u", userID)) return SCM(playerid, -1, "{B8DBFF}Folosire: /cinvite [playerid]");
		{
            if(NOON(userID));
			if(PlayerInfo[userID][pClan] == 0)
			{
				GetPlayerName(userID, szPlayerName, MAX_PLAYER_NAME);
				format(string, sizeof(string), "You have invited %s to join your clan.", szPlayerName);
				SCM(playerid, COLOR_WHITE, string);
				//--------------------------------------------------------------
				SCM(userID,COLOR_BLUE,"Invitatie noua in clan:");
				format(string, sizeof(string), "%s te-a invitat in clanul %s Foloseste [/accept cinvite %d] pentru a accepta.", GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][ClanName], playerid);
				SCM(userID, COLOR_BLUE, string);
				SetPVarInt(userID, "cinvID", PlayerInfo[playerid][pClan]);
				SetPVarInt(playerid, "Invitat", userID);
			}
			else return SCM(playerid, COLOR_WHITE,"Acel player este deja intr-un clan.");
		}
    }
    return 1;
}
//==============================================================================
CMD:showmotd(playerid, params[])
{
    new string[256];
    if(PlayerInfo[playerid][pClan] >= 1)
	{
		format(string,sizeof(string),"{%s}C.MOTD: %s",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor],ClanInfo[PlayerInfo[playerid][pClan]][ClanMOTD]);
		SCM(playerid,COLOR_WHITE,string);
	}
	new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(faction >= 1)
	{
	    format(string,sizeof(string),"F.MOTD: %s",FactionInfo[faction][fMOTD]);
		SCM(playerid,COLOR_ORANGE,string);
	}
	return 1;
}
//==============================================================================
CMD:crankname(playerid, params[])
{
    if(PlayerInfo[playerid][pClan] >= 1 && PlayerInfo[playerid][pClanRank] >= 6)
	{
		new rankName[32], rankID;
	    if(sscanf(params, "ds[32]", rankID, rankName)) return SCM(playerid, -1, "{B8DBFF}Folosire: /crankname [1-7] [new rank title]");
	    else
		{
	        new messageString[128];
	        switch(rankID)
			{
				case 1:
				{
					StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName1], rankName);
				    format(messageString, sizeof(messageString), "You have changed the title of Rank 1 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
				case 2:
				{
					StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName2], rankName);
				    format(messageString, sizeof(messageString), "You have changed the title of Rank 2 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
				case 3:
				{
					StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName3], rankName);
					format(messageString, sizeof(messageString), "You have changed the title of Rank 3 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
				case 4:
				{
					StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName4], rankName);
					format(messageString, sizeof(messageString), "You have changed the title of Rank 4 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
				case 5:
				{
					StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName5], rankName);
					format(messageString, sizeof(messageString), "You have changed the title of Rank 5 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
				case 6:
				{
					StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName6], rankName);
					format(messageString, sizeof(messageString), "You have changed the title of Rank 6 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
				case 7:
				{
				    StrmidEx(ClanInfo[PlayerInfo[playerid][pClan]][ClanRankName7], rankName);
					format(messageString, sizeof(messageString), "You have changed the title of Rank 7 to '%s'.", rankName);
				    SCM(playerid, COLOR_WHITE, messageString);
				}
			}
			SaveClans(PlayerInfo[playerid][pClan]);
	    }
    }
	return 1;
}
//==============================================================================
CMD:rac(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		for(new car = 1, j = GetVehiclePoolSize(); car <= j; car++)
		{
		    if(!IsVehicleOccupied(car) && !IsAnOwnableCar(car) && StaticVeh[car][svFaction] == 0)
			{
				Gas[car] = 100.5;
				SetVehicleToRespawn(car);
			}
			if(CreateCar[car] == car && !IsVehicleOccupied(car))
			{
				DestroyVehicleEx(car);
				CreateCar[car] = -1;
			}
		}
		new string[128];
		format(string,sizeof(string),"AdmCmd: %s a respawnat toate vehiculele nefolosite.",GetName(playerid));
		SendAdminMessage(string,1);
    }
	else return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:kick(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
		new pkick, sendername[MAX_PLAYER_NAME], string[128], motiv[64];
		if(sscanf(params,"us[64]",pkick,motiv)) return SCM(playerid, -1, "{B8DBFF}Folosire: /kick [playerid/PartOfName] [reason]");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    if(NOON(pkick));
		if(PlayerInfo[pkick][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid,COLOR_YELLOW2,"Nu poti da kick la un admin cu grad mai mare decat tine!");
		format(string, sizeof(string), "Kick: %s was kicked by %s, reason: %s", GetName(pkick), sendername, (motiv));
		AdminLog(string);
		format(string, sizeof(string), "AdmCmd: %s was kicked by %s, reason: %s", GetName(pkick), sendername, (motiv));
		SCMAll(COLOR_LIGHT_RED, string);
		KickEx(pkick);
	}
	return 1;
}
//==============================================================================
CMD:a(playerid, params[])
{
	new text[128], string[256];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"s[128]",text)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /a [admin chat]");
	if(TogAdmin[playerid] == false) return SCM(playerid,COLOR_YELLOW2,"Nu poti scrie in chat daca nu il ai pornit!");
	format(string, sizeof(string), "{f6bc14}*** %s %s: %s ***", NumeAdmin(PlayerInfo[playerid][pAdmin]), GetName(playerid), text);
	SendAdminMessage(string, 1);
	return 1;
}
//==============================================================================
CMD:startevent(playerid, params[])
{
	new string[256], event[32], money, minute;
    if(PlayerInfo[playerid][pAdmin] <= 4) return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
    if(EventInfo[EventType] != 0) return SCM(playerid,COLOR_YELLOW2,"Este deja un eveniment deschis!");
    if(sscanf(params,"s[32]dd",event,money,minute))
	{
		SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /startevent [tip event] [money] [minute]");
		SCM(playerid,COLOR_GRAD2,"Nume disponibile: Deagle, Detective, Race, Custom");
		return 1;
	}
	if(money < 100000) return SCM(playerid,COLOR_YELLOW2,"Premium este prea mic!");
    if(strcmp(event,"deagle",true) == 0)
    {
	    EventInfo[EventType] = 1;
		EventInfo[EventMoney] = money;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventEnabled] = 1;
		ScriptTimer[16] = SetTimer_("InchideEvent", minute*60000, minute*60000, 1);
	    format(string, sizeof(string), "{6EF83C}* Event Deagle activat de adminul{FFFFFF} %s. Premiu: %s${6EF83C}. Puteti folosi /join in decursul a %d minute.",GetName(playerid),FormatNumber(money),minute);
	    SCMAll(COLOR_GREY, string);
    }
    else if(strcmp(event,"detective",true) == 0)
    {
        EventInfo[EventType] = 2;
		EventInfo[EventMoney] = money;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventEnabled] = 1;
        Cautat[playerid] = playerid;
		ScriptTimer[16] = SetTimer_("InchideEvent", minute*60000, minute*60000, 1);
	    format(string, sizeof(string), "{6EF83C}* Event Detective activat de adminul{FFFFFF} %s. Premiu: %s${6EF83C}. Puteti folosi /join in decursul a %d minute.",GetName(playerid),FormatNumber(money),minute);
	    SCMAll(COLOR_GREY, string);
    }
	else if(strcmp(event,"race",true) == 0)
    {
        EventInfo[EventType] = 3;
		EventInfo[EventMoney] = money;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventEnabled] = 1;
		ScriptTimer[16] = SetTimer_("InchideEvent", minute*60000, minute*60000, 1);
	    format(string, sizeof(string), "{6EF83C}* Event Race activat de adminul{FFFFFF} %s. Premiu: %s${6EF83C}. Puteti folosi /join in decursul a %d minute.",GetName(playerid),FormatNumber(money),minute);
	    SCMAll(COLOR_GREY, string);
		racecar[0] = CreateVehicleEx(494,2710.0850,-1606.4973,12.9504,86.9607,-1,-1,-1); SetVehicleVirtualWorld(racecar[0],3);
		racecar[1] = CreateVehicleEx(494,2709.9075,-1609.5397,12.8516,87.7622,-1,-1,-1); SetVehicleVirtualWorld(racecar[1],3);
		racecar[2] = CreateVehicleEx(502,2709.7507,-1612.4996,12.8079,88.5597,-1,-1,-1); SetVehicleVirtualWorld(racecar[2],3);
		racecar[3] = CreateVehicleEx(502,2709.6677,-1615.0919,12.8203,89.5438,-1,-1,-1); SetVehicleVirtualWorld(racecar[3],3);
		racecar[4] = CreateVehicleEx(503,2709.5879,-1620.5016,12.8182,90.2295,-1,-1,-1); SetVehicleVirtualWorld(racecar[4],3);
		racecar[5] = CreateVehicleEx(503,2709.5969,-1623.2649,12.8027,89.5579,-1,-1,-1); SetVehicleVirtualWorld(racecar[5],3);
		racecar[6] = CreateVehicleEx(494,2709.5588,-1626.1102,12.8355,90.0258,-1,-1,-1); SetVehicleVirtualWorld(racecar[6],3);
		racecar[7] = CreateVehicleEx(502,2709.5452,-1628.9541,12.9287,89.9611,-1,-1,-1); SetVehicleVirtualWorld(racecar[7],3);
    }
	else if(strcmp(event,"custom",true) == 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		EventInfo[EventType] = 4;
		EventInfo[EventMoney] = money;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventEnabled] = 1;
		EventInfo[EventPosX] = x;
		EventInfo[EventPosY] = y;
		EventInfo[EventPosZ] = z;
		ScriptTimer[16] = SetTimer_("InchideEvent", minute*60000, minute*60000, 1);
	    format(string, sizeof(string), "{6EF83C}* Event Custom activat de adminul{FFFFFF} %s. Premiu: %s${6EF83C}. Puteti folosi /join in decursul a %d minute.",GetName(playerid),FormatNumber(money),minute);
	    SCMAll(COLOR_GREY, string);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!");
    return 1;
}
//==============================================================================
CMD:stopevent(playerid, params[])
{
	new string[256], winer;
    if(PlayerInfo[playerid][pAdmin] <= 4) return SCM(playerid, COLOR_YELLOW2,NEAUTORIZAT);
	if(EventInfo[EventType] == 0) return SCM(playerid, COLOR_GRAD2, "Nu este niciun eveniment activ!");
	if(sscanf(params,"d",winer)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /stopevent [winner(-1 for no winner)]");
	if(IsPlayerConnected(winer))
	{
		foreach(new i: Player)
		{
			if(Event[i] == 1)
			{
				Event[i] = 0;
				SpawnPlayer(i);
				KillTimer_(EventTimer[i]);
			}
		}
		format(string, sizeof(string), " {6EF83C}%s a castigat evenimentul {ffffff}Custom {6EF83C}si a primit %s$.",PlayerInfo[winer][pNamePlayer],FormatNumber(EventInfo[EventMoney]));
		SCMAll(COLOR_WHITE, string);
		GivePlayerCash(winer, EventInfo[EventMoney]);
		KillTimer_(ScriptTimer[16]);
		EventInfo[EventEnabled] = 0;
		EventInfo[EventMoney] = 0;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventType] = 0;
		EventInfo[EventPosX] = 0.0;
		EventInfo[EventPosY] = 0.0;
		EventInfo[EventPosZ] = 0.0;
	}
	else
	{
		foreach(new i: Player)
		{
			if(Event[i] == 1)
			{
				Event[i] = 0;
				SpawnPlayer(i);
				KillTimer_(EventTimer[i]);
			}
		}
		format(string, sizeof(string), " {6EF83C}%s a oprit evenimentul {ffffff}Custom.",PlayerInfo[playerid][pNamePlayer]);
		SCMAll(COLOR_WHITE, string);
		KillTimer_(ScriptTimer[16]);
		EventInfo[EventEnabled] = 0;
		EventInfo[EventMoney] = 0;
		EventInfo[EventPlayers] = 0;
		EventInfo[EventType] = 0;
		EventInfo[EventPosX] = 0.0;
		EventInfo[EventPosY] = 0.0;
		EventInfo[EventPosZ] = 0.0;
	}
	return 1;
}
//==============================================================================
CMD:join(playerid, params[])
{
	if(EventInfo[EventType] == 0) return SCM(playerid, COLOR_GRAD2, "Nu este niciun eveniment activ!");
	if(Event[playerid] == 1) return SCM(playerid,COLOR_GREY,"Esti deja la un eveniment!");
	if(GetPlayerWantedLevelEx(playerid) > 0 || PlayerInfo[playerid][pJailed] > 0) return SCM(playerid,COLOR_YELLOW2,"Nu poti merge la eveniment daca esti la inchisoare sau cautat de politie!");
	if(EventInfo[EventType] == 1)
	{
		new rRandom = random(30);
		if(EventInfo[EventEnabled] == 0) return SCM(playerid,COLOR_YELLOW2,"Inscrierile la eveniment au fost inchise!");
		if(EventInfo[EventPlayers] == 20) return SCM(playerid,COLOR_YELLOW2,"Nu mai sunt locuri disponibile la eveniment!");
		if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Nu poti folosi comanda intr-un vehicul!");
		Event[playerid] = 1;
	    SetPlayerPosEx(playerid, RandomSpawns[rRandom][0], RandomSpawns[rRandom][1], RandomSpawns[rRandom][2]);
	    SetPlayerFacingAngle(playerid, RandomSpawns[rRandom][3]);
	  	SetPlayerInteriorEx(playerid, 1);
		SetPlayerVirtualWorld(playerid, 0);
	  	TogglePlayerControllable(playerid, false);
	   	GivePlayerWeaponEx(playerid, 24, 999);
		SetPlayerArmourEx(playerid, 99.9);
		SetPlayerHealthEx(playerid, 99.9);
		EventInfo[EventPlayers]++;
		SCM(playerid, COLOR_EVENT, "* Bafta la evenimentul de {ffffff}Deagle!");
   	}
   	else if(EventInfo[EventType] == 2)
	{
		if(EventInfo[EventEnabled] == 0) return SCM(playerid,COLOR_YELLOW2,"Inscrierile la eveniment au fost inchise!");
		if(EventInfo[EventPlayers] == 50) return SCM(playerid,COLOR_YELLOW2,"Nu mai sunt locuri disponibile la eveniment!");
	  	Event[playerid] = 1;
		EventInfo[EventPlayers]++;
	  	EventTimer[playerid] = SetTimerEx_("EventTime", 700, 1000, -1, "i", playerid);
	   	SCM(playerid, COLOR_EVENT, "* Bafta la evenimentul de {ffffff}Detectiv!");
   	}
	else if(EventInfo[EventType] == 3)
	{
		if(EventInfo[EventEnabled] == 0) return SCM(playerid,COLOR_YELLOW2,"Inscrierile la eveniment au fost inchise!");
		if(EventInfo[EventPlayers] == 8) return SCM(playerid,COLOR_YELLOW2,"Nu mai sunt locuri disponibile la eveniment!");
	  	SetPlayerInteriorEx(playerid, 0);
		SetPlayerVirtualWorld(playerid, 3);
		SetPlayerHealthEx(playerid, 99.9);
		if(!IsVehicleOccupied(racecar[0])) { EngineSTATE[racecar[0]] = 1; PutPlayerInVehicleEx(playerid, racecar[0], 0); }
		else if(!IsVehicleOccupied(racecar[1])) { EngineSTATE[racecar[1]] = 1; PutPlayerInVehicleEx(playerid, racecar[1], 0); }
		else if(!IsVehicleOccupied(racecar[2])) { EngineSTATE[racecar[2]] = 1; PutPlayerInVehicleEx(playerid, racecar[2], 0); }
		else if(!IsVehicleOccupied(racecar[3])) { EngineSTATE[racecar[3]] = 1; PutPlayerInVehicleEx(playerid, racecar[3], 0); }
		else if(!IsVehicleOccupied(racecar[4])) { EngineSTATE[racecar[4]] = 1; PutPlayerInVehicleEx(playerid, racecar[4], 0); }
		else if(!IsVehicleOccupied(racecar[5])) { EngineSTATE[racecar[5]] = 1; PutPlayerInVehicleEx(playerid, racecar[5], 0); }
		else if(!IsVehicleOccupied(racecar[6])) { EngineSTATE[racecar[6]] = 1; PutPlayerInVehicleEx(playerid, racecar[6], 0); }
		else if(!IsVehicleOccupied(racecar[7])) { EngineSTATE[racecar[7]] = 1; PutPlayerInVehicleEx(playerid, racecar[7], 0); }
		Event[playerid] = 1;
		CP[playerid] = 350;
		EventInfo[EventPlayers]++;
		SetPlayerRaceCheckpoint(playerid, 0, 2678.5967,-1616.6810,15.5579, 2597.7568,-1605.5165,19.2209, 5.0);
		TogglePlayerControllable(playerid, false);
		EventTimer[playerid] = SetTimerEx_("EventTime", 700, 1000, -1, "i", playerid);
		SCM(playerid, COLOR_EVENT, "* Bafta la evenimentul de {ffffff}Race!");
   	}
	else if(EventInfo[EventType] == 4)
	{
		if(EventInfo[EventEnabled] == 0) return SCM(playerid,COLOR_YELLOW2,"Inscrierile la eveniment au fost inchise!");
		if(EventInfo[EventPlayers] == 30) return SCM(playerid,COLOR_YELLOW2,"Nu mai sunt locuri disponibile la eveniment!");
	  	Event[playerid] = 1;
		EventInfo[EventPlayers]++;
		SetPlayerPosEx(playerid,EventInfo[EventPosX],EventInfo[EventPosY],EventInfo[EventPosZ]);
	   	SCM(playerid, COLOR_EVENT, "* Bafta la evenimentul {ffffff}Custom!");
   	}
   	if(BizzEntered[playerid] != -1) BizzEntered[playerid] = -1;
   	return 1;
}
//==============================================================================
CMD:switchkey(playerid, params[])
{
	if(SwitchKey[playerid] == 1)
	{
	    if(KeyCar[playerid] != -1)
	    {
	        SwitchKey[playerid] = 2;
			SCM(playerid,COLOR_VEHICLE,"Now control your rental car.");
	    }
	    else return SCM(playerid,COLOR_VEHICLE,"You do not have a rental car.");
	}
	else if(SwitchKey[playerid] == 2)
	{
		if(GetPlayerVehicles(playerid) == 0) return SCM(playerid,COLOR_VEHICLE,"Nu ai niciun vehicul personal.");
        SwitchKey[playerid] = 1;
		SCM(playerid,COLOR_VEHICLE,"Now control your personal car.");
	}
	return 1;
}
//==============================================================================
CMD:givekey(playerid, params[])
{
	new id, sendername[MAX_PLAYER_NAME], string[128], vid = FindSpawnID(GetPlayerVehicleID(playerid));
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /givekey [playerid/PartOfName]");
	if(KeyCar[id] != -1) return SCM(playerid,COLOR_VEHICLE,"This player already has a pair of keys.");
	if(GetPlayerVehicles(playerid) == 0) return SCM(playerid,COLOR_VEHICLE,"Nu ai niciun vehicul personal.");
	if(CarInfo[vid][cSpawned] == 0) return SCM(playerid,COLOR_VEHICLE,"Nu esti in vehiculul tau personal.");
	if(NOON(id));
	if(id != INVALID_PLAYER_ID)
	{
		if(ProxDetectorS(5.0, playerid, id))
		{
			if(KeyCar[id] != -1) return SCM(playerid,COLOR_VEHICLE,"This player already has a set of key.");
			KeyCar[id] = CarInfo[vid][cSpawned];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "{B8FFDB}You have given %s the key to your vehicle", GetName(id));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SCM(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "{B8FFDB}You have recieved the key to a vehicle from %s", sendername);
			SCM(id, COLOR_WHITE, string);
			format(string, sizeof(string), " * %s ii da cheile de la %s lui %s.", sendername, GetVehicleName(GetPlayerVehicleID(playerid)), GetName(id));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SwitchKey[id] = 2;
		}
	}
	return 1;
}
//==============================================================================
CMD:changekey(playerid, params[])
{
	new vid = sVehicle[9][playerid];
	if(GetPlayerVehicles(playerid) == 0) return SCM(playerid,COLOR_VEHICLE,"Nu ai niciun vehicul personal.");
	if(CarInfo[vid][cSpawned] == 0) return SCM(playerid,COLOR_VEHICLE,"You don't have spawned car.");
	foreach(new i: Player) {
	    if(KeyCar[i] == CarInfo[vid][cSpawned]) KeyCar[i] = -1;
	}
	SCM(playerid,COLOR_WHITE,"{B8FFDB}You change your vehicle key.");
	return 1;
}
//==============================================================================
CMD:sellgun(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 9) return SCM(playerid,COLOR_GREY,"{FFB870}You are not an Arms Dealer.");
	new x_weapon[10],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS],price2,id,giveplayer[25],sendername[MAX_PLAYER_NAME],string[128];
	if(sscanf(params, "us[10]d",id,x_weapon,price2))
	{
		SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /sellgun(sg) [playerid/PartOfName] [Gun Name] [Price]");
		SCM(playerid, COLOR_WHITE, "Gun Name: SDPistol(100) Deagle(150)");
		SCM(playerid, COLOR_WHITE, "Gun Name: MP5(200) Shotgun(300)");
		SCM(playerid, COLOR_WHITE, "Gun Name: AK47(350) M4(400) Rifle(600)");
		return 1;
	}
	if(playerid == id) return SCM(playerid,COLOR_VEHICLE,"You can not sell yourself weapons.");
	if(id != INVALID_PLAYER_ID)
    {
		if(PlayerInfo[id][pGunLic] == 0) return SCM(playerid,COLOR_VEHICLE,"This player does not have arms license.");
		if(strcmp(x_weapon,"sdpistol",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 100) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
			weapon[playerid] = 23;
			price[playerid] = 100;
			ammo[playerid] = 100;
		}
		else if(strcmp(x_weapon,"deagle",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 150) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
		    weapon[playerid] = 24;
			price[playerid] = 150;
			ammo[playerid] = 100;
		}
		else if(strcmp(x_weapon,"mp5",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 200) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
		    weapon[playerid] = 29;
			price[playerid] = 200;
			ammo[playerid] = 150;
		}
		else if(strcmp(x_weapon,"shotgun",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 300) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
		    weapon[playerid] = 25;
			price[playerid] = 300;
			ammo[playerid] = 50;
		}
		else if(strcmp(x_weapon,"ak47",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 350) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
		    weapon[playerid] = 30;
			price[playerid] = 350;
			ammo[playerid] = 250;
		}
		else if(strcmp(x_weapon,"m4",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 400) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
			weapon[playerid] = 31;
			price[playerid] = 400;
			ammo[playerid] = 250;
		}
		else if(strcmp(x_weapon,"rifle",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 600) return SCM(playerid,COLOR_VEHICLE,"Not enough Materials for that Weapon.");
		    weapon[playerid] = 33;
			price[playerid] = 600;
			ammo[playerid] = 25;
		}
		else return SCM(playerid,COLOR_WHITE,"{B8DBFF}Invalid weapon name.");
		if(price2 < 1 || price2 > 100000) return SCM(playerid,COLOR_WHITE,"{B8DBFF}Price must be between $1 and $100000.");
		if(ProxDetectorS(5.0, playerid, id))
		{
            if(GetPlayerCash(id) < price2) return SCM(playerid,COLOR_VEHICLE,"This player don't have money needed.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SellgunOffer[id] = playerid;
			SellgunPrice[id] = price2;
			SellgunMats[id] = price[playerid];
			SellgunAmmo[id] = ammo[playerid];
			SellgunID[id] = weapon[playerid];
			//--------------------------------------------------------------
			format(string, sizeof(string), "{B8FFDB}* You offerd %s %s for %s$.",giveplayer,GetWeaponNameEx(weapon[playerid]),FormatNumber(price2));
			SCM(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "{B8FFDB}* %s offered you %s for %s$, type [/acceptgun(ag) %d] to accept.",sendername,GetWeaponNameEx(weapon[playerid]),FormatNumber(price2),playerid);
			SCM(id, COLOR_WHITE, string);
		}
		else return SCM(playerid, COLOR_WHITE, "{FFFFCC}This player is not near you.");
	}
	else return SCM(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	return 1;
}
alias:sellgun("sg");
//==============================================================================
CMD:acceptgun(playerid, params[])
{
    if(SellgunOffer[playerid] > -1)
	{
	    new weaponid,ammo,price,mats,idoffer,id,sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],string[256];
	    if(sscanf(params,"u",id)) return SCM(playerid, -1, "{B8DBFF}Folosire: /acceptgun(ag) [playerid/PartOfName]");
	    if(SellgunOffer[playerid] != id) return SCM(playerid,COLOR_VEHICLE,"This player has not offered you gun.");
	    if(GetPlayerCash(playerid) < SellgunPrice[playerid]) return SCM(playerid,COLOR_VEHICLE,"You don't have money needed.");
	    weaponid = SellgunID[playerid];
	    ammo = SellgunAmmo[playerid];
		price = SellgunPrice[playerid];
		mats = SellgunMats[playerid];
		idoffer = SellgunOffer[playerid];
	    GivePlayerWeaponEx(playerid,weaponid,ammo);
		PlayerInfo[idoffer][pMats] -= mats;
		pUpdate(playerid, pMatsx);
		GivePlayerCash(playerid, -price);
	    GivePlayerCash(idoffer, price);
		GetPlayerName(idoffer,giveplayer,sizeof(giveplayer));
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		//--------------------------------------------------------------
		format(string, sizeof(string), "You have given %s, a %s with %d ammo, for %d Materials.", sendername,GetWeaponNameEx(weaponid), ammo,mats);
		SCM(idoffer, COLOR_GRAD1, string);
		format(string, sizeof(string), "You have recieved a %s with %d ammo from %s.", GetWeaponNameEx(weaponid), ammo, giveplayer);
		SCM(playerid, COLOR_GRAD1, string);
		format(string, sizeof(string), " * %s created a Gun from Materials, and hands it to %s.", giveplayer ,sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SellgunOffer[playerid] = -1;
		SellgunPrice[playerid] = 0;
		SellgunMats[playerid] = 0;
		SellgunAmmo[playerid] = 0;
		SellgunID[playerid] = 0;
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
	        new gun2,tmp;
	        GetPlayerWeaponData(playerid,5,gun2,tmp);
	        if(gun2) SetPlayerArmedWeapon(playerid,gun2);
	        else SetPlayerArmedWeapon(playerid,0);
		}
	}
	else return SCM(playerid, COLOR_VEHICLE,"No-one offerd you materials.");
	return 1;
}
alias:acceptgun("ag");
//==============================================================================
CMD:lock(playerid, params[])
{
	if(SwitchKey[playerid] == 1)
    {
		new string[128], car = GetClosestVehicle(playerid), vsid = FindSpawnID(car);
    	if(CarInfo[vsid][cSpawned] != 0)
	  	{
	        if(CheckPlayerDistanceToVehicle(7.0, playerid, car))
			{
			 	if(CarInfo[vsid][cLock] == 1)
			  	{
	    			SetVehicleDoorsState(car, false);
					format(string, sizeof(string), "~h~%s~n~~g~Descuiat",CarInfo[vsid][cName]);
					GameTextForPlayer(playerid, string, 2000, 4);
					CarInfo[vsid][cLock] = 0;
					vUpdate(vsid,cLockx);
				}
				else if(CarInfo[vsid][cLock] == 0)
				{
	    			SetVehicleDoorsState(car, true);
					format(string, sizeof(string), "~h~%s~n~~r~Incuiat",CarInfo[vsid][cName]);
					GameTextForPlayer(playerid, string, 2000, 4);
					CarInfo[vsid][cLock] = 1;
					vUpdate(vsid,cLockx);
				}
			}
		 	else return SCM(playerid, COLOR_VEHICLE,"Nu esti in apropierea vehiculului tau personal.");
	 	}
    }
	else if(SwitchKey[playerid] == 2)
	{
	    new string[128];
		if(KeyCar[playerid] == -1) return SCM(playerid,COLOR_VEHICLE,"You do not have a rental vehicle.");
		new vsid = FindSpawnID(KeyCar[playerid]);
        if(CheckPlayerDistanceToVehicle(5.0, playerid, KeyCar[playerid]))
		{
		    if(CarInfo[vsid][cLock] == 0)
	        {
			    format(string, sizeof(string), "~w~%s ~r~Incuiat", GetVehicleName(KeyCar[playerid]));
			    GameTextForPlayer(playerid, string, 4000, 3);
	  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				CarInfo[vsid][cLock] = 1;
				vUpdate(vsid,cLockx);
    			SetVehicleDoorsState(KeyCar[playerid], true);
		    }
			else if(CarInfo[vsid][cLock] == 1)
			{
				format(string, sizeof(string), "~w~%s ~g~Descuiat",GetVehicleName(KeyCar[playerid]));
			    GameTextForPlayer(playerid, string, 4000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
    			SetVehicleDoorsState(KeyCar[playerid], false);
      	    	CarInfo[vsid][cLock] = 0;
				vUpdate(vsid,cLockx);
			}
		}
	}
    return 1;
}
//==============================================================================
CMD:engine(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new sendername[MAX_PLAYER_NAME], string[256], vid = GetPlayerVehicleID(playerid);
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(IsABike(vid)) return 1;
		if(Refueling[playerid] == 1) return SCM(playerid,COLOR_GRAD1,"Nu poti porni motorul cat timp faci plinul.");
		if(Gas[vid] <= 0) return SCM(playerid,COLOR_GRAD2,"Acest vehicul nu mai are combustibil!");
		if(EngineSTATE[vid] == 0)
		{
			if(Undercover[playerid] == 1)
			{
				SetVehicleEngineState(vid, true);
				EngineSTATE[vid] = 1;
			}
			else
			{
				SetVehicleEngineState(vid, true);
				EngineSTATE[vid] = 1;
				format(string,sizeof(string)," * %s baga cheia in contact si porneste motorul la %s.",sendername, GetVehicleName(vid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			if(Undercover[playerid] == 1)
			{
				SetVehicleEngineState(vid, false);
				EngineSTATE[vid] = 0;
			}
			else
			{
				SetVehicleEngineState(vid, false);
				EngineSTATE[vid] = 0;
				format(string,sizeof(string)," * %s scoate cheia din contact si opreste motorul la %s.",sendername,GetVehicleName(vid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:sellmats(playerid, params[])
{
	new target, amount, price, string[256];
	if(PlayerInfo[playerid][pJob] != 9) return	SCM(playerid, COLOR_YELLOW2, "Nu esti dealer de arme!");
	if(BizzEntered[playerid] == 1 || BizzEntered[playerid] == 2)
	{
	    if(PlayerInfo[playerid][pMats] <= 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai materiale la tine pentru a putea vinde!");
	    new bani = PlayerInfo[playerid][pMats] * 12 + random(2000);
	    format(string,sizeof(string),"Vrei sa-ti vinzi materialele pentru %s$?",FormatNumber(bani));
	    SPD(playerid,DIALOG_SELL_MATS,DIALOG_STYLE_MSGBOX,"Sell Materials:",string,"Accept","Inchide");
	}
	else
	{
		if(sscanf(params, "uii", target, amount, price)) return SCM(playerid, -1, "{B8DBFF}Folosire: /sellmats [playerid/PartOfName] [amount] [price]");
	    if(NOON(target));
		if(amount <= PlayerInfo[playerid][pMats])
		{
			if(GetPlayerCash(playerid) >= price)
			{
				if(price > 0)
				{
					if(amount > 0)
					{
						if(ProxDetectorS(5.0, playerid, target))
						{
						    if(playerid == target) return 1;
							SetPVarInt(target, "mAmount", amount);
							SetPVarInt(target, "mPrice", price);
							SetPVarInt(target, "mID", playerid);
							//--------------------------------------------------------------
							format(string, sizeof(string), "** %s wish to sell you %d mats for $%s. Type [/accept mats %d] if you wish to accept.", PlayerInfo[playerid][pNamePlayer], amount, FormatNumber(price), playerid);
							SCM(target, COLOR_LIGHTBLUE, string);
							//--------------------------------------------------------------
							format(string, sizeof(string), "** You wish to sell %d mats to %s, for $%s.", amount, PlayerInfo[target][pNamePlayer], FormatNumber(price));
							SCM(playerid, COLOR_LIGHTBLUE, string);
						}
						else return	SCM(playerid, COLOR_GRAD2, "This player needs to be next to you!");
					}
					else return	SCM(playerid, COLOR_GRAD2, "The minimum amount is 1.");
				}
				else return	SCM(playerid, COLOR_GRAD2, "The minimum price is 1$.");
			}
			else return	SCM(playerid, COLOR_GRAD2, "This player does not have enough money for this mats!");
		}
		else return	SCM(playerid, COLOR_GRAD2, "You don't have enough mats.");
	}
	return 1;
}
//==============================================================================
CMD:eject(playerid, params[])
{
	new targetID;
	if(sscanf(params, "u", targetID)) return SCM(playerid, -1, "{B8DBFF}Folosire: /eject [playerid/PartOfName]");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(targetID))
		{
			new string[128], playerName[2][MAX_PLAYER_NAME];
			//--------------------------------------------------------------
			GetPlayerName(playerid, playerName[0], MAX_PLAYER_NAME);
			GetPlayerName(targetID, playerName[1], MAX_PLAYER_NAME);
			//--------------------------------------------------------------
			format(string, sizeof(string), " * %s la dat afara pe %s din vehicul.", playerName[0], playerName[1]);
			SCM(playerid, COLOR_PURPLE, string);
			RemovePlayerFromVehicleEx(targetID);
		}
		else if(GetPlayerSurfingVehicleID(targetID) == GetPlayerVehicleID(playerid))
		{
			new string2[128], playerName2[2][MAX_PLAYER_NAME], Float:playPos[3];
			//--------------------------------------------------------------
			GetPlayerPos(targetID, playPos[0], playPos[1], playPos[2]);
			//--------------------------------------------------------------
			GetPlayerName(playerid, playerName2[0], MAX_PLAYER_NAME);
			GetPlayerName(targetID, playerName2[1], MAX_PLAYER_NAME);
			//--------------------------------------------------------------
			format(string2, sizeof(string2), " * %s la dat afara pe %s din vehicul.", playerName2[0], playerName2[1]);
			SCM(playerid, COLOR_PURPLE, string2);
			//--------------------------------------------------------------
			SetPlayerPosEx(targetID, playPos[0]+2, playPos[1]+2, playPos[2]+3);
		}
		else return SCM(playerid, COLOR_GREY, "Acest jucator nu este in vehiculul tau.");
	}
	else return SCM(playerid, COLOR_GREY, "Nu conduci un vehicul.");
	return 1;
}
//==============================================================================
CMD:getmats(playerid, params[])
{
	new rand = random(sizeof(MatsCP));
    if(PlayerInfo[playerid][pJob] != 9) return SCM(playerid,COLOR_GRAD1,"Nu esti dealer de arme!");
	if(IsPlayerInRangeOfPoint(playerid, 10, 1368.2200,-1280.0271,13.5469))
	{
	    if(CP[playerid] == 0)
		{
	        if(GetPlayerCash(playerid) >= 500)
			{
		        SetPlayerCheckpointEx(playerid,MatsCP[rand][0],MatsCP[rand][1],MatsCP[rand][2],5.0);
		        SCM(playerid, COLOR_WHITE, "Du-te la checkpoint pentru a colecta materialele.");
		        CP[playerid] = 3;
		        GivePlayerCash(playerid, -500);
	        }
	        else return SCM(playerid, COLOR_GREY, "Ai nevoie de 500$ pentru a colecta materiale.");
	    }
	    else return SCM(playerid, COLOR_YELLOW2, "Ai deja un checkpoint activ, foloseste /killcp.");
	}
	else
	{
		SCM(playerid, COLOR_GRAD2, "Nu poti colecta materiale in aceasta locatie, du-te la checkpoint!");
		SetPlayerCheckpointEx(playerid, 1368.2200,-1280.0271,13.5469, 10);
	}
	return 1;
}
//==============================================================================
CMD:staff(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1) SPD(playerid,DIALOG_STAFF,DIALOG_STYLE_LIST,"Staff:","Admins\nHelpers\nLeaders\n","Select","Cancel");
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:contract(playerid, params[])
{
	new pc, string[256], sendername[MAX_PLAYER_NAME], moneys, playermoney;
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) return SCM(playerid,COLOR_YELLOW2,"Nu poti pune un contract daca faci parte din echipa de asasini.");
	if(sscanf(params,"ui",pc,moneys)) return SCM(playerid, -1, "{B8DBFF}Folosire: /contract [playerid/PartOfName] [amount]");
    if(moneys < 10000 || moneys > 100000) return SCM(playerid, COLOR_GREY, "Contract money must be atleast $10.000, and not more then $100.000!");
	if(GetPlayerScoreEx(playerid) < 3) return SCM(playerid, COLOR_GRAD2, "Trebuie sa ai level 3 ca sa pui un contract.");
	if(NOON(pc));
    if(PlayerInfo[pc][pMember] == 8 || PlayerInfo[pc][pLeader] == 8) return SCM(playerid, COLOR_GREY, "   Cannot place Contracts on your own Agency!");
    if(pc == playerid) return SCM(playerid, COLOR_GREY, "You cannot Contract yourself!");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	playermoney = GetPlayerCash(playerid);
	if(moneys > 0 && playermoney >= moneys)
	{
		GivePlayerCash(playerid, -moneys);
		PlayerInfo[pc][pHeadValue] += moneys;
		format(string, sizeof(string), "%s has placed a contract on %s, for $%d.",sendername, GetName(pc), moneys);
		SendFactionMessage(8, COLOR_YELLOW, string);
		format(string, sizeof(string), "* You placed a contract on %s, for $%d.",GetName(pc), moneys);
		SCM(playerid, COLOR_WHITE, string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else return SCM(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
	return 1;
}
//==============================================================================
CMD:pcolor(playerid, params[])
{
	if(PlayerInfo[playerid][pPremium] == 1)	SPD(playerid, DIALOG_PCOLOR, DIALOG_STYLE_INPUT, "Premium Color:", "Introdu culoarea ta personalizata intrand pe [www.colorpicker.com]\nCuloarea alba este FFFFFF", "Introdu", "Inchide");
	else return SCM(playerid, COLOR_GRAD2,"Nu ai cont premium!");
	return 1;
}
//==============================================================================
CMD:leavepaint(playerid, params[])
{
	if(PlayerPaintballing[playerid] != 0)
	{
	    new string[128];
		format(string, sizeof(string), "%s has left the paintball arena.", GetName(playerid));
		foreach(new x: Player) {
			if(PlayerPaintballing[x] == 1) SCM(x, COLOR_YELLOW, string);
		}
		PlayerTextDrawHide(playerid, PaintballTD[0]);
		PlayerTextDrawHide(playerid, PaintballTD[1]);
        SetPlayerInteriorEx(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		for(new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
        SetPlayerPosEx(playerid, BizzInfo[21][bEntranceX],BizzInfo[21][bEntranceY],BizzInfo[21][bEntranceZ]);
        TogglePlayerControllable(playerid, true);
        SetPlayerHealthEx(playerid, 99.9);
        ResetPlayerWeaponsEx(playerid);
		SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
		paintp[PlayerPaintballing[playerid]]--;
        PlayerPaintballing[playerid] = 0;
		PlayerPaintballScore[playerid] = 0;
		KillP[playerid] = 0;
		DeathP[playerid] = 0;
		PaintBallVoted[playerid] = 0;
		PaintBallVoted2[playerid] = 0;
		SetPlayerToTeam(playerid);
		SetPlayerTeamColor(playerid);
	}
	return 1;
}
//==============================================================================
alias:f("faction");
CMD:f(playerid, params[])
{
    new szMessage[256], f = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(f == 0) return SCM(playerid, COLOR_GREY, "Nu faci parte dintr-o factiune.");
	else if(f > 0 && f < 4) return SCM(playerid, COLOR_GREY, "Nu poti folosi comanda in aceasta factiune.");
	if(isnull(params)) return SCM(playerid, -1, "{B8DBFF}Folosire: /f(action) [faction chat]");
    if(PlayerInfo[playerid][pMuted] == 1) return SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
	if(TogFaction[playerid] == false) return SCM(playerid,COLOR_GRAD2,"Nu poti scrie nimic in chat cat timp il ai dezactivat.");
	switch(PlayerInfo[playerid][pFactionRank])
	{
		case 1:	format(szMessage, sizeof(szMessage), "# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName1], PlayerInfo[playerid][pNamePlayer], params);
		case 2:	format(szMessage, sizeof(szMessage), "# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName2], PlayerInfo[playerid][pNamePlayer], params);
		case 3:	format(szMessage, sizeof(szMessage), "# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName3], PlayerInfo[playerid][pNamePlayer], params);
		case 4:	format(szMessage, sizeof(szMessage), "# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName4], PlayerInfo[playerid][pNamePlayer], params);
		case 5:	format(szMessage, sizeof(szMessage), "# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName5], PlayerInfo[playerid][pNamePlayer], params);
		case 6:	format(szMessage, sizeof(szMessage), "{29b3d9}# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName6], PlayerInfo[playerid][pNamePlayer], params);
		default: format(szMessage, sizeof(szMessage), "# [%d] %s %s: %s", PlayerInfo[playerid][pFactionRank], FactionInfo[f][fRankName1], PlayerInfo[playerid][pNamePlayer], params);
	}
	SendFactionMessage(f, COLOR_SYSTEM, szMessage);
	return 1;
}
//==============================================================================
CMD:pin(playerid, params[])
{
	if(PinStep[playerid] != 0) return 1;
	if(PlayerInfo[playerid][pPinLogged] == 1) return SCM(playerid, -1, "{FFFFCC}Contul tau este deja deblocat.");
	if(strlen(PlayerInfo[playerid][pPin]) == 1) return SCM(playerid, -1, "{FFFFCC}Trebuie sa adaugi un cod de securitate mai intai. Foloseste /addpin.");
	SCM(playerid, -1, "{FFFF45}Introdu codul tau de securitate si apasa butonul verde.");
	PinStep[playerid] = 1;
	ShowPinTextDraws(playerid);
	format(InputtText[playerid], 10, "");
	SelectTextDraw(playerid, COLOR_WHITE);
	return 1;
}
//==============================================================================
CMD:addpin(playerid, params[])
{
	if(PinStep[playerid] != 0) return 1;
	if(strlen(PlayerInfo[playerid][pPin]) != 1) return SCM(playerid, -1, "{FFFFCC}Deja ai un cod de securitate setat.");
	SCM(playerid, -1, "{FFFF45}Introdu un cod de securitate de 4 cifre si apasa butonul verde.");
	PinStep[playerid] = 1;
	ShowPinTextDraws(playerid);
	format(InputtText[playerid], 10, "");
	SelectTextDraw(playerid, COLOR_WHITE);
	return 1;
}
//==============================================================================
CMD:lockacc(playerid, params[])
{
	SCM(playerid, -1, "{FFFF45}Contul tau a fost blocat. Foloseste /pin pentru a il debloca.");
	PlayerInfo[playerid][pPinLogged] = 0;
	PinStep[playerid] = 0;
	return 1;
}
//==============================================================================
CMD:changepin(playerid, params[])
{
	if(strlen(PlayerInfo[playerid][pPin]) == 1) SCM(playerid, -1, "{FFFFCC}Trebuie sa adaugi un cod de securitate mai intai. Foloseste /addpin.");
	SCM(playerid, -1, "{FFFF45}Introdu codul tau PIN pentru a te autentifica.");
	PinStep[playerid] = 2;
	ShowPinTextDraws(playerid);
	format(InputtText[playerid], 10, "");
	SelectTextDraw(playerid, COLOR_WHITE);
	return 1;
}
//==============================================================================
CMD:quitfaction(playerid, params[])
{
	new faction = PlayerInfo[playerid][pLeader]+PlayerInfo[playerid][pMember];
	if(faction != 0)
	{
		if(PlayerInfo[playerid][pFactionRank] <= 5)
		{
			new lead[MAX_PLAYER_NAME], query[256];
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `PlayerFaction` = '%d' AND `FactionRank` = '6' LIMIT 1", faction);
			new Cache:re = mysql_query(SQL, query);
			if(cache_num_rows() != 0) cache_get_value(0, "name", lead, MAX_PLAYER_NAME);
			cache_delete(re);
			//--------------------------------------------------------------
			if(strcmp(lead, "None", true) == 0) SPD(playerid, DIALOG_QUITGROUP1, DIALOG_STYLE_MSGBOX, "Server: Quit Faction", "Esti sigur ca vrei sa iesi din factiune? Nu ai lider, vei iesi fara FP.", "Da", "Nu");
			else SPD(playerid, DIALOG_QUITGROUP2, DIALOG_STYLE_MSGBOX, "Server: Quit Faction", "Esti sigur ca vrei sa iesi din factiune? Ai lider, vei iesi cu FP.", "Da", "Nu");
		}
		else return SCM(playerid, -1, "Nu poti parasi factiunea deoarece esti lider!");
   	}
   	else return SCM(playerid, COLOR_WHITE, "Nu faci parte dintr-o factiune.");
	return 1;
}
//==============================================================================
CMD:charity(playerid, params[])
{
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid,COLOR_YELLOW2,"Contul tau este blocat foloseste /pin pentru al debloca.");
	if(IsPlayerConnected(playerid))
	{
		new moneycharity, string[100], sendername[MAX_PLAYER_NAME];
		if(!IsPlayerInRangeOfPoint(playerid,5.0, FactionInfo[7][fSafePosX],FactionInfo[7][fSafePosY],FactionInfo[7][fSafePosZ])) return SCM(playerid,COLOR_WHITE,"Nu esti in locul unde se depoziteaza banii pentru donatii.");
		if(sscanf(params, "i", moneycharity)) return SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /charity [suma]");
		if(GetPlayerCash(playerid) < moneycharity) return SCM(playerid, 0xFFFFFFFF,"Error: You don't have that amount of money.");
		if(moneycharity < 10000 || moneycharity > 1000000) return SCM(playerid,COLOR_WHITE,"Donation must be between $10.000 and $1.000.000.");
		GivePlayerCash(playerid, -moneycharity);
		format(string, sizeof(string), "{52CC52}Multumim pentru donatia facuta %s$.", FormatNumber(moneycharity));
		SCM(playerid,COLOR_WHITE,string);
		GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "{52CC52}%s donated %s$ for players with level of between 2-7.", sendername,FormatNumber(moneycharity));
		SendFactionMessage(7, COLOR_WHITE, string);
		FactionInfo[7][fSafeMoney] += moneycharity;
		SaveFactions(7);
	}
	return 1;
}
//==============================================================================
CMD:givecharity(playerid, params[])
{
    if(PlayerInfo[playerid][pLeader] != 7) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa fii primar pentru a folosi aceasta comanda.");
    if(FactionInfo[7][fSafeMoney] < 1) return SCM(playerid, COLOR_YELLOW2,"Nu sunt bani in seiful primariei.");
	new charity = 0, sendername[MAX_PLAYER_NAME], string[256], moneycharity, cmoneycharity;
	if(sscanf(params, "i", moneycharity)) return SCM(playerid, -1, "{B8DBFF}Folosire: /givecharity [suma]");
	if(moneycharity < 10000 || moneycharity > 500000) return SCM(playerid,COLOR_GRAD2, "Amount of Money $10.000 - $500.000.");
	foreach(new i: Player)
	{
	    if(GetPlayerScoreEx(i) > 1 && GetPlayerScoreEx(i) < 8)
	    {
	        charity++;
	        cmoneycharity += moneycharity;
	    }
	}
	if(charity >= 1 && FactionInfo[7][fSafeMoney] >= cmoneycharity)
	{
		foreach(new i: Player)
		{
		    if(GetPlayerScoreEx(i) > 1 && GetPlayerScoreEx(i) < 8)
		    {
				GivePlayerCash(i, moneycharity);
				FactionInfo[7][fSafeMoney] -= moneycharity;
		    }
		}
		GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "* Primarul %s a dat la toti playerii cu nivelul cuprins intre 2 si 7 suma de %s$.",sendername,FormatNumber(moneycharity));
		SCMAll(COLOR_ACHAT, string);
	}
	else return SCM(playerid, COLOR_YELLOW2,"Nu sunt playeri online care sa aiba nivelul cuprins intre 2 si 7.");
	return 1;
}
//==============================================================================
CMD:cw(playerid, params[])
{
	new text[130], string[256], sendername[MAX_PLAYER_NAME];
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "   You are not in a car!");
	if(sscanf(params,"s[130]",text)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /cw [text]");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	new vehicle = GetPlayerVehicleID(playerid);
	foreach(new i: Player)
	{
	    if(IsPlayerInAnyVehicle(i))
	    {
	        if(GetPlayerVehicleID(i) == vehicle)
	        {
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) format(string, sizeof(string), "**Driver %s says: %s**", sendername, text);
				else format(string, sizeof(string), "**Passenger %s says: %s**", sendername, text); 
 				SCM(i, 0xD7DFF3AA, string);
			}
	    }
	}
	return 1;
}
//==============================================================================
CMD:turn(playerid, params[])
{
    new x_nr[5], sendername[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "s[5]",x_nr)) return SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /turn <Off/On>");
    if(strcmp(x_nr,"off",true) == 0)
 	{
        if(PhoneOnline[playerid] == 0)
        {
            PhoneOnline[playerid] = 1;
            GetPlayerName(playerid, sendername, sizeof(sendername));
            if(PlayerInfo[playerid][pSex] == 1) format(string, sizeof(string), "%s turns his phone off.", sendername);
			else if(PlayerInfo[playerid][pSex] == 2) format(string, sizeof(string), "%s turns her phone off.", sendername);
    		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SCM(playerid, COLOR_ACHAT, " Your phone is already turned off.");
	}
	else if(strcmp(x_nr,"on",true) == 0)
 	{
        if(PhoneOnline[playerid] == 1)
        {
            PhoneOnline[playerid] = 0;
            GetPlayerName(playerid, sendername, sizeof(sendername));
            if(PlayerInfo[playerid][pSex] == 1) format(string, sizeof(string), "%s turns his phone on.", sendername);
			else if(PlayerInfo[playerid][pSex] == 2) format(string, sizeof(string), "%s turns her phone on.", sendername);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SCM(playerid, COLOR_ACHAT, " Your phone is already turned on.");
    }
    return 1;
}
//==============================================================================
CMD:setfreq(playerid, params[])
{
	new string[256], Float:freqss2;
    if(sscanf(params,"f",freqss2)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /setfreq [Frequency(89.5 of 98.5)]");
    if(freqss2 < 89.5 || freqss2 > 98.5 ) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /setfreq [Frequency(89.5 of 98.5)]");
	if(freqss2 == WTChannel[playerid]) return SCM(playerid, 0xFFFFFFFF, "Error: You are already in this channel.");
    format(string, sizeof(string), "{B8FFDB}You set your Walkie Talkie Frequency to %.2f.",freqss2);
    SCM(playerid, COLOR_WHITE, string);
	WTChannel[playerid] = freqss2;
	new query[256];
	mysql_format(SQL,query,sizeof(query),"UPDATE `users` SET `Frequence` = '%.2f' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNamePlayer]);
	mysql_tquery(SQL,query);
	return 1;
}
//==============================================================================
CMD:wt(playerid, params[])
{
	new msg[128], string[256];
    if(PlayerInfo[playerid][pMuted] == 1) return SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii intr-un vehicul!");
	if(sscanf(params, "s[128]", msg)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /wt [Message]");
	if(WTChannel[playerid] == 0) return SCM(playerid,COLOR_YELLOW2, "Nu ai o frecventa setata.");
	foreach(new i: Player)
	{
	    if(IsPlayerInAnyVehicle(i))
	    {
	        if(WTChannel[i] == WTChannel[playerid])
	        {
				format(string, sizeof(string), "{54BF9C}[Freq: %.2f] %s: %s", WTChannel[playerid], GetName(playerid), msg);
				SCM(i, COLOR_WHITE, string);
	        }
        }
	}
	return 1;
}
//==============================================================================
CMD:oldcar(playerid, params[])
{
    new vehid;
    if(IsPlayerInAnyVehicle(playerid)) vehid = GetPlayerVehicleID(playerid);
	else vehid = gLastCar[playerid];
	SFM(playerid, COLOR_GREY, "Ultimul tau vehicul a fost: %d",vehid);
    return 1;
}
//==============================================================================
alias:whisper("w");
CMD:whisper(playerid, params[])
{
    new string[128], id, mess[250], giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME];
    if(GetPlayerScoreEx(playerid) < 2) return SCM(playerid, COLOR_YELLOW2, "Error: You must be level 2 to use /w(hisper).");
    if(PlayerInfo[playerid][pMuted] == 1) return SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
	if(sscanf(params, "us[250]",id,mess)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /w [Nume/ID] [Message]");
	if(IsPlayerConnected(id))
	{
	    if(id != INVALID_PLAYER_ID)
	    {
			if(GetDistanceBetweenPlayers(playerid,id) > 5) return SCM(playerid,COLOR_YELLOW2, "Acel player nu este langa tine.");
			if(id == playerid) return SCM(playerid, COLOR_YELLOW2, "Error: You can not send a message to yourself.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s whispers: %s", sendername, mess);
			SCM(id, COLOR_YELLOW, string);
			format(string, sizeof(string), "Whisper to %s: %s", giveplayer, mess);
			SCM(playerid,  COLOR_YELLOW, string);
		}
	}
	else return SCM(playerid, COLOR_YELLOW2, "Eroare: Acel player nu este conectat.");
	return 1;
}
//==============================================================================
CMD:gov(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME], string[256], mesaj[128];
    if(PlayerInfo[playerid][pLeader] != 7) return SCM(playerid,COLOR_YELLOW2,"Nu esti primar.");
    if(sscanf(params,"s[128]",mesaj)) return SCM(playerid, -1, "{B8DBFF}Folosire: /gov [text]");
    GetPlayerName(playerid, sendername, sizeof(sendername));
    SCMAll(COLOR_WHITE, "|___________ Parlament News Announcement ___________|");
	format(string, sizeof(string), "Mayor %s: %s", sendername, mesaj);
	SCMAll(COLOR_MAYOR, string);
	return 1;
}
//==============================================================================
CMD:intrarecasa(playerid, params[])
{
    new Float:X, Float:Y, Float:Z, string[128], proplev;
    if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_SCRIPTER, "Nu esti Scripter!");
    if(sscanf(params,"d",proplev)) return SCM(playerid, -1, "{B8DBFF}Folosire: /intrarecasa [houseid] => Muti intrarea casa la tine");
    if(proplev >= MAX_HOUSES || proplev < 0) SCM(playerid,COLOR_GRAD1,"Invalid houseid.");
	else
	{
	    GetPlayerPos(playerid,X,Y,Z);
	    format(string,sizeof(string),"Intrarea la Casa %d a fost mutata la coordonatele [ %f | %f | %f ]",proplev,X,Y,Z);
		SendAdminMessage(string,1);
		HouseInfo[proplev][hEntranceX] = X;
		HouseInfo[proplev][hEntranceY] = Y;
		HouseInfo[proplev][hEntranceZ] = Z;
		SaveHouse(proplev);
		OnPropUpdate("casa", proplev);
	}
	return 1;
}
//==============================================================================
CMD:iesirecasa(playerid, params[])
{
    new Float:X, Float:Y, Float:Z, string[128], proplev;
    if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_SCRIPTER, "Nu esti Scripter!");
    if(sscanf(params,"d",proplev)) return SCM(playerid, -1, "{B8DBFF}Folosire: /intrarecasa [houseid] => Muti iesirea casa la tine");
    if(proplev >= MAX_HOUSES || proplev < 0) SCM(playerid,COLOR_GRAD1,"Invalid houseid.");
	else
	{
	    GetPlayerPos(playerid,X,Y,Z);
	    format(string,sizeof(string),"Iesirea la Casa %d a fost mutata la coordonatele [ %f | %f | %f ]",proplev,X,Y,Z);
		SendAdminMessage(string,1);
		HouseInfo[proplev][hExitX] = X;
		HouseInfo[proplev][hExitY] = Y;
		HouseInfo[proplev][hExitZ] = Z;
		SaveHouse(proplev);
	}
	return 1;
}
//==============================================================================
CMD:premium(playerid, params[])
{
	new sendername[MAX_PLAYER_NAME], string[256], mesaj[128];
    if(PlayerInfo[playerid][pPremium] == 0) return SCM(playerid, COLOR_YELLOW2, "Nu ai cont premium pentru a folosi aceasta comanda.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params,"s[128]",mesaj)) return SCM(playerid, -1, "{B8DBFF}Folosire: (/p)remium [premium chat]");
	if(TogPremium[playerid] == false) return SCM(playerid,COLOR_GRAD2,"Nu poti scrie nimic in chat cat timp il ai dezactivat.");
	format(string, sizeof(string),"** Premium %s: %s **", sendername, mesaj);
	SendPremiumMessage(string);
	return 1;
}
alias:premium("p");
//==============================================================================
CMD:departments(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME], string[256], mesaj[128];
    GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params,"s[128]",mesaj)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: (/d)epartments [department chat]");
	if(GetPlayerFaction(playerid) == 1)
	{
		if(PlayerInfo[playerid][pFactionRank] == 6) format(string, sizeof(string), "** Captain %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 5) format(string, sizeof(string), "** Lieutenant %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 4) format(string, sizeof(string), "** Sergeant %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 3) format(string, sizeof(string), "** Corporal %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 2) format(string, sizeof(string), "** Police Officer %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 1) format(string, sizeof(string), "** Cadet %s: %s, over. **", sendername, mesaj);
		else format(string, sizeof(string), "** Cadet %s: %s, over. **", sendername, mesaj);
		SendTeamMessage(2, COLOR_ALLDEPT, string);
	}
	else if(GetPlayerFaction(playerid) == 2)
	{
	    if(PlayerInfo[playerid][pFactionRank] == 6) format(string, sizeof(string), "** Director %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 5) format(string, sizeof(string), "** Assistant Director in Charge %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 4) format(string, sizeof(string), "** Special Agent in Charge %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 3) format(string, sizeof(string), "** Special Agent %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 2) format(string, sizeof(string), "** Special Agent Trainee %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 1) format(string, sizeof(string), "** Professional Staff %s: %s, over. **", sendername, mesaj);
		else format(string, sizeof(string), "** Intern %s: %s, over. **", sendername, mesaj);
		SendTeamMessage(2, COLOR_ALLDEPT, string);
	}
	else if(GetPlayerFaction(playerid) == 3)
	{
	    if(PlayerInfo[playerid][pFactionRank] == 6) format(string, sizeof(string), "** General %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 5) format(string, sizeof(string), "** Lieutenant %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 4) format(string, sizeof(string), "** Captain %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 3) format(string, sizeof(string), "** Major %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 2) format(string, sizeof(string), "** Sergeant %s: %s, over. **", sendername, mesaj);
		else if(PlayerInfo[playerid][pFactionRank] == 1) format(string, sizeof(string), "** Private %s: %s, over. **", sendername, mesaj);
		else format(string, sizeof(string), "** Private %s: %s, over. **", sendername, mesaj);
		SendTeamMessage(2, COLOR_ALLDEPT, string);
	}
	else return SCM(playerid, COLOR_GRAD2, "   You are not part of a Team !");
	return 1;
}
alias:departments("d");
//==============================================================================
CMD:ac(playerid, params[])
{
	new string[256], mesaj[128];
    if(PlayerInfo[playerid][pMuted] == 1) return SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(TogHelper[playerid] == false) return SCM(playerid,COLOR_YELLOW2,"Nu poti scrie in chat daca nu il ai pornit!");
	if(sscanf(params,"s[128]",mesaj)) return SCM(playerid, COLOR_YELLOW2, "{B8DBFF}Folosire: /ac [text]");
	format(string, sizeof(string), "{42cbf4}** Helper %s : %s **", GetName(playerid), mesaj);
	SendHelperMessage(COLOR_YELLOW, string);
	return 1;
}
alias:ac("agentchat");
//==============================================================================
CMD:lc(playerid, params[])
{
	new string[256], mesaj[128], leader = PlayerInfo[playerid][pLeader];
    if(IsPlayerConnected(playerid))
    {
		if(sscanf(params,"s[128]",mesaj)) return SCM(playerid, -1, "{B8DBFF}Folosire: (/l)aders(c)hat [text]");
		if(leader >= 1)
		{
	        format(string, sizeof(string), "{FFFF00} {cc0000}Lider %s: %s: {FFFFFF}%s", NumeFactiune(leader), GetName(playerid), mesaj);
			foreach(new i: Leaders) {
				SendSplitMessage(i, COLOR_WHITE, string);
			}
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu esti lider!");
	}
	return 1;
}
alias:lc("leaderchat");
//==============================================================================
CMD:news(playerid, params[])
{
	new sendername[MAX_PLAYER_NAME], string[200], mesaj[128];
    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
        if(PlayerInfo[playerid][pMuted] == 1) return SFM(playerid, COLOR_LIGHT_RED, "Nu poti vorbi deoarece ai mute pentru %d secunde.",PlayerInfo[playerid][pMuteTime]);
		if(StaticVeh[GetPlayerVehicleID(playerid)][svFaction] != 9)
	    {
	        SCM(playerid, COLOR_GREY, "   You're not near/in your news van/chopper !");
	        return 1;
	    }
		else
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(sscanf(params,"s[128]",mesaj)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /news [newstext]");
			new rtext[64];
			if(PlayerInfo[playerid][pFactionRank] == 1) { rtext = "Intern Worker"; }
			else if(PlayerInfo[playerid][pFactionRank] == 2) { rtext = "Jurnalist"; }
			else if(PlayerInfo[playerid][pFactionRank] == 3) { rtext = "Head Journalist"; }
			else if(PlayerInfo[playerid][pFactionRank] == 4) { rtext = "Company Secretary"; }
			else if(PlayerInfo[playerid][pFactionRank] == 5) { rtext = "ABC Manager"; }
    		else if(PlayerInfo[playerid][pFactionRank] == 6) { rtext = "Network Producer"; }
			else { rtext = "Intern Worker"; }
			format(string, sizeof(string), "[News Reporters] %s %s: %s", rtext, sendername, mesaj);
			SCMAll(COLOR_NEWS,string);
		}
	}
	else return SCM(playerid, COLOR_GREY, "   You are not a News Reporters !");
	return 1;
}
//==============================================================================
CMD:ajail(playerid, params[])
{
    new string[128], motiv[32], sendername[MAX_PLAYER_NAME], pjail, time;
	if(sscanf(params,"uds[32]",pjail,time,motiv)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /ajail [playerid/PartOfName] [time(minutes)] [reason]");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 4)
	{
	    if(IsPlayerConnected(pjail))
	    {
	        if(pjail != INVALID_PLAYER_ID)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* You Jailed %s.", GetName(pjail));
				SCM(playerid, COLOR_LIGHT_RED, string);
				format(string, sizeof(string), "* You were Jailed by Admin %s.", sendername);
				SCM(pjail, COLOR_LIGHT_RED, string);
				ResetPlayerWeaponsEx(pjail);
				PlayerInfo[pjail][pJailed] = 1;
				PlayerInfo[pjail][pJailTime] = time*60;
				SetPlayerWantedLevelEx(pjail,0);
				PlayerInfo[pjail][pWantedTime] = 0;
				PlayerTextDrawHide(pjail, WantedTime);
				SetPlayerInteriorEx(pjail, 6);
				SetPlayerPosEx(pjail, 264.6288,77.5742,1001.0391);
				format(string, sizeof(string), "You are jailed for %d minutes.", time);
				SCM(pjail, COLOR_WHITE, string);
				format(string, sizeof(string), "Jail: %s has been jailed by Admin %s [Reason: %s]", GetName(pjail), sendername, (motiv));
				SendAdminMessage(string,1);
				AdminLog(string);
				pUpdate(pjail,pJailedx);
				pUpdate(pjail,pJailTimex);
			}
		}
	}
	else return SCM(playerid, COLOR_GRAD2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:duty(playerid, params[])
{
    new string[128], sendername[MAX_PLAYER_NAME], faction = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsACop(playerid))
	{
		if(FactionEntered[playerid] == 1 || FactionEntered[playerid] == 2 || FactionEntered[playerid] == 3 || BizzEntered[playerid] == 4 || (HouseInfo[HouseEntered[playerid]][hArmor] == 1 && HouseEntered[playerid] != -1))
		{
			if(OnDuty[playerid] == 0)
	        {
	            if(faction == 1) format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
				else if(faction == 2) format(string, sizeof(string), "* Agent %s took a Badge and a Gun from his locker.", sendername);
				else if(faction == 3) format(string, sizeof(string), "* Agent %s took a Badge and a Gun from his locker.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GivePlayerWeaponEx(playerid, 24, 500);
				GivePlayerWeaponEx(playerid, 3, 1);
				GivePlayerWeaponEx(playerid, 41, 500);
				GivePlayerWeaponEx(playerid, 29, 1000);
				GivePlayerWeaponEx(playerid, 31, 1000);
				SetPlayerArmourEx(playerid, 99.9);
				SetPlayerHealthEx(playerid, 99.9);
				OnDuty[playerid] = 1;
			}
			else if(OnDuty[playerid] == 1)
			{
			    if(faction == 1) format(string, sizeof(string), "* Officer %s places his Badge and Gun in his locker.", sendername);
				else if(faction == 2) format(string, sizeof(string), "* Agent %s places his Badge and Gun in his locker.", sendername);
				else if(faction == 3) format(string, sizeof(string), "* Agent %s places his Badge and Gun in his locker.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ResetPlayerWeaponsEx(playerid);
				SetPlayerArmourEx(playerid, 0.0);
				SetPlayerHealthEx(playerid, 99.9);
				OnDuty[playerid] = 0;
			}
		}
		else return SCM(playerid, COLOR_GRAD2, "  Nu esti in HQ!");
	}
	else if(faction == 4)
	{
	    if(JobDuty[playerid] == 1)
	    {
	        SCM(playerid, COLOR_WHITE, "* You are now Off Duty from your Medic Job and will not receive calls anymore.");
	        JobDuty[playerid] = 0;
	        Medics -= 1;
	    }
	    else
	    {
	        SCM(playerid, COLOR_WHITE, "* You are now On Duty with your Medic Job and will receive calls from people in need.");
	        JobDuty[playerid] = 1;
	        Medics += 1;
	    }
	}
	if(PlayerInfo[playerid][pJob] == 4)
	{
	    if(JobDuty[playerid] == 1)
	    {
	        SCM(playerid, COLOR_WHITE, "* You are now Off Duty from your Car Mechanic Job and will not receive calls anymore.");
	        JobDuty[playerid] = 0;
	        Mechanics -= 1;
	    }
	    else
	    {
	        SCM(playerid, COLOR_WHITE, "* You are now On Duty with your Car Mechanic Job and will receive calls from people in need.");
	        JobDuty[playerid] = 1;
	        Mechanics += 1;
	        GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "[Advertisment] Mecanicul %s este acum la servici, [/service mechanic] daca aveti nevoie de mecanic.", sendername);
			SCMAll(0x2993EDAA,string);
	    }
	}
	return 1;
}
//==============================================================================
CMD:open(playerid, params[])
{
    for(new i = 1; i < MAX_HOUSES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) || IsPlayerInRangeOfPoint(playerid,3, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]))
		{
			if(PlayerInfo[playerid][pHouseKey] == i)
			{
				if(HouseInfo[i][hLock] == 1)
				{
					HouseInfo[i][hLock] = 0;
					GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else if(HouseInfo[i][hLock] == 0)
				{
					HouseInfo[i][hLock] = 1;
					GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				new query[200];
				mysql_format(SQL, query, sizeof(query), "UPDATE `house` SET `hLocked`='%d' WHERE `houseID`='%d'",HouseInfo[i][hLock],i);
		    	mysql_tquery(SQL,query);
			}
			else return GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);
		}
	}
	for(new i = 1; i < MAX_BUSINESS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,3, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
		{
			if(PlayerInfo[playerid][pBizzKey] == i)
			{
				if(BizzInfo[i][bLocked] == 1)
				{
					BizzInfo[i][bLocked] = 0;
					GameTextForPlayer(playerid, "~w~business ~g~Open", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else if(BizzInfo[i][bLocked] == 0)
				{
					BizzInfo[i][bLocked] = 1;
					GameTextForPlayer(playerid, "~w~Business ~r~Closed", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				new query[200];
				mysql_format(SQL, query, sizeof(query), "UPDATE `business` SET `bLocked`='%d' WHERE `bizzID`='%d'",BizzInfo[i][bLocked],i);
		    	mysql_tquery(SQL,query);
			}
			else return	GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);
		}
    }
    return 1;
}
//==============================================================================
CMD:asellbiz(playerid, params[])
{
    new biz;
	if(sscanf(params,"d",biz)) return SCM(playerid, COLOR_GRAD1, "{B8DBFF}Folosire: /asellbiz [bizid]");
	if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_WHITE, "Nu esti Scripter.");
	//--------------------------------------------------------------
    new query[256];
	mysql_format(SQL, query,sizeof(query),"UPDATE `users` SET `Bizz` = '255' WHERE `name` = '%s'",BizzInfo[biz][bOwner]);
	mysql_tquery(SQL, query);
	//--------------------------------------------------------------
	BizzInfo[biz][bLocked] = 1;
	BizzInfo[biz][bOwned] = 0;
	StrmidEx(BizzInfo[biz][bOwner], "The State");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	GameTextForPlayer(playerid, "~w~You have sold the Business", 3000, 3);
	SaveBusiness(biz);
	OnPropUpdate("bizz", biz);
	return 1;
}
//==============================================================================
CMD:asellhouse(playerid, params[])
{
    new house;
	if(sscanf(params,"d",house)) return SCM(playerid, COLOR_GRAD1, "{B8DBFF}Folosire: /asellhouse [houseid]");
	if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_WHITE, "Nu esti Scripter.");
	//--------------------------------------------------------------
    new query[256];
	mysql_format(SQL, query,sizeof(query),"UPDATE `users` SET `House` = '255' WHERE `name` = '%s'",HouseInfo[house][hOwner]);
	mysql_tquery(SQL, query);
	//--------------------------------------------------------------
	HouseInfo[house][hHeall] = 0;
	HouseInfo[house][hArmor] = 0;
	HouseInfo[house][hLock] = 1;
	HouseInfo[house][hOwned] = 0;
	StrmidEx(HouseInfo[house][hOwner], "The State");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	GameTextForPlayer(playerid, "~w~You have sold this House", 3000, 3);
	SaveHouse(house);
	OnPropUpdate("casa", house);
	return 1;
}
//==============================================================================
CMD:evictall(playerid, params[])
{
    new bouse = PlayerInfo[playerid][pHouseKey];
	if(bouse != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		foreach(new i: Player)
		{
			if(i != playerid)
			{
				if(PlayerInfo[i][pRented] == PlayerInfo[playerid][pHouseKey] )
				{
					SCM(i, COLOR_WHITE, "You have been evicted from your house.");
					PlayerInfo[i][pHouseKey] = 255;
					PlayerInfo[i][pRented] = -2;
				}
			}
		}
		SCM(playerid, COLOR_WHITE, "Everyone have been evicted.");
	}
	else return SCM(playerid, COLOR_GRAD2, "   Tu nu ai casa !");
	return 1;
}
//==============================================================================
CMD:evict(playerid, params[])
{
    new bouse = PlayerInfo[playerid][pHouseKey], target;
	if(bouse != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(sscanf(params,"u",target)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /evict [playerid/PartOfName]");
		if(target == playerid) return SCM(target, COLOR_WHITE, "You cant evict yourself.");
		if(IsPlayerConnected(target))
		{
		    if(target != INVALID_PLAYER_ID)
		    {
				if(PlayerInfo[target][pRented] == PlayerInfo[playerid][pHouseKey])
				{
					SCM(target, COLOR_WHITE, "You have been evicted");
					SCM(playerid, COLOR_WHITE, "Player has been evicted");
					PlayerInfo[target][pHouseKey] = 255;
					PlayerInfo[target][pRented] = -2;
				}
				else return SCM(playerid, COLOR_WHITE, "Player doesn't rent at your House !");
			}
		}
	}
	else return	SCM(playerid, COLOR_GRAD2, "   Tu nu ai casa !");
	return 1;
}
//==============================================================================
CMD:pi(playerid, params[])
{
    if(Mobile[playerid] != -1) return SCM(playerid, COLOR_GRAD2, " Sunteti deja inregistrat intr-o convorbire Telefonica.");
	foreach(new i: Player)
	{
		if(Mobile[i] == playerid)
		{
			new sendername[MAX_PLAYER_NAME], string[128];
			Mobile[playerid] = i; //caller connecting
			SCM(i,  COLOR_GRAD2, " Ai preluat apelul.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " %s raspunde la Telefon.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RingTone[playerid] = 0;
			SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
		}
	}
	return 1;
}
alias:pi("pickup");
//==============================================================================
CMD:h(playerid, params[])
{
    new caller = Mobile[playerid];
	if(caller != -1)
	{
		if(caller > -1)
		{
			SCM(caller,  COLOR_GRAD2, " Convorbirea s-a incheiat.");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			SCM(playerid,  COLOR_GRAD2, " Convorbirea s-a incheiat.");
			Mobile[caller] = -1;
			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(caller, 4);
			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		Mobile[playerid] = -1;
		CellTime[playerid] = 0;
		RingTone[playerid] = 0;
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu vorbesti cu nimeni la telefon!");
	return 1;
}
alias:h("hangup");
//==============================================================================
CMD:members(playerid, params[])
{
	new faction = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
	if(faction >= 1 && faction < MAX_FACTIONS) {
		ShowFactionMembers(playerid);
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nu faci parte dintr-o factiune.");
	return 1;
}
//==============================================================================
CMD:givemoney(playerid, params[])
{
    new playa, money, string[128], sendername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_GRAD1, NEAUTORIZAT);
	if(sscanf(params,"ui",playa,money)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /givemoney [playerid/PartOfName] [money]");
	if(NOON(playa));
	GivePlayerCash(playa, money);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "AdmCmd: %s i-a dat lui %s suma de %s$.", sendername,GetName(playa),FormatNumber(money));
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:slap(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new playa, string[128], sendername[MAX_PLAYER_NAME];
		new Float:slx, Float:sly, Float:slz;
		if(sscanf(params,"u",playa)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /slap [playerid/PartOfName]");
	    if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
				if(PlayerInfo[playa][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid,COLOR_YELLOW2,"Nu poti da slap la un admin cu grad mai mare decat tine!");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerPos(playa, slx, sly, slz);
				SetPlayerPosEx(playa, slx, sly, slz+5);
				PlayerPlaySound(playa, 1130, slx, sly, slz+5);
				format(string, sizeof(string), "AdmCmd: %s a primit slap de la %s.",GetName(playa) ,sendername);
				SendAdminMessage(string,1);
			}
		}
	}
	else return SCM(playerid, COLOR_GRAD1, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:agl(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 3)
    {
		new id, x_nr[10], string[228], ore;
		if(sscanf(params,"us[10]i",id,x_nr,ore))
		{
			SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /agl [playerid/PartOfName] [license] [ore]");
		    SCM(playerid, COLOR_GRAD2, "Nume disponibile: Driving, Flying, Sailing, Fishing, Weapon.");
			return 1;
		}
		if(NOON(id));
		if(ore < 0) return SCM(playerid, COLOR_GREY, "Ore invalide!");
	    if(strcmp(x_nr,"driving",true) == 0)
		{
            format(string, sizeof(string), "* I-ai dat licenta de condus lui %s valabila %d ore.",GetName(id),ore);
	        SCM(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s ti-a dat licenta de condus valabila %d ore.",GetName(playerid),ore);
	        SCM(id, COLOR_LIGHTBLUE, string);
			PlayerInfo[id][pCarLic] = ore;
		}
		else if(strcmp(x_nr,"flying",true) == 0)
		{
            format(string, sizeof(string), "* I-ai dat licenta de zbor lui %s valabila %d ore.",GetName(id),ore);
	        SCM(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s ti-a dat licenta zbor valabila %d ore.",GetName(playerid),ore);
	        SCM(id, COLOR_LIGHTBLUE, string);
			PlayerInfo[id][pFlyLic] = ore;
		}
		else if(strcmp(x_nr,"sailing",true) == 0)
		{
            format(string, sizeof(string), "* I-ai dat licenta de barca lui %s valabila %d ore.",GetName(id),ore);
	        SCM(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s ti-a dat licenta de barca valabila %d ore.",GetName(playerid),ore);
	        SCM(id, COLOR_LIGHTBLUE, string);
			PlayerInfo[id][pBoatLic] = ore;
		}
		else if(strcmp(x_nr,"fishing",true) == 0)
		{
            format(string, sizeof(string), "* I-ai dat licenta de pescuit lui %s valabila %d ore.",GetName(id),ore);
	        SCM(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s ti-a dat licenta de pescuit valabila %d ore.",GetName(playerid),ore);
	        SCM(id, COLOR_LIGHTBLUE, string);
			PlayerInfo[id][pFishLic] = ore;
		}
		else if(strcmp(x_nr,"weapon",true) == 0)
		{
            format(string, sizeof(string), "* I-ai dat licenta de arme lui %s valabila %d ore.",GetName(id),ore);
	        SCM(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s ti-a dat licenta arme valabila %d ore.",GetName(playerid),ore);
	        SCM(id, COLOR_LIGHTBLUE, string);
			PlayerInfo[id][pGunLic] = ore;			
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!");
    }
    else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
    return 1;
}
//==============================================================================
CMD:giverank(playerid, params[])
{
    new string[128], para1, sendername[MAX_PLAYER_NAME];
    if(sscanf(params,"u",para1)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /giverank [playerid/PartOfName]");
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
	    if(NOON(para1));
		if(para1 == playerid) return SCM(playerid,COLOR_YELLOW2,"Nu iti poti da singur rank!");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		PlayerInfo[para1][pFactionRank] += 1;
		format(string, sizeof(string), "* Ai fost promovat la rank %d de catre %s.", PlayerInfo[para1][pFactionRank], sendername);
		SCM(para1, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Ai dat lui %s Rank %d.", GetName(para1),PlayerInfo[para1][pFactionRank]);
		SCM(playerid, COLOR_LIGHTBLUE, string);
		UpdateVar(para1, "FactionRank", PlayerInfo[para1][pFactionRank]);
	}
	else return	SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:ml(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new count = 0, string[256], giveplayer[MAX_PLAYER_NAME];
		SCM(playerid, COLOR_LIGHTGREEN, "|___Muted Players___|");
	    foreach(new i: Player)
		{
			if(PlayerInfo[i][pMuted] == 1)
			{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), " [ID: %d]%s - Mute time left: %d seconds", i,giveplayer,PlayerInfo[i][pMuteTime]);
				SCM(playerid,COLOR_WHITE,string);
				count++;
			}
		}
		if(count == 0) SCM(playerid,COLOR_LIGHT_RED,"Nu are nimeni mute din cei online.");
	}
    else return SCM(playerid, COLOR_WHITE, "{FFFFFF} Ne pare rau dar nu aveti permisiunea sa folositi aceasta comanda!");
	return 1;
}
alias:ml("mutedlist");
//==============================================================================
CMD:ul(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new count = 0, string[256];
		SCM(playerid, COLOR_LIGHTGREEN, "|___Undercover Players___|");
	    foreach(new i: Factions)
		{
			if(Undercover[playerid] == 1)
			{
				format(string, sizeof(string), " [ID: %d]%s - Undercover ON",i,GetName(i));
				SCM(playerid,COLOR_WHITE,string);
				count++;
			}
		}
		if(count == 0) SCM(playerid,COLOR_LIGHT_RED,"Nu este nimeni undercover din cei online.");
	}
    else return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	return 1;
}
alias:ul("undercoverlist");
//==============================================================================
CMD:jl(playerid, params[])
{
    new faction = PlayerInfo[playerid][pLeader] + PlayerInfo[playerid][pMember];
	if(faction == 1 || faction == 2 || faction == 3 || PlayerInfo[playerid][pAdmin] > 0)
	{
        new count = 0, string[256], giveplayer[MAX_PLAYER_NAME];
		SCM(playerid, COLOR_LIGHTGREEN, "|___Jailed Players___|");
	    foreach(new i: Player)
		{
			if(PlayerInfo[i][pJailed] == 1)
			{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), " [ID: %d]%s - Jailed time left: %d seconds",i,giveplayer,PlayerInfo[i][pJailTime]);
				SCM(playerid,COLOR_WHITE,string);
				count++;
			}
		}
		if(count == 0) SCM(playerid,COLOR_LIGHT_RED,"* Currently no jailed players online.");
	}
    else return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	return 1;
}
alias:jl("jaillist");
//==============================================================================
CMD:call(playerid, params[])
{
    new phonenumb, string[200], giveplayerid;
	if(sscanf(params,"d",phonenumb)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /call [phonenumber]");
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_GRAD2, "Nu ai telefon.");
	if(PlayerInfo[playerid][pNumber] == -1) return SCM(playerid, COLOR_GRAD2, " Nu ai telefon.");
	if(phonenumb == 112)
	{
	    if(IsACop(playerid)) return 1;
	    if(WantedReason[playerid] != 999)
	    {
	        new killerid = GetPlayerID(WantedName[playerid]);
			if(NOON(killerid));
            if(GetPlayerWantedLevelEx(killerid) >= 6) return SCM(playerid,COLOR_VEHICLE,"Acest jucator are deja numarul maxim de wanted");
			SCM(playerid,COLOR_LIGHTBLUE,"Ai raportat crima departamentelor de politie.");
			format(string,sizeof(string),"Ai fost raportat de %s pentru crima comisa.",PlayerInfo[playerid][pNamePlayer]);
			SCM(killerid,COLOR_LIGHTBLUE,string);
   			SetPlayerWantedLevelEx(killerid, GetPlayerWantedLevelEx(killerid)+1);
			PlayerInfo[killerid][pWantedTime] = GetPlayerWantedLevelEx(killerid)*450;
		    WantedReason[playerid] = 999;
		    Mobile[playerid] = 112;
			return 1;
	    }
		else
		{
			SCM(playerid, COLOR_WHITE, " Acum poti sa folosesti T ca sa vorbesti, ca sa inchizi scrie /hangup.");
			SCM(playerid, COLOR_ALLDEPT, "EMERGENCY: Ce vrei, Police sau Paramedic?");
			Mobile[playerid] = 911;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 330, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			return 1;
		}
	}
	if(phonenumb == PlayerInfo[playerid][pNumber]) return SCM(playerid,COLOR_YELLOW2,"Nu te poti suna singur!");
	if(Mobile[playerid] != -1) return SCM(playerid, COLOR_GRAD2, "Esti deja intr-o convorbire.");
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != -1)
		{
			giveplayerid = i;
			Mobile[playerid] = giveplayerid;
			if(IsPlayerConnected(giveplayerid))
			{
				if(PhoneOnline[giveplayerid] > 0) return SCM(playerid, COLOR_GREY, "   Telefonul acelui player este oprit!");
				if(Mobile[giveplayerid] == -1)
				{
					format(string, sizeof(string), " * %s scoate telefonul si formeaza un numar.", GetName(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "%s (%s) te suna. Scrie '/pickup' pentru a raspunde.", GetName(giveplayerid), PlayerInfo[giveplayerid][pNumber]);
					SCM(giveplayerid, COLOR_YELLOW, string);
					RingTone[giveplayerid] = 10;
					format(string, sizeof(string), " * Telefonul lui %s a inceput sa sune.", GetName(giveplayerid));
					ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					CellTime[playerid] = 1;
					SetPlayerAttachedObject(playerid, 4, 330, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					return 1;
				}
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:tow(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu ai Job-ul Car Mechanic.");
	if(JobCar[playerid][4] != GetPlayerVehicleID(playerid)) return SCM(playerid, COLOR_YELLOW2, "Trebuie sa fii in vehiculul jobului pentru a folosi comanda.");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(TowAcc[playerid] == 1) return SCM(playerid, COLOR_GREY, "Nu poti tracta atat de repede o masina, trebuie sa astepti 2 minute.");
		new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(m == 525)
		{
			if(GetPlayerState(playerid) == 2)
			{
				new vid = GetClosestVehicle2(playerid, 8), idd = FindSpawnID(vid);	
				if(vid == 0) return SCM(playerid,COLOR_GRAD2,"Nu esti langa un vehicul care poate fi tractat!");
				if(IsABike(vid) || IsAMotorbike(vid) || IsAPlane(vid)) return SCM(playerid,COLOR_YELLOW2, "Nu poti tracta acest vehicul!");
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				{
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					DisablePlayerCheckpointEx(playerid);
				}
				else
				{
					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					new rand = random(sizeof(TowCarCk));
					SetPlayerCheckpointEx(playerid, TowCarCk[rand][0],TowCarCk[rand][1],TowCarCk[rand][2], 6);
					CP[playerid] = 34;
					if(idd != 0) SFM(playerid, COLOR_WHITE, "Ai tractat vehiculul lui %s.", CarInfo[idd][cOwner]);	
				}
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:refill(playerid, params[])
{
    new playa, money, string[256], sendername[MAX_PLAYER_NAME];
	if(BugRefill[playerid] == 1) return SCM(playerid, COLOR_LIGHT_RED, "{FFFFFF}Ne pare rau, dar ai utilizat odata aceasta Comanda, asteapta 40 secunde.");
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar nu ai Job-ul Car Mechanic.");
	if(sscanf(params,"ui",playa,money)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /refill [playerid/PartOfName] [price]");
	if(money < 1 || money > 4000) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar suma este intre 1$ si 4.000$.");
	if(IsPlayerConnected(playa))
	{
		if(playa != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, playa) && IsPlayerInAnyVehicle(playa))
			{
				if(playa == playerid) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar nu poti utiliza aceasta comanda pentru tine.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), " I-ai oferit lui %s Refill cu %d$.",GetName(playa),money);
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), " Mecanicul %s ti-a oferit refill cu %d$, Scrie: [/accept refill %d] pentru a accepta.",sendername,money,playerid);
				SCM(playa, COLOR_LIGHTBLUE, string);
				RefillOffer[playa] = playerid;
				RefillPrice[playa] = money;
				SetTimerEx_("ResetRefill", 40000, 40000, 1, "d", playerid);
				BugRefill[playerid] = 1;
			}
			else return SCM(playerid, COLOR_GREY, "Ne pare rau, dar acest jucator nu este in Vehicul cu tine.");
		}
	}
	else return SCM(playerid, COLOR_GREY, "Ne pare rau, dar acest jucator nu este Online.");
	return 1;
}
//==============================================================================
CMD:repair(playerid, params[])
{
	if(BugRepair[playerid] == 1) return SCM(playerid, COLOR_LIGHT_RED, "{FFFFFF}Ne pare rau, dar ai utilizat odata aceasta comanda, asteapta 40 de secunde.");
	if(BugRepair[playerid] == 2) return SCM(playerid, COLOR_LIGHT_RED, "{FFFFFF}Ne pare rau, dar ai utilizat odata aceasta comanda, asteapta 200 de secunde.");
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar nu ai job-ul mechanic.");
	new playa, money, string[256];
	if(sscanf(params,"ui",playa,money)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /repair [playerid/PartOfName] [price]");
	if(GetPlayerWantedLevelEx(playa) != 0) return SCM(playerid,COLOR_GRAD2, "Nu-i poti repara vehiculul acestui jucator deoarece are wanted.");
	if(playa == playerid && IsPlayerInAnyVehicle(playerid))
	{
		RepairVehicle(GetPlayerVehicleID(playerid));
		SetVehicleHealth(GetPlayerVehicleID(playerid), 999.9);
		SetTimerEx_("ResetRepair", 40000, 200000, 1, "d", playerid);
		BugRepair[playerid] = 2;
		SCM(playerid, COLOR_VEHICLE, "Ti-ai reparat vehiculul cu succes!");
		return 1;
	}
	if(money < 1 || money > 10000) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar suma este intre 1$ si 10.000$.");
	if(NOON(playa));
	if(ProxDetectorS(8.0, playerid, playa) && IsPlayerInAnyVehicle(playa))
	{
		format(string, sizeof(string), " I-ai reparat vehiculul lui %s cu %d$.",GetName(playa),money);
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " Mecanicul %s se ofera sa iti repare vehiculul pentru %d$, Scrie: [/accept repair %d] pentru a accepta.",GetName(playerid),money,playerid);
		SCM(playa, COLOR_LIGHTBLUE, string);
		RepairOffer[playa] = playerid;
		RepairPrice[playa] = money;
		SetTimerEx_("ResetRepair", 40000, 40000, 1, "d", playerid);
		BugRepair[playerid] = 1;
	}
	else return SCM(playerid, COLOR_GREY, "Ne pare rau, dar acest jucator nu este aproape de tine.");
	return 1;
}
//==============================================================================
CMD:live(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		if(TalkingLive[playerid] != 255)
		{
			SCM(playerid, COLOR_LIGHTBLUE, " Live-ul s-a Incheiat.");
			SCM(TalkingLive[playerid], COLOR_LIGHTBLUE, " Live-ul s-a Incheiat.");
			TogglePlayerControllable(playerid, true);
			TogglePlayerControllable(TalkingLive[playerid], true);
			TalkingLive[TalkingLive[playerid]] = 255;
			TalkingLive[playerid] = 255;
			return 1;
		}
		new giveplayerid, string[256], sendername[MAX_PLAYER_NAME];
		if(sscanf(params,"u",giveplayerid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /live [playerid/PartOfName]");
		if(NOON(giveplayerid));
		if(ProxDetectorS(5.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) return SCM(playerid, COLOR_GREY, "{FFFFFF}Ne pare rau, dar nu-ti poti da singur Live.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " I-ai oferit un Live lui %s.", GetName(giveplayerid));
			SCM(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s ti-a oferit un Live, Scrie: [/accept live %d] pentru a accepta.",sendername,playerid);
			SCM(giveplayerid, COLOR_LIGHTBLUE, string);
			LiveOffer[giveplayerid] = playerid;
		}
		else return SCM(playerid, COLOR_GREY, "Ne pare rau, dar acest jucator este prea departe de tine.");
	}
	else return SCM(playerid, COLOR_GREY, "Ne pare rau, dar nu faci parte din factiunea {c2a2da}News Reporter{FFFFFF}.");
	return 1;
}
//==============================================================================
CMD:togfind(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		if(TogFind[playerid] == false)
		{
			TogFind[playerid] = true;
			SCM(playerid,COLOR_ACHAT,"Ai activat find-ul, acum jucatorii pot folosi /find pe tine.");
		}
		else
		{
			TogFind[playerid] = false;
			SCM(playerid,COLOR_ACHAT,"Ai dezactivat find-ul, acum jucatorii nu mai pot folosi /find pe tine.");
		}
		PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:pee(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    SetPlayerSpecialAction(playerid, 68);
	return 1;
}
//==============================================================================
CMD:handsup(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}
//==============================================================================
CMD:drunk(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 0);
	return 1;
}
//==============================================================================
CMD:laugh(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
//==============================================================================
CMD:lookout(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:hide(playerid, params[]) {

    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:vomit(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:slapass(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:crack(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
   	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:finger(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:taichi(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:checktime(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:blob(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, -1);
   	return 1;
}
//==============================================================================
CMD:wavedown(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:cpr(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:dive(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0);
   	return 1;
}
//==============================================================================
CMD:showoff(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "Freeweights", "gym_free_celebrate", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:goggles(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:cry(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:throw(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:hurt(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:box(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:handwash(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:crabs(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "MISC", "Scratchballs_01", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:salute(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:masturbate(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:stop(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid, "PED", "endchat_01", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
//==============================================================================
CMD:rap(playerid, params[])
{
	if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
	new animid;
	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /rap [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
		case 2: LoopingAnim(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0);
	 	case 3: LoopingAnim(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
	  	default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /rap [1-3]");
	}
	return 1;
}
//==============================================================================
CMD:chat(playerid, params[])
{
	new animid;
	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /chat [1-7]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
  		case 2: LoopingAnim(playerid, "GANGS", "prtial_gngtlkA", 4.0, 0, 0, 0, 0, 0);
		case 3: LoopingAnim(playerid, "GANGS", "prtial_gngtlkB", 4.0, 0, 0, 0, 0, 0);
  		case 4: LoopingAnim(playerid, "GANGS", "prtial_gngtlkE", 4.0, 0, 0, 0, 0, 0);
  		case 5: LoopingAnim(playerid, "GANGS", "prtial_gngtlkF", 4.0, 0, 0, 0, 0, 0);
  		case 6: LoopingAnim(playerid, "GANGS", "prtial_gngtlkG", 4.0, 0, 0, 0, 0, 0);
	    case 7: LoopingAnim(playerid, "GANGS", "prtial_gngtlkH", 4.0, 0, 0, 0, 0, 0);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /chat [1-7]");
 	}
 	return 1;
}
//==============================================================================
CMD:gesture(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /gesture [1-15]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0);
        case 4: LoopingAnim(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0);
        case 5: LoopingAnim(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0);
        case 6: LoopingAnim(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0);
        case 7: LoopingAnim(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0);
        case 8: LoopingAnim(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0);
        case 9: LoopingAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
        case 10: LoopingAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
        case 11: LoopingAnim(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0);
        case 12: LoopingAnim(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
        case 13: LoopingAnim(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
        case 14: LoopingAnim(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0);
        case 15: LoopingAnim(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /gesture [1-15]");
   	}
   	return 1;
}
//==============================================================================
CMD:lay(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /lay [1-3]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: LoopingAnim(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: LoopingAnim(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /lay [1-3]");
 	}
 	return 1;
}
//==============================================================================
CMD:wave(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /wave [1-3]");
	switch(animid)
	{
 		case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
 		case 2: LoopingAnim(playerid, "KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
 		case 3: LoopingAnim(playerid, "PED", "endchat_03", 4.0, 0, 0, 0, 0, 0);
 		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /wave [1-3]");
 	}
 	return 1;
}
//==============================================================================
CMD:signal(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /signal [1-2]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "POLICE", "CopTraf_Come", 4.0, 0, 0, 0, 0, 0);
  		case 2: LoopingAnim(playerid, "POLICE", "CopTraf_Stop", 4.0, 0, 0, 0, 0, 0);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /signal [1-2]");
   	}
   	return 1;
}
//==============================================================================
CMD:nobreath(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /nobreath [1-3]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
    	case 2: LoopingAnim(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
     	case 3: LoopingAnim(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
     	default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /nobreath [1-3]");
 	}
 	return 1;
}
//==============================================================================
CMD:fallover(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /fallover [1-3]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0);
    	case 2: LoopingAnim(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0);
     	case 3: LoopingAnim(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
      	default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /fallover [1-3]");
 	}
 	return 1;
}
//==============================================================================
CMD:pedmove(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /pedmove [1-26]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1);
    	case 2: LoopingAnim(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1);
	    case 3: LoopingAnim(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 4: LoopingAnim(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1);
	    case 5: LoopingAnim(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1);
	    case 6: LoopingAnim(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1);
	    case 7: LoopingAnim(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1);
	    case 8: LoopingAnim(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1);
     	case 9: LoopingAnim(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1);
      	case 10: LoopingAnim(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1);
       	case 11: LoopingAnim(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1);
	    case 12: LoopingAnim(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1);
	    case 13: LoopingAnim(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1);
	    case 14: LoopingAnim(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1);
	    case 15: LoopingAnim(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1);
	    case 16: LoopingAnim(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1);
	    case 17: LoopingAnim(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1);
	    case 18: LoopingAnim(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1);
	    case 19: LoopingAnim(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1);
	    case 20: LoopingAnim(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1);
	    case 21: LoopingAnim(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 22: LoopingAnim(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1);
	    case 23: LoopingAnim(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1);
     	case 24: LoopingAnim(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1);
  		case 25: LoopingAnim(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1);
  		case 26: LoopingAnim(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /pedmove [1-26]");
 	}
	return 1;
}
//==============================================================================
CMD:getjiggy(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /getjiggy [1-9]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0);
    	case 2: LoopingAnim(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0);
     	case 3: LoopingAnim(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0);
      	case 4: LoopingAnim(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0);
       	case 5: LoopingAnim(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0);
        case 6: LoopingAnim(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0);
       	case 7: LoopingAnim(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0);
        case 8: LoopingAnim(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0);
        case 9: LoopingAnim(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0);
        default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /getjiggy [1-9]");
   	}
   	return 1;
}
//==============================================================================
CMD:stripclub(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /stripclub [1-2]");
	switch(animid)
	{
       	case 1: LoopingAnim(playerid, "STRIP", "PLY_CASH", 4.0, 0, 0, 0, 0, 0);
       	case 2: LoopingAnim(playerid, "STRIP", "PUN_CASH", 4.0, 0, 0, 0, 0, 0);
       	default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /stripclub [1-2]");
 	}
 	return 1;
}
//==============================================================================
CMD:smoke(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /smoke [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0);
  		case 2: LoopingAnim(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /smoke [1-2]");
 	}
 	return 1;
}
//==============================================================================
CMD:dj(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /dj [1-4]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0);
    	case 2: LoopingAnim(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0);
     	case 3: LoopingAnim(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0);
     	case 4: LoopingAnim(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0);
      	default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /dj [1-4]");
 	}
	return 1;
}
//==============================================================================
CMD:deal(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    new animid;
   	if(sscanf(params,"d",animid)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /deal [1-2]");
	switch(animid)
	{
  		case 1: LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
  		case 2: LoopingAnim(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
  		default: SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /deal [1-2]");
 	}
 	return 1;
}
//==============================================================================
CMD:wank(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Poti folosi animatia doar cand nu esti intr-un vehicul.");
    LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return 1;
}
//==============================================================================
CMD:animlist(playerid, params[])
{
	SCM(playerid,COLOR_GRAD1,"-----------------------Animations----------------------------");
	SCM(playerid,COLOR_GRAD1,"/handsup /drunk /rob /laugh /lookout /crossarms /sit /siteat /hide /vomit");
	SCM(playerid,COLOR_GRAD2,"/wave /slapass /deal /taichi /crack /smoke /chat /dance /finger /taichi /pedmove /bat");
	SCM(playerid,COLOR_GRAD3,"/checktime /blob /wavedown /cpr /dive /showoff /box /salute");
	SCM(playerid,COLOR_GRAD4,"/goggles /cry /dj /throw /hurt /nobreath /bar /getjiggy /fallover /rap /pee");
	SCM(playerid,COLOR_GRAD5,"/crabs /handwash /signal /stop /gesture /masturbate /wank");
	SCM(playerid,COLOR_GRAD1,"-------------------------------------------------------------");
	return 1;
}
//==============================================================================
CMD:stopanim(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_WHITE, "Nu poti folosi comanda intr-un vehicul.");
	StopLoopingAnim(playerid);
	ClearAnimations(playerid);
    return 1;
}
//==============================================================================
CMD:gotocar(playerid, params[])
{
	new Float:x1, Float:y1, Float:z1, veh;
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa te dai jos din vehicul pentru a putea folosi comanda.");
	if(sscanf(params,"d",veh)) return SCM(playerid,-1,"{B8DBFF}Folosire: /gotocar [vehid]");
	if(!IsValidVehicle(veh)) return SCM(playerid,COLOR_YELLOW2,"Vehicul invalid!");
	GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
	SetPlayerInteriorEx(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	FactionEntered[playerid] = -1;
	HouseEntered[playerid] = -1;
	BizzEntered[playerid] = -1;
	GetVehiclePos(veh,x1,y1,z1);
	SetPlayerPosEx(playerid,x1,y1,z1+3);
	return 1;
}
//==============================================================================
CMD:getcar(playerid, params[])
{
	new Float:x1, Float:y1, Float:z1, string[128], veh;
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa te dai jos din vehicul pentru a putea folosi comanda.");
	if(sscanf(params,"i",veh)) return SCM(playerid,-1,"{B8DBFF}Folosire: /getcar [vehid]");
	if(!IsValidVehicle(veh)) return SCM(playerid, COLOR_GREY, "Vehicul invalid!");
	GetPlayerPos(playerid,x1,y1,z1);
	SetVehiclePos(veh,x1,y1+3,z1);
	LinkVehicleToInterior(veh,GetPlayerInteriorEx(playerid));
	SetVehicleVirtualWorld(veh,GetPlayerVirtualWorld(playerid));
	format(string,sizeof(string),"AdmCmd: %s a tras la el vehiculul (ID: %d) (%s).",GetName(playerid),veh,GetVehicleName(veh));
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:startradar(playerid, params[])
{
    if(!IsACop(playerid)) return SCM(playerid,COLOR_YELLOW2, " You are not a cop.");
	if(OnDuty[playerid] != 1) return SCM(playerid,COLOR_YELLOW2, " You are not on Duty.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if((IsPlayerInAnyVehicle(playerid)) && (StaticVeh[tmpcar][svFaction] == 1 || StaticVeh[tmpcar][svFaction] == 2 || StaticVeh[tmpcar][svFaction] == 3))
	{
		if(Radaron[playerid] == 1) return SCM(playerid,COLOR_YELLOW2, " You have active radar.");
		new viteza,string[128];
		if(sscanf(params, "d",viteza)) return SCM(playerid,-1,"{B8DBFF}Folosire: /startradar [speed limit]");
		if(viteza > 200 || viteza < 40) return SCM(playerid,COLOR_YELLOW2, " Invalid speed limit(200-40).");
		Radaron[playerid] = 1;
		Radarlimit[playerid] = viteza;
		TogglePlayerControllable(playerid, false);
		format(string,sizeof(string),"{FFFF00}You have activated the radar, speed limit is: %d KM/H.",viteza);
		SCM(playerid,COLOR_WHITE,string);
	}
	else return SCM(playerid,COLOR_YELLOW2, " You are not in a cop car.");
	return 1;
}
//==============================================================================
CMD:stopradar(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_YELLOW2, " You are not a cop.");
	if(Radaron[playerid] == 0) return SCM(playerid,COLOR_YELLOW2, " You don't have active radar.");
	Radaron[playerid] = 0;
	Radarlimit[playerid] = 0;
	SCM(playerid,COLOR_WHITE,"{FFFF00}Ai oprit radarul.");
	TogglePlayerControllable(playerid, true);
    return 1;
}
//==============================================================================
CMD:cancel(playerid, params[])
{
    new string[128];
	if(!isnull(params))
	{
		if(strcmp(params,"drugs",true) == 0) 
		{ 
			DrugOffer[playerid] = -1; 
			DrugPrice[playerid] = 0; 
			DrugGram[playerid] = 0; 
		}
		else if(strcmp(params,"trade",true) == 0) 
		{ 
			DeletePVar(playerid, "TradePlayer"); 
			DeletePVar(playerid, "TradeMoney"); 
			DeletePVar(playerid, "TradeType");
			DeletePVar(playerid, "TradeVehicle");
		}
		else if(strcmp(params,"repair",true) == 0) 
		{ 
			RepairOffer[playerid] = -1; 
			RepairPrice[playerid] = 0; 
			RepairCar[playerid] = 0; 
		}
		else if(strcmp(params,"live",true) == 0) { 
			LiveOffer[playerid] = -1; 
		}
		else if(strcmp(params,"refill",true) == 0) 
		{ 
			RefillOffer[playerid] = -1; 
			RefillPrice[playerid] = 0; 
		}
		else if(strcmp(params,"ticket",true) == 0) 
		{ 
			TicketOffer[playerid] = -1; 
			TicketMoney[playerid] = 0; 
		}
		else if(strcmp(params,"vehicle",true) == 0) 
		{ 
			OwnableCarOffer[playerid] = -1; 
			OwnableCarID[playerid] = 0; 
			OwnableCarPrice[playerid] = 0; 
		}
		else if(strcmp(params,"mats",true) == 0) 
		{ 
			DeletePVar(playerid, "mAmount"); 
			DeletePVar(playerid, "mID"); 
			DeletePVar(playerid, "mPrice"); 
		}
		else if(strcmp(params,"cinvite",true) == 0) 
		{ 
			DeletePVar(playerid, "cinvID"); 
			DeletePVar(playerid, "Invitat"); 
		}
		else if(strcmp(params,"invite",true) == 0) { 
			FactionOffer[playerid] = -1; 
		}
		else if(strcmp(params,"medic",true) == 0)
		{
			if(IsPlayerConnected(MedicCall[playerid]))
			{
				if(MedicCall[playerid] == playerid)
				{
					MedicCall[playerid] = -1;
					format(string, sizeof(string), "** %s a anulat chemarea unui medic.", GetName(playerid));
					SendFactionMessage(4, TEAM_AZTECAS_COLOR, string);
				}
				else SCM(playerid, COLOR_GREY, "   You are not the current Caller !");
			}
		}
		else if(strcmp(params,"mechanic",true) == 0)
		{
			if(IsPlayerConnected(MechanicCall[playerid]))
			{
				if(MechanicCall[playerid] == playerid)
				{
					MechanicCall[playerid] = -1;
					format(string, sizeof(string), "** %s a anulat chemarea unui mecanic.", GetName(playerid));
					SendJobMessage(4, TEAM_AZTECAS_COLOR, string);
				}
				else SCM(playerid, COLOR_GREY, "   You are not the current Caller !");
			}
		}
		else if(strcmp(params,"taxi",true) == 0)
		{
			if(TaxiCall[playerid] != -1)
			{
				if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
				{
					TaxiAccepted[playerid] = 999;
					GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
					TaxiCallTime[playerid] = 0;
					DisablePlayerCheckpointEx(playerid);
					TaxiCall[playerid] = -1;
					format(string, sizeof(string), "** %s a anulat chemarea unui taxi.", GetName(playerid));
					SendFactionMessage(10, TEAM_AZTECAS_COLOR, string);
				}
				else
				{
					if(IsPlayerConnected(TaxiCall[playerid])) 
					{ 
						if(TaxiCall[playerid] == playerid) { 
							TaxiCall[playerid] = -1; 
						} 
					}
					foreach(new i: Player)
					{
						if(TaxiAccepted[i] < 999)
						{
							if(TaxiAccepted[i] == playerid)
							{
								TaxiAccepted[i] = 999;
								GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
								TaxiCallTime[i] = 0;
								DisablePlayerCheckpointEx(i);
							}
						}
					}
				}
			}
		}
		else return SCM(playerid, COLOR_GRAD3, "Nume invalid!");
		format(string, sizeof(string), " * You have canceled %s.", params);
		SCM(playerid, COLOR_GRAD3, string);
	}
	else
	{
		SCM(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
		SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /cancel [name]");
		SCM(playerid, COLOR_GREY, "Nume Disponibile: Drugs, Repair, Live, Refill, Vehicle, Mats, Trade");
		SCM(playerid, COLOR_GREY, "Nume Disponibile: Taxi, Medic, Mechanic, Ticket, Invite, Cinvite");
		SCM(playerid, COLOR_WHITE, "|_____________________________________________|");
	}
	return 1;
}
//==============================================================================
CMD:fare(playerid, params[])
{
	new moneys, string[256], sendername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	{
		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1) {
				TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You are now Off Duty and earned $%d.", TransportMoney[playerid]);
			SCM(playerid, COLOR_WHITE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; 
			TransportMoney[playerid] = 0;
		}
		else
		{
			new Veh = GetPlayerVehicleID(playerid);
			if(StaticVeh[Veh][svFaction] == 10)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(sscanf(params,"d",moneys)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /fare [price]");
					if(moneys < 1 || moneys > 500) return SCM(playerid, COLOR_GREY, "   Fare price must be between $1 and $500 !");
					TaxiDrivers += 1; 
					TransportDuty[playerid] = 1; 
					TransportValue[playerid] = moneys;
					GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), " Taximetristul %s este acum la servici, [/service taxi] daca aveti nevoie de un taxi. Pret: $%d.", sendername, TransportValue[playerid]);
					SCMAll(0xEDCA29AA,string);
				}
				else return SCM(playerid, COLOR_GREY, " Nu esti intr-un vehicul de tip taxi!");
			}
		}
	}
	else return SCM(playerid,COLOR_GREY," Nu esti taximetrist!");
	return 1;
}
//==============================================================================
CMD:getdrugs(playerid, params[])
{
	new drugs, string[128], price;
    if(PlayerInfo[playerid][pJob] == 7 && IsPlayerInRangeOfPoint(playerid, 2.0, 324.7172,1119.0161,1083.8828))
	{
	    if(sscanf(params,"d",drugs)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /getdrugs [grame]");
	    price = drugs * BizzInfo[6][bEntranceCost];
	    if(GetPlayerCash(playerid) > price)
	    {
	        format(string, sizeof(string), " Ai cumparat %d grame cu %s$.", drugs, FormatNumber(price));
			SCM(playerid, COLOR_BLUE, string);
	        GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pDrugs] += drugs;
			BizzInfo[6][bMoney] += price;
			SaveBusiness(6);
			for(new m = 0; m < 2; m++) {
				if(PlayerInfo[playerid][pQuest][m] == 4) CheckQuest(playerid, m);
			}
	    }
	    else return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani pentru a cumpara atatea grame de droguri.");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Ne pare rau, dar nu ai Job-ul Drugs Dealer sau nu esti in Crack House.");
	return 1;
}
//==============================================================================
CMD:tazer(playerid, params[])
{
    if(IsACop(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_GREY, "   Cannot use this while being in the Car!");
	    new suspect, string[200], sendername[MAX_PLAYER_NAME];
	    if(sscanf(params,"u",suspect)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /tazer [Playerid/PartOfName]");
	    if(IsPlayerConnected(suspect))
		{
		    if(PlayerCuffed[suspect] > 0) return SCM(playerid, COLOR_GREY, "  Player already Cuffed!");
		    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
			{
			    if(IsACop(suspect)) return SCM(playerid, COLOR_GREY, "   Cannot Tazer Cops / FBI!");
			    if(IsPlayerInAnyVehicle(suspect)) return SCM(playerid, COLOR_GREY, "   Suspect is in a Car, get him out first!");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new randt = random(4)+1;
				if(randt == 1)
				{
				    format(string, sizeof(string), "* %s shoots with his Tazer at %s, but missed.", sendername ,GetName(suspect));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					format(string, sizeof(string), "* You were Tazed by %s for 20 seconds.", sendername);
					SCM(suspect, COLOR_WHITE, string);
					format(string, sizeof(string), "* You Tazed %s for 20 seconds.", GetName(suspect));
					SCM(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* %s shoots with his Tazer at %s and tazed him.", sendername ,GetName(suspect));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(suspect, "~r~Tazed", 2500, 3);
					TogglePlayerControllable(suspect, false);
					ApplyAnimation(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
					PlayerCuffed[suspect] = 1;
					PlayerCuffedTime[suspect] = 20;
				}
            }
			else return SCM(playerid, COLOR_GREY, "   No-one near you!");
		}
	}
	else return SCM(playerid, COLOR_GREY,PLAYER_COP);
	return 1;
}
alias:tazer("ta");
//==============================================================================
CMD:music(playerid, params[])
{
	if(PlayerInfo[playerid][pPremium] == 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai cont premium pentru a putea folosi comanda!");
	if(PlayerInfo[playerid][pMP3] == 0 && !IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_YELLOW2,"Ai nevoie de un MP3 sau sa te afli intr-un vehicul pentru a putea asculta muzica!");
	SPD(playerid, DIALOG_MUSIC, DIALOG_STYLE_INPUT, "{D6E1EB}YouTube:", "{FFFFFF}Introdu numele melodiei pe care vrei sa o asculti", "Asculta", "Anuleaza");
	return 1;
}
//==============================================================================
CMD:selldrugs(playerid, params[])
{
    new playa, money, needed, string[256], sendername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pJob] != 7) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar nu ai Job-ul Drugs Dealer.");
	if(sscanf(params,"udd",playa,needed,money)) return SCM(playerid, COLOR_GRAD2, "{B8DBFF}Folosire: /selldrugs [playerid/PartOfName] [amount] [price]");
	if(needed < 1 || needed > 99) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar puteti vinde intre 1 si 99 grame.");
	if(money < 1 || money > 100000) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar suma este intre 1$ si 100.000$.");
	if(needed > PlayerInfo[playerid][pDrugs]) return SCM(playerid, COLOR_GREY, "Ne pare rau, dar nu ai suficiente Droguri.");
	if(NOON(playa));
	if(ProxDetectorS(6.0, playerid, playa))
	{
		if(playa == playerid) return SCM(playerid, COLOR_GREY, " Ne pare rau, dar nu-ti poti sa-ti vinzi singur Droguri.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), " I-ai oferit lui %s %d grame cu %d$.", GetName(playa), needed, money);
		SCM(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " Drug Dealer %s ti-a oferit %d grame cu %s$, Scrie: [/accept drugs %d] pentru a accepta.", sendername, needed, FormatNumber(money),playerid);
		SCM(playa, COLOR_LIGHTBLUE, string);
		DrugOffer[playa] = playerid;
		DrugPrice[playa] = money;
		DrugGram[playa] = needed;
	}
	else return SCM(playerid, COLOR_GREY, "{FFFFFF}Ne pare rau, dar acest jucator nu este langa tine.");
	return 1;
}
//==============================================================================
CMD:area(playerid, params[])
{
	new range, Float:rPos[4], string[180], item[16], players = 0;
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"s[16]i",item,range))
	{
		SCM(playerid, COLOR_COMMAND, "Folosire: /area [name] [range]");
		SCM(playerid, COLOR_WHITE, "Nume disponibile: freeze, unfreeze, heal, armor, fixveh, disarm, respawn.");
		return 1;
	}
	foreach(new i: Player)
	{
	    GetPlayerPos(playerid, rPos[0], rPos[1], rPos[2]);
		if(strcmp(item, "freeze", true) == 0)
		{
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
		  		TogglePlayerControllable(i, false);
				format(string, sizeof(string), "* %s ti-a dat freeze.", GetName(playerid));
				SCM(i, COLOR_EVENT, string);
				players++;
			}
		}
		else if(strcmp(item, "unfreeze", true) == 0)
		{
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
			  	TogglePlayerControllable(i, true);
				format(string, sizeof(string), "* %s ti-a dat unfreeze.", GetName(playerid));
				SCM(i, COLOR_EVENT, string);
				players++;
			}
		}
		else if(strcmp(item, "heal", true) == 0)
		{
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				SetPlayerHealthEx(i, 99.9);
				format(string, sizeof(string), "* %s ti-a dat viata.", GetName(playerid));
				SCM(i, COLOR_EVENT, string);
				players++;
   			}
		}
		else if(strcmp(item, "armor", true) == 0)
		{
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				SetPlayerArmourEx(i, 99.9);
				format(string, sizeof(string), "* %s ti-a dat armura.", GetName(playerid));
				SCM(i, COLOR_EVENT, string);
				players++;
   			}
		}
		else if(strcmp(item, "fixveh", true) == 0)
		{
			if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				if(IsPlayerInVehicle(i, GetPlayerVehicleID(i)))
				{
					RepairVehicle(GetPlayerVehicleID(i));
					SetVehicleHealth(GetPlayerVehicleID(i), 999.9);
					format(string, sizeof(string), "* %s ti-a reparat masina.", GetName(playerid));
					SCM(i, COLOR_EVENT, string);
					players++;
				}
			}
		}
		else if(strcmp(item, "disarm", true) == 0)
		{
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
	 			ResetPlayerWeaponsEx(i);
				format(string, sizeof(string), "* %s ti-a confiscat armele.", GetName(playerid));
				SCM(i, COLOR_EVENT, string);
				players++;
			}
		}
		else if(strcmp(item,"givegun",true) == 0)
		{
			if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				new gun = random(17)+22, ammo = random(500)+100;
				GivePlayerWeaponEx(i, gun, ammo);
				format(string, sizeof(string), "* %s ti-a dat un %s cu %d gloante.",GetName(playerid),GetWeaponNameEx(gun),ammo);
				SCM(i, COLOR_EVENT, string);
				players++;
			}
		}
		else if(strcmp(item, "respawn", true) == 0)
		{
	 		if(IsPlayerInRangeOfPoint(i, range, rPos[0], rPos[1], rPos[2]) && i != playerid && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
	 			SpawnPlayer(i);
				format(string, sizeof(string), "* %s te-a respawnat.", GetName(playerid));
				SCM(i, COLOR_EVENT, string);
				players++;
			}
		}		
		else return 1;
		format(string, sizeof(string), "AdmCmd: %s a folosit comanda /area %s pe %d jucatori.", GetName(playerid), item, players);
        SendAdminMessage(string, 4);
	}
	return 1;
}
//==============================================================================
CMD:gotojob(playerid, params[])
{
	new string[200];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	for(new j = 1; j < MAX_JOBS; j++) {
		format(string, sizeof(string), "%s%s\n", string, JobInfo[j][jName]);
	}
	SPD(playerid,DIALOG_GOTO_JOB,DIALOG_STYLE_LIST,"Jobs:",string,"Teleport","Inchide");
	return 1;
}
//==============================================================================
CMD:lockhq(playerid, params[])
{
	new f = PlayerInfo[playerid][pLeader];
	if(PlayerInfo[playerid][pLeader] > 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,FactionInfo[f][fHQExteriorPosX],FactionInfo[f][fHQExteriorPosY],FactionInfo[f][fHQExteriorPosZ]))
	    {
		    if(FactionInfo[f][fHQLockStatus] == 1)
		    {
		        FactionInfo[f][fHQLockStatus] = 0;
		        SCM(playerid,COLOR_ORANGE,"HQ-ul factiunii tale este acum deschis!");
		    }
		    else if(FactionInfo[f][fHQLockStatus] == 0)
		    {
		        FactionInfo[f][fHQLockStatus] = 1;
		        SCM(playerid,COLOR_ORANGE,"HQ-ul factiunii tale este acum inchis!");
			}
			SaveFactions(f);
		}
		else return SCM(playerid,COLOR_YELLOW2,"Trebuie sa fii in fata la HQ pentru al putea incuia/descuia.");
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:warstats(playerid, params[])
{
	new string[128], faction = PlayerInfo[playerid][pMember] + PlayerInfo[playerid][pLeader];
	if(InWar[faction] == 0) return SCM(playerid,COLOR_YELLOW2,"Aceasta comanda poate fi folosita doar la war.");
	for(new i = 1; i < MAX_TURFS; i++)
	{
		if(WarInfo[i][wFaction] == faction || WarInfo[i][wAttacker] == faction)
		{
			format(string, sizeof(string), "Turf %d, Timp ramas: %s minute",i,CalculeazaTimp(WarInfo[i][wTime]));
		    SCM(playerid, TEAM_CYAN_COLOR,string);
			new Float:score = WarScore[playerid][i] - WarDeaths[playerid][i];
			format(string,sizeof(string),"Scorul tau este: %.2f", score);
			SCM(playerid, TEAM_CYAN_COLOR,string);
		}
	}
	return 1;
}
//==============================================================================
CMD:slapcar(playerid,params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	new carid, string[128], Float:vx, Float:vy, Float:vz;
	if(sscanf(params, "d", carid)) return SCM(playerid, -1, "{B8DBFF}Folosire: /slapcar [carid]");
	GetVehiclePos(carid, vx, vy, vz);
	SetVehiclePos(carid, vx, vy, vz+5);
	format(string, sizeof(string), "AdmCmd: Vehiculul %d a primit slap de la %s.", carid, PlayerInfo[playerid][pNamePlayer]);
	SendAdminMessage(string,1);
	return 1;
}
//==============================================================================
CMD:gotods(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
	new tmpcar = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePos(tmpcar, 2131.4885,-1150.5781,24.1383);
	else SetPlayerPosEx(playerid,2131.4885,-1150.5781,24.1383);
	GameTextForPlayer(playerid, "~w~Teleporting", 1500, 1);
	SetPlayerInteriorEx(playerid,0);
	SetPlayerVirtualWorld(playerid, 0);
	FactionEntered[playerid] = -1;
	HouseEntered[playerid] = -1;
	BizzEntered[playerid] = -1;
	return 1;
}
//==============================================================================
CMD:createhouse(playerid, params[])
{
	new int, level, pret, Float:x, Float:y, Float:z, ID;
	if(!IsPlayerScripter(playerid)) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"dddd",ID,int,level,pret)) return SCM(playerid, -1, "{B8DBFF}Folosire: /createhouse [houseID] [interiorID] [level] [pret]");
	GetPlayerPos(playerid, x,y,z);
	StrmidEx(HouseInfo[ID][hOwner], "The State");
	StrmidEx(HouseInfo[ID][hDiscription], "De vanzare!");
	HouseInfo[ID][hEntranceX] = x;
	HouseInfo[ID][hEntranceY] = y;
	HouseInfo[ID][hEntranceZ] = z;
	HouseInfo[ID][hLevel] = level;
	HouseInfo[ID][hHeall] = 0;
	HouseInfo[ID][hArmor] = 0;
	HouseInfo[ID][hOwned] = 0;
	HouseInfo[ID][hPrice] = pret;
	HouseInfo[ID][hLock] = 0;
	HouseInfo[ID][hRent] = 0;
	HouseInfo[ID][hRentabil] = 0;
	HouseInfo[ID][hRadio] = 0;
	StrmidEx(HouseInfo[ID][hRadioLink], "Stopped");
	HouseInfo[ID][hRenters] = 0;
	switch(int)
	{
  		case 2: { HouseInfo[ID][hExitX] = 140.17; HouseInfo[ID][hExitY] = 1366.07; HouseInfo[ID][hExitZ] = 1083.65; HouseInfo[ID][hInterior] = 5; }
		case 3: { HouseInfo[ID][hExitX] = 2324.53; HouseInfo[ID][hExitY] = -1149.54; HouseInfo[ID][hExitZ] = 1050.71; HouseInfo[ID][hInterior] = 12; }
		case 4: { HouseInfo[ID][hExitX] = 225.68; HouseInfo[ID][hExitY] = 1021.45; HouseInfo[ID][hExitZ] = 1084.02; HouseInfo[ID][hInterior] = 7; }
		case 5: { HouseInfo[ID][hExitX] = 234.19; HouseInfo[ID][hExitY] = 1063.73; HouseInfo[ID][hExitZ] = 1084.21; HouseInfo[ID][hInterior] = 6; }
		case 6: { HouseInfo[ID][hExitX] = 226.3; HouseInfo[ID][hExitY] = 1114.24; HouseInfo[ID][hExitZ] = 1080.99; HouseInfo[ID][hInterior] = 5; }
		case 7: { HouseInfo[ID][hExitX] = 235.34; HouseInfo[ID][hExitY] = 1186.68; HouseInfo[ID][hExitZ] = 1080.26; HouseInfo[ID][hInterior] = 3; }
		case 8: { HouseInfo[ID][hExitX] = 491.07; HouseInfo[ID][hExitY] = 1398.5; HouseInfo[ID][hExitZ] = 1080.26; HouseInfo[ID][hInterior] = 2; }
		case 9: { HouseInfo[ID][hExitX] = 24.04; HouseInfo[ID][hExitY] = 1340.17; HouseInfo[ID][hExitZ] = 1084.38; HouseInfo[ID][hInterior] = 10; }
		case 10: { HouseInfo[ID][hExitX] = -283.44; HouseInfo[ID][hExitY] = 1470.93; HouseInfo[ID][hExitZ] = 1084.38; HouseInfo[ID][hInterior] = 15; }
		case 11: { HouseInfo[ID][hExitX] = -260.49; HouseInfo[ID][hExitY] = 1456.75; HouseInfo[ID][hExitZ] = 1084.37; HouseInfo[ID][hInterior] = 4; }
		case 12: { HouseInfo[ID][hExitX] = 83.03; HouseInfo[ID][hExitY] = 1322.28; HouseInfo[ID][hExitZ] = 1083.87; HouseInfo[ID][hInterior] = 9; }
		case 13: { HouseInfo[ID][hExitX] = 2317.89; HouseInfo[ID][hExitY] = -1026.76; HouseInfo[ID][hExitZ] = 1050.22; HouseInfo[ID][hInterior] = 9; }
		case 14: { HouseInfo[ID][hExitX] = 2495.98; HouseInfo[ID][hExitY] = -1692.08; HouseInfo[ID][hExitZ] = 1014.74; HouseInfo[ID][hInterior] = 3; }
		case 15: { HouseInfo[ID][hExitX] = 2807.48; HouseInfo[ID][hExitY] = -1174.76; HouseInfo[ID][hExitZ] = 1025.57; HouseInfo[ID][hInterior] = 8; }
		case 16: { HouseInfo[ID][hExitX] = 2196.85; HouseInfo[ID][hExitY] = -1204.25; HouseInfo[ID][hExitZ] = 1049.02; HouseInfo[ID][hInterior] = 6; }
		case 17: { HouseInfo[ID][hExitX] = 377.15; HouseInfo[ID][hExitY] = 1417.41; HouseInfo[ID][hExitZ] = 1081.33; HouseInfo[ID][hInterior] = 15; }
		case 18: { HouseInfo[ID][hExitX] = 2270.38; HouseInfo[ID][hExitY] = -1210.35; HouseInfo[ID][hExitZ] = 1047.56; HouseInfo[ID][hInterior] = 10; }
		case 19: { HouseInfo[ID][hExitX] = 446.99; HouseInfo[ID][hExitY] = 1397.07; HouseInfo[ID][hExitZ] = 1084.3; HouseInfo[ID][hInterior] = 2; }
		case 20: { HouseInfo[ID][hExitX] = 387.22; HouseInfo[ID][hExitY] = 1471.7; HouseInfo[ID][hExitZ] = 1080.19; HouseInfo[ID][hInterior] = 15; }
		case 21: { HouseInfo[ID][hExitX] = 22.88; HouseInfo[ID][hExitY] = 1403.33; HouseInfo[ID][hExitZ] = 1084.44; HouseInfo[ID][hInterior] = 5; }
		case 22: { HouseInfo[ID][hExitX] = 2365.31; HouseInfo[ID][hExitY] = -1135.6; HouseInfo[ID][hExitZ] = 1050.88; HouseInfo[ID][hInterior] = 8; }
		case 23: { HouseInfo[ID][hExitX] = 2237.59; HouseInfo[ID][hExitY] = -1081.64; HouseInfo[ID][hExitZ] = 1049.02; HouseInfo[ID][hInterior] = 2; }
		case 24: { HouseInfo[ID][hExitX] = 295.04; HouseInfo[ID][hExitY] = 1472.26; HouseInfo[ID][hExitZ] = 1080.26; HouseInfo[ID][hInterior] = 15; }
		case 25: { HouseInfo[ID][hExitX] = 261.12; HouseInfo[ID][hExitY] = 1284.3; HouseInfo[ID][hExitZ] = 1080.26; HouseInfo[ID][hInterior] = 4; }
		case 26: { HouseInfo[ID][hExitX] = 221.92; HouseInfo[ID][hExitY] = 1140.2; HouseInfo[ID][hExitZ] = 1082.61; HouseInfo[ID][hInterior] = 4; }
		case 27: { HouseInfo[ID][hExitX] = -68.81; HouseInfo[ID][hExitY] = 1351.21; HouseInfo[ID][hExitZ] = 1080.21; HouseInfo[ID][hInterior] = 6; }
		case 28: { HouseInfo[ID][hExitX] = 260.85; HouseInfo[ID][hExitY] = 1237.24; HouseInfo[ID][hExitZ] = 1084.26; HouseInfo[ID][hInterior] = 9; }
		case 29: { HouseInfo[ID][hExitX] = 2468.84; HouseInfo[ID][hExitY] = -1698.24; HouseInfo[ID][hExitZ] = 1013.51; HouseInfo[ID][hInterior] = 2; }
		case 30: { HouseInfo[ID][hExitX] = 223.2; HouseInfo[ID][hExitY] = 1287.08; HouseInfo[ID][hExitZ] = 1082.14; HouseInfo[ID][hInterior] = 1; }
		case 31: { HouseInfo[ID][hExitX] = 2283.04; HouseInfo[ID][hExitY] = -1140.28; HouseInfo[ID][hExitZ] = 1050.9; HouseInfo[ID][hInterior] = 11; }
		case 32: { HouseInfo[ID][hExitX] = 328.05; HouseInfo[ID][hExitY] = 1477.73; HouseInfo[ID][hExitZ] = 1084.44; HouseInfo[ID][hInterior] = 15; }
		case 33: { HouseInfo[ID][hExitX] = 223.2; HouseInfo[ID][hExitY] = 1287.08; HouseInfo[ID][hExitZ] = 1082.14; HouseInfo[ID][hInterior] = 1; }
		case 34: { HouseInfo[ID][hExitX] = -42.59; HouseInfo[ID][hExitY] = 1405.47; HouseInfo[ID][hExitZ] = 1084.43; HouseInfo[ID][hInterior] = 8; }
		case 35: { HouseInfo[ID][hExitX] = 446.9; HouseInfo[ID][hExitY] = 506.35; HouseInfo[ID][hExitZ] = 1001.42; HouseInfo[ID][hInterior] = 12; }
		case 36: { HouseInfo[ID][hExitX] = 299.78; HouseInfo[ID][hExitY] = 309.89; HouseInfo[ID][hExitZ] = 1003.3; HouseInfo[ID][hInterior] = 4; }
		case 37: { HouseInfo[ID][hExitX] = 2308.77; HouseInfo[ID][hExitY] = -1212.94; HouseInfo[ID][hExitZ] = 1049.02; HouseInfo[ID][hInterior] = 6; }
		case 38: { HouseInfo[ID][hExitX] = 2233.64; HouseInfo[ID][hExitY] = -1115.26; HouseInfo[ID][hExitZ] = 1050.88; HouseInfo[ID][hInterior] = 5; }
		case 39: { HouseInfo[ID][hExitX] = 2218.4; HouseInfo[ID][hExitY] = -1076.18; HouseInfo[ID][hExitZ] = 1050.48; HouseInfo[ID][hInterior] = 1; }
		case 40: { HouseInfo[ID][hExitX] = 266.5; HouseInfo[ID][hExitY] = 304.9; HouseInfo[ID][hExitZ] = 999.15; HouseInfo[ID][hInterior] = 2; }
		case 41: { HouseInfo[ID][hExitX] = 243.72; HouseInfo[ID][hExitY] = 304.91; HouseInfo[ID][hExitZ] = 999.15; HouseInfo[ID][hInterior] = 1; }
		case 42: { HouseInfo[ID][hExitX] = 343.81; HouseInfo[ID][hExitY] = 304.86; HouseInfo[ID][hExitZ] = 999.15; HouseInfo[ID][hInterior] = 6; }
		case 43: { HouseInfo[ID][hExitX] = 2259.38; HouseInfo[ID][hExitY] = -1135.77; HouseInfo[ID][hExitZ] = 1050.64; HouseInfo[ID][hInterior] = 10; }
	}
	new query[800];
	mysql_format(SQL, query, sizeof(query),"INSERT INTO `house` (`hExteriorPosX`, `hExteriorPosY`, `hExteriorPosZ`, `hInteriorPosX`, `hInteriorPosY`, `hInteriorPosZ`, `hInteriorID`, `hPrice`, `hPickup`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d')",HouseInfo[ID][hEntranceX],HouseInfo[ID][hEntranceY],HouseInfo[ID][hEntranceZ],HouseInfo[ID][hExitX],HouseInfo[ID][hExitY],HouseInfo[ID][hExitZ],HouseInfo[ID][hInterior],HouseInfo[ID][hPrice],ID);
    mysql_tquery(SQL, query);
	OnPropUpdate("casa", ID);
	return 1;
}
//==============================================================================
CMD:vcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	new model,color1,color2,str[512];
	if(sscanf(params,"iii",model,color1,color2)) return SCM(playerid, -1, "{B8DBFF}Folosire: /vcreate [model] [color1] [color2]");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
	new carid = CreateVehicleEx(model, X,Y,Z, 0.0, color1, color2, -1);
	SetVehicleNumberPlate(carid,"NewCar");
	EngineSTATE[carid] = 0;
	StaticVeh[carid][svID] = carid;
	StaticVeh[carid][svModel] = model;
	StaticVeh[carid][svLocationx] = X; StaticVeh[carid][svLocationy] = Y; StaticVeh[carid][svLocationz] = Z+0.1;
	StaticVeh[carid][svAngle] = 0;
	StaticVeh[carid][svColorOne] = color1; StaticVeh[carid][svColorTwo] = color2; StaticVeh[carid][svRespawnDelay] = -1;
	StaticVeh[carid][svFaction] = 0;
	StrmidEx(StaticVeh[carid][svLicense], "NewCar");
	mysql_format(SQL,str,sizeof(str),"INSERT INTO `staticveh` (`svID`, `Model`) VALUES ('%d','%d')",carid,model);
	mysql_tquery(SQL,str, "","");
	mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Locationx`='%f',`Locationy`='%f',`Locationz`='%f',`Angle`='0' WHERE `svID`='%d'",X,Y,Z,carid);
	mysql_tquery(SQL,str, "","");
	mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `ColorOne`='%d',`ColorTwo`='%d',`RespawnDelay`='-1' WHERE `svID`='%d'",color1,color2,carid);
	mysql_tquery(SQL,str, "","");
	mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Faction`='0',`Rank`='0' WHERE `svID`='%d'",carid);
    mysql_tquery(SQL,str, "","");
	mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `License`='NewCar',`Sirena`='0' WHERE `svID`='%d'",carid);
	return 1;
}
//==============================================================================
CMD:vedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	new str[512],name[20],value;
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Nu esti intr-un vehicul.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(sscanf(params,"s[20]i",name,value))
	{
		SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /vedit [name] [value]");
		SCM(playerid, COLOR_WHITE, "Avaiable names: Model, Color1, Color2, Faction, Rank, Job, Sirena.");
	}
	else
	{
		if(strcmp(name,"model",true) == 0)
		{
			StaticVeh[tmpcar][svModel] = value;
			mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Model`='%d' WHERE `svID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "","");
			DestroyVehicleEx(tmpcar);
			CreateVehicleEx(StaticVeh[tmpcar][svModel],StaticVeh[tmpcar][svLocationx],StaticVeh[tmpcar][svLocationy],StaticVeh[tmpcar][svLocationz]+0.1,StaticVeh[tmpcar][svAngle],StaticVeh[tmpcar][svColorOne],StaticVeh[tmpcar][svColorTwo],StaticVeh[tmpcar][svRespawnDelay],StaticVeh[tmpcar][svSirena]);
			SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][svLicense]);
		}
		else if(strcmp(name,"color1",true) == 0)
		{
			StaticVeh[tmpcar][svColorOne] = value;
			mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `ColorOne`='%d' WHERE `svID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "","");
			DestroyVehicleEx(tmpcar);
			CreateVehicleEx(StaticVeh[tmpcar][svModel],StaticVeh[tmpcar][svLocationx],StaticVeh[tmpcar][svLocationy],StaticVeh[tmpcar][svLocationz]+0.1,StaticVeh[tmpcar][svAngle],StaticVeh[tmpcar][svColorOne],StaticVeh[tmpcar][svColorTwo],StaticVeh[tmpcar][svRespawnDelay],StaticVeh[tmpcar][svSirena]);
			SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][svLicense]);
		}
		else if(strcmp(name,"color2",true) == 0)
		{
			StaticVeh[tmpcar][svColorTwo] = value;
			mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `ColorTwo`='%d' WHERE `svID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "","");
			DestroyVehicleEx(tmpcar);
			CreateVehicleEx(StaticVeh[tmpcar][svModel],StaticVeh[tmpcar][svLocationx],StaticVeh[tmpcar][svLocationy],StaticVeh[tmpcar][svLocationz]+0.1,StaticVeh[tmpcar][svAngle],StaticVeh[tmpcar][svColorOne],StaticVeh[tmpcar][svColorTwo],StaticVeh[tmpcar][svRespawnDelay],StaticVeh[tmpcar][svSirena]);
			SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][svLicense]);
		}
		else if(strcmp(name,"faction",true) == 0)
		{
			StaticVeh[tmpcar][svFaction] = value;
			mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Faction`='%d' WHERE `svID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "","");
		}
		else if(strcmp(name,"rank",true) == 0)
		{
			StaticVeh[tmpcar][svRank] = value;
			mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Rank`='%d' WHERE `svID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "","");
		}
		else if(strcmp(name,"sirena",true) == 0)
		{
			StaticVeh[tmpcar][svSirena] = value;
			mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Sirena`='%d' WHERE `svID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "","");
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!");
		format(str,sizeof(str)," %s a fost editat in %d cu succes!",name,value);
		SCM(playerid,COLOR_GRAD2,str);
	}
	return 1;
}
//==============================================================================
CMD:vpark(playerid, params[])
{
	new str[512];
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Nu esti intr-un vehicul.");
	new tmpcar = GetPlayerVehicleID(playerid);
	new Float:x,Float:y,Float:z,Float:a;
	GetVehiclePos(tmpcar, x, y, z);
	GetVehicleZAngle(tmpcar, a);
	StaticVeh[tmpcar][svLocationx] = x;
	StaticVeh[tmpcar][svLocationy] = y;
	StaticVeh[tmpcar][svLocationz] = z+0.1;
	StaticVeh[tmpcar][svAngle] = a;
	DestroyVehicleEx(tmpcar);
	CreateVehicleEx(StaticVeh[tmpcar][svModel],StaticVeh[tmpcar][svLocationx],StaticVeh[tmpcar][svLocationy],StaticVeh[tmpcar][svLocationz]+0.1,StaticVeh[tmpcar][svAngle],StaticVeh[tmpcar][svColorOne],StaticVeh[tmpcar][svColorTwo],StaticVeh[tmpcar][svRespawnDelay],StaticVeh[tmpcar][svSirena]);
	SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][svLicense]);
	mysql_format(SQL,str,sizeof(str),"UPDATE `staticveh` SET `Locationx`='%f',`Locationy`='%f',`Locationz`='%f',`Angle`='%f' WHERE `svID`='%d'",x,y,z,a,tmpcar);
    mysql_tquery(SQL,str, "","");
	return 1;
}
//==============================================================================
CMD:vstats(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_WHITE, "{FFFFCC}Nu esti intr-un vehicul.");
	new tmpcar = GetPlayerVehicleID(playerid);
	format(string,sizeof(string),"Vehicle ID: {A9C4E4}%d",tmpcar);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Model: {A9C4E4}%d",StaticVeh[tmpcar][svModel]);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Position: {A9C4E4}%f %f %f",StaticVeh[tmpcar][svLocationx],StaticVeh[tmpcar][svLocationy],StaticVeh[tmpcar][svLocationz]);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Angle: {A9C4E4}%f",StaticVeh[tmpcar][svAngle]);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Color One: {A9C4E4}%d {FFFFFF}| Two: {A9C4E4}%d",StaticVeh[tmpcar][svColorOne],StaticVeh[tmpcar][svColorTwo]);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Respawn Delay: {A9C4E4}%d",StaticVeh[tmpcar][svRespawnDelay]);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Faction: {A9C4E4}%d {FFFFFF}| Rank: {A9C4E4}%d{FFFFFF}",StaticVeh[tmpcar][svFaction],StaticVeh[tmpcar][svRank]);
	SCM(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Numberplate: {A9C4E4}%s {FFFFFF}| Sirena: {A9C4E4}%d",StaticVeh[tmpcar][svLicense],StaticVeh[tmpcar][svSirena]);
	SCM(playerid, COLOR_WHITE,string);
	return 1;
}
//==============================================================================
CMD:vrank(playerid, params[])
{
	new string[256], rank, car = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pLeader] < 1 && PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_YELLOW2, "Nu esti intr-un vehicul.");
	if(sscanf(params,"d",rank)) return SCM(playerid,-1,"{B8DBFF}Folosire: /vrank [rank]");
	if(StaticVeh[car][svFaction] == PlayerInfo[playerid][pLeader])
	{
	    if(rank > 6 || rank < 0) return 1;
		StaticVeh[car][svRank] = rank;
		format(string,sizeof(string),"Rank-ul acestui vehicul a fost modificat la rank %d.",rank);
		SCM(playerid,COLOR_GRAD2,string);
		mysql_format(SQL,string,sizeof(string),"UPDATE `staticveh` SET `Rank` = '%d' WHERE `svID` = '%d'",rank,car);
		mysql_tquery(SQL,string,"","");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Acest vehicul nu este al factiunii tale!");
	return 1;
}
//==============================================================================
CMD:nearwanted(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GRAD2, PLAYER_COP);
	new string[2000], count = 0, online[50], x = -1;
	foreach(new i: Player)
	{
		if(GetPlayerWantedLevelEx(i) >= 1 && ProxDetectorS(500.0, playerid, i))
		{
			x++;
			Selected[playerid][x] = i;
			if(IsPlayerPaused(i))
			{
				format(string, sizeof(string), "%sID: [%d] ~ Nume: [%s] (AFK) ~ Wanted Level: [%d] ~ Timp: [%s min]\n",string,i,GetName(i),GetPlayerWantedLevelEx(i),CalculeazaTimp(PlayerInfo[i][pWantedTime]));
				count++;
			}
			else
			{
				format(string, sizeof(string), "%sID: [%d] ~ Nume: [%s] ~ Wanted Level: [%d] ~ Timp: [%s min]\n",string,i,GetName(i),GetPlayerWantedLevelEx(i),CalculeazaTimp(PlayerInfo[i][pWantedTime]));
				count++;
			}
		}
	}
	format(online, sizeof(online),"Wanted near you: %d",count);
	if(count == 0) return SCM(playerid,COLOR_GRAD2,"Nu sunt jucatori cu wanted in jurul tau.");
	SPD(playerid, DIALOG_WANTED, DIALOG_STYLE_LIST, online, string , "Alege", "Inchide");
	return 1;
}
//==============================================================================
CMD:colors(playerid, params[])
{
	new string[3400];
	strcat(string, "{000000}000  {F5F5F5}001  {2A77A1}002  {840410}003  {263739}004  {86446E}005  {D78E10}006  {4C75B7}007  {BDBEC6}008  {5E7072}009  {46597A}010  {656A79}011  {5D7E8D}012  {58595A}013  {D6DAD6}014  {9CA1A3}015\n");
	strcat(string, "{335F3F}016  {730E1A}017  {7B0A2A}018  {9F9D94}019  {3B4E78}020  {732E3E}021  {691E3B}022  {96918C}023  {515459}024  {3F3E45}025  {A5A9A7}026  {635C5A}027  {3D4A68}028  {979592}029  {421F21}030  {5F272B}031\n");
	strcat(string, "{8494AB}032  {767B7C}033  {646464}034  {5A5752}035  {252527}036  {2D3A35}037  {93A396}038  {6D7A88}039  {221918}040  {6F675F}041  {7C1C2A}042  {5F0A15}043  {193826}044  {5D1B20}045  {9D9872}046  {7A7560}047\n");
	strcat(string, "{989586}048  {ADB0B0}049  {848988}050  {304F45}051  {4D6268}052  {162248}053  {272F4B}054  {7D6256}055  {9EA4AB}056  {9C8D71}057  {6D1822}058  {4E6881}059  {9C9C98}060  {917347}061  {661C26}062  {949D9F}063\n");
	strcat(string, "{A4A7A5}064  {8E8C46}065  {341A1E}066  {6A7A8C}067  {AAAD8E}068  {AB988F}069  {851F2E}070  {6F8297}071  {585853}072  {9AA790}073  {601A23}074  {20202C}075  {A4A096}076  {AA9D84}077  {78222B}078  {0E316D}079\n");
	strcat(string, "{722A3F}080  {7B715E}081  {741D28}082  {1E2E32}083  {4D322F}084  {7C1B44}085  {2E5B20}086  {395A83}087  {6D2837}088  {A7A28F}089  {AFB1B1}090  {364155}091  {6D6C6E}092  {0F6A89}093  {204B6B}094  {2B3E57}095\n");
	strcat(string, "{9B9F9D}096  {6C8495}097  {4D8495}098  {AE9B7F}099  {406C8F}100  {1F253B}101  {AB9276}102  {134573}103  {96816C}104  {64686A}105  {105082}106  {A19983}107  {385694}108  {525661}109  {7F6956}110  {8C929A}111\n");
	strcat(string, "{596E87}112  {473532}113  {44624F}114  {730A27}115  {223457}116  {640D1B}117  {A3ADC6}118  {695853}119  {9B8B80}120  {620B1C}121  {5B5D5E}122  {624428}123  {731827}124  {1B376D}125  {EC6AAE}126  {000000}127\n\n");
	strcat(string, "{177517}128  {210606}129  {125478}130  {452A0D}131  {571E1E}132  {010701}133  {25225A}134  {2C89AA}135  {8A4DBD}136  {35963A}137  {B7B7B7}138  {464C8D}139  {84888C}140  {817867}141  {817A26}142  {6A506F}143\n");
	strcat(string, "{583E6F}144  {8CB972}145  {824F78}146  {6D276A}147  {1E1D13}148  {1E1306}149  {1F2518}150  {2C4531}151  {1E4C99}152  {2E5F43}153  {1E9948}154  {1E9999}155  {999976}156  {7C8499}157  {992E1E}158  {2C1E08}159\n");
	strcat(string, "{142407}160  {993E4D}161  {1E4C99}162  {198181}163  {1A292A}164  {16616F}165  {1B6687}166  {6C3F99}167  {481A0E}168  {7A7399}169  {746D99}170  {53387E}171  {222407}172  {3E190C}173  {46210E}174  {991E1E}175\n");
	strcat(string, "{8D4C8D}176  {805B80}177  {7B3E7E}178  {3C1737}179  {733517}180  {781818}181  {83341A}182  {8E2F1C}183  {7E3E53}184  {7C6D7C}185  {020C02}186  {072407}187  {163012}188  {16301B}189  {642B4F}190  {368452}191\n");
	strcat(string, "{999590}192  {818D96}193  {99991E}194  {7F994C}195  {839292}196  {788222}197  {2B3C99}198  {3A3A0B}199  {8A794E}200  {0E1F49}201  {15371C}202  {15273A}203  {375775}204  {060820}205  {071326}206  {20394B}207\n");
	strcat(string, "{2C5089}208  {15426C}209  {103250}210  {241663}211  {692015}212  {8C8D94}213  {516013}214  {090F02}215  {8C573A}216  {52888E}217  {995C52}218  {99581E}219  {993A63}220  {998F4E}221  {99311E}222  {0D1842}223\n");
	strcat(string, "{521E1E}224  {42420D}225  {4C991E}226  {082A1D}227  {96821D}228  {197F19}229  {3B141F}230  {745217}231  {893F8D}232  {7E1A6C}233  {0B370B}234  {27450D}235  {071F24}236  {784573}237  {8A653A}238  {732617}239\n");
	strcat(string, "{319490}240  {56941D}241  {59163D}242  {1B8A2F}243  {38160B}244  {041804}245  {355D8E}246  {2E3F5B}247  {561A28}248  {4E0E27}249  {706C67}250  {3B3E42}251  {2E2D33}252  {7B7E7D}253  {4A4442}254  {28344E}255\n");
	SPD(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Vehicle Colors List:",string,"Exit","");
	return 1;
}
//==============================================================================
CMD:votemap(playerid, params[])
{
    if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_YELLOW2, "Nu poti folosi /votemap daca runda nu a inceput.");
	if(PaintBallVoted[playerid] > 0) return SCM(playerid, COLOR_GRAD2, "Ai votat deja o mapa.");
	if(PlayerPaintballing[playerid] > 0) SPD(playerid, DIALOG_PAINTBALL_MAP, DIALOG_STYLE_LIST, "Vote Paintball Map:", "rc_arena\ntennis\nfarm\nbeach\nlspd", "Vote", "Exit");
	return 1;
}
//==============================================================================
CMD:votegun(playerid, params[])
{
    if(PlayerPaintballing[playerid] > 0)
	{
		if(PlayerPaintballing[playerid] == 3 || PlayerPaintballing[playerid] == 4) return SCM(playerid, COLOR_YELLOW2, "Nu poti folosi /votegun la acest tip de joc.");
		if(paintrs[PlayerPaintballing[playerid]] < 1) return SCM(playerid, COLOR_YELLOW2, "Nu poti folosi /votegun daca runda nu a inceput.");
		if(PaintBallVoted2[playerid] > 0) return SCM(playerid, COLOR_GRAD2, "Ai votat deja o arma.");
		if(PlayerPaintballing[playerid] == 1 || PlayerPaintballing[playerid] == 2)
		{
			if(paintrs[PlayerPaintballing[playerid]] > 0) {
				SPD(playerid, DIALOG_PAINTBALL_WEAPON, DIALOG_STYLE_LIST, "Vote Paintball Weapon:", "Deagle, M4, Grenade & Spray\nBaseball Bat\nChainsaw", "Vote", "Exit");
			}
			else return SCM(playerid, COLOR_WHITE, "You can't use this command now.");
		}
	}
	return 1;
}
//==============================================================================
CMD:time(playerid, params[])
{
	new string[128], hour, minute, second;
	gettime(hour,minute,second);
	format(string, sizeof(string), "The current time is %d:%s%d (%d seconds).", hour, (minute < 10) ? ("0") : (""), minute, second);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Connected for %d minutes.", PlayerInfo[playerid][pSeconds]/60);
	SCM(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* %s se uita la ceas.", GetName(playerid));
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return 1;
}
//==============================================================================
CMD:getteam(playerid, params[])
{
	new string[128], id, ttext[16];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"u",id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /getteam [playerid/PartOfName]");
	if(NOON(id));
	if(GetPlayerTeam(id) == 1) ttext = "Civil";
	else if(GetPlayerTeam(id) == 2) ttext = "Cop";
	else if(GetPlayerTeam(id) == 3) ttext = "Mafie";
	else if(GetPlayerTeam(id) == 5) ttext = "PaintBall";
	format(string,sizeof(string)," %s este in echipa %s.",GetName(id),ttext);
	SCM(playerid,COLOR_GRAD2,string);
	return 1;
}
//==============================================================================
CMD:jobs(playerid, params[]) return SCM(playerid,COLOR_WHITE,"* Foloseste [/gps] pentru a vedea unde se afla joburile.");
//==============================================================================
CMD:shop(playerid, params[]) return SCM(playerid,COLOR_WHITE,"* Shop-ul se afla in lista comenzii [/help].");
//==============================================================================
CMD:gift(playerid, params[])
{
	new Float:x, Float:y, Float:z, string[256], nume[4], zile, year, month, day;
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"s[4]d",nume,zile)) return SCM(playerid,-1,"{B8DBFF}Folosire: /gift [ON/OFF] [zile(max 60)]");
	if(strcmp(nume,"on",true) == 0)
	{
		if(GiftInfo[gOpen] == 0)
		{
			if((zile > 0) && (zile < 61))
			{
				GetPlayerPos(playerid, x,y,z);
				gifttext = CreateDynamic3DTextLabel("Foloseste /getgift pentru a primi un cadou", COLOR_LIGHTBLUE, x,y,z, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
				giftpickup = CreateDynamicPickup(19058, 23, x,y,z);
				GiftInfo[gLocationX] = x;
				GiftInfo[gLocationY] = y;
				GiftInfo[gLocationZ] = z;
				GiftInfo[gOpen] = 1;
				getdate(year, month, day);
				day += zile;
				if(IsMonth31(month))
				{
					if(day > 31)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 31) day -= 31;
						}
						else while(day > 31) day -= 31;
					}
				}
				else if(!IsMonth31(month))
				{
					if(day > 30)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 30) day -= 30;
						}
						else while(day > 30) day -= 30;
					}
				}
				else if(!IsMonth31(month) && IsMonth29(year) && month == 2)
				{
					if(day > 29)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 29) day -= 29;
						}
						else while(day > 29) day -= 29;
					}
				}
				else if(!IsMonth31(month) && !IsMonth29(year) && month == 2)
				{
					if(day > 28)
					{
						month += 1;
						if(month > 12)
						{
							year += 1;
							while(day > 28) day -= 28;
						}
						else while(day > 28) day -= 28;
					}
				}
				mysql_format(SQL, string, sizeof(string), "UPDATE `giftbox` SET `Days`='%d', `Month`='%d', `Year`='%d', `Open`='%d' WHERE `id`='1'", day, month, year, GiftInfo[gOpen]);
				mysql_tquery(SQL, string, "","");
				mysql_format(SQL, string, sizeof(string),"UPDATE `giftbox` SET `LocationX` = '%.1f', `LocationY` = '%.1f', `LocationZ` = '%.1f' WHERE `id`='1'",x,y,z);
				mysql_tquery(SQL, string, "","");
				format(string,sizeof(string),"SERVER: Giftbox-ul a fost activat pana pe data de %d %s %d.",day,Luna(month),year);
				SCMAll(COLOR_ACHAT,string);
				SCMAll(COLOR_ACHAT,"SERVER: Pana atunci puteti merge sa va incercati norocul!");
			}
			else return SCM(playerid, COLOR_YELLOW2,"Nu poti pune acest numar de zile!");
		}
	}
	else if(strcmp(nume,"off",true) == 0)
	{
		if(GiftInfo[gOpen] == 1)
		{
			DestroyDynamic3DTextLabel(gifttext);
			DestroyDynamicPickup(giftpickup);
			GiftInfo[gLocationX] = 0.0;
			GiftInfo[gLocationY] = 0.0;
			GiftInfo[gLocationZ] = 0.0;
			GiftInfo[gOpen] = 0;
			SCMAll(COLOR_ACHAT,"SERVER: Giftbox-ul a fost dezactivat!");
			mysql_query(SQL, "UPDATE `giftbox` SET `Days` = '0', `Month` = '0', `Year` = '0', `Open` = '0' WHERE `id` = '1'");
			mysql_query(SQL, "UPDATE `giftbox` SET `LocationX` = '0.0', `LocationY` = '0.0', `LocationZ` = '0.0' WHERE `id` = '1'");
		}
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!");
	return 1;
}
//==============================================================================
CMD:checkgun(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new id, string[128], Player_Weapons[13], Player_Ammos[13];
		if(sscanf(params,"u",id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /checkgun [playerid/PartOfName]");
		if(NOON(id));
		for(new i = 1; i < 13; i++)
		{
			GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
			if(Player_Weapons[i] != 0)
			{
				format(string,sizeof(string),"{B8DBFF}* %s , Gun:{FFFFFF} %s {B8DBFF}, Ammo:{FFFFFF} %d",GetName(id),GetWeaponNameEx(Player_Weapons[i]),Player_Ammos[i]);
				SCM(playerid,0xFFFFFFAA,string);
			}
		}
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:checkhp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id, string[128], Float:health, Float:armour;
		if(sscanf(params,"u",id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /checkhp [playerid/PartOfName]");
		if(NOON(id));
		GetPlayerHealthEx(id, health);
		GetPlayerArmourEx(id, armour);
		format(string,sizeof(string),"{B8DBFF}* %s ,{B8DBFF} HP:{FFFFFF} %.2f ,{B8DBFF} Armour:{FFFFFF} %.2f",GetName(id),health,armour);
		SCM(playerid,0xFFFFFFAA,string);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:vehname(playerid, params[]) 
{
    if(PlayerInfo[playerid][pAdmin] >= 1) 
	{
		new mesaj[256], rcount;
        SCM(playerid, COLOR_GRAD2, " Cautare vehicul:");
        if(isnull(params)) return SCM(playerid, COLOR_YELLOW2, "Niciun caracter specificat.");
        if(strlen(params) < 3) return SCM(playerid, COLOR_YELLOW2, "Prea putine caractere specificate.");
        for(new v = 0; v < sizeof(VehicleName); v++)
        {
            if(strfind(VehicleName[v], params, true) != -1)
            {
                if(rcount == 0) format(mesaj, sizeof(mesaj), "%s (ID: %d)", VehicleName[v], v+400);
                else format(mesaj, sizeof(mesaj), "%s | %s (ID: %d)", mesaj, VehicleName[v], v+400);
                rcount++;
            }
        }
        if(rcount == 0) SCM(playerid, COLOR_GRAD2, "Niciun rezultat.");
		else
		{
            if(strlen(mesaj) > 128) SCM(playerid, COLOR_GRAD2, "Prea multe rezultate..");
            else SCM(playerid, COLOR_GRAD2, mesaj);
		}
    }
    else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
    return 1;
}
//==============================================================================
CMD:fspec(playerid, params[])
{
	new id, string[128], faction = PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"d",id)) return SCM(playerid,-1,"{B8DBFF}Folosire: /fspec [factionid] (0 for off spectating)");
	if(id < 0 || id >= MAX_FACTIONS) return SCM(playerid,COLOR_YELLOW2,"Id invalid!");
	if(id == 0)
	{
		FactionSpectate[playerid] = 0;
		format(string,sizeof(string),"AdmCmd: %s nu mai este spec pe nicio factiune",GetName(playerid));
		SendAdminMessage(string,4);
		return 1;
	}
	if(id == faction) return SCM(playerid,COLOR_GRAD1,"Nu poti fi spec deoarece faci parte din aceasta factiune.");
	FactionSpectate[playerid] = id;
	format(string,sizeof(string),"AdmCmd: %s este acum spec pe factiunea %s (%d).",GetName(playerid),NumeFactiune(id),id);
	SendAdminMessage(string,4);
	return 1;
}
//==============================================================================
CMD:accept(playerid, params[])
{
    new string[256], nume[16], id, sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params,"s[16]u",nume,id))
	{
		SCM(playerid, COLOR_WHITE, "|__________________ Accept __________________|");
		SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /accept [nume] [playerid/PartOfName]");
		SCM(playerid, COLOR_GREY, "Nume disponibile: Drugs, Repair, Live, Refill, Invite, Cinvite, Dice");
		SCM(playerid, COLOR_GREY, "Nume disponibile: Taxi, Medic, Mechanic, Ticket, Mats, Vehicle, Trade");
		SCM(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}
	if(NOON(id));
	if(strcmp(nume, "trade", true) == 0)
	{
		if(GetPVarInt(playerid, "TradePlayer") != id) return SCM(playerid,COLOR_GRAD2,"Acest jucator nu ti-a oferit nimic.");
		if(GetPlayerCash(id) < GetPVarInt(playerid, "TradeMoney")) return SCM(playerid, COLOR_GRAD2, "Acest jucator nu are diferenta.");
		if(!ProxDetectorS(10.0, playerid, id)) return SCM(playerid, COLOR_GRAD2, "Acest jucator nu este langa tine.");
		switch(GetPVarInt(playerid, "TradeType"))
		{
			case 1:
			{
				new hid = PlayerInfo[playerid][pHouseKey], hid2 = PlayerInfo[id][pHouseKey], money = GetPVarInt(playerid, "TradeMoney");
				PlayerInfo[playerid][pHouseKey] = hid2;
				PlayerInfo[id][pHouseKey] = hid;
				//--------------------------------------------------------------
				StrmidEx(HouseInfo[hid2][hOwner], PlayerInfo[playerid][pNamePlayer]);
				pUpdate(playerid, pHouseKeyx);
				OnPropUpdate("casa", hid2);
				SaveHouse(hid2);
				//--------------------------------------------------------------
				StrmidEx(HouseInfo[hid][hOwner], PlayerInfo[id][pNamePlayer]);
				pUpdate(id, pHouseKeyx);
				OnPropUpdate("casa", hid);
				SaveHouse(hid);
				//--------------------------------------------------------------
				GivePlayerCash(id, -money);
				GivePlayerCash(playerid, money);
				SCM(playerid, COLOR_LIGHTBLUE, "Afacere efectuata cu succes!");
				SCM(id, COLOR_LIGHTBLUE, "Afacere efectuata cu succes!");
				//--------------------------------------------------------------
				DeletePVar(playerid, "TradeMoney");
				DeletePVar(playerid, "TradeType");
				DeletePVar(playerid, "TradePlayer");					
			}
			case 2:
			{
				new bid = PlayerInfo[playerid][pBizzKey], bid2 = PlayerInfo[id][pBizzKey], money = GetPVarInt(playerid, "TradeMoney");
				PlayerInfo[playerid][pBizzKey] = bid2;
				PlayerInfo[id][pBizzKey] = bid;	
				//--------------------------------------------------------------
				StrmidEx(BizzInfo[bid2][bOwner], PlayerInfo[playerid][pNamePlayer]);
				pUpdate(playerid, pBizzKeyx);
				OnPropUpdate("bizz", bid2);
				SaveBusiness(bid2);
				//--------------------------------------------------------------
				StrmidEx(BizzInfo[bid][bOwner], PlayerInfo[id][pNamePlayer]);
				pUpdate(id, pBizzKeyx);
				OnPropUpdate("bizz", bid);
				SaveBusiness(bid);
				//--------------------------------------------------------------
				GivePlayerCash(id, -money);
				GivePlayerCash(playerid, money);
				SCM(playerid, COLOR_LIGHTBLUE, "Afacere efectuata cu succes!");
				SCM(id, COLOR_LIGHTBLUE, "Afacere efectuata cu succes!");
				//--------------------------------------------------------------
				DeletePVar(playerid, "TradeMoney");
				DeletePVar(playerid, "TradeType");
				DeletePVar(playerid, "TradePlayer");
			}
			case 3: 
			{
				new cid = GetPVarInt(playerid, "TradeVehicle"), cid2 = GetPVarInt(id, "TradeVehicle"), money = GetPVarInt(playerid, "TradeMoney"), slot2 = GetVehicleSlot(id, cid2), slot = GetVehicleSlot(playerid, cid);
				if(slot == INVALID_VEHICLE_ID || slot2 == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_GRAD2, "Eroare: Nu se gaseste slotul vehiculelor!");
				PlayerInfo[playerid][pCarKey][slot] = cid2;
				PlayerInfo[id][pCarKey][slot2] = cid;
				//--------------------------------------------------------------
				StrmidEx(CarInfo[cid2][cOwner], PlayerInfo[playerid][pNamePlayer]);
				vUpdate(cid2, cOwnerx);
				pUpdate(playerid, pCarsx);
				//--------------------------------------------------------------
				StrmidEx(CarInfo[cid][cOwner], PlayerInfo[id][pNamePlayer]);
				vUpdate(cid, cOwnerx);
				pUpdate(id, pCarsx);
				//--------------------------------------------------------------
				GivePlayerCash(id, -money);
				GivePlayerCash(playerid, money);
				SCM(playerid, COLOR_LIGHTBLUE, "Afacere efectuata cu succes!");
				SCM(id, COLOR_LIGHTBLUE, "Afacere efectuata cu succes!");
				//--------------------------------------------------------------
				DeletePVar(playerid, "TradeMoney");
				DeletePVar(playerid, "TradeType");
				DeletePVar(playerid, "TradePlayer");
				DeletePVar(playerid, "TradeVehicle");
				DeletePVar(id, "TradeVehicle");
				//--------------------------------------------------------------
				format(string, sizeof(string), "AdmInfo: %s - %s si %s - %s au facut schimb de vehicule. ($%s)", GetName(playerid), CarInfo[cid][cName], GetName(id), CarInfo[cid2][cName], FormatNumber(money));
				SendAdminMessage(string, 1); 
			}
		}
	}	
	else if(strcmp(nume, "mats", true) == 0)
	{
		if(GetPVarInt(playerid, "mID") >= 0)
		{
			new amount = GetPVarInt(playerid, "mAmount"), price = GetPVarInt(playerid, "mPrice"), dealer = GetPVarInt(playerid, "mID");
			if(dealer != id) return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu ti-a oferit nimic.");
			if(IsPlayerConnected(dealer))
			{
				if(PlayerInfo[dealer][pJob] == 9)
				{
					if(PlayerInfo[dealer][pMats] >= amount)
					{
						if(GetPlayerCash(playerid) >= price)
						{
							if(!ProxDetectorS(4.0, playerid, id)) return SCM(playerid, COLOR_GRAD2, "Acel jucator nu este langa tine.");
							GivePlayerCash(playerid, -price);
							PlayerInfo[playerid][pMats] += amount;
							PlayerInfo[dealer][pMats] -= amount;
							GivePlayerCash(dealer, price);
							pUpdate(playerid, pMatsx);
							pUpdate(dealer, pMatsx);
							//--------------------------------------------------------------
							format(string, sizeof(string), "You have bought %d mats from %s for $%s", amount, PlayerInfo[dealer][pNamePlayer], FormatNumber(price));
							SCM(playerid, COLOR_LIGHTBLUE, string);
							//--------------------------------------------------------------
							format(string, sizeof(string), "%s has bought %d mats from you, for $%s." , PlayerInfo[playerid][pNamePlayer], amount, FormatNumber(price));
							SCM(dealer, COLOR_LIGHTBLUE, string);
							DeletePVar(playerid, "mAmount");
							DeletePVar(playerid, "mID");
							DeletePVar(playerid, "mPrice");
						}
						else return SCM(playerid, COLOR_GRAD2, "Nu ai suficienti bani!");
					}
				}
				else
				{
					SCM(playerid, COLOR_GRAD2, "Acel jucator nu are jobul de distribuitor de arme.");
					DeletePVar(playerid, "mAmount");
					DeletePVar(playerid, "mID");
					DeletePVar(playerid, "mPrice");
				}
			}
			else
			{
				SCM(playerid, COLOR_GRAD2, "Acest jucator nu este online!");
				DeletePVar(playerid, "mAmount");
				DeletePVar(playerid, "mID");
				DeletePVar(playerid, "mPrice");
			}
		}
		else return SCM(playerid, COLOR_GRAD2, "Acel jucator nu ti-a oferit nimic.");
	}
	else if(strcmp(nume, "help", true) == 0)
	{
		if(PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, COLOR_WHITE, "{5CAD5C}Error: You're not helper.");
		if(playerhavehelp[playerid] != -1) return SCM(playerid,COLOR_VEHICLE,"You have active any help.");
		new helpmeid = id;
		if(helpmesend[helpmeid] == -1) return SCM(playerid, COLOR_VEHICLE,"Invalid help ID.");
		if(PlayerInfo[helpmeid][pHelper] == 1) return SCM(playerid,COLOR_VEHICLE, "Error: The player has helper.");
		helpmeaccepted[helpmeid] = 1;
		helpmesend[helpmeid] = -1;
		adminacceptedhelp[helpmeid] = playerid;
		playerhavehelp[playerid] = helpmeid;
		GetPlayerName(playerid, sendername,sizeof(sendername));
		format(string, sizeof(string),"{FFFF45}Helper %s accepted your help request. A conversation was created. To say something use /hc [text].",sendername);
		SCM(helpmeid,COLOR_WHITE,string);
		GetPlayerName(helpmeid,giveplayer,sizeof(giveplayer));
		format(string, sizeof(string),"{FFFF45}You accepted %s help request. A conversation was created. To say something use /hc [text].",giveplayer);
		SCM(playerid,COLOR_WHITE,string);
		format(string, sizeof(string),"{FFFF45}Helper %s i-a acceptat cererea de ajutor lui %s(%d).",sendername,giveplayer,helpmeid);
		SendHelperMessage(COLOR_WHITE, string);
		DeletePVar(helpmeid, "Help");
		helps--;
	}
	else if(strcmp(nume, "report", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_WHITE, NEAUTORIZAT);
		if(playerhavereport[playerid] != -1) return SCM(playerid,COLOR_VEHICLE,"You have active any report.");
		new helpmeid = id;
		if(reportsend[helpmeid] == -1) return SCM(playerid, 0xFFFFFFFF, "{FFB870}Invalid report ID.");
		if(PlayerInfo[helpmeid][pAdmin] == 1) return SCM(playerid,0xFFFFFFFF, "{FFB870}Error: The player is admins.");
		reportaccepted[helpmeid] = 1;
		reportsend[helpmeid] = -1;
		adminacceptedreport[helpmeid] = playerid;
		playerhavereport[playerid] = helpmeid;
		format(string, sizeof(string),"{FFFF45}Admin %s ti-a acceptat reportul. Foloseste (/rc [text]) pentru a vorbi cu el.",GetName(playerid));
		SCM(helpmeid,COLOR_WHITE,string);
		format(string, sizeof(string),"{FFFF45} I-ai acceptat reportul lui %s. Foloseste (/rc [text]) pentru a vorbi cu el.",GetName(helpmeid));
		SCM(playerid, COLOR_WHITE,string);
		format(string, sizeof(string),"{FFFF45} Foloseste [/closer %d] pentru a inchide reportul.",helpmeid);
		SCM(playerid, COLOR_WHITE,string);
		format(string, sizeof(string),"{FFFF45}Adminul %s i-a acceptat cererea de ajutor lui %s(%d).",GetName(playerid),GetName(helpmeid),helpmeid);
		SendAdminMessage(string, 1);
		DeletePVar(helpmeid, "Report");
	}
	else if(strcmp(nume, "cinvite", true) == 0)
	{
		if(GetPVarInt(playerid, "cinvID") >= 1)
		{
			if(GetPVarInt(id, "Invitat") != playerid) return SCM(playerid,COLOR_YELLOW2,"Acest player nu ti-a trimis nicio invitatie!");
			PlayerInfo[playerid][pClan] = GetPVarInt(playerid, "cinvID");
			PlayerInfo[playerid][pClanRank] = 1;
			//--------------------------------------------------------------
			DeletePVar(playerid, "cinvID");
			DeletePVar(id, "Invitat");
			//--------------------------------------------------------------
			format(string, sizeof(string), "You are now a member of the %s.", ClanInfo[PlayerInfo[playerid][pClan]][ClanName]);
			SCM(playerid, COLOR_BLUE, string);
			//--------------------------------------------------------------
			format(string, sizeof(string), "{%s}%s has joined the clan.",ClanInfo[PlayerInfo[playerid][pClan]][ClanColor], GetName(playerid));
			SendClanMessage(PlayerInfo[playerid][pClan], -1, string);
			ClanInfo[PlayerInfo[playerid][pClan]][ClanMembers] += 1;
			SaveClans(PlayerInfo[playerid][pClan]);
			mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `Clan`='%d', `ClanRank`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pClan],PlayerInfo[playerid][pClanRank],PlayerInfo[playerid][pNamePlayer]);
			mysql_tquery(SQL,string,"","");
		}
		else return SCM(playerid, COLOR_GREY, "Nu ai primit nicio cerere de invitatie in clan.");
	}
	else if(strcmp(nume, "invite", true) == 0)
	{
		if(FactionOffer[playerid] != -1)
		{
			if(FactionOffer[playerid] != id) return SCM(playerid,COLOR_YELLOW2,"Acest player nu ti-a trimis nicio invitatie!");
			if(ProxDetectorS(5.0, playerid, id))
			{
				GetPlayerName(FactionOffer[playerid], sendername, sizeof(sendername));
				GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
				//--------------------------------------------------------------
				format(string, sizeof(string), "{DC0C0C}Faction: {FFFFFF}You accepted %s's invite to join his faction!", sendername);
				SCM(playerid, COLOR_WHITE, string);
				//--------------------------------------------------------------
				PlayerInfo[playerid][pMember] = PlayerInfo[FactionOffer[playerid]][pLeader];
				PlayerInfo[playerid][pFactionRank] = 1;
				PlayerInfo[playerid][pFwarn] =0;
				FactionInfo[PlayerInfo[playerid][pMember]][fMembers] += 1;
				format(string, sizeof(string), "  You have Joined the %s, you were invited by leader %s.", NumeFactiune(PlayerInfo[playerid][pMember]), sendername);
				SCM(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "  You have Invited %s to join the %s.", giveplayer,NumeFactiune(PlayerInfo[playerid][pMember]));
				SCM(FactionOffer[playerid], COLOR_LIGHTBLUE, string);
				FactionOffer[playerid] = -1;
				SaveFactions(PlayerInfo[playerid][pMember]);
				SetPlayerTeamColor(playerid);
				SetPlayerToTeam(playerid);
				pUpdate(playerid,pMemberx);
				//--------------------------------------------------------------
				new query[320];
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `PlayerFaction` = '%d', `FactionRank` = '%d' WHERE `name` = '%s'",PlayerInfo[playerid][pMember],PlayerInfo[playerid][pNamePlayer],PlayerInfo[playerid][pFactionRank]);
				mysql_tquery(SQL, query);
			}
			else return SCM(playerid, COLOR_GREY, "Acest jucator nu este langa tine.");
		}
		else return SCM(playerid, COLOR_GREY, "Nu ai primit nicio cerere de invitatie in factiune.");
	}
	else if(strcmp(nume, "ticket", true) == 0)
	{
		if(TicketOffer[playerid] != -1)
		{
			if(TicketOffer[playerid] != id) return SCM(playerid,COLOR_GRAD1,"Acel jucator nu ti-a oferit nimic.");
			if(IsPlayerConnected(TicketOffer[playerid]))
			{
				if(ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
				{
					GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* You have paid the Ticket of $%d to Officer %s.", TicketMoney[playerid], giveplayer);
					SCM(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* %s has paid your Ticket of $%d.", sendername, TicketMoney[playerid]);
					SCM(TicketOffer[playerid], COLOR_WHITE, string);
					GivePlayerCash(playerid, -TicketMoney[playerid]);
					GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
					TicketOffer[playerid] = -1;
					TicketMoney[playerid] = 0;
				}
				else return SCM(playerid, COLOR_GREY, "Acest jucator nu este langa tine.");
			}
		}
		else return SCM(playerid, COLOR_GREY, "Nu ai primit nicio amenda!");
	}
	else if(strcmp(nume, "taxi", true) == 0)
	{
		if(PlayerInfo[playerid][pMember]+PlayerInfo[playerid][pLeader] != 10) return SCM(playerid,COLOR_YELLOW2,"Nu esti taximetrist!");
		if(!IsPlayerInAnyVehicle(playerid) && StaticVeh[GetPlayerVehicleID(playerid)][svFaction] != 10) return SCM(playerid,COLOR_YELLOW2,"Nu esti intr-un vehicul de tip taxi.");
		if(TransportDuty[playerid] != 1) return SCM(playerid, COLOR_GREY, "Nu esti on duty!");
		if(TaxiCallTime[playerid] > 0) return SCM(playerid, COLOR_GREY, "Ai acceptat deja o comanda!");
		if(TaxiCall[id] != id) return SCM(playerid, COLOR_GREY, "Acest jucator nu a chemat un taxi!");
		if(TaxiCall[id] == id)
		{
			if(IsPlayerConnected(TaxiCall[id]))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(TaxiCall[id], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "* You have accepted the Taxi Call from %s, you will see the marker untill you have reached it.",giveplayer);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* Taxi Driver %s has accepted your Taxi Call please wait at your current Position.",sendername);
				SCM(TaxiCall[id], COLOR_WHITE, string);
				GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Goto redmarker", 5000, 1);
				TaxiCallTime[playerid] = 1;
				TaxiAccepted[playerid] = TaxiCall[id];
				TaxiCall[id] = -1;
			}
		}
		else return SCM(playerid, COLOR_GREY, "Nu a comandat nimeni un taxi!");
	}
	else if(strcmp(nume, "medic", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			if(MedicCallTime[playerid] > 0) return SCM(playerid, COLOR_GREY, "   You have already accepted a Medic Call !");
			if(MedicCall[id] != id) return SCM(playerid, COLOR_GREY, "Acest jucator nu a chemat un medic!");
			if(MedicCall[id] == id)
			{
				if(IsPlayerConnected(MedicCall[id]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(MedicCall[id], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* You have accepted the Medic Call from %s.",giveplayer);
					SCM(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* Medic %s has accepted your medic call please wait at your current Position.",sendername);
					SCM(MedicCall[id], COLOR_WHITE, string);
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(MedicCall[id], X, Y, Z);
					SetPlayerCheckpointEx(playerid, X, Y, Z, 5.0);
					GameTextForPlayer(playerid, "~w~Medic Caller~n~~r~Goto redmarker", 5000, 1);
					MedicCallTime[playerid] = 1;
					MedicCall[id] = -1;
				}
			}
			else return SCM(playerid, COLOR_GREY, "   No-one called for a Medic yet !");
		}
		else return SCM(playerid, COLOR_GREY, "   You are not a Medic !");
	}
	else if(strcmp(nume, "mechanic", true) == 0)
	{
		if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, COLOR_GREY, "Nu esti mecanic!");
		if(MechanicCallTime[playerid] > 0) return SCM(playerid, COLOR_GREY, "   You have already accepted a Mechanic Call !");
		if(MechanicCall[id] != id) return SCM(playerid, COLOR_GREY, "Acest jucator nu a chemat un mecanic!");
		if(MechanicCall[id] == id)
		{
			if(IsPlayerConnected(MechanicCall[id]))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(MechanicCall[id], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "* You have accepted the Mechanic Call from %s.",giveplayer);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* Car Mechanic %s has accepted your Mechanic Call please wait at your current Position.",sendername);
				SCM(MechanicCall[id], COLOR_WHITE, string);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(MechanicCall[id], X, Y, Z);
				SetPlayerCheckpointEx(playerid, X, Y, Z, 5);
				GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Goto redmarker", 5000, 1);
				MechanicCallTime[playerid] = 1;
				MechanicCall[id] = -1;
			}
		}
		else return SCM(playerid, COLOR_GREY, "   No-one called for a Car Mechanic yet !");
	}
	else if(strcmp(nume, "refill", true) == 0)
	{
		if(RefillOffer[playerid] != -1)
		{
			if(RefillOffer[playerid] != id) return SCM(playerid,COLOR_YELLOW2,"Acest player nu ti-a trimis nicio invitatie!");
			if(IsPlayerConnected(RefillOffer[playerid]))
			{
				if(GetPlayerCash(playerid) > RefillPrice[playerid])
				{
					if(ProxDetectorS(7.0, playerid, RefillOffer[playerid]))
					{
						GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new car = GetPlayerVehicleID(playerid);
						format(string, sizeof(string), "* You refilled your car with 25%, for $%d by Car Mechanic %s.",RefillPrice[playerid],giveplayer);
						SCM(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* You refilled %s's car with 25%, the $%d has been added to your PayCheck.",sendername,RefillPrice[playerid]);
						SCM(RefillOffer[playerid], COLOR_WHITE, string);
						GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
						GivePlayerCash(playerid, -RefillPrice[playerid]);
						if(Gas[car] < 75) Gas[car] += 25.5;
						else Gas[car] = 100.5;
						RefillOffer[playerid] = -1;
						RefillPrice[playerid] = 0;
					}
				}
				else return SCM(playerid, COLOR_GREY, "   You cant afford the Refill !");
			}
		}
		else return SCM(playerid, COLOR_GREY, "   No-one offered to Refill your Car !");
	}
	else if(strcmp(nume, "live", true) == 0)
	{
		if(LiveOffer[playerid] != -1)
		{
			if(LiveOffer[playerid] != id) return SCM(playerid,COLOR_YELLOW2,"Acest player nu ti-a trimis nicio invitatie!");
			if(IsPlayerConnected(LiveOffer[playerid]))
			{
				if(ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
				{
					SCM(playerid, COLOR_WHITE, "* You are frozen till the Live Conversation ends.");
					SCM(LiveOffer[playerid], COLOR_WHITE, "* You are frozen till the Live Conversation ends (use /live again).");
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(LiveOffer[playerid], false);
					TalkingLive[playerid] = LiveOffer[playerid];
					TalkingLive[LiveOffer[playerid]] = playerid;
					LiveOffer[playerid] = -1;
				}
				else return SCM(playerid, COLOR_GREY, "   You are to far away from the News Reporters !");
			}
		}
		else return SCM(playerid, COLOR_GREY, "   No-one gave you a Live Conversation offer !");
	}
	else if(strcmp(nume, "drugs", true) == 0)
	{
		if(DrugOffer[playerid] != -1)
		{
			if(DrugOffer[playerid] != id) return SCM(playerid,COLOR_YELLOW2,"Acest player nu ti-a oferit nimic!");
			if(GetPlayerCash(playerid) > DrugPrice[playerid])
			{
				if(PlayerInfo[playerid][pDrugs] < 7)
				{
					if(IsPlayerConnected(DrugOffer[playerid]))
					{
						if(ProxDetectorS(5.0, playerid, DrugOffer[playerid]))
						{
							GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
							SCM(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
							SCM(DrugOffer[playerid], COLOR_WHITE, string);
							GivePlayerCash(playerid, -DrugPrice[playerid]);
							GivePlayerCash(DrugOffer[playerid], DrugPrice[playerid]);
							PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
							PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
							DrugOffer[playerid] = -1;
							DrugPrice[playerid] = 0;
							DrugGram[playerid] = 0;
						}
						else return SCM(playerid, COLOR_GREY, "Esti prea departe de acest jucator!");
					}
				}
				else return SCM(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first !");
			}
			else return SCM(playerid, COLOR_GREY, "   You can't afford those Drugs !");
		}
		else return SCM(playerid, COLOR_GREY, "   No-one offerd you any Drugs !");
	}
	else if(strcmp(nume, "repair", true) == 0)
	{
		if(RepairOffer[playerid] != -1)
		{
			if(RepairOffer[playerid] != id) return SCM(playerid,COLOR_YELLOW2,"Acest player nu ti-a oferit nimic!");
			if(GetPlayerCash(playerid) > RepairPrice[playerid])
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(IsPlayerConnected(RepairOffer[playerid]))
					{
						if(ProxDetectorS(7.0, playerid, RepairOffer[playerid]))
						{
							GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							RepairCar[playerid] = GetPlayerVehicleID(playerid);
							RepairVehicle(RepairCar[playerid]);
							SetVehicleHealth(RepairCar[playerid], 999.9);
							format(string, sizeof(string), "* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],giveplayer);
							SCM(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* You fixed %s's car, the $%d has been added to your PayCheck.",sendername,RepairPrice[playerid]);
							SCM(RepairOffer[playerid], COLOR_WHITE, string);
							GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
							GivePlayerCash(playerid, -RepairPrice[playerid]);
							RepairOffer[playerid] = -1;
							RepairPrice[playerid] = 0;
						}
						else return SCM(playerid, COLOR_GREY, "Esti prea departe de acest jucator!");
					}
				}
			}
			else return SCM(playerid, COLOR_GREY, "   You can't afford the Repair !");
		}
		else return SCM(playerid, COLOR_GREY, "   No-one offerd you to Repair your Car !");
	}
	else if(strcmp(nume, "vehicle", true) == 0)
	{
		if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
		if(OwnableCarOffer[playerid] != -1)
		{
			if(OwnableCarOffer[playerid] != id) return SCM(playerid,COLOR_VEHICLE,"This player has not offered you a car.");
			if(GetPlayerCash(playerid) >= OwnableCarPrice[playerid])
			{
				if(IsPlayerConnected(OwnableCarOffer[playerid]))
				{
					new c = 0;
					GetPlayerName(OwnableCarOffer[playerid], giveplayer, sizeof(giveplayer));
					if(GetPlayerVehicleID(OwnableCarOffer[playerid]) != CarInfo[OwnableCarID[playerid]][cSpawned]) return SCM(playerid, COLOR_VEHICLE,"Vanzatorul de vehicule trebuie sa fie la mașina lui.");
					for(new i = 0; i < 10; i++)
					{
						if(PlayerInfo[playerid][pCarKey][i] == 0)
						{
							c++;
							PlayerInfo[playerid][pCarKey][i] = OwnableCarID[playerid];
							if(PlayerInfo[id][pCarKey][i] == FindSpawnID(GetPlayerVehicleID(id))) {
								PlayerInfo[id][pCarKey][i] = 0;
							}
							pUpdate(OwnableCarOffer[playerid],pCarsx);
							pUpdate(playerid,pCarsx);
							break;
						}
					}
					if(c == 0) return SCM(playerid,COLOR_VEHICLE,"Ai toate sloturile ocupate!");
					//--------------------------------------------------------------
					format(string, sizeof(string), "{B8FFDB} * Ai cumparat acest vehicul pentru %s$ de la %s.",FormatNumber(OwnableCarPrice[playerid]),giveplayer);
					SCM(playerid, COLOR_WHITE, string);
					//--------------------------------------------------------------
					format(string, sizeof(string), "{B8FFDB} * %s ti-a cumparat vehiculul pentru %s$.",PlayerInfo[playerid][pNamePlayer],FormatNumber(OwnableCarPrice[playerid]));
					SCM(OwnableCarOffer[playerid], COLOR_WHITE, string);
					//--------------------------------------------------------------
					RemovePlayerFromVehicleEx(OwnableCarOffer[playerid]);
					GivePlayerCash(playerid, -OwnableCarPrice[playerid]);
					GivePlayerCash(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
					//--------------------------------------------------------------
					StrmidEx(CarInfo[OwnableCarID[playerid]][cOwner], PlayerInfo[playerid][pNamePlayer]);
					vUpdate(OwnableCarID[playerid], cOwnerx);
					//--------------------------------------------------------------
					OwnableCarOffer[playerid] = -1;
					OwnableCarID[playerid] = 0;
					OwnableCarPrice[playerid] = 0;
				}
				else return SCM(playerid,COLOR_YELLOW2,"Acest jucator nu este online!");
			}
			else return SCM(playerid,COLOR_VEHICLE,"You do not have enough money.");
		}
		else return SCM(playerid, COLOR_VEHICLE,"No-one offerd you any ownable.");
	}
	else if(strcmp(nume, "dice", true) == 0)
	{
		new MyNumber[MAX_PLAYERS], Winner, bet;
		if(!IsPlayerInRangeOfPoint(playerid,50.0,1977.7538,1017.7076,994.4688)) return SCM(playerid,COLOR_YELLOW2,"Poti folosi comanda doar in cazinou.");
		if(invitatiebarbut[playerid] != id || invitatiebarbut[playerid] == -1) return SCM(playerid, COLOR_YELLOW2, "Acel jucator nu te-a invitat sa joci barbut.");
		if(id == playerid) return SCM(playerid, COLOR_GRAD1, "Nu poti juca cu tine insuti.");
		if(IsPlayerConnected(id))
		{
			if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_GRAD2, "Acel jucator nu este langa tine.");
			bet = sumabarbut[playerid];
			invitatiebarbut[playerid] = -1;
			invitatiebarbut[id] = -1;
			MyNumber[playerid] = random(6);
			MyNumber[id] = random(6);
			if(MyNumber[playerid] == MyNumber[id]) Winner = 0;
			if(MyNumber[playerid] > MyNumber[id]) Winner = 1;
			if(MyNumber[playerid] < MyNumber[id]) Winner = 2;
			format(string,sizeof(string)," * SCOR: %s: %d  [(o_o)]  %s: %d",GetName(playerid),MyNumber[playerid],GetName(id),MyNumber[id]);
			SCM(playerid,COLOR_PURPLE,string);
			format(string,sizeof(string)," * SCOR: %s: %d  [(o_o)]  %s: %d",GetName(id),MyNumber[id],GetName(playerid),MyNumber[playerid]);
			SCM(id,COLOR_PURPLE,string);
			if(Winner == 1)
			{
				format(string,sizeof(string)," * %s a castigat suma de %s$.",GetName(playerid),FormatNumber(bet));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string,sizeof(string),"   (+)Ai castigat suma de %s$.",FormatNumber(bet));
				SCM(playerid,0x00CC00FF,string);
				format(string,sizeof(string),"   (-)Ai pierdut suma de %s$.",FormatNumber(bet));
				SCM(id,0xFF0000FF,string);
				GivePlayerCash(playerid, bet);
				GivePlayerCash(id, -bet);
				BizzInfo[BizzEntered[playerid]][bMoney] += floatround(floatmul(bet,0.05));
				SaveBusiness(BizzEntered[playerid]);
			}
			else if(Winner == 2)
			{
				format(string,sizeof(string)," * %s a castigat suma de %s$.",GetName(id),FormatNumber(bet));
				ProxDetector(10.0, id, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string,sizeof(string),"   (+)Ai castigat suma de %s$.",FormatNumber(bet));
				SCM(id,0x00CC00FF,string);
				format(string,sizeof(string),"   (-)Ai pierdut suma de %s$.",FormatNumber(bet));
				SCM(playerid,0xFF0000FF,string);
				GivePlayerCash(playerid, -bet);
				GivePlayerCash(id, bet);
				BizzInfo[BizzEntered[playerid]][bMoney] += floatround(floatmul(bet,0.05));
				SaveBusiness(BizzEntered[playerid]);
			}
			else if(Winner == 0)
			{
				SCM(playerid,0x0099FFFF,"   (=)Egalitate.");
				SCM(id,0x0099FFFF,"   (=)Egalitate.");
			}
		}
		else return SCM(playerid, COLOR_YELLOW2, "Acel jucator nu este conectat.");
	}
	else return SCM(playerid,COLOR_GRAD3,"Nume invalid!");
	return 1;
}
//==============================================================================
CMD:service(playerid, params[])
{
	new string[300], sendername[30], zone[30];
	if(isnull(params))
	{
		SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /service [nume]");
		SCM(playerid, COLOR_GREY, "Nume disponibile: Taxi, Medic, Mechanic");
		return 1;
	}
	else
	{
		if(strcmp(params, "taxi", true) == 0)
		{
			if(TaxiDrivers < 1) return SCM(playerid, COLOR_VEHICLE,"Nu sunt taximetristi la datorie, incearca mai tarziu.");
			if(TransportDuty[playerid] > 0) return SCM(playerid, COLOR_VEHICLE,"Nu poti chema un taxi acum.");
			GetPlayer3DZone(playerid,zone,30);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un taxi, Locatie: %s (SF). Foloseste [/accept taxi %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendFactionMessage(10, COLOR_WHITE, string);
			}
			if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un taxi, Locatie: %s (LS). Foloseste [/accept taxi %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendFactionMessage(10, COLOR_WHITE, string);
			}
			if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un taxi, Locatie: %s (LV). Foloseste [/accept taxi %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendFactionMessage(10, COLOR_WHITE, string);
			}
			SCM(playerid, COLOR_WHITE, "{3385FF}* Ai sunat pentru un taxi, asteapta un raspuns.");
			TaxiCall[playerid] = playerid;
		}
		else if(strcmp(params, "medic", true) == 0)
		{
			if(Medics < 1)  return SCM(playerid, COLOR_VEHICLE,"Nu sunt medici la datorie, incearca mai tarziu.");
			GetPlayer3DZone(playerid,zone,30);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un medic, Locatie: %s (SF). Foloseste [/accept medic %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendFactionMessage(4, COLOR_WHITE, string);
			}
			if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un medic, Locatie: %s (LS). Foloseste [/accept medic %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendFactionMessage(4, COLOR_WHITE, string);
			}
			if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un medic, Locatie: %s (LV). Foloseste [/accept medic %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendFactionMessage(4, COLOR_WHITE, string);
			}
			SCM(playerid, COLOR_WHITE, "{3385FF}* Ai sunat pentru un medic, asteapta un raspuns.");
			MedicCall[playerid] = playerid;
		}
		else if(strcmp(params, "mechanic", true) == 0)
		{
			if(Mechanics < 1) return SCM(playerid, COLOR_VEHICLE,"Nu sunt mecanici la datorie, incearca mai tarziu.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayer3DZone(playerid,zone,30);
			if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un mecanic, Locatie: %s (SF). Foloseste [/accept mechanic %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendJobMessage(4, COLOR_WHITE, string);
			}
			if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un mecanic, Locatie: %s (LS). Foloseste [/accept mechanic %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendJobMessage(4, COLOR_WHITE, string);
			}
			if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80))
			{
				format(string, sizeof(string), "{B8FFDB}** %s are nevoie de un mecanic, Locatie: %s (LV). Foloseste [/accept mechanic %d] pentru a accepta apelul.", sendername,zone,playerid);
				SendJobMessage(4, COLOR_WHITE, string);
			}
			SCM(playerid, COLOR_WHITE, "{3385FF}*  Ai sunat pentru un mecanic, asteapta un raspuns.");
			MechanicCall[playerid] = playerid;
		}
		else 
		{	
			SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /service [nume]");
			SCM(playerid, COLOR_GREY, "Nume disponibile: Taxi, Medic, Mechanic");
			return 1;
		}
	}
	return 1;
}
//==============================================================================
CMD:dropgun(playerid, params[])
{
	new string[128], weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);
	if(weapon == 0 && ammo == 0) return SCM(playerid,COLOR_YELLOW2,"Nu ai nicio arma in mana.");
	DropWeapons(playerid);
	format(string,sizeof(string),"Ai lasat pe jos un %s cu %d gloante.",GetWeaponNameEx(weapon),ammo);
	SCM(playerid,COLOR_GRAD2,string);
	return 1;
}
//==============================================================================
CMD:propunere(playerid, params[])
{
	new text[80], safetext[80], query[500];
	if(GetPlayerScoreEx(playerid) < 2) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceast comanda la levelul pe care il ai.");
	if(sscanf(params,"s[80]",text)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /propunere [text]");
	if(strlen(text) > 80) return SCM(playerid,COLOR_GRAD2,"Propunerea ta a intrecut limita de caractere, foloseste mai putine cuvinte.");
	format(query,sizeof(query),"SELECT * FROM `propuneri` WHERE `playerName`='%s'",PlayerInfo[playerid][pNamePlayer]);
	new Cache:result = mysql_query(SQL, query);
	if(cache_num_rows() != 0)
	{
		cache_delete(result);
		return SCM(playerid,COLOR_YELLOW2,"Ai trimis deja o propunere, asteapta pana ti-o inchid adminii.");
	}
	else
	{
		mysql_escape_string(text, safetext);
		mysql_format(SQL, query, sizeof(query), "INSERT INTO `propuneri` (`Text`,`playerName`) VALUES ('%s','%s')",safetext,PlayerInfo[playerid][pNamePlayer]);
		mysql_tquery(SQL, query, "","");
		SCM(playerid,COLOR_YELLOW,"Propunerea ta a fost trimisa cu succes!");
	}
	cache_delete(result);
	return 1;
}
//==============================================================================
CMD:propuneri(playerid, params[])
{
	new string[1024], name[MAX_PLAYER_NAME], text[MAX_STRING], time[32];
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	format(string, sizeof(string), "Jucator\tData\tPropunere\n");
	new Cache:result = mysql_query(SQL, "SELECT * FROM `propuneri` ORDER BY `propuneri`.`ID` DESC LIMIT 50");
	if(cache_num_rows() == 0)
	{
		cache_delete(result);
		return SCM(playerid,COLOR_GRAD2,"Nu sunt propuneri!");
	}
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		cache_get_value_int(i, "ID", Select[playerid][i]);
		cache_get_value(i, "playerName", name, MAX_PLAYER_NAME);
		cache_get_value(i, "time", time, 32);
		cache_get_value(i, "Text", text, MAX_STRING);
		//--------------------------------------------------------------
		format(string, sizeof(string),"%s%s\t%s\t%s\n",string,name,time,text);
		SPD(playerid,DIALOG_PROPUNERE,DIALOG_STYLE_TABLIST_HEADERS,"Propuneri:",string,"Sterge","Iesire");
	}
	cache_delete(result);
	return 1;
}
//==============================================================================
CMD:bug(playerid, params[])
{
	new text[80], safetext[80], query[500];
	if(GetPlayerScoreEx(playerid) < 2) return SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceast comanda la levelul pe care il ai.");
	if(sscanf(params,"s[80]",text)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /bug [text]");
	if(strlen(text) > 80) return SCM(playerid,COLOR_GRAD2,"Mesajul tau a intrecut limita de caractere, foloseste mai putine cuvinte.");
	format(query,sizeof(query),"SELECT * FROM `bugs` WHERE `playerName`='%s'",PlayerInfo[playerid][pNamePlayer]);
	new Cache:result = mysql_query(SQL, query);
	if(cache_num_rows() != 0)
	{
		cache_delete(result);
		return SCM(playerid,COLOR_YELLOW2,"Ai raportat deja un bug, asteapta pana ti-l inchid adminii.");
	}
	else
	{
		mysql_escape_string(text, safetext);
		mysql_format(SQL, query, sizeof(query), "INSERT INTO `bugs` (`Text`,`playerName`) VALUES ('%s','%s')",safetext,PlayerInfo[playerid][pNamePlayer]);
		mysql_tquery(SQL, query, "","");
		SCM(playerid,COLOR_YELLOW,"Bug-ul tau a fost raportat cu succes!");
	}
	cache_delete(result);
	return 1;
}
//==============================================================================
CMD:bugs(playerid, params[])
{
	new string[1024], name[MAX_PLAYER_NAME], text[MAX_STRING], time[32];
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	format(string, sizeof(string), "Jucator\tData\tBug\n");
	new Cache:result = mysql_query(SQL, "SELECT * FROM `bugs` ORDER BY `bugs`.`ID` DESC LIMIT 50");
	if(cache_num_rows() == 0)
	{
		cache_delete(result);
		return SCM(playerid,COLOR_GRAD2,"Nu sunt buguri!");
	}
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		cache_get_value_int(i, "ID", Select[playerid][i]);
		cache_get_value(i, "playerName", name, MAX_PLAYER_NAME);
		cache_get_value(i, "Time", time, 32);
		cache_get_value(i, "Text", text, MAX_STRING);
		//--------------------------------------------------------------
		format(string, sizeof(string),"%s%s\t%s\t%s\n",string,name,time,text);
		SPD(playerid,DIALOG_BUGS,DIALOG_STYLE_TABLIST_HEADERS,"Bugs:",string,"Sterge","Iesire");
	}
	cache_delete(result);
	return 1;
}
//==============================================================================
CMD:missions(playerid, params[])
{
	new string[180], mstring[MAX_STRING];
	if(PlayerInfo[playerid][pQuest][0] == 0 && PlayerInfo[playerid][pQuest][1] == 0) return SCM(playerid,COLOR_GRAD2,"Nu ai misiuni de facut.");
	if(PlayerInfo[playerid][pQuestProgress][0] >= PlayerInfo[playerid][pNeedProgress][0] && PlayerInfo[playerid][pQuestProgress][1] >= PlayerInfo[playerid][pNeedProgress][1]) return SCM(playerid,COLOR_YELLOW2,"Ai terminat deja misiunile zilnice.");
	strcat(mstring, "Misiune\tProgres\n");
	if(PlayerInfo[playerid][pQuestProgress][0] < PlayerInfo[playerid][pNeedProgress][0])
	{
		format(string,sizeof(string),"%s%s\t%d din %d\n",GetColorHex(COLOR_QUEST),QuestName(playerid,PlayerInfo[playerid][pQuest][0],0),PlayerInfo[playerid][pQuestProgress][0],PlayerInfo[playerid][pNeedProgress][0]);
		strcat(mstring, string);
	}
	if(PlayerInfo[playerid][pQuestProgress][1] < PlayerInfo[playerid][pNeedProgress][1])
	{
		format(string,sizeof(string),"%s%s\t%d din %d\n",GetColorHex(COLOR_QUEST),QuestName(playerid,PlayerInfo[playerid][pQuest][1],1),PlayerInfo[playerid][pQuestProgress][1],PlayerInfo[playerid][pNeedProgress][1]);
		strcat(mstring, string);
	}
	SPD(playerid, DIALOG_NULL, DIALOG_STYLE_TABLIST_HEADERS, "Missions:",mstring,"Inchide","");
	return 1;
}
//==============================================================================
CMD:resetmissions(playerid, params[])
{
	if(!IsPlayerScripter(playerid)) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	SCMAll(COLOR_QUEST,"Misiunile au fost resetate, foloseste /missions pentru a vedea ce misiuni ai primit.");
	mysql_query(SQL, "UPDATE `users` SET `Quest` = '0|0', `QuestProgress` = '0|0', `NeedProgress` = '0|0'");
	foreach(new i: Player) {
		if(gPlayerLogged[i] == true) GiveQuest(i);
	}
	return 1;
}
//==============================================================================
CMD:deletemyad(playerid, params[])
{
	if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
    if(AdvPlayer[playerid] != 0)
	{
		KillTimer_(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		StrmidEx(AdvMSG[playerid], "");
		SCM(playerid, COLOR_GREEN, "Anuntul tau a fost sters.");
	}
	else return SCM(playerid, COLOR_GRAD2, "Nu ai pus niciun anunt.");
	return 1;
}
//==============================================================================
CMD:deletead(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	new id, string[256], motiv[64];
	if(sscanf(params,"us[64]",id,motiv)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /deletead [playerid/PartOfName] [motiv]");
	if(IsPlayerConnected(id))
	{
		if(AdvPlayer[id] != 0)
		{
			KillTimer_(AdvTimer[id]);
			AdvPlayer[id] = 0;
			StrmidEx(AdvMSG[id], "");
			format(string, sizeof(string),"AdmCmd: %s i-a sters anuntul lui %s. Motiv: %s",GetName(playerid),GetName(id),motiv);
			SendAdminMessage(string,1);
			format(string, sizeof(string),"Anuntul tau a fost sters de catre adminul %s. Motiv: %s",GetName(playerid),motiv);
			SCM(playerid, COLOR_LIGHT_RED, string);
		}
		else return SCM(playerid, COLOR_YELLOW2, "Acest jucator nu a plasat un anunt.");
	}
	else return SCM(playerid, COLOR_YELLOW2, "Acest jucator nu este online!");
	return 1;
}
//==============================================================================
CMD:entercar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new testcar, loc;
		if(sscanf(params,"ii",testcar,loc)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /entercar [Car ID] [Seat ID]");
		if(!IsValidVehicle(testcar)) return SCM(playerid,COLOR_GREY,"Vehicul invalid!");
		if(loc < 0 || loc > 4) return SCM(playerid, COLOR_VEHICLE,"Invalid Seat ID (0-4).");
		PutPlayerInVehicleEx(playerid, testcar, loc);
		SCM(playerid, COLOR_GRAD1, "You have been teleported.");
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:savedata(playerid, params[])
{
	if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	SaveData();
	SCM(playerid,COLOR_ACHAT,"Datele au fost salvate cu succes!");
	return 1;
}
//==============================================================================
CMD:gethit(playerid, params[])
{
    if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
    {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {} else return SCM(playerid, COLOR_LIGHT_RED, "You are not a hitman.");
		{
		    new searchhit = 0,cid[MAX_PLAYERS],sendername[30],giveplayer[30],string[128];
		    if(GoChase[playerid] != 999) return SCM(playerid,COLOR_VEHICLE,"Ai deja un contact!");
		    if(PlayerInfo[playerid][pHitT] != 0) return SCM(playerid,COLOR_WHITE,"Trebuie sa astepti 5 minute dupa ce ai anulat/terminat un contract pentru a folosi /gethit.");
			foreach(new i: Player)
			{
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 8 && gPlayerLogged[i] == true)
			    {
			        searchhit = 1;
			        cid[playerid] = i;
			    }
		    }
			if(searchhit == 0) return SCM(playerid, COLOR_YELLOW, "Nu sunt contracte disponibile.");
			if(IsPlayerConnected(cid[playerid]))
		    {
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(cid[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "%s a primit un contract nou. Tinta: %s.", sendername, giveplayer);
				SendFactionMessage(8, TEAM_AZTECAS_COLOR, string);
				SCM(playerid, COLOR_YELLOW, "Ai un nou contract(/mycontract).");
			    GoChase[playerid] = cid[playerid];
				GetChased[cid[playerid]] = playerid;
				GotHit[cid[playerid]] = 1;
	            TogFind[playerid] = true;
				OrderReady[playerid] = 1;
				GivePlayerWeaponEx(playerid, 23, 200);
				GivePlayerWeaponEx(playerid, 34, 40);
				GivePlayerWeaponEx(playerid, 4, 1);
				GivePlayerWeaponEx(playerid, 29, 150);
				GivePlayerCash(playerid, -8000);
				SCM(playerid, COLOR_LIGHTBLUE, "* You picked up your Ordered Package.");
				FactionInfo[8][fSafeMoney] += 8000;
				SaveFactions(8);
			}
		}
	}
	return 1;
}
//==============================================================================
CMD:mycontract(playerid, params[])
{
    if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
    {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
		    if(GoChase[playerid] != 999)
		    {
		        new name[30],string[128];
		    	GetPlayerName(GoChase[playerid], name, sizeof(name));
		    	format(string, sizeof(string), "Ai deja un contract pe %s(%d)",name,GoChase[playerid]);
		    	SCM(playerid, COLOR_GREY, string);
			}
			else return SCM(playerid, COLOR_WHITE, "Nu ai un contract.");
		}
	}
	return 1;
}
//==============================================================================
CMD:checkcontract(playerid, params[])
{
    if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
    {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
		    new id;
		    if(sscanf(params, "u", id)) return SCM(playerid, -1,"{B8DBFF}Folosire: /checkcontract [playerid/PartOfName]");
			if(NOON(id));
			if(PlayerInfo[id][pMember] != 8 && PlayerInfo[playerid][pLeader] != 8) return SCM(playerid, COLOR_WHITE, "Acest jucator nu e hitman.");
			if(GoChase[id] != 999)
		    {
		        new name[30],string[128],name2[30];
		    	GetPlayerName(GoChase[id], name, sizeof(name));
		    	GetPlayerName(id,name2,sizeof(name2));
		    	format(string, sizeof(string), "%s are un contract pe %s(%d)",name2,name,GoChase[id]);
		    	SCM(playerid, COLOR_GREY, string);
			}
			else return SCM(playerid, COLOR_WHITE, "Acest hitman nu are niciun contract.");
		}
	}
	return 1;
}
//==============================================================================
CMD:cancelhit(playerid, params[])
{
    if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
    {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
		    if(GoChase[playerid] != 999)
		    {
		        new name[30],string[256];
		        GotHit[GoChase[playerid]] = 0;
				GetChased[GoChase[playerid]] = 999;
				GoChase[playerid] = 999;
	        	TogFind[playerid] = false;
            	PlayerInfo[playerid][pHitT] = 0;
				UpdateVar(playerid, "HitT", 0);
				GetPlayerName(playerid, name, sizeof(name));
		    	format(string, sizeof(string), "%s canceled his contract.",name);
		    	SendFactionMessage(8, TEAM_AZTECAS_COLOR, string);
			}
			else return SCM(playerid, COLOR_WHITE, "Nu ai niciun contract.");
		}
	}
	return 1;
}
//==============================================================================
CMD:contracts(playerid, params[])
{
    if(PlayerInfo[playerid][pPinLogged] == 0) return SCM(playerid, COLOR_YELLOW2,"Trebuie sa introduci pin-ul mai intai. (/pin)");
    {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
		    new count1 = 0, count2 = 0, string[128];
		    foreach(new i: Player)
		    {
		        if(PlayerInfo[i][pHeadValue] != 0)
		        {
		            if(Sleeping[i] == 1 || IsPlayerPaused(i)) {
		            	count1++;
					}
					count2++;
				}
			}
			SCM(playerid, COLOR_YELLOW, "[Contracts]");
			format(string,sizeof(string),"Targets AFK/sleeping: %d",count1);
			SCM(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Total targets: %d",count2);
			SCM(playerid, COLOR_WHITE, string);
		    SCM(playerid, COLOR_YELLOW, "-------------------");
		}
	}
	return 1;
}
//==============================================================================
CMD:intrarehq(playerid, params[])
{
    new Float:X, Float:Y, Float:Z, string[128], proplev;
    if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_SCRIPTER, "Nu esti Scripter!");
    if(sscanf(params,"d",proplev)) return SCM(playerid, -1, "{B8DBFF}Folosire: /intrarehq [HQ ID] => Muti HQ-ul la tine");
    if(proplev >= MAX_FACTIONS || proplev < 0) {
	    SCM(playerid,COLOR_GRAD1,"Invalid HQ.");
	}
	else
	{
	    GetPlayerPos(playerid,X,Y,Z);
	    format(string,sizeof(string),"Intrarea la HQ-ul %d a fost mutata la coordonatele [ %f | %f | %f ]",proplev,X,Y,Z);
		SendAdminMessage(string,1);
		FactionInfo[proplev][fHQExteriorPosX] = X;
		FactionInfo[proplev][fHQExteriorPosY] = Y;
		FactionInfo[proplev][fHQExteriorPosZ] = Z;
		SaveFactions(proplev);
	}
	return 1;
}
//==============================================================================
CMD:licitatie(playerid, params[]) 
{
	new item[50], id, time, string[180];
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(Licitatie == 1) return SCM(playerid, COLOR_YELLOW2, "Este deja o licitatie activa!");
	if(sscanf(params, "s[50]ii", item, id, time)) 
	{
		SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /licitatie [tip] [id] [minute]");
		SCM(playerid, COLOR_WHITE, "Valabile: Casa, Bizz.");
		return 1;
	}
	if(strcmp(item, "casa", true, strlen(item)) == 0) TipLicitatie = 1;
	else if(strcmp(item, "bizz", true, strlen(item)) == 0) TipLicitatie = 2;
	else return SCM(playerid, COLOR_GREY, "Tip invalid!");
	//--------------------------------------------------------------
	Licitatie = 1;
	TimpLicitatie = time*60;
	TotalBani = 0;
	foreach(new i: Player) {
	    if(gPlayerLogged[i] == true) TotalMoney[i] = 0;
	}
	IDLicitatie = id;
	LastPlayer = -1;
	//--------------------------------------------------------------
	switch(TipLicitatie) 
	{
	    case 1: format(string, sizeof(string), "[BID] Acum se poate licita pentru casa (house) cu ID-ul %d", id);
	    case 2: format(string, sizeof(string), "[BID] Acum se poate licita pentru afacerea (bizz) cu ID-ul %d", id);
	}
	MesajLicitatie(0x483d8bFF, string);
	MesajLicitatie(COLOR_AUCTION, "[BID] Poti folosi /tog pentru a afisa/ascunde sumele licitate de alti playeri.");
	MesajLicitatie(COLOR_AUCTION, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi restrasi banii din cont la sfarsitul licitatiei.");
	format(string, sizeof(string), "[BID] Licitatia este disponibila timp de %d minute.", time);
	MesajLicitatie(COLOR_AUCTION, string);	
	return 1;
}
//==============================================================================
CMD:bid(playerid, params[]) 
{
	new suma, string[180];
	if(Licitatie == 0) return SCM(playerid, COLOR_YELLOW2, "Nu este o licitatie activa!");
	if(HouseInfo[IDLicitatie][hLevel] > GetPlayerScoreEx(playerid) || BizzInfo[IDLicitatie][bLevel] > GetPlayerScoreEx(playerid)) return SCM(playerid,COLOR_YELLOW2,"Nu ai nivelul necesar pentru a licita pentru aceasta proprietate.");
	if(sscanf(params,"i",suma)) 
	{
		SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /bid [suma]");
		new id = IDLicitatie;
		switch(TipLicitatie) 
		{
			case 1: format(string, sizeof(string), "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/gps -> case %d).", id, id);
			case 2: format(string, sizeof(string), "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/gps -> afacere %d).", id, id);
		}
		SCM(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "Timp disponibil pentru a licita: %s", CalculeazaTimp(TimpLicitatie));
		SCM(playerid, COLOR_GREEN, string);
		if(LastPlayer == INVALID_PLAYER_ID || LastPlayer == -1) format(string, sizeof(string), "Ultimul care a licitat: Unknown | Suma: $%s", FormatNumber(TotalBani)); 
		else format(string, sizeof(string), "Ultimul care a licitat: %s | Suma: $%s", GetName(LastPlayer), FormatNumber(TotalBani));			
		SCM(playerid, COLOR_GREEN, string);	
		return 1;
	} 
	if(suma < 500000) return SCM(playerid, COLOR_GREY, "Suma minima este de $500,000!");
	if(GetPlayerCash(playerid) < TotalBani) return SCM(playerid, COLOR_YELLOW2, "Nu ai destui bani!");
	if(GetPlayerCash(playerid) < suma) return SCM(playerid, COLOR_YELLOW2, "Nu ai destui bani!");
	if(suma < TotalBani+100000 && TotalBani != 0) 
	{
		format(string, sizeof(string), "Suma invalida! Poti licita minim $%s.", FormatNumber(TotalBani+100000));
		SCM(playerid, COLOR_GREY, string);
		return 1;
	}	
	if(TipLicitatie == 1) {
		if(PlayerInfo[playerid][pHouseKey] != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0) return SCM(playerid, COLOR_WHITE, "Nu poti licita deoarece ai deja o casa!");
	}
	else if(TipLicitatie == 2 && PlayerInfo[playerid][pBizzKey] != 255) return SCM(playerid, COLOR_YELLOW2, "Nu poti licita deoarece ai deja o afacere.");
	format(string, sizeof(string), "Esti sigur ca vrei sa pui $%s la licitatie?", FormatNumber(suma));
	SPD(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Info:", string, "Da", "Nu");
	SetPVarInt(playerid, "LicitatieMoney", suma);
	return 1;
}
//==============================================================================
CMD:deleteclan(playerid, params[]) 
{
	new membrii, szQuery[256], string[180], clanid;
	if(!IsPlayerScripter(playerid)) return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	if(sscanf(params,"i", clanid)) 
	{
 		SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /deleteclan [id]");
        for(new h = 1; h < MAX_CLANS; h++) 
		{
            format(string, sizeof(string), "ClanID: %d | Clan: %s (%s) | Owner: %s", h, ClanInfo[h][ClanName], ClanInfo[h][ClanTag], ClanInfo[h][ClanOwner]);
	        SCM(playerid, COLOR_WHITE, string);
        }
		return 1;
	}
	foreach(new i: Player) 
	{
	    if(gPlayerLogged[i] == true && PlayerInfo[i][pClan] == clanid && clanid != 0) 
		{
	        SCM(i, COLOR_YELLOW, "Ai fost demis din acest clan! Motiv: Clanul a fost sters de un admin.");
	        SCM(i, COLOR_YELLOW, "Server: Tag-ul a fost scos. Numele tau nu a fost afectat.");
	        PlayerInfo[i][pClan] = 0;
	        PlayerInfo[i][pClanRank] = 0;
	        SetPlayerName(i, PlayerInfo[i][pNamePlayer]);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `name`='%s'", PlayerInfo[i][pNamePlayer]);
			mysql_tquery(SQL, szQuery);
	        membrii++;
	    }
	}
    StrmidEx(ClanInfo[clanid][ClanName], "");
    format(szQuery, sizeof(szQuery), "SELECT * FROM `users` WHERE `Clan` = '%d'", clanid);
    new Cache:result = mysql_query(SQL, szQuery), idwtf;
    for(new i, j = cache_num_rows(); i != j; ++i)
	{
		membrii++;
        cache_get_value_int(i, "PlayerID", idwtf);
 		new szQuery2[256];
		mysql_format(SQL, szQuery2, sizeof(szQuery2), "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `PlayerID`='%d'", idwtf);
	    mysql_tquery(SQL, szQuery2, "","");
    }
    cache_delete(result);
	format(string, sizeof(string), "Ai sters clanul cu succes! [%d membri au fost scosi]", membrii);
	SCM(playerid, COLOR_YELLOW, string);
	mysql_format(SQL, string, sizeof(string),"DELETE FROM `clans` WHERE `clanID`='%d'",clanid);
	mysql_tquery(SQL, string, "","");
	return 1;
}
//==============================================================================
CMD:ip(playerid, params[])
{
	new id, query[MAX_STRING], string[256];
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"d",id)) return SCM(playerid,COLOR_WHITE,"{B8DBFF}Folosire: /ip [playerid]");
	if(NOON(id));
	format(string, sizeof(string), "Name\tLevel\tLast Login\n");
	format(query, sizeof(query),"SELECT * FROM `users` WHERE `IP` = '%s'",PlayerInfo[id][IP]);
	new Cache:result = mysql_query(SQL, query);
	new name[MAX_PLAYER_NAME], level, ip, last[20];
	for(new i, j = cache_num_rows(); i != j; ++i)
	{
		ip++;
		cache_get_value(i, "name", name, MAX_PLAYER_NAME);
		cache_get_value_int(i, "Level", level);
		cache_get_value(i, "lastOn", last, 20);
		format(string, sizeof(string),"%s%s\t%d\t%s\n",string,name,level,last);
	}
	cache_delete(result);
	new infostring[128];
	format(infostring, sizeof(infostring), "{ffff00}Sunt %d conturi create pe acest IP", ip);
	SPD(playerid,DIALOG_NULL,DIALOG_STYLE_TABLIST_HEADERS,infostring,string,"Ok","");
	return 1;
}
//==============================================================================
CMD:blockcmd(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(isnull(params) || strcmp(params, "blockcmd", true) == 0) return SCM(playerid,COLOR_WHITE,"{B8DBFF}Folosire: /blockcmd [command]");
	if(GetSVarInt(params) == 1)
	{
		SetSVarInt(params, 0);
		format(string,sizeof(string),"Comanda [/%s] a fost deblocata cu succes!",params);
		SCM(playerid,COLOR_ALLDEPT,string);
	}
	else
	{
		SetSVarInt(params, 1);
		format(string,sizeof(string),"Comanda [/%s] a fost blocata cu succes!",params);
		SCM(playerid,COLOR_ALLDEPT,string);
	}
	return 1;
}
//==============================================================================
CMD:work(playerid, params[])
{
	if(JobCar[playerid][PlayerInfo[playerid][pJob]] != -1) return SCM(playerid,COLOR_YELLOW2,"Muncesti deja, foloseste /stopwork pentru a te opri.");
	switch(PlayerInfo[playerid][pJob])
	{
		case 0: SCM(playerid,COLOR_YELLOW2,"Nu ai un job.");
		case 1: SCM(playerid,COLOR_YELLOW2,"La acest job poti folosi doar comanda /find.");
		case 2:
		{
			if(!IsPlayerInRangeOfPoint(playerid, 8, -79.7078,-8.1233,2.8953))
			{
				SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda aici, du-te la checkpoint.");
				SetPlayerCheckpointEx(playerid, -79.7078,-8.1233,2.8953, 6);
				return 1;
			}
			foreach(new i: Player) {
				if(GetDistanceBetweenPlayers(playerid, i) < 4 && playerid != i) return SCM(playerid,COLOR_YELLOW2,"Indeparteaza-te de orice jucator.");
			}
			if(AreFaina[playerid] < 1)
			{
				SCM(playerid,COLOR_JOB,"INFO: Comenzi disponibile pentru acest job: /stopwork.");
				JobCar[playerid][2] = CreateVehicleEx(531,-79.7078,-8.1233,2.8953,261.8765,-1,-1,-1);
				PutPlayerInVehicleEx(playerid, JobCar[playerid][2], 0);
				SetVehicleDoorsState(JobCar[playerid][2], true);
				StaticVeh[JobCar[playerid][2]][svJob] = 2;
				gCarLock[JobCar[playerid][2]] = 1;
				farmerc[playerid] = 1;
				farmertime[playerid] = 120;
				KillTimer_(JobTimer[playerid]);
				JobWorking[playerid] = 1;
			}
			else return SCM(playerid, COLOR_JOB, "Vinde faina inainte de a munci din nou.");
		}
		case 3:
		{
			if(!IsPlayerInRangeOfPoint(playerid, 8, 2091.9070,-111.7285,-0.1644))
			{
				SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda aici, du-te la checkpoint.");
				SetPlayerCheckpointEx(playerid, 2091.9070,-111.7285,-0.1644, 6);
				return 1;
			}
			foreach(new i: Player) {
				if(GetDistanceBetweenPlayers(playerid, i) < 4 && playerid != i) return SCM(playerid,COLOR_YELLOW2,"Indeparteaza-te de orice jucator.");
			}
			SCM(playerid,COLOR_JOB,"INFO: Comenzi disponibile pentru acest job: /stopwork.");
			JobCar[playerid][3] = CreateVehicleEx(452,2091.9070,-111.7285,-0.1644,126.5515,-1,-1,-1);
			PutPlayerInVehicleEx(playerid, JobCar[playerid][3], 0);
			SetVehicleDoorsState(JobCar[playerid][3], true);
			StaticVeh[JobCar[playerid][3]][svJob] = 3;
			gCarLock[JobCar[playerid][3]] = 1;
			SetPlayerCheckpointEx(playerid, 2074.420166, -169.028945, -0.488348, 5.0);
			CP[playerid] = 5;
			KillTimer_(JobTimer[playerid]);
			JobWorking[playerid] = 1;
		}
		case 4:
		{
			if(!IsPlayerInRangeOfPoint(playerid, 8.5, 874.7173,-1242.9257,15.1708))
			{
				SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda aici, du-te la checkpoint.");
				SetPlayerCheckpointEx(playerid, 874.7173,-1242.9257,15.1708, 6);
				return 1;
			}
			foreach(new i: Player) {
				if(GetDistanceBetweenPlayers(playerid, i) < 4 && playerid != i) return SCM(playerid,COLOR_YELLOW2,"Indeparteaza-te de orice jucator.");
			}
			SCM(playerid,COLOR_JOB,"INFO: Comenzi disponibile pentru acest job: /tow, /refill, /repair, /duty, /stopwork.");
			JobCar[playerid][4] = CreateVehicleEx(525,874.7173,-1242.9257,15.1708,295.3485,-1,-1,-1);
			PutPlayerInVehicleEx(playerid, JobCar[playerid][4], 0);
			SetVehicleDoorsState(JobCar[playerid][4], true);
			StaticVeh[JobCar[playerid][4]][svJob] = 4;
			gCarLock[JobCar[playerid][4]] = 1;
			KillTimer_(JobTimer[playerid]);
			JobWorking[playerid] = 1;
		}
		case 5:
		{
			if(!IsPlayerInRangeOfPoint(playerid, 8, 2115.8286,-1776.6488,13.3911))
			{
				SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda aici, du-te la checkpoint.");
				SetPlayerCheckpointEx(playerid, 2115.8286,-1776.6488,13.3911, 6);
				return 1;
			}
			foreach(new i: Player) {
				if(GetDistanceBetweenPlayers(playerid, i) < 4 && playerid != i) return SCM(playerid,COLOR_YELLOW2,"Indeparteaza-te de orice jucator.");
			}
			SCM(playerid,COLOR_JOB,"INFO: Comenzi disponibile pentru acest job: /pizza, /restock, /stopwork.");
			JobCar[playerid][5] = CreateVehicleEx(448,2115.8286,-1776.6488,13.3911,30.9136,-1,-1,-1);
			PutPlayerInVehicleEx(playerid, JobCar[playerid][5], 0);
			SetVehicleDoorsState(JobCar[playerid][5], true);
			StaticVeh[JobCar[playerid][5]][svJob] = 5;
			gCarLock[JobCar[playerid][5]] = 1;
			KillTimer_(JobTimer[playerid]);
			JobWorking[playerid] = 1;
		}
		case 6:
		{
			if(!IsPlayerInRangeOfPoint(playerid, 8, -72.3775,-1115.0253,2.0069))
			{
				SCM(playerid,COLOR_YELLOW2,"Nu poti folosi aceasta comanda aici, du-te la checkpoint.");
				SetPlayerCheckpointEx(playerid, -72.3775,-1115.0253,2.0069, 6);
				return 1;
			}
			foreach(new i: Player) {
				if(GetDistanceBetweenPlayers(playerid, i) < 4 && playerid != i) return SCM(playerid,COLOR_YELLOW2,"Indeparteaza-te de orice jucator.");
			}
			SCM(playerid,COLOR_JOB,"INFO: Comenzi disponibile pentru acest job: /stopwork.");
			JobCar[playerid][6] = CreateVehicleEx(403,-72.3775,-1115.0253,2.0069,126.0161,-1,-1,-1);
			PutPlayerInVehicleEx(playerid, JobCar[playerid][6], 0);
			SetVehicleDoorsState(JobCar[playerid][6], true);
			StaticVeh[JobCar[playerid][6]][svJob] = 6;
			gCarLock[JobCar[playerid][6]] = 1;
			KillTimer_(JobTimer[playerid]);
			JobWorking[playerid] = 1;
		}
		default: SCM(playerid,COLOR_YELLOW2,"Aceasta comanda nu este disponibila la acest job.");
	}
	return 1;
}
//==============================================================================
CMD:stopwork(playerid, params[])
{
	if(JobCar[playerid][PlayerInfo[playerid][pJob]] == -1) return SCM(playerid,COLOR_YELLOW2,"Inca nu muncesti, foloseste /work pentru a munci.");
	switch(PlayerInfo[playerid][pJob])
	{
		case 0: SCM(playerid,COLOR_YELLOW2,"Nu ai un job.");
		case 2:
		{
			if(farmerc[playerid] == 1)
			{
				farmerc[playerid] = 0;
				farmertime[playerid] = 0;
				PlayerTextDrawHide(playerid, FarmJob);
				PlayerTextDrawHide(playerid, FarmBox);
				PlayerTextDrawHide(playerid, FarmTime);
				PlayerTextDrawHide(playerid, FarmSpeed);
				PlayerTextDrawHide(playerid, FarmWanted);
				DestroyVehicleEx(JobCar[playerid][2]);
				StaticVeh[JobCar[playerid][2]][svJob] = 0;
				gCarLock[JobCar[playerid][2]] = 0;
				JobCar[playerid][2] = -1;
				SCM(playerid, COLOR_JOB, "Ai oprit munca, poti folosi /work pentru a munci din nou.");
				JobWorking[playerid] = 0;
				KillTimer_(JobTimer[playerid]);
			}
		}
		case 3:
		{
			DisablePlayerCheckpointEx(playerid);
			DestroyVehicleEx(JobCar[playerid][3]);
			StaticVeh[JobCar[playerid][3]][svJob] = 0;
			gCarLock[JobCar[playerid][3]] = 0;
			JobCar[playerid][3] = -1;
			SCM(playerid, COLOR_JOB, "Ai oprit munca, poti folosi /work pentru a munci din nou.");
			JobWorking[playerid] = 0;
			KillTimer_(JobTimer[playerid]);
		}
		case 4:
		{
			DisablePlayerCheckpointEx(playerid);
			DestroyVehicleEx(JobCar[playerid][4]);
			StaticVeh[JobCar[playerid][4]][svJob] = 0;
			gCarLock[JobCar[playerid][4]] = 0;
			JobCar[playerid][4] = -1;
			SCM(playerid, COLOR_JOB, "Ai oprit munca, poti folosi /work pentru a munci din nou.");
			JobWorking[playerid] = 0;
			KillTimer_(JobTimer[playerid]);
		}
		case 5:
		{
			PlayerTextDrawHide(playerid, PizzaText);
			PlayerTextDrawHide(playerid, PizzaSimbol);
			Pizza[playerid] = 0;
			DisablePlayerCheckpointEx(playerid);
			DestroyVehicleEx(JobCar[playerid][5]);
			StaticVeh[JobCar[playerid][5]][svJob] = 0;
			gCarLock[JobCar[playerid][5]] = 0;
			JobCar[playerid][5] = -1;
			SCM(playerid, COLOR_JOB, "Ai oprit munca, poti folosi /work pentru a munci din nou.");
			JobWorking[playerid] = 0;
			KillTimer_(JobTimer[playerid]);
		}
		case 6:
		{
			DisablePlayerCheckpointEx(playerid);
			DestroyVehicleEx(JobCar[playerid][6]);
			StaticVeh[JobCar[playerid][6]][svJob] = 0;
			gCarLock[JobCar[playerid][6]] = 0;
			JobCar[playerid][6] = -1;
			Trucker[playerid] = 0;
			Trucker2[playerid] = 0;
			Trucker3[playerid] = 0;
			Trucker4[playerid] = 0;
	        DestroyVehicleEx(viddd[playerid]);
	        viddd[playerid] = 0;
	        TruckID[playerid] = 0;
			SCM(playerid, COLOR_JOB, "Ai oprit munca, poti folosi /work pentru a munci din nou.");
			JobWorking[playerid] = 0;
			KillTimer_(JobTimer[playerid]);
		}
		default: SCM(playerid,COLOR_YELLOW2,"Aceasta comanda nu este disponibila la acest job.");
	}
	return 1;
}
//==============================================================================
CMD:createbizz(playerid, params[]) 
{
    if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
    new type, value, level, idd, Float:Pos[3], query[450];
    if(sscanf(params,"iiii",type,value,level,idd)) 
	{
        SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /createbizz [type] [value] [level] [bizzID]");
        SCM(playerid, COLOR_GRAD2, "Coduri disponibile: | 1 = Banca | 2 = Gun Shop | 3 = Club | 4 = Sex Shop | 5 = Casino | 6 = 24/7");
        SCM(playerid, COLOR_GRAD2, "Coduri disponibile: | 7 = Burger Shot | 8 = Gym | 9 = Pizza | 11 = Binco | 14 = Cluckin Bell");
        return 1;
    }  
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    switch(type) 
	{
        case 1: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '2306', '-16', '27', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 2306;
			BizzInfo[idd][bExitY] = -16;
			BizzInfo[idd][bExitZ] = 27;
        }
        case 2: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '316', '-142', '1000', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 316;
			BizzInfo[idd][bExitY] = -142;
			BizzInfo[idd][bExitZ] = 1000;
        }
        case 3: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '-794.942', '490.782', '1376.2', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = -794.942;
			BizzInfo[idd][bExitY] = 490.782;
			BizzInfo[idd][bExitZ] = 1376.2;
        }      
        case 4: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '-100.403', '-24.3921', '1000.72', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = -100.403;
			BizzInfo[idd][bExitY] = -24.3921;
			BizzInfo[idd][bExitZ] = 1000.72;
        }      
        case 5: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '2015.45', '1017.09', '996.875', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 2015.45;
			BizzInfo[idd][bExitY] = 1017.09;
			BizzInfo[idd][bExitZ] = 996.875;
        }      
        case 6: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '-31.0246', '-91.3283', '1003.55', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = -31.0246;
			BizzInfo[idd][bExitY] = -91.3283;
			BizzInfo[idd][bExitZ] = 1003.55;
        }      
        case 7: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '363.134', '-74.8469', '1001.51', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 363.134;
			BizzInfo[idd][bExitY] = -74.8469;
			BizzInfo[idd][bExitZ] = 1001.51;
        }      
        case 8: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '772.112', '-3.89865', '1000.73', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 772.112;
			BizzInfo[idd][bExitY] = -3.89865;
			BizzInfo[idd][bExitZ] = 1000.73;
        }      
        case 9: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '372.54', '-133.009', '1001.49', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 372.54;
			BizzInfo[idd][bExitY] = -133.009;
			BizzInfo[idd][bExitZ] = 1001.49;
        }      
        case 11: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '207.738', '-109.02', '1005.13', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 207.738;
			BizzInfo[idd][bExitY] = -109.02;
			BizzInfo[idd][bExitZ] = 1005.13;
        }      
        case 14: 
		{
            mysql_format(SQL, query, sizeof(query), "INSERT INTO `business` (`bExteriorPosX`, `bExteriorPosY`, `bExteriorPosZ`, `bInteriorPosX`, `bInteriorPosY`, `bInteriorPosZ`, `bLevel`, `bPrice`, `bType`, `bInteriorID`) VALUES ('%f', '%f', '%f', '364.942', '-11.0787', '1001.85', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
            BizzInfo[idd][bExitX] = 364.942;
			BizzInfo[idd][bExitY] = -11.0787;
			BizzInfo[idd][bExitZ] = 1001.85;
        }
    }
    mysql_tquery(SQL, query);
	//--------------------------------------------------------------
    BizzInfo[idd][bEntranceX] = Pos[0];
    BizzInfo[idd][bEntranceY] = Pos[1];
    BizzInfo[idd][bEntranceZ] = Pos[2];
    BizzInfo[idd][bPrice] = value;
    BizzInfo[idd][bLevel] = level;   
    BizzInfo[idd][bType] = type;   
    BizzInfo[idd][bInterior] = BizInteriorID(type);
	//--------------------------------------------------------------
	OnPropUpdate("bizz", idd);
	//--------------------------------------------------------------
    new string[128];
    format(string, sizeof(string), "[@@ %d @@]%f, %f, %f, [$%s, %d lvl, %d int, %d type]", idd, Pos[0], Pos[1], Pos[2], FormatNumber(value), level, BizInteriorID(type), type);
    SCM(playerid, COLOR_YELLOW, string);
    return 1;
}
//==============================================================================
CMD:destroycar(playerid, params[])
{
	if(IsPlayerScripter(playerid))
	{
		new car, string[128];
		if(sscanf(params,"d",car)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /destroycar [carID]");
		if(!IsValidVehicle(car)) return SCM(playerid,COLOR_YELLOW2,"Vehicul invalid!");
		format(string, sizeof(string), "AdmCmd: %s a distrus vehiculul %s (ID: %d).", GetName(playerid), GetVehicleName(car), car);
		SendAdminMessage(string, 1);
		DestroyVehicleEx(car);
	}
	else return SCM(playerid, COLOR_YELLOW2, NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:savec(playerid, params[])
{
	if(!IsPlayerScripter(playerid)) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x,y,z);
	if(fexist("utils/CP.txt"))
	{
		new string[MAX_STRING];
		format(string, sizeof(string), "SetPlayerCheckpointEx(playerid, %f, %f, %f, 5.0);\n", x,y,z);
		new File:log = fopen("utils/CP.txt", io_append);
		fwrite(log, string);
		fclose(log);
		SCM(playerid,COLOR_YELLOW2,string);
	}
	return 1;
}
//==============================================================================
CMD:vote(playerid, params[])
{
	new string[MAX_STRING], jucatori = 0;
	if(Votare == 0) return SCM(playerid,COLOR_YELLOW2,"Nu este activa nicio votare.");
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid,COLOR_YELLOW2,"Poti vota un jucator de la level 3+.");
	for(new i = 0; i < 5; i++)
	{
		if(VoteInfo[i][VotedPlayer] > 0)
		{
			format(string, sizeof(string), "%s%s - %d voturi\n",string,VoteInfo[i][ProposePlayer],VoteInfo[i][Votes]);
			jucatori++;
		}
	}
	if(jucatori == 0) return SCM(playerid,COLOR_GRAD2,"Momentan nu sunt jucatori propusi pentru votare!");
	SPD(playerid,DIALOG_VOTE,DIALOG_STYLE_LIST,"Vote:",string,"Voteaza","Inchide");
	return 1;
}
//==============================================================================
CMD:propose(playerid, params[])
{
	if(Votare == 0) return SCM(playerid,COLOR_YELLOW2,"Nu este activa nicio votare.");
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid,COLOR_YELLOW2,"Poti propune un jucator de la level 5+.");
	if(PlayerInfo[playerid][pPropose] == 1) return SCM(playerid,COLOR_YELLOW2,"Ai propus deja pe cineva, asteapta rezultatul voturilor.");
	SPD(playerid,DIALOG_PROPOSE,DIALOG_STYLE_INPUT,"Propune:","Scrie numele jucatorului pe care vrei sa-l propui la vot.","Propune","Inchide");
	return 1;
}
//==============================================================================
CMD:startvote(playerid, params[])
{
	new time, string[248], mesaj[128];
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(sscanf(params,"ds[128]",time,mesaj)) return SCM(playerid, COLOR_WHITE, "{B8DBFF}Folosire: /startvote [minute] [mesaj]");
		if(time > 1 && Votare == 0)
		{
			Votare = 1;
			format(string,sizeof(string),"(( %s %s: %s ))",NumeAdmin(PlayerInfo[playerid][pAdmin]),GetName(playerid),mesaj);
			SCMAll(COLOR_OOC, string);
			SCMAll(COLOR_LIGHTGREEN, "ANUNT: O noua votare a inceput, foloseste [/propose] pentru a propune pe cineva si [/vote] pentru a vota.");
			format(string,sizeof(string),"ANUNT: Votarea va lua sfarsit in %d minute. Mult succes!",time);
			SCMAll(COLOR_LIGHTGREEN, string);
			SetTimer_("FinishVote", time * 60000, time * 60000, 1);
		}
		else return SCM(playerid,COLOR_YELLOW2,"Timpul este invalid sau este deja o votare activa.");
	}
	else return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	return 1;
}
//==============================================================================
CMD:trade(playerid, params[])
{
	new id, item[16], diff, string[256];
	if(sscanf(params, "s[16]ui", item, id, diff)) 
	{
		SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /trade [nume] [playerid/PartOfName] [diferenta (platita de tine)]");
		SCM(playerid, COLOR_WHITE, "Nume disponibile: house, bizz, car");
		return 1;
	}
	if(NOON(id));
	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Acel player nu este conectat.");
	if(GetDistanceBetweenPlayers(playerid,id) > 7) return SCM(playerid, COLOR_GREY, "Nu esti langa acel player");
	if(diff < 1 || diff > 150000000) return SCM(playerid, COLOR_GRAD1, "Diferenta trebuie sa fie cuprinsa intre 1$ si 15,000,000$.");
	if(strcmp(item, "house", true) == 0)
	{	
		new bouse = PlayerInfo[playerid][pHouseKey], bouse2 = PlayerInfo[id][pHouseKey];
		if(bouse != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], HouseInfo[bouse][hOwner], true) == 0)
		{
			if(bouse2 != 255 && strcmp(PlayerInfo[id][pNamePlayer], HouseInfo[bouse2][hOwner], true) == 0)
			{
				SetPVarInt(id, "TradePlayer", playerid);
				SetPVarInt(id, "TradeMoney", diff);
				SetPVarInt(id, "TradeType", 1);
				format(string, sizeof(string), "%s doreste sa faceti schimb de case (%d) (diferenta din partea lui: $%s). [/accept trade %d]", GetName(playerid), PlayerInfo[playerid][pHouseKey], FormatNumber(diff), playerid);
				SCM(id, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "I-ai oferit lui %s o oferta de schimbare a caselor (%d) (diferenta din partea ta: $%s).", GetName(id), PlayerInfo[id][pHouseKey], FormatNumber(diff));
				SCM(playerid, COLOR_LIGHTBLUE, string);	
			}
			else return SCM(playerid, COLOR_GRAD1, "Acel player nu are o casa!");
		}
		else return SCM(playerid, COLOR_GREY, "Nu ai o casa!");
	}
	else if(strcmp(item, "bizz", true) == 0)
	{	
		new bouse = PlayerInfo[playerid][pBizzKey], bouse2 = PlayerInfo[id][pBizzKey];
		if(bouse != 255 && strcmp(PlayerInfo[playerid][pNamePlayer], BizzInfo[bouse][bOwner], true) == 0)
		{
			if(bouse2 != 255 && strcmp(PlayerInfo[id][pNamePlayer], BizzInfo[bouse2][bOwner], true) == 0)
			{
				SetPVarInt(id, "TradePlayer", playerid);
				SetPVarInt(id, "TradeMoney", diff);
				SetPVarInt(id, "TradeType", 2);
				format(string, sizeof(string), "%s doreste sa faceti schimb de afaceri (%d) (diferenta din partea lui: $%s). [/accept trade %d]", GetName(playerid), PlayerInfo[id][pBizzKey], FormatNumber(diff), playerid);
				SCM(id, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "I-ai oferit lui %s o oferta de schimbare a afacerei (%d) (diferenta din partea ta: $%s).", GetName(id), PlayerInfo[playerid][pBizzKey], FormatNumber(diff));
				SCM(playerid, COLOR_LIGHTBLUE, string);	
			}
			else return SCM(playerid, COLOR_GRAD1, "Acel player nu are o afacere!");
		}
		else return SCM(playerid, COLOR_GREY, "Nu ai o afacere!");	
	}	
	else if(strcmp(item, "car", true) == 0)
	{
		new carID, pcarID;
		if(GetPlayerVehicles(playerid) == 0 || GetPlayerVehicles(id) == 0) return SCM(playerid,COLOR_YELLOW2,"Tu sau acel jucator nu aveti niciun vehicul personal.");
		if(!IsPlayerInAnyVehicle(playerid) || !IsPlayerInAnyVehicle(id)) return SCM(playerid,COLOR_YELLOW2,"Tu sau acel jucator nu sunteti intr-un vehicul!");
		for(new i = 0; i < 10; i++)
		{
			if(GetPlayerVehicleID(playerid) == CarInfo[PlayerInfo[playerid][pCarKey][i]][cSpawned])
			{
				carID = PlayerInfo[playerid][pCarKey][i];
				break;
			}
		}
		for(new i = 0; i < 10; i++)
		{
			if(GetPlayerVehicleID(id) == CarInfo[PlayerInfo[id][pCarKey][i]][cSpawned])
			{
				pcarID = PlayerInfo[id][pCarKey][i];
				break;
			}
		}
		SetPVarInt(id, "TradePlayer", playerid);
		SetPVarInt(id, "TradeMoney", diff);
		SetPVarInt(id, "TradeType", 3);
		SetPVarInt(id, "TradeVehicle", pcarID);
		SetPVarInt(playerid, "TradeVehicle", carID);
		format(string, sizeof(string), "%s doreste sa faceti schimb de masini (%s) (diferenta din partea lui: $%s). [/accept trade %d]", GetName(playerid), CarInfo[carID][cName], FormatNumber(diff), playerid);
		SCM(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "I-ai oferit lui %s o oferta de schimbare a masinii (%s) (diferenta din partea ta: $%s).", GetName(id), CarInfo[pcarID][cName], FormatNumber(diff));
		SCM(playerid, COLOR_LIGHTBLUE, string);		
	}		
	else return SCM(playerid, COLOR_YELLOW2, "Nume invalid!");
	return 1;
}
//==============================================================================
alias:checkvehicles("cv");
CMD:checkvehicles(playerid, params[]) 
{
	new id, string[200];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_YELLOW2,NEAUTORIZAT);
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /checkvehicles [playerid/PartOfName]");
	if(NOON(id));
	format(string, sizeof(string), "-- %s's (%d) vehicles --", GetName(id), id);
	SCM(playerid, COLOR_WHITE, string);
	for(new i = 0; i < 10; i++)
	{
		if(PlayerInfo[id][pCarKey][i] > 0)
		{
			new car = PlayerInfo[id][pCarKey][i];	
			format(string, sizeof(string), "Slot: [%d] | Vehicul: %s [%d] | ID: [%d] | Timp: [%s minute] | Colors: [%d] [%d]", i+1, CarInfo[car][cName], car, CarInfo[car][cSpawned], CalculeazaTimp(CarInfo[car][cTime]), CarInfo[car][cColorOne], CarInfo[car][cColorTwo]);
			SCM(playerid, COLOR_LIGHTGREEN, string);	
		}
	}
	return 1;
}
//==============================================================================
CMD:creategun(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 9) return SCM(playerid, COLOR_YELLOW2, "Eroare: Nu ai jobul Arms Dealer!");
	if(PlayerInfo[playerid][pMatsSkill] < 4) return SCM(playerid, COLOR_YELLOW2, "Eroare: Nu ai skill 4+!");	
	new result[16];
	if(sscanf(params, "s[16]", result))
	{
		SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /creategun [gun name]");
		SCM(playerid, COLOR_GRAD2, "Deagle(1000), M4(2000), AK47(1500), Combat(5000), Rifle(3000).");
		return 1;
	}	
	if(strcmp(result,"deagle",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] < 1000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 1000;
		pUpdate(playerid, pMatsx);
		GivePlayerWeaponEx(playerid, 24, 50);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma Deagle cu 1000 de materiale.");
	}
	else if(strcmp(result,"m4",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] < 2000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 2000;
		pUpdate(playerid, pMatsx);
		GivePlayerWeaponEx(playerid, 31, 120);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma M4 cu 2000 de materiale.");
	}	
	else if(strcmp(result,"ak47",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] < 1500) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 1500;
		pUpdate(playerid, pMatsx);
		GivePlayerWeaponEx(playerid, 30, 120);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma AK47 cu 1500 de materiale.");
	}		
	else if(strcmp(result,"combat",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] < 5000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 5000;
		pUpdate(playerid, pMatsx);
		GivePlayerWeaponEx(playerid, 27, 20);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma Combat-Shotgun cu 1500 de materiale.");
	}		
	else if(strcmp(result,"rifle",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] < 3000) return SCM(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
		PlayerInfo[playerid][pMats] -= 3000;
		pUpdate(playerid, pMatsx);
		GivePlayerWeaponEx(playerid, 33, 120);
		SCM(playerid, COLOR_YELLOW, "Ai creat arma Rifle cu 1500 de materiale.");
	}		
	else SCM(playerid, COLOR_GRAD2, "Deagle (1000), M4 (2000), AK47 (1500), Combat (5000), Rifle(3000).");
	return 1;
}
//==============================================================================
CMD:speed(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(GetPVarInt(playerid, "EnableBoast") == 0)
	{
		SetPVarInt(playerid, "EnableBoast", 1);
		SCM(playerid, COLOR_WHITE, "Speed boost: {128C14}Enable");
	}
	else
	{
		SetPVarInt(playerid, "EnableBoast", 0);
		SCM(playerid, COLOR_WHITE, "Speed boost: {D60F0F}Disable");
	}
	return 1;
}
//==============================================================================
CMD:restock(playerid, params[])
{
	new subcommand[16], scmd_params[32];
    if(sscanf(params, "s[16]S()[32]", subcommand, scmd_params)) return SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /restock [pizza/dealership/business]");
	new string[128];
    if(strcmp(subcommand, "business", true) == 0)
    {
    	if(PlayerInfo[playerid][pBizzKey] == 255) return SCM(playerid, COLOR_YELLOW2,"Ai nevoie de o afacere pentru a folosi aceasta optiune!");
        new val;
        if(sscanf(scmd_params, "i", val)) return SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /restock business [amount]");
        if(val < 100 || val > 10000) return SCM(playerid, COLOR_GRAD2,"Valoarea resurselor trebuie sa fie cuprinsa intre 100 si 10.000.");
		SetPVarInt(playerid, "BizzStock", val);
		SetPlayerCheckpointEx(playerid, -2433.561035, 2293.262451, 4.984375, 10.0);
		CP[playerid] = 27;
		SFM(playerid, COLOR_YELLOW, "%s trebuie sa mergi la checkpoint pentru a-ti lua resursele.",GetName(playerid));
		SFM(playerid, COLOR_YELLOW, "Cand vei ajunge la checkpoint vei vedea suma de bani necesara pentru %d resurse.",val);
    }
	else if(strcmp(subcommand, "dealership", true) == 0)
	{
		new vehicle, val;
        if(sscanf(scmd_params, "ii", vehicle, val)) return SCM(playerid, COLOR_GREY, "{B8DBFF}Folosire: /restock dealership [vehicle model] [stock]");
		SetPVarInt(playerid, "BizzStock", val);
	}
	else if(strcmp(subcommand, "pizza", true) == 0)
	{
		if(PlayerInfo[playerid][pJob] == 5 && BizzEntered[playerid] != -1 && BizzInfo[BizzEntered[playerid]][bType] == 9 && IsPlayerInRangeOfPoint(playerid,3.0,371.8752,-119.0085,1001.4922))
		{
			if(JobCar[playerid][5] == -1) return SCM(playerid,COLOR_YELLOW2,"Mai intai trebuie sa folosesti /work pentru a avea un vehicul.");
			Pizza[playerid] = 5;
			ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1,1);
			SetPlayerAttachedObject(playerid, 9, 1582, 1, 0.002953, 0.469660, -0.009797, 269.851104, 88.443557, 0.000000, 0.804894, 1.000000, 0.822361);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SCM(playerid,COLOR_WHITE," Ai luat {1a9b1e}5 pizza {ffffff}din stoc, du-le la vehiculul tau!");
			//--------------------------------------------------------------
			format(string,sizeof(string),"Pizza: ~r~%d~w~ /~g~ 5",Pizza[playerid]);
			PlayerTextDrawSetString(playerid,PizzaText,string);
			PlayerTextDrawShow(playerid,PizzaText);
			PlayerTextDrawShow(playerid,PizzaSimbol);
		}
		else return SCM(playerid,COLOR_YELLOW2,"Nu ai jobul Pizza Boy sau nu esti in bizz-ul corespunzator pentru a folosi aceasta comanda.");
	}
	else return SCM(playerid,COLOR_YELLOW2,"Nume invalid!");
	return 1;
}
//==============================================================================
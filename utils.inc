// =============================================================================
// utils.inc
//
// Author: SherKan
//
// You are allowed to edit this script
// You are not allowed to sell this script
//
// Please, don't remove the credits
// =============================================================================
#if defined _utils_included
	#endinput
#endif
#define _utils_included
#pragma library utils
// =============================================================================
#include <YSI\y_ini> // by Y_Less
#include <YSI\y_hooks> // by Y_Less
// =============================================================================
#define COLOR_COMMAND			0xB8DBFFFF
#define COLOR_VEHICLE			0xFFB870FF
#define COLOR_AUCTION			0x8470ffFF
#define COLOR_EVENT				0x6EF83CFF
#define COLOR_QUEST				0xF0E21FFF
#define COLOR_BLACK 			0x000000FF
#define COLOR_FRED 				0xFF0000C8
#define COLOR_BODY 				0xFDE39DAA
#define COLOR_SYSTEM 			0xB2EBE0AA
#define COLOR_SCRIPTER 			0x4682B4FF
#define COLOR_GRAD1 			0xB4B5B7FF
#define COLOR_GRAD2 			0xBFC0C2FF
#define COLOR_GRAD3 			0xCBCCCEFF
#define COLOR_GRAD4 			0xD8D8D8FF
#define COLOR_GRAD5 			0xE3E3E3FF
#define COLOR_GRAD6 			0xF0F0F0FF
#define COLOR_GREY 				0xAFAFAFAA
#define COLOR_GREEN 			0x33AA33AA
#define COLOR_RED 				0xAA3333AA
#define COLOR_LIGHT_RED 		0xFF0000FF
#define COLOR_ACHAT 			0x7499FAFF
#define COLOR_LIGHTBLUE 		0x33CCFFAA
#define COLOR_LIGHTGREEN 		0x9ACD32AA
#define COLOR_YELLOW 			0xFFFF00AA
#define COLOR_YELLOW2 			0xF5DEB3AA
#define COLOR_WHITE 			0xFFFFFFFF
#define COLOR_FADE1 			0xE6E6E6E6
#define COLOR_FADE2 			0xC8C8C8C8
#define COLOR_FADE3 			0xAAAAAAAA
#define COLOR_FADE4 			0x8C8C8C8C
#define COLOR_FADE5 			0x6E6E6E6E
#define COLOR_PURPLE 			0xC2A2DAAA
#define COLOR_DBLUE 			0x2641FEAA
#define COLOR_ALLDEPT 			0xFF8282AA
#define COLOR_NEWS 				0xEFC6FFFF
#define COLOR_OOC 				0xB1C8FBAA
#define COLOR_ORANGE 			0xFF9900AA
#define COLOR_LICENSES 			0x0080C0FF
#define TEAM_HIT_COLOR 			0xFFFFFF00
#define TEAM_BLUE_COLOR 		0x8D8DFF00
#define TEAM_RUSSIAN_COLOR 		0x88572499
#define TEAM_AZTECAS_COLOR 		0x01FCFFC8
#define TEAM_GROVE_COLOR 		0x00D900C8
#define TEAM_VAGOS_COLOR 		0xFFC801C8
#define TEAM_BALLAS_COLOR 		0xD900D999
#define TEAM_CYAN_COLOR 		0xFF8282AA
#define COLOR_SPEC 				0xBFC0C200
#define COLOR_GROVE 			0x57CC13ED
#define COLOR_BLOOD 			0xFF0000FF
#define COLOR_HITMAN 			0xA5443BF3
#define COLOR_MAYOR 			0xB3F856FF
#define COLOR_MEDIC 			0xFF6347AA
#define COLOR_PD 				0x2641FEAA
#define COLOR_FBI 				0x0615C6FF
#define COLOR_NG 				0x1E519DAA
#define COLOR_BLUE 				0x2641FEAA
#define COLOR_LIGHT_BLUE 		0x9FB1EEAA
#define COLOR_JOB				0x2298BFFF
//--------------------------------------------------------------
#if !defined MAX_STRING
    #define MAX_STRING			(255)
#endif
//--------------------------------------------------------------
#define GetVehicleKM(%0) 		km_Info[1][%0]
#define ResetVehicleKM(%0) 		km_Info[1][%0] = 0
// =============================================================================
native SetTimer_(const func[], const delay, const interval, const count); // Timer Fixes
native SetTimerEx_(const func[], const delay, const interval, const count, const format[], {Float,_}:...); // Timer Fixes
native KillTimer_(timer) = KillTimer; // Timer Fixes
#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif
// =============================================================================
// These different functions
// =============================================================================
static stock bool:g_HasNeons[MAX_VEHICLES char], g_NeonObject[MAX_VEHICLES][2], SecundeVideo[MAX_PLAYERS];
new km_Info[2][MAX_PLAYERS], YouTubeLink[MAX_PLAYERS][16], engine, lights, alarm, doors, bonnet, boot, objective;
//--------------------------------------------------------------
enum e_VENDING_MACHINES
{
	Float:e_VENDING_MACHINE_X,
	Float:e_VENDING_MACHINE_Y,
	Float:e_VENDING_MACHINE_Z
};
//--------------------------------------------------------------
enum E_PUMP
{
	Float:pumpX,
	Float:pumpY,
	Float:pumpZ,
	businessID
};
//--------------------------------------------------------------
enum zoneInfo
{
	bool:zExists,             // Is used to check wether a gang zone exists or not.
	bool:zIsUsingNumbers,     // Is used to check wether a gang zone is with numbers or not.
	bool:zIsUsingBorders,     // Is used to check wether a gang zone is with borders or not.
	Float:zPosCords[4],       // Holds gang zone coordinates.
	zMainID,                  // Holds the main gang zone ID.
	npart[5],                 // Holds gang zones IDs which were used to create the first number.
	npart2[5],                // Holds gang zones IDs which were used to create the second number.
	border[4]                 // Holds gang zones IDs which were used to create borders.
};
new zGangZones[MAX_GANG_ZONES][zoneInfo], zGangZonesCreated = 0;
//--------------------------------------------------------------
new const BadWords[][] = {
	"anus", "futu-ti", "sugeo", "matii", "fututi", "suge-o", "mortii", "fmm", "ma-ta", "nephrite", "bugged", "b-zone", "bzone", "muie",
	"dick", "pizda", "pulii", "dracu", "dracii", "mata", "sucker", "pula", "fuck", "fucker", "muie", "sugi"
};
//--------------------------------------------------------------
static stock Float:s_aVendingMachines[][e_VENDING_MACHINES] = {
	{2326.0273, -1645.9480, 14.8270},
	{2060.1038, -1898.4542, 13.5538},
	{1729.8389, -1943.8608, 13.5687},
	{1929.5480, -1772.3799, 13.5469},
	{1788.3971, -1369.2784, 15.7578},
	{2352.9934, -1357.0977, 24.3984},
	{1153.9095, -1460.9143, 15.7969},
	{200.2008, -107.6411, 1.5513},
	{1278.5946, 372.2171, 19.5547},
	{2320.0242, 2532.0378, 10.8203},
	{2086.5876, 2071.3574, 11.0579},
	{1519.3347, 1055.2349, 10.8203},
	{2503.1370, 1244.5089, 10.8203},
	{373.8246, -178.9297, 1000.6328},
	{2575.9084, -1284.4164, 1060.9844},
	{495.9450, -23.5309, 1000.6797},
	{501.8352, -2.2189, 1000.6797},
	{2224.4141, -1153.4738, 1025.7969},
	{2156.6990, 1606.7858, 999.9718},
	{2209.1143, 1607.1713, 999.9691},
	{2222.9924, 1606.8201, 999.9758},
	{-14.7329, 1176.1732, 19.5634},
	{-862.8334, 1537.4231, 22.5870},
	{-252.9273, 2597.9426, 62.8582},
	{-2419.5483, 985.9162, 45.2969},
	{-2419.5837, 984.5789, 45.2969},
	{-1349.3037, 492.3072, 11.1953},
	{-1981.6035, 142.6650, 27.6875},
	{-2005.6317, -490.8682, 35.5313},
	{-2034.4124, -490.8690, 35.5313},
	{-2063.2695, -490.8681, 35.5313},
	{-2092.0920, -490.8683, 35.5313},
	{-2119.7566, -423.4371, 35.5313},
	{-2119.4058, -422.2168, 35.5313},
	{-2097.2969, -397.5224, 35.5313},
	{-2068.5955, -397.5209, 35.5313},
	{-2039.8862, -397.5221, 35.5313},
	{-2011.1857, -397.5218, 35.5313},
	{-32.5050, -185.9060, 1003.5469},
	{-16.1550, -90.8514, 1003.5469},
	{-15.1533, -139.4374, 1003.5469},
	{-35.7115, -139.4262, 1003.5469},
	{-19.0527, -57.0465, 1003.5469},
	{-75.2803, 1227.9558, 19.7359},
	{-252.9929, 2599.7952, 62.8582},
	{-1455.1244, 2592.4136, 55.8359},
	{-1349.3669, 493.8326, 11.1953},
	{-2229.1858, 287.1634, 35.3203},
	{-33.9020, -186.0259, 1003.5469},
	{-17.5500, -90.9689, 1003.5469},
	{-16.4742, -139.5535, 1003.5469},
	{-36.1270, -57.1352, 1003.5469},
	{1634.0918, -2238.2810, 13.5078},
	{2480.8667, -1958.5234, 13.5830},
	{2140.2676, -1161.4753, 23.9922},
	{2153.8462, -1015.7134, 62.8837},
	{662.4010, -551.4146, 16.3359},
	{2271.7383, -77.2105, 26.5812},
	{2845.7246, 1294.2957, 11.3906},
	{1398.8699, 2223.3665, 11.0234},
	{1659.4425, 1722.1097, 10.8281},
	{2647.6428, 1128.9147, 11.1797},
	{374.8246, 188.2364, 1008.3893},
	{361.5366, 159.3573, 1008.3828},
	{351.6461, 206.0936, 1008.3828},
	{371.5602, 177.7127, 1019.9844},
	{331.9078, 177.7589, 1019.9912},
	{330.6430, 177.7591, 1019.9912},
	{378.2992, -178.8477, 1000.6328},
	{316.2407, -140.3572, 999.6016},
	{500.6049, -2.1070, 1000.6797},
	{2156.5854, 1607.8103, 999.9692},
	{2202.4285, 1617.7483, 999.9766},
	{2209.2668, 1620.4711, 999.9827},
	{2223.1074, 1602.5835, 999.9734}
};
//--------------------------------------------------------------
static stock Float:PumpData[][E_PUMP] = {
	{-85.2422, -1165.0312, 2.6328, 27},
	{-90.1406, -1176.6250, 2.6328, 27},
	{-92.1016, -1161.7891, 2.9609, 27},
	{-97.0703, -1173.7500, 3.0312, 27},
	{1941.6562, -1767.2891, 14.1406, 24},
	{1941.6562, -1771.3438, 14.1406, 24},
	{1941.6562, -1774.3125, 14.1406, 24},
	{1941.6562, -1778.4531, 14.1406, 24},
	{-1327.0312, 2685.5938, 49.4531, 54},
	{-1327.7969, 2680.1250, 49.4531, 54},
	{-1328.5859, 2674.7109, 49.4531, 54},
	{-1329.2031, 2669.2812, 49.4531, 54},
	{-1464.9375, 1860.5625, 31.8203, 61},
	{-1465.4766, 1868.2734, 31.8203, 61},
	{-1477.6562, 1859.7344, 31.8203, 61},
	{-1477.8516, 1867.3125, 31.8203, 61},
	{-1600.6719, -2707.8047, 47.9297, 65},
	{-1603.9922, -2712.2031, 47.9297, 65},
	{-1607.3047, -2716.6016, 47.9297, 65},
	{-1610.6172, -2721.0000, 47.9297, 65},
	{-1665.5234, 416.9141, 6.3828, 62},
	{-1669.9062, 412.5312, 6.3828, 62},
	{-1672.1328, 423.5000, 6.3828, 62},
	{-1675.2188, 407.1953, 6.3828, 62},
	{-1676.5156, 419.1172, 6.3828, 62},
	{-1679.3594, 403.0547, 6.3828, 62},
	{-1681.8281, 413.7812, 6.3828, 62},
	{-1685.9688, 409.6406, 6.3828, 62},
	{-2241.7188, -2562.2891, 31.0625, 64},
	{-2246.7031, -2559.7109, 31.0625, 64},
	{-2410.8047, 970.8516, 44.4844, 63},
	{-2410.8047, 976.1875, 44.4844, 63},
	{-2410.8047, 981.5234, 44.4844, 63},
	{1378.9609, 461.0391, 19.3281, 33},
	{1380.6328, 460.2734, 19.3281, 33},
	{1383.3984, 459.0703, 19.3281, 33},
	{1385.0781, 458.2969, 19.3281, 33},
	{603.4844, 1707.2344, 6.1797, 55},
	{606.8984, 1702.2188, 6.1797, 55},
	{610.2500, 1697.2656, 6.1797, 55},
	{613.7188, 1692.2656, 6.1797, 55},
	{617.1250, 1687.4531, 6.1797, 55},
	{620.5312, 1682.4609, 6.1797, 55},
	{624.0469, 1677.6016, 6.1797, 55},
	{655.6641, -558.9297, 15.3594, 26},
	{655.6641, -560.5469, 15.3594, 26},
	{655.6641, -569.6016, 15.3594, 26},
	{655.6641, -571.2109, 15.3594, 26},
	{1590.3516, 2193.7109, 11.3125, 56},
	{1590.3516, 2204.5000, 11.3125, 56},
	{1596.1328, 2193.7109, 11.3125, 56},
	{1596.1328, 2204.5000, 11.3125, 56},
	{1602.0000, 2193.7109, 11.3125, 56},
	{1602.0000, 2204.5000, 11.3125, 56},
	{2109.0469, 914.7188, 11.2578, 60},
	{2109.0469, 925.5078, 11.2578, 60},
	{2114.9062, 914.7188, 11.2578, 60},
	{2114.9062, 925.5078, 11.2578, 60},
	{2120.8203, 914.7188, 11.2578, 60},
	{2120.8203, 925.5078, 11.2578, 60},
	{2141.6719, 2742.5234, 11.2734, 57},
	{2141.6719, 2753.3203, 11.2734, 57},
	{2147.5312, 2742.5234, 11.2734, 57},
	{2147.5312, 2753.3203, 11.2734, 57},
	{2153.3125, 2742.5234, 11.2734, 57},
	{2153.3125, 2753.3203, 11.2734, 57},
	{2196.8984, 2470.2500, 11.3125, 58},
	{2196.8984, 2474.6875, 11.3125, 58},
	{2196.8984, 2480.3281, 11.3125, 58},
	{2207.6953, 2470.2500, 11.3125, 58},
	{2207.6953, 2474.6875, 11.3125, 58},
	{2207.6953, 2480.3281, 11.3125, 58},
	{2634.6406, 1100.9453, 11.2500, 59},
	{2634.6406, 1111.7500, 11.2500, 59},
	{2639.8750, 1100.9609, 11.2500, 59},
	{2639.8750, 1111.7500, 11.2500, 59},
	{2645.2500, 1100.9609, 11.2500, 59},
	{2645.2500, 1111.7500, 11.2500, 59},
	{1009.1260, -936.0920, 42.3281, 25},
	{1005.4454, -936.6394, 42.3281, 25},
	{1002.4907, -937.2121, 42.3281, 25},
	{1000.0130, -937.5917, 42.3281, 25}
};
//--------------------------------------------------------------
static const Float:gVehicleTempDataTopSpeed[212] = {
	157.0, 147.0, 186.0, 110.0, 133.0, 164.0, 110.0, 148.0, 100.0, 158.0, 129.0, 221.0, 168.0, 110.0, 105.0, 192.0, 154.0, 270.0, 115.0, 149.0,
	145.0, 154.0, 140.0, 99.00, 135.0, 270.0, 173.0, 165.0, 157.0, 201.0, 190.0, 130.0, 94.00, 110.0, 167.0, 0.000, 149.0, 158.0, 142.0, 168.0,
	136.0, 145.0, 139.0, 126.0, 110.0, 164.0, 270.0, 270.0, 111.0, 0.000, 0.000, 193.0, 270.0, 60.00, 135.0, 157.0, 106.0, 95.00, 157.0, 136.0,
	270.0, 160.0, 111.0, 142.0, 145.0, 145.0, 147.0, 140.0, 144.0, 270.0, 157.0, 110.0, 190.0, 190.0, 149.0, 173.0, 270.0, 186.0, 117.0, 140.0,
	184.0, 73.00, 156.0, 122.0, 190.0, 99.00, 64.00, 270.0, 270.0, 139.0, 157.0, 149.0, 140.0, 270.0, 214.0, 176.0, 162.0, 270.0, 108.0, 123.0,
	140.0, 145.0, 216.0, 216.0, 173.0, 140.0, 179.0, 166.0, 108.0, 79.00, 101.0, 270.0,	270.0, 270.0, 120.0, 142.0, 157.0, 157.0, 164.0, 270.0, 
	270.0, 160.0, 176.0, 151.0, 130.0, 160.0, 158.0, 149.0, 176.0, 149.0, 60.00, 70.00, 110.0, 167.0, 168.0, 158.0, 173.0, 0.000, 0.000, 270.0,
	149.0, 203.0, 164.0, 151.0, 150.0, 147.0, 149.0, 142.0, 270.0, 153.0, 145.0, 157.0, 121.0, 270.0, 144.0, 158.0, 113.0, 113.0, 156.0, 178.0,
	169.0, 154.0, 178.0, 270.0, 145.0, 165.0, 160.0, 173.0, 146.0, 0.000, 0.000, 93.00, 60.00, 110.0, 60.00, 158.0, 158.0, 270.0, 130.0, 158.0,
	153.0, 151.0, 136.0, 85.00, 0.000, 153.0, 142.0, 165.0, 108.0, 162.0, 0.000, 0.000, 270.0, 270.0, 130.0, 190.0, 175.0, 175.0, 175.0, 158.0,
	151.0, 110.0, 169.0, 171.0, 148.0, 152.0, 0.000, 0.000, 0.000, 108.0, 0.000, 0.000
};
//--------------------------------------------------------------
static stock Float:VehicleData[][6] = {
	{2.329999, 5.119999, 1.639999, 0.000000, 0.000000, 0.000000}, // 400
	{2.569999, 5.829999, 1.710000, 0.000000, 0.000000, 0.000000}, // 401
	{2.410000, 5.800000, 1.529999, 0.000000, 1.519999, -0.349999}, // 402
	{3.150000, 9.220000, 4.179999, 0.000000, 0.000000, 0.000000}, // 403
	{2.200000, 5.809999, 1.840000, 0.000000, 0.000000, 0.000000}, // 404
	{2.349999, 6.000000, 1.490000, 0.000000, 0.019999, 0.000000}, // 405
	{5.269999, 11.590000, 4.420000, 0.000000, 0.000000, 0.000000}, // 406
	{2.849999, 8.960000, 2.700000, 0.000000, 0.000000, 0.000000}, // 407
	{3.119999, 10.689999, 3.910000, 0.000000, 0.000000, 0.000000}, // 408
	{2.369999, 8.180000, 1.529999, 0.000000, 2.750000, -0.349999}, // 409
	{2.259999, 5.010000, 1.799999, 0.000000, 0.000000, 0.000000}, // 410
	{2.390000, 5.780000, 1.370000, 0.000000, 0.000000, 0.000000}, // 411
	{2.450000, 7.309999, 1.389999, 0.000000, 0.000000, 0.000000}, // 412
	{2.279999, 5.880000, 2.230000, 0.000000, 0.000000, 0.000000}, // 413
	{2.519999, 7.070000, 4.599999, 0.000000, 0.000000, 0.000000}, // 414
	{2.319999, 5.510000, 1.139999, 0.000000, 0.000000, 0.000000}, // 415
	{2.730000, 8.010000, 3.400000, 0.000000, 0.000000, 0.000000}, // 416
	{5.449999, 23.270000, 6.610000, 0.000000, 0.000000, 0.000000}, // 417
	{2.569999, 5.670000, 2.140000, 0.000000, 0.000000, 0.000000}, // 418
	{2.400000, 6.219999, 1.409999, 0.000000, 1.620000, -0.430000}, // 419
	{2.410000, 5.909999, 1.769999, 0.000000, 0.000000, 0.000000}, // 420
	{2.250000, 6.389999, 1.370000, 0.000000, 1.740000, -0.469999}, // 421
	{2.269999, 5.380000, 1.549999, 0.000000, 0.000000, 0.000000}, // 422
	{2.319999, 4.840000, 4.909999, 0.000000, 0.000000, 0.000000}, // 423
	{2.460000, 3.859999, 1.779999, 0.000000, 0.000000, 0.000000}, // 424
	{5.159999, 18.629999, 5.190000, 0.000000, 0.000000, 0.000000}, // 425
	{2.410000, 5.909999, 1.769999, 0.000000, 1.639999, -0.349999}, // 426
	{2.640000, 8.199999, 3.230000, 0.000000, 0.000000, 0.000000}, // 427
	{2.730000, 6.280000, 3.480000, 0.000000, 0.000000, 0.100000}, // 428
	{2.210000, 5.179999, 1.279999, 0.000000, 0.000000, 0.000000}, // 429
	{4.770000, 16.90000, 5.920000, 0.000000, 0.000000, 0.000000}, // 430
	{3.009999, 12.210000, 4.420000, 0.000000, 0.000000, 0.000000}, // 431
	{4.300000, 9.170000, 3.880000, 0.000000, 0.000000, 0.000000}, // 432
	{3.400000, 10.000000, 4.860000, 0.000000, 0.000000, 0.000000}, // 433
	{2.289999, 4.570000, 1.720000, 0.000000, 0.000000, 0.000000}, // 434
	{3.160000, 13.529999, 4.769999, 0.000000, 0.000000, 0.000000}, // 435
	{2.279999, 5.510000, 1.720000, 0.000000, 0.000000, 0.000000}, // 436
	{3.039999, 11.760000, 4.010000, 0.000000, 0.000000, 0.000000}, // 437
	{2.410000, 5.820000, 1.720000, 0.000000, 0.000000, 0.000000}, // 438
	{2.220000, 5.289999, 1.470000, 0.000000, 0.000000, 0.000000}, // 439
	{2.309999, 5.559999, 2.759999, 0.000000, 0.000000, 0.000000}, // 440
	{0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000}, // 441
	{2.609999, 6.679999, 1.759999, 0.000000, 0.000000, 0.000000}, // 442
	{4.159999, 20.049999, 4.429999, 0.000000, 0.000000, 0.000000}, // 443
	{3.660000, 6.019999, 3.289999, 0.000000, 0.000000, 0.000000}, // 444
	{2.299999, 5.860000, 1.750000, 0.000000, 0.000000, 0.000000}, // 445
	{4.77,     17.02,    4.31, 0.000000, 0.000000, 0.000000}, // 446
	{2.420000, 14.800000, 3.150000, 0.000000, 0.000000, 0.000000}, // 447
	{0.709999, 2.190000, 1.629999, 0.000000, 0.000000, 0.000000}, // 448
	{3.029999, 9.029999, 4.989999, 0.000000, 0.000000, 0.000000}, // 449
	{3.069999, 13.510000, 3.720000, 0.000000, 0.000000, 0.000000}, // 450
	{2.319999, 5.469999, 1.220000, 0.000000, 0.000000, 0.000000}, // 451
	{3.609999, 14.569999, 3.289999, 0.000000, 1.500000, 1.169999}, // 452
	{5.14,     13.77,     9.29,     0.000000, 1.500000, 1.169999}, // 453
	{6.62,     19.05,     13.84,    0.000000, 1.500000, 1.169999}, // 454
	{3.319999, 9.699999, 3.630000, 0.000000, 0.000000, 0.000000}, // 455
	{3.230000, 9.520000, 4.980000, 0.000000, 0.000000, 0.000000}, // 456
	{1.830000, 2.609999, 2.720000, 0.000000, 0.000000, 0.000000}, // 457
	{2.410000, 6.139999, 1.470000, 0.000000, 0.000000, 0.000000}, // 458
	{2.299999, 5.719999, 2.230000, 0.000000, 0.000000, 0.000000}, // 459
	{10.850000, 13.550000, 4.440000, 0.000000, 0.000000, 0.000000}, // 460
	{0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000}, // 461
	{0.709999, 2.190000, 1.629999, 0.000000, 0.000000, 0.000000}, // 462
	{0.699999, 2.420000, 1.340000, 0.000000, 0.000000, 0.000000}, // 463
	{1.580000, 1.549999, 1.149999, 0.000000, 0.000000, 0.000000}, // 464
	{0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000}, // 465
	{2.529999, 6.170000, 1.649999, 0.000000, 1.789999, -0.349999}, // 466
	{2.529999, 6.360000, 1.669999, 0.000000, 1.799999, -0.349999}, // 467
	{0.709999, 2.230000, 1.419999, 0.000000, 0.000000, 0.000000}, // 468
	{2.420000, 14.800000, 3.150000, 0.000000, 0.000000, 0.000000}, // 469
	{2.660000, 5.480000, 2.099999, 0.000000, 0.000000, 0.000000}, // 470
	{1.419999, 2.000000, 1.710000, 0.000000, 0.000000, 0.000000}, // 471
	{2.670000, 9.340000, 4.870000, 0.000000, 0.000000, 1.720000}, // 472
	{2.900000, 5.400000, 2.220000, 0.000000, 0.310000, 0.360000}, // 473
	{2.430000, 6.030000, 1.690000, 0.000000, 0.000000, 0.000000}, // 474
	{2.450000, 5.780000, 1.480000, 0.000000, 1.539999, -0.349999}, // 475
	{11.029999, 11.289999, 3.289999, 0.000000, 0.000000, 0.000000}, // 476
	{2.670000, 5.929999, 1.399999, 0.000000, 0.000000, 0.000000}, // 477
	{2.450000, 5.570000, 1.740000, 0.000000, 1.490000, -0.550000}, // 478
	{2.250000, 6.150000, 1.990000, 0.000000, 0.000000, 0.000000}, // 479
	{2.269999, 5.260000, 1.419999, 0.000000, 0.000000, 0.000000}, // 480
	{0.709999, 1.879999, 1.320000, 0.000000, 0.000000, 0.000000}, // 481
	{2.339999, 5.699999, 1.870000, 0.000000, 0.000000, 0.000000}, // 482
	{2.049999, 6.190000, 2.109999, 0.000000, 0.000000, 0.000000}, // 483
	{5.35,     26.20,    7.16, 0.000000, 0.000000, 0.46}, // 484
	{1.970000, 4.070000, 1.440000, 0.000000, 0.000000, 0.000000}, // 485
	{4.340000, 7.840000, 4.449999, 0.000000, 0.000000, 0.000000}, // 486
	{2.329999, 15.039999, 4.670000, 0.000000, 0.000000, 0.000000}, // 487
	{2.329999, 12.609999, 4.650000, 0.000000, 0.000000, 0.000000}, // 488
	{2.539999, 5.699999, 2.140000, 0.000000, 0.000000, 0.000000}, // 489
	{2.920000, 6.929999, 2.140000, 0.000000, 0.180000, 0.000000}, // 490
	{2.309999, 6.329999, 1.289999, 0.000000, 1.570000, -0.419999}, // 491
	{2.349999, 6.179999, 1.789999, 0.000000, 1.710000, -0.349999}, // 492
	{4.77,     17.83,    3.85, 0.000000, 0.000000, 0.000000}, // 493
	{2.250000, 6.489999, 1.500000, 0.000000, -0.219999, 0.000000}, // 494
	{2.779999, 5.449999, 1.990000, 0.000000, 0.000000, 0.000000}, // 495
	{2.279999, 4.750000, 1.789999, 0.000000, 0.000000, 0.000000}, // 496
	{2.329999, 15.039999, 4.659999, 0.000000, 0.000000, 0.000000}, // 497
	{2.900000, 6.599999, 4.280000, 0.000000, 0.000000, 0.000000}, // 498
	{2.640000, 7.199999, 3.750000, 0.000000, 0.000000, 0.000000}, // 499
	{2.289999, 5.010000, 1.850000, 0.000000, 0.000000, 0.000000}, // 500
	{0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000}, // 501
	{2.349999, 5.969999, 1.519999, 0.000000, 0.000000, 0.000000}, // 502
	{2.210000, 6.139999, 1.629999, 0.000000, -0.219999, 0.000000}, // 503
	{2.529999, 6.039999, 1.649999, 0.000000, 1.799999, 0.000000}, // 504
	{2.539999, 5.699999, 2.140000, 0.000000, 0.000000, 0.000000}, // 505
	{2.250000, 5.219999, 1.169999, 0.000000, 0.000000, 0.000000}, // 506
	{2.569999, 6.590000, 1.620000, 0.000000, 1.799999, -0.449999}, // 507
	{2.960000, 8.050000, 3.339999, 0.000000, 0.000000, 0.000000}, // 508
	{0.709999, 1.899999, 1.320000, 0.000000, 0.000000, 0.000000}, // 509
	{0.720000, 1.740000, 1.120000, 0.000000, 0.000000, 0.000000}, // 510
	{21.219999, 21.190000, 5.059999, 0.000000, 0.000000, 0.000000}, // 511
	{11.159999, 6.159999, 2.990000, 0.000000, 0.000000, 0.000000}, // 512
	{8.699999, 9.000000, 2.230000, 0.000000, 0.000000, -0.180000}, // 513
	{3.190000, 10.069999, 3.059999, 0.000000, 0.000000, 0.000000}, // 514
	{3.549999, 9.949999, 3.420000, 0.000000, 0.000000, 0.000000}, // 515
	{2.599999, 6.239999, 1.710000, 0.000000, 0.000000, 0.000000}, // 516
	{2.529999, 6.329999, 1.649999, 0.000000, 1.679999, -0.409999}, // 517
	{2.430000, 6.000000, 1.570000, 0.000000, 0.000000, 0.000000}, // 518
	{20.309999, 19.290000, 6.940000, 0.000000, 0.000000, 0.000000}, // 519
	{8.750000, 14.319999, 2.160000, 0.000000, 0.000000, 0.000000}, // 520
	{0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000}, // 521
	{0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000}, // 522
	{0.699999, 2.470000, 1.679999, 0.000000, 0.000000, 0.000000}, // 523
	{3.589999, 8.840000, 3.640000, 0.000000, 0.000000, 0.000000}, // 524
	{3.049999, 6.469999, 3.289999, 0.000000, 0.000000, 0.000000}, // 525
	{2.200000, 5.400000, 1.259999, 0.000000, 0.000000, 0.000000}, // 526
	{2.430000, 5.719999, 1.740000, 0.000000, 0.000000, 0.000000}, // 527
	{2.549999, 5.550000, 2.140000, 0.000000, 0.000000, 0.000000}, // 528
	{2.380000, 5.630000, 1.860000, 0.000000, 0.000000, 0.000000}, // 529
	{1.580000, 4.230000, 2.680000, 0.000000, 0.000000, 0.000000}, // 530
	{1.960000, 3.700000, 1.669999, 0.000000, 0.000000, -0.059999}, // 531
	{8.619999, 11.390000, 4.179999, 0.000000, 0.000000, 0.000000}, // 532
	{2.380000, 5.420000, 1.490000, 0.000000, 0.000000, 0.000000}, // 533
	{2.180000, 6.269999, 1.159999, 0.000000, 0.000000, 0.000000}, // 534
	{2.670000, 5.480000, 1.580000, 0.000000, 0.000000, 0.000000}, // 535
	{2.460000, 6.420000, 1.299999, 0.000000, 1.750000, -0.349999}, // 536
	{3.329999, 18.430000, 5.199999, 0.000000, 0.000000, 0.000000}, // 537
	{3.269999, 16.590000, 4.949999, 0.000000, 0.000000, -0.119999}, // 538
	{2.500000, 3.869999, 2.559999, 0.000000, 0.000000, 0.000000}, // 539
	{2.589999, 6.070000, 1.500000, 0.000000, 0.000000, 0.000000}, // 540
	{2.269999, 4.949999, 1.240000, 0.000000, 0.000000, 0.000000}, // 541
	{2.480000, 6.400000, 1.700000, 0.000000, 1.620000, -0.370000}, // 542
	{2.380000, 5.730000, 1.860000, 0.000000, 0.000000, 0.000000}, // 543
	{2.809999, 12.859999, 3.890000, 0.000000, 0.000000, 0.000000}, // 544
	{2.190000, 4.809999, 1.690000, 0.000000, 0.000000, 0.000000}, // 545
	{2.569999, 5.860000, 1.669999, 0.000000, 0.000000, 0.000000}, // 546
	{2.490000, 5.840000, 1.769999, 0.000000, 0.000000, 0.100000}, // 547
	{4.179999, 24.420000, 4.909999, 0.000000, 0.000000, 0.000000}, // 548
	{2.400000, 5.530000, 1.429999, 0.000000, 0.000000, 0.000000}, // 549
	{2.539999, 5.889999, 1.539999, 0.000000, 0.000000, 0.000000}, // 550
	{2.660000, 6.719999, 1.769999, 0.000000, 0.000000, 0.000000}, // 551
	{2.650000, 6.719999, 3.559999, 0.000000, 0.000000, 0.000000}, // 552
	{28.739999, 23.489999, 7.389999, 0.000000, 0.000000, 0.000000}, // 553
	{2.680000, 6.170000, 2.089999, 0.000000, 0.000000, 0.000000}, // 554
	{2.000000, 5.130000, 1.419999, 0.000000, 0.000000, 0.000000}, // 555
	{3.660000, 6.369999, 3.289999, 0.000000, 0.000000, 0.000000}, // 556
	{3.660000, 6.260000, 3.289999, 0.000000, 0.000000, 0.000000}, // 557
	{2.230000, 5.250000, 1.750000, 0.000000, 0.000000, 0.000000}, // 558
	{2.279999, 5.480000, 1.399999, 0.000000, 0.000000, 0.000000}, // 559
	{2.319999, 5.400000, 1.620000, 0.000000, 0.000000, 0.000000}, // 560
	{2.500000, 5.800000, 1.789999, 0.000000, 0.000000, 0.000000}, // 561
	{2.259999, 5.309999, 1.509999, 0.000000, -0.009999, 0.000000}, // 562
	{3.390000, 18.620000, 4.710000, 0.000000, 0.000000, 0.000000}, // 563
	{0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000}, // 564
	{2.029999, 4.820000, 1.500000, 0.000000, 0.000000, 0.000000}, // 565
	{2.509999, 6.460000, 1.659999, 0.000000, 1.710000, -0.349999}, // 566
	{2.710000, 6.630000, 1.580000, 0.000000, 0.300000, -0.230000}, // 567
	{2.710000, 4.610000, 1.419999, 0.000000, 0.000000, 0.000000}, // 568
	{3.259999, 18.430000, 5.030000, 0.000000, 0.000000, 0.000000}, // 569
	{3.470000, 21.069999, 5.190000, 0.000000, 0.000000, 0.029999}, // 570
	{1.570000, 2.329999, 1.580000, 0.000000, 0.000000, 0.000000}, // 571
	{1.659999, 2.349999, 2.019999, 0.000000, 0.000000, 0.000000}, // 572
	{2.930000, 7.380000, 3.160000, 0.000000, 0.000000, 0.000000}, // 573
	{1.620000, 3.849999, 2.500000, 0.000000, 0.000000, 0.000000}, // 574
	{2.490000, 5.829999, 1.929999, 0.000000, 0.000000, 0.000000}, // 575
	{2.420000, 6.360000, 1.850000, 0.000000, 0.000000, 0.000000}, // 576
	{62.490001, 61.439998, 34.950000, 0.000000, 0.000000, 0.000000}, // 577
	{3.150000, 11.789999, 2.779999, 0.000000, 0.000000, 0.000000}, // 578
	{2.470000, 6.210000, 2.559999, 0.000000, 0.000000, 0.000000}, // 579
	{2.660000, 5.769999, 2.240000, 0.000000, 0.000000, 0.000000}, // 580
	{0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000}, // 581
	{2.440000, 7.219999, 3.190000, 0.000000, 0.000000, 0.000000}, // 582
	{1.669999, 3.660000, 3.210000, 0.000000, 0.000000, 0.000000}, // 583
	{3.549999, 15.909999, 3.400000, 0.000000, 0.000000, 0.000000}, // 584
	{2.440000, 6.530000, 2.059999, 0.000000, 0.000000, 0.000000}, // 585
	{0.699999, 2.799999, 1.960000, 0.000000, 0.000000, 0.000000}, // 586
	{2.609999, 5.760000, 1.450000, 0.000000, 0.000000, 0.000000}, // 587
	{3.079999, 8.619999, 7.530000, 0.000000, 0.000000, 0.000000}, // 588
	{2.259999, 5.090000, 2.119999, 0.000000, 0.000000, 0.000000}, // 589
	{3.440000, 18.399999, 5.030000, 0.000000, 0.000000, 0.000000}, // 590
	{3.180000, 13.630000, 4.659999, 0.000000, 0.000000, 0.000000}, // 591
	{44.450000, 57.569999, 18.430000, 0.000000, 0.000000, 0.000000}, // 592
	{12.590000, 13.550000, 3.569999, 0.000000, 0.000000, 0.000000}, // 593
	{0.500000, 0.920000, 0.300000, 0.000000, -0.039999, 0.000000}, // 594
	{2.849999, 13.470000, 2.210000, 0.000000, 0.000000, 0.000000}, // 595
	{2.410000, 5.909999, 1.769999, 0.000000, 1.639999, -0.349999}, // 596
	{2.410000, 5.909999, 1.769999, 0.000000, 1.639999, -0.349999}, // 597
	{2.410000, 5.789999, 1.769999, 0.000000, 1.639999, -0.349999}, // 598
	{2.920000, 6.159999, 2.140000, 0.000000, 0.000000, 0.000000}, // 599
	{2.400000, 6.059999, 1.559999, 0.000000, 0.000000, 0.000000}, // 600
	{3.079999, 6.960000, 3.829999, 0.000000, 0.000000, 0.000000}, // 601
	{2.319999, 5.539999, 1.289999, 0.000000, 0.000000, 0.000000}, // 602
	{2.640000, 6.070000, 1.429999, 0.000000, 0.000000, 0.000000}, // 603
	{2.529999, 6.170000, 1.649999, 0.000000, 1.789999, -0.349999}, // 604
	{2.380000, 5.730000, 1.860000, 0.000000, 0.000000, 0.000000}, // 605
	{2.930000, 3.380000, 1.970000, 0.000000, 0.000000, 0.000000}, // 606
	{3.019999, 3.259999, 1.600000, 0.000000, 0.000000, -0.300000}, // 607
	{1.450000, 4.650000, 6.360000, 0.000000, 0.000000, 0.000000}, // 608
	{2.900000, 6.599999, 4.219999, 0.000000, 0.000000, 0.000000}, // 609
	{2.480000, 1.429999, 1.629999, 0.000000, 0.000000, 0.000000}, // 610
	{2.130000, 3.160000, 1.830000, 0.000000, 0.000000, 0.000000} // 611
};
// These different functions
// =============================================================================
forward Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
public Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2) return floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2) + floatpower(floatabs(floatsub(y2, y1)), 2) + floatpower(floatabs(floatsub(z2, z1)), 2));
//--------------------------------------------------------------
forward Float:GetDistanceBetweenPlayers(const p1, const p2);
public Float:GetDistanceBetweenPlayers(const p1, const p2)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2)) return -1.00;
	GetPlayerPos(p1, x1, y1, z1);
	GetPlayerPos(p2, x2, y2, z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2) + floatpower(floatabs(floatsub(y2, y1)), 2) + floatpower(floatabs(floatsub(z2, z1)), 2));
}
//--------------------------------------------------------------
forward Float:GetDistancePlayerVeh(const playerid, const vehicleid);
public Float:GetDistancePlayerVeh(const playerid, const vehicleid)
{
	new Float:Floats[7];
	if(!IsPlayerConnected(playerid) || !IsValidVehicle(vehicleid)) return -1.00;
	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(vehicleid, Floats[3], Floats[4], Floats[5]);
	return floatsqroot(floatpower(floatabs(floatsub(Floats[3], Floats[0])), 2) + floatpower(floatabs(floatsub(Floats[4], Floats[1])), 2) + floatpower(floatabs(floatsub(Floats[5], Floats[2])), 2));
}
//--------------------------------------------------------------
forward OnVpsResponse(playerid, response_code, data[]);
public OnVpsResponse(playerid, response_code, data[])
{
	if(response_code != 200 || (strfind(data, "WARNING", true) != -1 && strfind(data, ":true", true) != -1)) return SendClientMessage(playerid, COLOR_RED, "Error: The link you entered is invalid or we can`t convert it!");
	new youtube[128], link[32];
	strmid(link, data, strfind(data, ".mp3", true) - 11, 200);
	strmid(YouTubeLink[playerid], link, 0, 11);
	new sec[4], duration[16];
	strmid(duration, data, strfind(data, "duration", true) - 2, 200);
	strmid(sec, duration, 12, 15);
	format(youtube, sizeof(youtube), "http://michaelbelgium.me/ytconverter/download/%s.mp3", YouTubeLink[playerid]);
	SecundeVideo[playerid] = strval(sec) + 5;
	SetPVarInt(playerid, "StartYT", 1);
	return PlayAudioStreamForPlayer(playerid, youtube);
}
//--------------------------------------------------------------
forward km_Timer();
public km_Timer()
{
    foreach(new i: Player)
	{
		if(SecundeVideo[i] > 0)
		{
			SecundeVideo[i]--;
			if(SecundeVideo[i] == 0)
			{
				new string[200];
				format(string, sizeof(string), "michaelbelgium.me/ytconverter/convert.php?delete=%s", YouTubeLink[i]);
				HTTP(i, HTTP_HEAD, string, "", "");
				strdel(YouTubeLink[i], 0, strlen(YouTubeLink[i]));
				StopAudioStreamForPlayer(i);
				SetPVarInt(i, "StartYT", 0);
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new v = GetPlayerVehicleID(i);
			km_Info[0][i] += floatround(floatdiv(float(km_GetVehicleSpeed(v)), 3.6));
			if(km_Info[0][i] > 999)
			{
				km_Info[0][i] = 0;
				km_Info[1][i]++;
			}
		}
    }
    return true;
}
// These different functions
// =============================================================================
stock GetColorHex(color)
{
    new string[10];
    format(string, sizeof(string), "{%06x}", ((color >>> 8) & 0xFFFFFF));
    return string;
}
//--------------------------------------------------------------
stock SendSplitMessage(const playerid, const color, const text[])
{
    new len = strlen(text), iL = len / 110;
	if(len < 144) return SendClientMessage(playerid, color, text);
	if((len % 110)) iL++;
	new Line[110 + 5], _:index;
	while(index < iL)
	{
		if(index == 0) strmid(Line, text, (index * 110), (index * 110) + 110);
		else strmid(Line, text, (index * 110), (index * 110) + 110);
		if(iL > 1 && index > 0) format(Line, sizeof(Line), "... %s", Line);
		SendClientMessage(playerid, color, Line);
		index++;
	}
    return true;
}
//--------------------------------------------------------------
stock SendSplitMessageToAll(const color, const text[])
{
    new len = strlen(text), iL = len / 110;
	if(len < 144) return SendClientMessageToAll(color, text);
	if(len % 110) iL++;
	new Line[110 + 5], _:index;
	while(index < iL)
	{
		if(index == 0) strmid(Line, text, (index * 110), (index * 110) + 110);
		else strmid(Line, text, (index * 110), (index * 110) + 110);
		if(iL > 1 && index > 0) format(Line, sizeof(Line), "... %s", Line);
		SendClientMessageToAll(color, Line);
		index++;
	}
    return true;
}
//--------------------------------------------------------------
stock Float:GetVehicleTopSpeed(const modelid) return gVehicleTempDataTopSpeed[modelid - 400];
//--------------------------------------------------------------
static stock km_GetVehicleSpeed(const vehicleid)
{
    new Float:Q[3];
    return GetVehicleVelocity(vehicleid, Q[0], Q[1], Q[2]), floatround(floatmul(VectorSize(Q[0], Q[1], Q[2]), 170.0));
}
//--------------------------------------------------------------
stock YoutubeStream(playerid, const url[])
{
	if(GetPVarInt(playerid, "StartYT") == 1) return SendClientMessage(playerid, COLOR_GREY, "You have to wait until the song ends so you can insert another link.");
	if(strfind(url, "youtube.com", true) != -1 && strfind(url, "watch?v=", true) != -1)
	{
		new requestlink[128];// link[32];
		// strmid(link, url, strfind(url, "watch?v=", true) + strlen("watch?v="), strlen(url), 16);
		format(requestlink, sizeof(requestlink), "michaelbelgium.me/ytconverter/convert.php?youtubelink=%s", url);
		HTTP(playerid, HTTP_GET, requestlink, "", "OnVpsResponse");
		SendClientMessage(playerid, COLOR_WHITE, "** Converting video... **");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "We're sorry but the link you entered is not valid!");
	return true;
}
//--------------------------------------------------------------
stock Cenzura(string[])
{
	for(new i = 0; i < sizeof(BadWords); i++)
	{
		new badtext = strfind(string, BadWords[i], true);
		if(badtext != -1)
		{
			for(new x = badtext; x < badtext + strlen(BadWords[i]); x++) {
				string[x] = '*';
			}
		}
	}
	return true;
}
//--------------------------------------------------------------
stock IsNumber(const string[])
{
	if(strlen(string) == 0) return false;
	for(new i = 0, j = strlen(string); i < j; i++) {
		if((string[i] > '9' || string[i] < '0' && string[i] != '-' && string[i] != '+') || (string[i] == '-' && i != 0) || (string[i] == '+' && i != 0)) return false;
	}
	if(strlen(string) == 1 && (string[0] == '-' || string[0] == '+')) return false;
	return true;
}
//--------------------------------------------------------------
stock Logs(const filename[], const name[], const text[])
{
	new string[MAX_STRING], file[32], day, month, year, hour, minute;
	getdate(year, month, day);
	gettime(hour, minute);
	format(file, sizeof(file), "utils/%s", filename);
	if(fexist(file))
	{
		format(string, sizeof(string), "[%d.%d.%d][%d:%d] %s: %s\n", day, month, year, hour, minute, name, text);
		new File:log = fopen(file, io_append);
		fwrite(log, string);
		fclose(log);
	}
	else fopen(file, io_write);
	return true;
}
//--------------------------------------------------------------
stock IsPlayerNearPump(const playerid)
{
	for(new i = 0; i < sizeof(PumpData); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 5.0, PumpData[i][pumpX], PumpData[i][pumpY], PumpData[i][pumpZ])) return true;
	}
	return false;
}
//--------------------------------------------------------------
stock GetBusinessID(const playerid)
{
	new Float:distance, Float:posX, Float:posY, Float:posZ;
	GetPlayerPos(playerid, posX, posY, posZ);
	for(new i = 0; i < sizeof(PumpData); i++)
	{
		distance = GetDistanceBetweenPoints(posX, posY, posZ, PumpData[i][pumpX], PumpData[i][pumpY], PumpData[i][pumpZ]);
		if(distance < 5) return PumpData[i][businessID];
	}
	return false;
}
//--------------------------------------------------------------
static stock IsPlayerNearVending(const playerid)
{
	for(new i = 0; i < sizeof(s_aVendingMachines); i++) {
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, s_aVendingMachines[i][e_VENDING_MACHINE_X], s_aVendingMachines[i][e_VENDING_MACHINE_Y], s_aVendingMachines[i][e_VENDING_MACHINE_Z])) return true;
	}
	return false;
}
//--------------------------------------------------------------
stock AttachNeons(const vehicleid, const color)
{
	if(g_HasNeons{vehicleid}) RemoveNeons(vehicleid);
	if(!GetVehicleModel(vehicleid)) return false;
	new arrModel = GetVehicleModel(vehicleid) - 400;
	g_NeonObject[vehicleid][0] = CreateDynamicObject(color, 0.87, 0.00, -0.71, 0.00, 0.00, 0.00);
	g_NeonObject[vehicleid][1] = CreateDynamicObject(color, -0.87, 0.00, -0.71, 0.00, 0.00, 0.00);	
	AttachDynamicObjectToVehicle(g_NeonObject[vehicleid][0], vehicleid, (VehicleData[arrModel][0] / 2) - 0.5, VehicleData[arrModel][4] - VehicleData[arrModel][4], VehicleData[arrModel][5] - 0.5, 0.00, 0.00, 0.00);
	AttachDynamicObjectToVehicle(g_NeonObject[vehicleid][1], vehicleid, ((VehicleData[arrModel][0] / 2) + 0.5) - VehicleData[arrModel][0], VehicleData[arrModel][4] - VehicleData[arrModel][4], VehicleData[arrModel][5] - 0.5, 0.00, 0.00, 0.00);
	g_HasNeons{vehicleid} = true;
	return true;
}
//--------------------------------------------------------------
stock RemoveNeons(const vehicleid)
{
	if(!g_HasNeons{vehicleid}) return false;
	DestroyDynamicObject(g_NeonObject[vehicleid][0]);
	DestroyDynamicObject(g_NeonObject[vehicleid][1]);
	g_HasNeons{vehicleid} = false;
	return true;
}
//--------------------------------------------------------------
stock SFM(playerid, color, const fstring[], {Float, _}:...)
{
    static const STATIC_ARGS = 3;
    new n = (numargs() - STATIC_ARGS) * 4;
    if(n)
    {
        new message[144], arg_start, arg_end;
        #emit CONST.alt		fstring
        #emit LCTRL			5
        #emit ADD
        #emit STOR.S.pri	arg_start
        #emit LOAD.S.alt	n
        #emit ADD
        #emit STOR.S.pri	arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= 4;
            #emit LOAD.S.pri	arg_end
        }
        while(arg_end > arg_start);
        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR        message
        n += 4 * 3;
        #emit PUSH.S		n
        #emit SYSREQ.C		format
        n += 4;
        #emit LCTRL          4
        #emit LOAD.S.alt     n
        #emit ADD
        #emit SCTRL          4
        if(IsPlayerConnected(playerid)) return SendClientMessage(playerid, color, message);
    }
	else {
        if(IsPlayerConnected(playerid)) return SendClientMessage(playerid, color, fstring);
    }
	return true;
}
//--------------------------------------------------------------
stock str_replace(const newstr[], const oldstr[], const srcstr[], deststr[], bool:ignorecase = false, size = sizeof(deststr))
{
	new newlen = strlen(newstr), oldlen = strlen(oldstr), srclen = strlen(srcstr), idx, rep;
	for(new i = 0; i < srclen; i++)
	{
	    if((i + oldlen) <= srclen)
	    {
	        if(!strcmp(srcstr[i], oldstr, ignorecase, oldlen))
	        {
				deststr[idx] = '\0';
				strcat(deststr, newstr, size);
				rep++;
				idx += newlen;
				i += oldlen - 1;
			}
			else
			{
		        if(idx < (size - 1)) deststr[idx++] = srcstr[i];
				else return rep;
		    }
	    }
	    else
	    {
	        if(idx < (size - 1)) deststr[idx++] = srcstr[i];
			else return rep;
	    }
	}
	deststr[idx] = '\0';
	return rep;
}
//--------------------------------------------------------------
stock ShowZoneForPlayer(const playerid, const zoneid, const color)
{
	if(!zGangZones[zoneid][zExists]) return false;
	GangZoneShowForPlayer(playerid, zGangZones[zoneid][zMainID], color);
	if(zGangZones[zoneid][zIsUsingNumbers])
	{
		for(new nump = 0; nump < 5; nump++)
		{
			if(zGangZones[zoneid][npart][nump] != -1) GangZoneShowForPlayer(playerid, zGangZones[zoneid][npart][nump], 0x050505AA);
			if(zGangZones[zoneid][npart2][nump] != -1) GangZoneShowForPlayer(playerid, zGangZones[zoneid][npart2][nump], 0x050505AA);
		}
	}
	if(zGangZones[zoneid][zIsUsingBorders])
	{
		for(new i = 0; i < 4; i++) {
			GangZoneShowForPlayer(playerid, zGangZones[zoneid][border][i], 0x050505FF);
		}
    }
    return true;
}
//--------------------------------------------------------------
stock HideZoneForPlayer(const playerid, const zoneid)
{
	if(!zGangZones[zoneid][zExists]) return false;
	GangZoneHideForPlayer(playerid,zGangZones[zoneid][zMainID]);
	if(zGangZones[zoneid][zIsUsingNumbers])
	{
		for(new nump = 0; nump < 5; nump++)
		{
			if(zGangZones[zoneid][npart][nump] != -1) GangZoneHideForPlayer(playerid, zGangZones[zoneid][npart][nump]);
			if(zGangZones[zoneid][npart2][nump] != -1) GangZoneHideForPlayer(playerid, zGangZones[zoneid][npart2][nump]);
		}
	}
	if(zGangZones[zoneid][zIsUsingBorders])
	{
		for(new i = 0; i < 4; i++) {
			GangZoneHideForPlayer(playerid, zGangZones[zoneid][border][i]);
		}
    }
    return true;
}
//--------------------------------------------------------------
stock CreateZone(const Float:gzMinX, const Float:gzMinY, const Float:gzMaxX, const Float:gzMaxY)
{
    new gid = GangZoneCreate(gzMinX, gzMinY, gzMaxX, gzMaxY);
	zGangZones[gid][zExists] = true;
	zGangZonesCreated += 1;
    zGangZones[gid][zMainID] = gid;
    zGangZones[gid][zPosCords][0] = gzMinX;
    zGangZones[gid][zPosCords][1] = gzMinY;
    zGangZones[gid][zPosCords][2] = gzMaxX;
    zGangZones[gid][zPosCords][3] = gzMaxY;
	CreateZoneNumber(gid, zGangZonesCreated);
	CreateZoneBorders(gid);
	return gid;
}
//--------------------------------------------------------------
stock DestroyZone(const zoneid)
{
    if(!zGangZones[zoneid][zExists]) return false;
    GangZoneDestroy(zGangZones[zoneid][zMainID]);
    if(zGangZones[zoneid][zIsUsingNumbers])
    {
		for(new numpart = 0; numpart < 5; numpart++)
		{
			if(zGangZones[zoneid][npart][numpart] != -1)
			{
				GangZoneDestroy(zGangZones[zoneid][npart][numpart]);
				zGangZones[zoneid][npart][numpart] = -1;
			}
			if(zGangZones[zoneid][npart2][numpart] != -1)
			{
				GangZoneDestroy(zGangZones[zoneid][npart2][numpart]);
				zGangZones[zoneid][npart2][numpart] = -1;
			}
		}
		zGangZones[zoneid][zIsUsingNumbers] = false;
    }
    if(zGangZones[zoneid][zIsUsingBorders])
    {
       for(new bord = 0; bord < 4; bord++) GangZoneDestroy(zGangZones[zoneid][border][bord]);
       zGangZones[zoneid][zIsUsingBorders] = false;
    }
    zGangZones[zoneid][zExists] = false;
    zGangZonesCreated -= 1;
	return true;
}
//--------------------------------------------------------------
static stock CreateZoneNumber(const zoneid, const gznumber)
{
	if(!zGangZones[zoneid][zExists]) return false;
	if(zGangZones[zoneid][zIsUsingNumbers]) return false;
	new Float:centposx, Float:centposy;
	centposx = (zGangZones[zoneid][zPosCords][0] + zGangZones[zoneid][zPosCords][2]) / 2;
	centposy = (zGangZones[zoneid][zPosCords][1] + zGangZones[zoneid][zPosCords][3]) / 2;
	if(gznumber >= 0 && gznumber <= 9)
	{
       agz_GangZoneCreateFirstNumber(zoneid, gznumber, centposx, centposy, 0.85);
       zGangZones[zoneid][zIsUsingNumbers] = true;
	   return true;
	}
	else if(gznumber > 9 && gznumber < 83)
	{
	   new temp[3], gznum1[2], gznum2[2];
	   format(temp, sizeof(temp), "%d", gznumber);
	   strmid(gznum1, temp, 0, 1);
	   strmid(gznum2, temp, 1, 2);
	   agz_GangZoneCreateFirstNumber(zoneid, strval(gznum1), centposx - floatmul(35.0, 0.85), centposy, 0.85);
	   agz_GangZoneCreateSecondNumber(zoneid, strval(gznum2), centposx + floatmul(35.0, 0.85), centposy, 0.85);
	   zGangZones[zoneid][zIsUsingNumbers] = true;
	   return true;
	}
	else return false;
}
//--------------------------------------------------------------
static stock CreateZoneBorders(const zoneid)
{
	if(!zGangZones[zoneid][zExists]) return false;
	if(zGangZones[zoneid][zIsUsingBorders]) return false;
    new Float:gzMinX = zGangZones[zoneid][zPosCords][0];
    new Float:gzMinY = zGangZones[zoneid][zPosCords][1];
    new Float:gzMaxX = zGangZones[zoneid][zPosCords][2];
    new Float:gzMaxY = zGangZones[zoneid][zPosCords][3];
	zGangZones[zoneid][border][0] = GangZoneCreate(gzMinX-1.8, gzMinY+1.8, gzMinX+1.8, gzMaxY-1.8);
	zGangZones[zoneid][border][1] = GangZoneCreate(gzMinX-1.8, gzMaxY-1.8, gzMaxX+1.8, gzMaxY+1.8);
	zGangZones[zoneid][border][2] = GangZoneCreate(gzMaxX-1.8, gzMinY+1.8, gzMaxX+1.8, gzMaxY-1.8);
	zGangZones[zoneid][border][3] = GangZoneCreate(gzMinX-1.8, gzMinY-1.8, gzMaxX+1.8, gzMinY+1.8);
    zGangZones[zoneid][zIsUsingBorders] = true;
	return true;
}
//--------------------------------------------------------------
stock ZoneFlashForPlayer(const playerid, const zoneid, const color)
{
    if(!zGangZones[zoneid][zExists]) return false;
	ZoneNumberFlashForPlayer(playerid, zGangZones[zoneid][zMainID]);
	GangZoneFlashForPlayer(playerid, zGangZones[zoneid][zMainID], color);
    return true;
}
//--------------------------------------------------------------
stock ZoneStopFlashForPlayer(const playerid, const zoneid)
{
    if(!zGangZones[zoneid][zExists]) return false;
	GangZoneStopFlashForPlayer(playerid, zGangZones[zoneid][zMainID]);
	ZoneNumberStopFlashForPlayer(playerid, zGangZones[zoneid][zMainID]);
    return true;
}
//--------------------------------------------------------------
stock ZoneNumberFlashForPlayer(const playerid, const zoneid)
{
	if(!zGangZones[zoneid][zIsUsingNumbers]) return false;
	for(new nump = 0; nump < 5; nump++)
	{
		if(zGangZones[zoneid][npart][nump] != -1) GangZoneFlashForPlayer(playerid, zGangZones[zoneid][npart][nump], COLOR_LIGHT_RED);
		if(zGangZones[zoneid][npart2][nump] != -1) GangZoneFlashForPlayer(playerid, zGangZones[zoneid][npart2][nump], COLOR_LIGHT_RED);
	}
    return true;
}
//--------------------------------------------------------------
stock ZoneNumberStopFlashForPlayer(const playerid, const zoneid)
{
	if(!zGangZones[zoneid][zIsUsingNumbers]) return false;
	for(new nump = 0; nump < 5; nump++)
	{
		if(zGangZones[zoneid][npart][nump] != -1) GangZoneStopFlashForPlayer(playerid, zGangZones[zoneid][npart][nump]);
		if(zGangZones[zoneid][npart2][nump] != -1) GangZoneStopFlashForPlayer(playerid, zGangZones[zoneid][npart2][nump]);
	}
    return true;
}
//--------------------------------------------------------------
static stock agz_GangZoneCreateFirstNumber(const gzid, const gznum, const Float:centposx, const Float:centposy, const Float:numsize)
{
	switch(gznum)
	{
		case 0:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisx = 15.0*numsize, Float:gsdisy = 20.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx+gztk, centposy-gsdisy+gztk); // Down of 0
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy+gztk, centposx+gsdisx+gztk, centposy+gsdisy-gztk); // Up of 0
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy+gztk, centposx-gsdisx+gztk, centposy+gsdisy-gztk); // Left of 0
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx+gsdisx-gztk, centposy-gsdisy+gztk, centposx+gsdisx+gztk, centposy+gsdisy-gztk); // Right of 0
		}
		case 1:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gztk, centposy-gsdisy-gztk, centposx+gztk, centposy+gsdisy+gztk);
		}
		case 2:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx+gsdisx-gztk-gztk, centposy+gztk, centposx+gsdisx, centposy+gsdisy-gztk); // Right Stick
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk); // Middle
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy+gztk, centposx-gsdisx+gztk+gztk, centposy-gztk); // Left Stick
			zGangZones[gzid][npart][4] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
		}
		case 3:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx+gsdisx, centposy-gsdisy-gztk, centposx+gsdisx+gztk+gztk, centposy+gsdisy+gztk); // Stick
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk); // Middle
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
		}
		case 4:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy, centposx-gsdisx+gztk+gztk, centposy+gztk); // Left
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk);// Middle
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx+gsdisx, centposy-gsdisy, centposx+gsdisx+gztk+gztk, centposy+gsdisy); // Stick
		}
		case 5:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy-gztk, centposx+gsdisx+gztk, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gztk, centposx-gsdisx+gztk, centposy+gsdisy-gztk); // Left Stick
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gztk, centposx+gsdisx+gztk, centposy+gztk); // Middle
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx+gsdisx-gztk, centposy-gztk, centposx+gsdisx+gztk, centposy-gsdisy+gztk); // Right Stick
			zGangZones[gzid][npart][4] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx+gztk, centposy-gsdisy+gztk); // Down
		}
		case 6:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx-gsdisx-gztk-gztk, centposy+gsdisy+gztk, centposx-gsdisx, centposy-gsdisy-gztk); // Main Left Stick
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk); // Middle
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy-gztk,centposx+gsdisx, centposy-gsdisy+gztk); // Down
			zGangZones[gzid][npart][4] = GangZoneCreate(centposx+gsdisx-gztk-gztk, centposy-gsdisy+gztk, centposx+gsdisx, centposy-gztk); // Right small stick
		}
		case 7:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 15.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx+gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx+gztk, centposy+gsdisy-gztk); // Stick of 1
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx+gztk, centposy+gsdisy+gztk); // Up of 1
		}
		case 8:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy+gztk, centposx-gsdisx+gztk, centposy-gsdisy-gztk); // Left stick
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx+gsdisx-gztk, centposy+gsdisy+gztk, centposx+gsdisx+gztk, centposy-gsdisy-gztk); // Right stick
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx+gztk, centposy+gsdisy-gztk, centposx+gsdisx-gztk, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx-gsdisx+gztk, centposy-gztk, centposx+gsdisx-gztk, centposy+gztk); // Center
			zGangZones[gzid][npart][4] = GangZoneCreate(centposx-gsdisx+gztk, centposy-gsdisy-gztk, centposx+gsdisx-gztk, centposy-gsdisy+gztk); // Down
		}
		case 9:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy, centposx-gsdisx+gztk, centposy+gsdisy-gztk); // Left Stick
			zGangZones[gzid][npart][1] = GangZoneCreate(centposx+gsdisx, centposy-gsdisy-gztk, centposx+gsdisx+gztk+gztk, centposy+gsdisy+gztk); // Right Stick
			zGangZones[gzid][npart][2] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart][3] = GangZoneCreate(centposx-gsdisx+gztk, centposy, centposx+gsdisx, centposy+gztk+gztk); // Middle
			zGangZones[gzid][npart][4] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
		}
	}
}
//--------------------------------------------------------------
static stock agz_GangZoneCreateSecondNumber(const gzid, const gznum, const Float:centposx, const Float:centposy, const Float:numsize)
{
    switch(gznum)
	{
		case 0:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisx = 15.0*numsize, Float:gsdisy = 20.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx+gztk, centposy-gsdisy+gztk); // Down of 0
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy+gztk, centposx+gsdisx+gztk, centposy+gsdisy-gztk); // Up of 0
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy+gztk, centposx-gsdisx+gztk, centposy+gsdisy-gztk); // Left of 0
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx+gsdisx-gztk, centposy-gsdisy+gztk, centposx+gsdisx+gztk, centposy+gsdisy-gztk); // Right of 0
		}
		case 1:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gztk, centposy-gsdisy-gztk, centposx+gztk, centposy+gsdisy+gztk);
		}
		case 2:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx+gsdisx-gztk-gztk, centposy+gztk, centposx+gsdisx, centposy+gsdisy-gztk); // Right Stick
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk); // Middle
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy+gztk, centposx-gsdisx+gztk+gztk, centposy-gztk); // Left Stick
			zGangZones[gzid][npart2][4] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
		}
		case 3:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx+gsdisx, centposy-gsdisy-gztk, centposx+gsdisx+gztk+gztk, centposy+gsdisy+gztk); // Stick
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk); // Middle
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
		}
		case 4:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy, centposx-gsdisx+gztk+gztk, centposy+gztk); // Left
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk);// Middle
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx+gsdisx, centposy-gsdisy, centposx+gsdisx+gztk+gztk, centposy+gsdisy); // Stick
		}
		case 5:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy-gztk, centposx+gsdisx+gztk, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gztk, centposx-gsdisx+gztk, centposy+gsdisy-gztk); // Left Stick
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gztk, centposx+gsdisx+gztk, centposy+gztk); // Middle
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx+gsdisx-gztk, centposy-gztk, centposx+gsdisx+gztk, centposy-gsdisy+gztk); // Right Stick
			zGangZones[gzid][npart2][4] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx+gztk, centposy-gsdisy+gztk); // Down
		}
		case 6:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx-gsdisx-gztk-gztk, centposy+gsdisy+gztk, centposx-gsdisx, centposy-gsdisy-gztk); // Main Left Stick
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx, centposy-gztk, centposx+gsdisx, centposy+gztk); // Middle
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx-gsdisx, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
			zGangZones[gzid][npart2][4] = GangZoneCreate(centposx+gsdisx-gztk-gztk, centposy-gsdisy+gztk, centposx+gsdisx, centposy-gztk); // Right small stick
		}
		case 7:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 15.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx+gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx+gztk, centposy+gsdisy-gztk); // Stick of 1
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx-gsdisx, centposy+gsdisy-gztk, centposx+gsdisx+gztk, centposy+gsdisy+gztk); // Up of 1
		}
		case 8:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy+gztk, centposx-gsdisx+gztk, centposy-gsdisy-gztk); // Left stick
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx+gsdisx-gztk, centposy+gsdisy+gztk, centposx+gsdisx+gztk, centposy-gsdisy-gztk); // Right stick
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx+gztk, centposy+gsdisy-gztk, centposx+gsdisx-gztk, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx-gsdisx+gztk, centposy-gztk, centposx+gsdisx-gztk, centposy+gztk); // Center
			zGangZones[gzid][npart2][4] = GangZoneCreate(centposx-gsdisx+gztk, centposy-gsdisy-gztk, centposx+gsdisx-gztk, centposy-gsdisy+gztk); // Down
		}
		case 9:
		{
			new Float:gztk = 4.0*numsize, Float:gsdisy = 20.0*numsize, Float:gsdisx = 25.0*numsize;
			zGangZones[gzid][npart2][0] = GangZoneCreate(centposx-gsdisx-gztk, centposy, centposx-gsdisx+gztk, centposy+gsdisy-gztk); // Left Stick
			zGangZones[gzid][npart2][1] = GangZoneCreate(centposx+gsdisx, centposy-gsdisy-gztk, centposx+gsdisx+gztk+gztk, centposy+gsdisy+gztk); // Right Stick
			zGangZones[gzid][npart2][2] = GangZoneCreate(centposx-gsdisx-gztk, centposy+gsdisy-gztk, centposx+gsdisx, centposy+gsdisy+gztk); // Up
			zGangZones[gzid][npart2][3] = GangZoneCreate(centposx-gsdisx+gztk, centposy, centposx+gsdisx, centposy+gztk+gztk); // Middle
			zGangZones[gzid][npart2][4] = GangZoneCreate(centposx-gsdisx-gztk, centposy-gsdisy-gztk, centposx+gsdisx, centposy-gsdisy+gztk); // Down
		}
	}
}
//--------------------------------------------------------------
stock SetVehicleEngineState(const vid, const bool:setstate)
{
	if(!IsValidVehicle(vid)) return false;
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(setstate) SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
	else SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
	return true;
}
//--------------------------------------------------------------
stock SetVehicleLightsState(const vid, const bool:setstate)
{
	if(!IsValidVehicle(vid)) return false;
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(setstate) SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
	else SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
	return true;
}
//--------------------------------------------------------------
stock SetVehicleDoorsState(const vid, const bool:setstate)
{
	if(!IsValidVehicle(vid)) return false;
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(setstate) SetVehicleParamsEx(vid, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
	else SetVehicleParamsEx(vid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
	return true;
}
//--------------------------------------------------------------
stock SetVehicleHoodState(const vid, const bool:setstate)
{
	if(!IsValidVehicle(vid)) return false;
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(setstate) SetVehicleParamsEx(vid, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
	else SetVehicleParamsEx(vid, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
	return true;
}
//--------------------------------------------------------------
stock SetVehicleTrunkState(const vid, const bool:setstate)
{
	if(!IsValidVehicle(vid)) return false;
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(setstate) SetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
	else SetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
	return true;
}
// These different functions
// =============================================================================
Hook:U1_OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(IsPlayerNearVending(playerid))
			{
				if(GetPlayerAnimationIndex(playerid) == 1660 && (NetStats_GetConnectedTime(playerid) - GetPVarInt(playerid, "PlayerTick")) > 3500)
				{
					CallRemoteFunction("OnPlayerUseVending", "d", playerid);
					SetPVarInt(playerid, "PlayerTick", NetStats_GetConnectedTime(playerid));
				}
			}
		}
	}
	return true;
}
//--------------------------------------------------------------
Hook:U2_OnGameModeInit()
{
    for(new z = 0; z < sizeof(zGangZones); z++)
	{
		zGangZones[z][zExists] = false;
		zGangZones[z][zIsUsingNumbers] = false;
		zGangZones[z][zIsUsingBorders] = false;
		for(new nump = 0; nump < 5; nump++)
		{
			zGangZones[z][npart][nump] = -1;
			zGangZones[z][npart2][nump] = -1;
		}
	}
	SetTimer_("km_Timer", 1100, 1000, -1);
	return true;
}
//--------------------------------------------------------------
Hook:U3_OnPlayerDisconnect(playerid, reason)
{
	km_Info[0][playerid] = 0;
	km_Info[1][playerid] = 0;
	return true;
}
//--------------------------------------------------------------
// =============================================================================